[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.jsx":"3","/app/src/context/auth/auth.context.jsx":"4","/app/src/context/loading-modal/loading-modal.contenxt.jsx":"5","/app/src/global.styles.jsx":"6","/app/src/components/popup/pop-up.component.jsx":"7","/app/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.jsx":"8","/app/src/pages/reset-password/reset-password.jsx":"9","/app/src/pages/dashboard/dashboard.jsx":"10","/app/src/context/auth/auth.queries.jsx":"11","/app/src/components/popup/pop.up.styles.jsx":"12","/app/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.styles.jsx":"13","/app/src/pages/reset-password/reset.password.styles.jsx":"14","/app/src/pages/dashboard/dashboard.styles.jsx":"15","/app/src/components/custom-button/custom-button.component.jsx":"16","/app/src/components/spinner/spinner.component.jsx":"17","/app/src/components/sign-in/sign-in.component.jsx":"18","/app/src/components/forgot-password/forgot-password.component.jsx":"19","/app/src/components/custom-input/custom-input.component.jsx":"20","/app/src/components/sidenav/sidenav.component.jsx":"21","/app/src/context/image/image.context.jsx":"22","/app/src/context/blog/blog.context.jsx":"23","/app/src/context/user/user.context.jsx":"24","/app/src/context/warehouse/warehouse.context.jsx":"25","/app/src/context/booking/booking.context.jsx":"26","/app/src/context/analytics/analytics.context.jsx":"27","/app/src/context/orders/orders.context.jsx":"28","/app/src/context/coupons/coupons.context.jsx":"29","/app/src/context/examination/examination.context.jsx":"30","/app/src/context/order/order.context.jsx":"31","/app/src/sections/e-shop/e-shop.section.jsx":"32","/app/src/sections/analytics/analytics.section.jsx":"33","/app/src/sections/orders/orders.section.jsx":"34","/app/src/sections/customers/customers.section.jsx":"35","/app/src/sections/customer-profile/customer-profile.section.jsx":"36","/app/src/sections/blog-posts/blog-posts.section.jsx":"37","/app/src/sections/product/product.section.jsx":"38","/app/src/sections/booking/booking.section.jsx":"39","/app/src/sections/post/post.section.jsx":"40","/app/src/sections/calendar/calendar.section.jsx":"41","/app/src/sections/coupons/coupons.section.jsx":"42","/app/src/sections/no-permission/no-permission.section.jsx":"43","/app/src/sections/order/order.section.jsx":"44","/app/src/sections/coupon/coupon.section.jsx":"45","/app/src/components/custom-button/custom-button.styles.jsx":"46","/app/src/components/spinner/spinner.styles.jsx":"47","/app/src/components/forgot-password/forgot-password.styles.jsx":"48","/app/src/components/custom-input/custom-input.styles.jsx":"49","/app/src/components/sign-in/sign-in.styles.jsx":"50","/app/src/context/blog/blog.queries.jsx":"51","/app/src/components/sidenav/sidenav.styles.jsx":"52","/app/src/context/user/user.queries.jsx":"53","/app/src/context/image/image.queries.jsx":"54","/app/src/context/user/user.utils.jsx":"55","/app/src/context/warehouse/warehouse.utils.jsx":"56","/app/src/hooks/slug.jsx":"57","/app/src/utils/warehouse.utils.jsx":"58","/app/src/sections/e-shop/e-shop.styles.jsx":"59","/app/src/utils/analytics.utils.jsx":"60","/app/src/sections/analytics/analytics.styles.jsx":"61","/app/src/hooks/useFetch.jsx":"62","/app/src/sections/orders/orders.styles.jsx":"63","/app/src/context/orders/orders.utils.jsx":"64","/app/src/utils/user.utils.jsx":"65","/app/src/sections/customer-profile/customer-profile.styles.jsx":"66","/app/src/sections/customers/customers.styles.jsx":"67","/app/src/sections/blog-posts/blog-posts.styles.jsx":"68","/app/src/sections/product/product.styles.jsx":"69","/app/src/sections/coupon/coupon.styles.jsx":"70","/app/src/sections/order/order.styles.jsx":"71","/app/src/sections/coupons/coupons.styles.jsx":"72","/app/src/sections/calendar/calendar.styles.jsx":"73","/app/src/utils/calendar.utils.jsx":"74","/app/src/sections/no-permission/no-permission.styles.jsx":"75","/app/src/sections/post/post.styles.jsx":"76","/app/src/sections/booking/booking.styles.jsx":"77","/app/src/components/section-navbar/section-navbar.component.jsx":"78","/app/src/components/section-header/section-header.component.jsx":"79","/app/src/components/list-arrows/list-arrows.component.jsx":"80","/app/src/components/product-overview/product-overview.component.jsx":"81","/app/src/components/modal-eshop-filter/modal-eshop-filter.component.jsx":"82","/app/src/components/scroll-container/scroll-container.component.jsx":"83","/app/src/components/user-form/user-form.component.jsx":"84","/app/src/components/new-user-form/new-user-form.component.jsx":"85","/app/src/components/product-input-row/product-input-row.component.jsx":"86","/app/src/components/custom-checkbox/custom-checkbox.component.jsx":"87","/app/src/components/modal-images/modal-images.component.jsx":"88","/app/src/components/custom-select/custom-select.component.jsx":"89","/app/src/components/custom-textarea/custom-textarea.component.jsx":"90","/app/src/context/week-calendar/week-calendar.context.jsx":"91","/app/src/components/booking-calendar-bookings/booking-calendar-bookings.component.jsx":"92","/app/src/components/calendar/calendar.component.jsx":"93","/app/src/components/calendar-weekdays/calendar-weekdays.component.jsx":"94","/app/src/sections/order/steps/3-select-lenses/select-lenses.component.jsx":"95","/app/src/sections/order/steps/4-summary/summary.component.jsx":"96","/app/src/sections/order/steps/2-select-product/select-product.component.jsx":"97","/app/src/sections/order/steps/1-select-user/select-user.component.jsx":"98","/app/src/components/booking-calendar-overview/booking-calendar-overview.component.jsx":"99","/app/src/components/product-service-form/product-service-form.component.jsx":"100","/app/src/components/product-contact-lenses-form/product-contact-lenses-form.component.jsx":"101","/app/src/components/product-glasses-form/product-glasses-form.component.jsx":"102","/app/src/components/product-lenses-form/product-lenses-form.component.jsx":"103","/app/src/components/product-accessories-form/product-accessories-form.component.jsx":"104","/app/src/components/modal-get-lenses-data/modal-get-lenses-data.component.jsx":"105","/app/src/components/modal-get-product-data/modal-get-product-data.component.jsx":"106","/app/src/components/modal-product-image-gallery/modal-product-image-gallery.component.jsx":"107","/app/src/components/section-navbar/section-navbar.styles.jsx":"108","/app/src/components/section-header/section-header.styles.jsx":"109","/app/src/components/list-arrows/list-arrows.styles.jsx":"110","/app/src/components/product-overview/product-overview.styles.jsx":"111","/app/src/components/modal-eshop-filter/modal-eshop-filter.styles.jsx":"112","/app/src/components/scroll-container/scroll-container.styles.jsx":"113","/app/src/components/order-overview/order-overview.styles.jsx":"114","/app/src/components/order-overview/order-overview.component.jsx":"115","/app/src/components/new-user-form/new-user-form.styles.jsx":"116","/app/src/components/user-form/user.form-styles.jsx":"117","/app/src/components/product-input-row/product-input-row.styles.jsx":"118","/app/src/components/custom-checkbox/custom-checkbox.styles.jsx":"119","/app/src/components/modal-images/modal-images.styles.jsx":"120","/app/src/components/custom-select/custom-select.styles.jsx":"121","/app/src/components/custom-textarea/custom-textarea.styles.jsx":"122","/app/src/utils/week-calendar.utils.jsx":"123","/app/src/components/booking-calendar-bookings/booking-calendar-bookings.styles.jsx":"124","/app/src/components/calendar/calendar.styles.jsx":"125","/app/src/components/calendar-weekdays/calendar-weekdays.styles.jsx":"126","/app/src/components/profile-order-overview/profile-order-overview.component.jsx":"127","/app/src/components/parameters-table/parameters-table.component.jsx":"128","/app/src/components/examinations-overview/examinations-overview.component.jsx":"129","/app/src/components/custom-form-switch/custom-form-switch.component.jsx":"130","/app/src/sections/order/steps/3-select-lenses/select-lenses.styles.jsx":"131","/app/src/sections/order/steps/4-summary/summary.styles.jsx":"132","/app/src/utils/orders.utils.jsx":"133","/app/src/sections/order/steps/2-select-product/select-product.styles.jsx":"134","/app/src/sections/order/steps/1-select-user/select-user.styles.jsx":"135","/app/src/components/modal-booking/modal-booking.component.jsx":"136","/app/src/components/modal-userbookings-details/modal-userbookings-details.component.jsx":"137","/app/src/components/modal-user-bookings/modal-user-booking.component.jsx":"138","/app/src/components/calendar-booked-day/calendar-booked-day.component.jsx":"139","/app/src/components/product-glasses-form/product-glasses-form.styles.jsx":"140","/app/src/components/custom-back-button/custom-back-button.component.jsx":"141","/app/src/components/order-cart-lenses-row/order-cart-lenses-row.component.jsx":"142","/app/src/components/order-summary-lenses-name/order-summary-lenses-name.component.jsx":"143","/app/src/components/modal-finish-order/modal-finish-order.component.jsx":"144","/app/src/components/modal-order-update-user/modal-order-update-user.component.jsx":"145","/app/src/components/order-summary-product-name/order-summary-product-name.component.jsx":"146","/app/src/components/order-cart-row/order-cart-row.component.jsx":"147","/app/src/components/booking-calendar-overview/booking-calendar-overview.styles.jsx":"148","/app/src/components/product-lenses-form/product-lenses-form.styles.jsx":"149","/app/src/components/modal-get-lenses-data/modal-get-lenses-data.styles.jsx":"150","/app/src/components/product-service-form/product-service-form.styles.jsx":"151","/app/src/components/modal-get-product-data/modal-get-product-data.styles.jsx":"152","/app/src/components/product-accessories-form/product-accessories-form.styles.jsx":"153","/app/src/components/product-contact-lenses-form/product-contact-lenses-form.styles.jsx":"154","/app/src/components/modal-product-image-gallery/modal-product-image-gallery.styles.jsx":"155","/app/src/hooks/useOutsideAlerter.jsx":"156","/app/src/components/profile-order-overview/profile-order-overview.styles.jsx":"157","/app/src/components/modal-finish-deposited-order/modal-finish-deposited-order.component.jsx":"158","/app/src/components/order-deligate-modal/order-deligate-modal.component.jsx":"159","/app/src/components/parameters-table/parameters-table.styles.jsx":"160","/app/src/components/custom-form-switch/custom-form-switch.styles.jsx":"161","/app/src/components/examinations-overview/examinations-overview.styles.jsx":"162","/app/src/components/modal-userbookings-details/modal-userbookings-details.styles.jsx":"163","/app/src/components/modal-user-bookings/modal-user-booking.styles.jsx":"164","/app/src/components/modal-booking/modal-booking.styles.jsx":"165","/app/src/components/calendar-booked-day/calendar-booked-day.styles.jsx":"166","/app/src/components/examination-user/examination-user.component.jsx":"167","/app/src/components/modal-optometrist-examination/modal-optometrist-examination.component.jsx":"168","/app/src/components/order-cart-lenses-row/order-cart-lenses-row.styles.jsx":"169","/app/src/components/custom-back-button/custom-back-button.styles.jsx":"170","/app/src/components/modal-order-update-user/modal-order-update-user.styles.jsx":"171","/app/src/components/modal-finish-order/modal-finish-order.styles.jsx":"172","/app/src/components/order-cart-row/order-cart-row.styles.jsx":"173","/app/src/components/modal-finish-deposited-order/modal-finish-deposited-order.styles.jsx":"174","/app/src/components/order-deligate-modal/order-deligate-modal.styles.jsx":"175","/app/src/components/examination-user/examination-user.styles.jsx":"176","/app/src/utils/parameters.utils.jsx":"177","/app/src/components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx":"178","/app/src/context/fetch-context/fetch.context.jsx":"179","/app/src/utils/object.utils.jsx":"180"},{"size":834,"mtime":1617873965462,"results":"181","hashOfConfig":"182"},{"size":362,"mtime":1617279821919,"results":"183","hashOfConfig":"182"},{"size":1799,"mtime":1617279821899,"results":"184","hashOfConfig":"182"},{"size":6979,"mtime":1617279821919,"results":"185","hashOfConfig":"182"},{"size":1076,"mtime":1617279821919,"results":"186","hashOfConfig":"182"},{"size":4820,"mtime":1617279821919,"results":"187","hashOfConfig":"182"},{"size":714,"mtime":1617279821919,"results":"188","hashOfConfig":"182"},{"size":840,"mtime":1617279821919,"results":"189","hashOfConfig":"182"},{"size":1667,"mtime":1617279821919,"results":"190","hashOfConfig":"182"},{"size":9175,"mtime":1617279821919,"results":"191","hashOfConfig":"182"},{"size":2292,"mtime":1617279821919,"results":"192","hashOfConfig":"182"},{"size":721,"mtime":1617279821919,"results":"193","hashOfConfig":"182"},{"size":545,"mtime":1617279821919,"results":"194","hashOfConfig":"182"},{"size":772,"mtime":1617279821919,"results":"195","hashOfConfig":"182"},{"size":658,"mtime":1617279821919,"results":"196","hashOfConfig":"182"},{"size":283,"mtime":1617279821909,"results":"197","hashOfConfig":"182"},{"size":178,"mtime":1617279821919,"results":"198","hashOfConfig":"182"},{"size":1925,"mtime":1617279821919,"results":"199","hashOfConfig":"182"},{"size":1466,"mtime":1617279821909,"results":"200","hashOfConfig":"182"},{"size":639,"mtime":1617279821909,"results":"201","hashOfConfig":"182"},{"size":2543,"mtime":1617279821919,"results":"202","hashOfConfig":"182"},{"size":4391,"mtime":1617279821919,"results":"203","hashOfConfig":"182"},{"size":4016,"mtime":1617279821919,"results":"204","hashOfConfig":"182"},{"size":13139,"mtime":1617708933319,"results":"205","hashOfConfig":"182"},{"size":29474,"mtime":1617689572009,"results":"206","hashOfConfig":"182"},{"size":7143,"mtime":1617279821919,"results":"207","hashOfConfig":"182"},{"size":2796,"mtime":1617279821919,"results":"208","hashOfConfig":"182"},{"size":7198,"mtime":1617279821919,"results":"209","hashOfConfig":"182"},{"size":6964,"mtime":1617279821919,"results":"210","hashOfConfig":"182"},{"size":2723,"mtime":1617891091392,"results":"211","hashOfConfig":"182"},{"size":9583,"mtime":1617279821919,"results":"212","hashOfConfig":"182"},{"size":7519,"mtime":1617279821929,"results":"213","hashOfConfig":"182"},{"size":13830,"mtime":1617687895039,"results":"214","hashOfConfig":"182"},{"size":8077,"mtime":1617279821929,"results":"215","hashOfConfig":"182"},{"size":5837,"mtime":1617708928929,"results":"216","hashOfConfig":"182"},{"size":7934,"mtime":1617720540479,"results":"217","hashOfConfig":"182"},{"size":5376,"mtime":1617279821919,"results":"218","hashOfConfig":"182"},{"size":23054,"mtime":1617353255834,"results":"219","hashOfConfig":"182"},{"size":14451,"mtime":1617705851089,"results":"220","hashOfConfig":"182"},{"size":10042,"mtime":1617279821929,"results":"221","hashOfConfig":"182"},{"size":12201,"mtime":1617692936239,"results":"222","hashOfConfig":"182"},{"size":3073,"mtime":1617279821929,"results":"223","hashOfConfig":"182"},{"size":810,"mtime":1617279821929,"results":"224","hashOfConfig":"182"},{"size":5356,"mtime":1617279821929,"results":"225","hashOfConfig":"182"},{"size":5610,"mtime":1617279821929,"results":"226","hashOfConfig":"182"},{"size":440,"mtime":1617279821909,"results":"227","hashOfConfig":"182"},{"size":377,"mtime":1617279821919,"results":"228","hashOfConfig":"182"},{"size":898,"mtime":1617279821909,"results":"229","hashOfConfig":"182"},{"size":1331,"mtime":1617279821909,"results":"230","hashOfConfig":"182"},{"size":975,"mtime":1617279821919,"results":"231","hashOfConfig":"182"},{"size":1793,"mtime":1617279821919,"results":"232","hashOfConfig":"182"},{"size":5222,"mtime":1617279821919,"results":"233","hashOfConfig":"182"},{"size":3508,"mtime":1617279821919,"results":"234","hashOfConfig":"182"},{"size":1560,"mtime":1617279821919,"results":"235","hashOfConfig":"182"},{"size":897,"mtime":1617279821919,"results":"236","hashOfConfig":"182"},{"size":6871,"mtime":1617688099269,"results":"237","hashOfConfig":"182"},{"size":1132,"mtime":1617353319644,"results":"238","hashOfConfig":"182"},{"size":3109,"mtime":1617279821929,"results":"239","hashOfConfig":"182"},{"size":709,"mtime":1617279821929,"results":"240","hashOfConfig":"182"},{"size":404,"mtime":1617279821929,"results":"241","hashOfConfig":"182"},{"size":3343,"mtime":1617279821919,"results":"242","hashOfConfig":"182"},{"size":3835,"mtime":1617279821919,"results":"243","hashOfConfig":"182"},{"size":2261,"mtime":1617279821929,"results":"244","hashOfConfig":"182"},{"size":889,"mtime":1617279821919,"results":"245","hashOfConfig":"182"},{"size":431,"mtime":1617279821929,"results":"246","hashOfConfig":"182"},{"size":632,"mtime":1617279821929,"results":"247","hashOfConfig":"182"},{"size":1734,"mtime":1617279821929,"results":"248","hashOfConfig":"182"},{"size":1728,"mtime":1617279821919,"results":"249","hashOfConfig":"182"},{"size":952,"mtime":1617279821929,"results":"250","hashOfConfig":"182"},{"size":1170,"mtime":1617279821929,"results":"251","hashOfConfig":"182"},{"size":454,"mtime":1617279821929,"results":"252","hashOfConfig":"182"},{"size":1785,"mtime":1617279821929,"results":"253","hashOfConfig":"182"},{"size":3151,"mtime":1617279821919,"results":"254","hashOfConfig":"182"},{"size":8245,"mtime":1617279821929,"results":"255","hashOfConfig":"182"},{"size":728,"mtime":1617279821929,"results":"256","hashOfConfig":"182"},{"size":1888,"mtime":1617279821929,"results":"257","hashOfConfig":"182"},{"size":2199,"mtime":1617279821919,"results":"258","hashOfConfig":"182"},{"size":655,"mtime":1617279821919,"results":"259","hashOfConfig":"182"},{"size":1521,"mtime":1617279821919,"results":"260","hashOfConfig":"182"},{"size":1810,"mtime":1617279821909,"results":"261","hashOfConfig":"182"},{"size":2507,"mtime":1617279821919,"results":"262","hashOfConfig":"182"},{"size":8077,"mtime":1617279821909,"results":"263","hashOfConfig":"182"},{"size":320,"mtime":1617279821919,"results":"264","hashOfConfig":"182"},{"size":12521,"mtime":1617701682379,"results":"265","hashOfConfig":"182"},{"size":14834,"mtime":1617688383059,"results":"266","hashOfConfig":"182"},{"size":425,"mtime":1617279821919,"results":"267","hashOfConfig":"182"},{"size":354,"mtime":1617279821909,"results":"268","hashOfConfig":"182"},{"size":8267,"mtime":1617279821909,"results":"269","hashOfConfig":"182"},{"size":689,"mtime":1617279821909,"results":"270","hashOfConfig":"182"},{"size":651,"mtime":1617279821909,"results":"271","hashOfConfig":"182"},{"size":4381,"mtime":1617279821919,"results":"272","hashOfConfig":"182"},{"size":3418,"mtime":1617279821899,"results":"273","hashOfConfig":"182"},{"size":3274,"mtime":1617279821909,"results":"274","hashOfConfig":"182"},{"size":7467,"mtime":1617279821909,"results":"275","hashOfConfig":"182"},{"size":6808,"mtime":1617279821929,"results":"276","hashOfConfig":"182"},{"size":11249,"mtime":1617279821929,"results":"277","hashOfConfig":"182"},{"size":5754,"mtime":1617359668434,"results":"278","hashOfConfig":"182"},{"size":3313,"mtime":1617279821929,"results":"279","hashOfConfig":"182"},{"size":999,"mtime":1617279821909,"results":"280","hashOfConfig":"182"},{"size":2211,"mtime":1617689732709,"results":"281","hashOfConfig":"182"},{"size":9290,"mtime":1617689718839,"results":"282","hashOfConfig":"182"},{"size":12091,"mtime":1617689716889,"results":"283","hashOfConfig":"182"},{"size":7796,"mtime":1617787491300,"results":"284","hashOfConfig":"182"},{"size":5696,"mtime":1617696640589,"results":"285","hashOfConfig":"182"},{"size":4055,"mtime":1617279821909,"results":"286","hashOfConfig":"182"},{"size":5647,"mtime":1617279821909,"results":"287","hashOfConfig":"182"},{"size":5695,"mtime":1617279821909,"results":"288","hashOfConfig":"182"},{"size":854,"mtime":1617279821919,"results":"289","hashOfConfig":"182"},{"size":1186,"mtime":1617279821919,"results":"290","hashOfConfig":"182"},{"size":624,"mtime":1617279821909,"results":"291","hashOfConfig":"182"},{"size":2448,"mtime":1617279821919,"results":"292","hashOfConfig":"182"},{"size":1934,"mtime":1617279821909,"results":"293","hashOfConfig":"182"},{"size":1039,"mtime":1617279821919,"results":"294","hashOfConfig":"182"},{"size":2933,"mtime":1617279821919,"results":"295","hashOfConfig":"182"},{"size":5602,"mtime":1617699338989,"results":"296","hashOfConfig":"182"},{"size":1096,"mtime":1617279821909,"results":"297","hashOfConfig":"182"},{"size":2294,"mtime":1617279821919,"results":"298","hashOfConfig":"182"},{"size":447,"mtime":1617279821919,"results":"299","hashOfConfig":"182"},{"size":698,"mtime":1617279821909,"results":"300","hashOfConfig":"182"},{"size":4564,"mtime":1617279821909,"results":"301","hashOfConfig":"182"},{"size":364,"mtime":1617279821909,"results":"302","hashOfConfig":"182"},{"size":1124,"mtime":1617279821909,"results":"303","hashOfConfig":"182"},{"size":2714,"mtime":1617279821929,"results":"304","hashOfConfig":"182"},{"size":1867,"mtime":1617279821899,"results":"305","hashOfConfig":"182"},{"size":1274,"mtime":1617279821909,"results":"306","hashOfConfig":"182"},{"size":2985,"mtime":1617279821909,"results":"307","hashOfConfig":"182"},{"size":1533,"mtime":1617279821919,"results":"308","hashOfConfig":"182"},{"size":8550,"mtime":1617902503150,"results":"309","hashOfConfig":"182"},{"size":4211,"mtime":1617279821909,"results":"310","hashOfConfig":"182"},{"size":681,"mtime":1617279821909,"results":"311","hashOfConfig":"182"},{"size":4964,"mtime":1617279821929,"results":"312","hashOfConfig":"182"},{"size":4000,"mtime":1617279821929,"results":"313","hashOfConfig":"182"},{"size":1195,"mtime":1617279821929,"results":"314","hashOfConfig":"182"},{"size":3409,"mtime":1617279821929,"results":"315","hashOfConfig":"182"},{"size":1458,"mtime":1617279821929,"results":"316","hashOfConfig":"182"},{"size":5209,"mtime":1617279821909,"results":"317","hashOfConfig":"182"},{"size":3259,"mtime":1617279821909,"results":"318","hashOfConfig":"182"},{"size":10122,"mtime":1617695807479,"results":"319","hashOfConfig":"182"},{"size":2827,"mtime":1617279821909,"results":"320","hashOfConfig":"182"},{"size":2969,"mtime":1617279821919,"results":"321","hashOfConfig":"182"},{"size":341,"mtime":1617279821909,"results":"322","hashOfConfig":"182"},{"size":2272,"mtime":1617279821909,"results":"323","hashOfConfig":"182"},{"size":988,"mtime":1617349970974,"results":"324","hashOfConfig":"182"},{"size":10858,"mtime":1617279821909,"results":"325","hashOfConfig":"182"},{"size":3962,"mtime":1617701635859,"results":"326","hashOfConfig":"182"},{"size":1487,"mtime":1617349626474,"results":"327","hashOfConfig":"182"},{"size":6880,"mtime":1617279821909,"results":"328","hashOfConfig":"182"},{"size":1060,"mtime":1617279821909,"results":"329","hashOfConfig":"182"},{"size":2186,"mtime":1617279821919,"results":"330","hashOfConfig":"182"},{"size":3044,"mtime":1617279821909,"results":"331","hashOfConfig":"182"},{"size":946,"mtime":1617279821919,"results":"332","hashOfConfig":"182"},{"size":3044,"mtime":1617279821909,"results":"333","hashOfConfig":"182"},{"size":2056,"mtime":1617279821919,"results":"334","hashOfConfig":"182"},{"size":2684,"mtime":1617279821919,"results":"335","hashOfConfig":"182"},{"size":3279,"mtime":1617279821909,"results":"336","hashOfConfig":"182"},{"size":1400,"mtime":1617279821919,"results":"337","hashOfConfig":"182"},{"size":1414,"mtime":1617279821919,"results":"338","hashOfConfig":"182"},{"size":5424,"mtime":1617279821909,"results":"339","hashOfConfig":"182"},{"size":3006,"mtime":1617279821919,"results":"340","hashOfConfig":"182"},{"size":2165,"mtime":1617279821919,"results":"341","hashOfConfig":"182"},{"size":486,"mtime":1617279821909,"results":"342","hashOfConfig":"182"},{"size":1997,"mtime":1617279821909,"results":"343","hashOfConfig":"182"},{"size":2236,"mtime":1617279821909,"results":"344","hashOfConfig":"182"},{"size":3058,"mtime":1617279821909,"results":"345","hashOfConfig":"182"},{"size":2041,"mtime":1617279821909,"results":"346","hashOfConfig":"182"},{"size":668,"mtime":1617279821909,"results":"347","hashOfConfig":"182"},{"size":492,"mtime":1617279821909,"results":"348","hashOfConfig":"182"},{"size":88541,"mtime":1617892427682,"results":"349","hashOfConfig":"182"},{"size":3232,"mtime":1617279821909,"results":"350","hashOfConfig":"182"},{"size":349,"mtime":1617279821909,"results":"351","hashOfConfig":"182"},{"size":1679,"mtime":1617279821909,"results":"352","hashOfConfig":"182"},{"size":1719,"mtime":1617279821909,"results":"353","hashOfConfig":"182"},{"size":2271,"mtime":1617279821919,"results":"354","hashOfConfig":"182"},{"size":2826,"mtime":1617279821909,"results":"355","hashOfConfig":"182"},{"size":1432,"mtime":1617279821919,"results":"356","hashOfConfig":"182"},{"size":162,"mtime":1617279821909,"results":"357","hashOfConfig":"182"},{"size":906,"mtime":1617885761652,"results":"358","hashOfConfig":"182"},{"size":4140,"mtime":1617807944085,"results":"359","hashOfConfig":"182"},{"size":1883,"mtime":1617874803262,"results":"360","hashOfConfig":"182"},{"size":125,"mtime":1617883588912,"results":"361","hashOfConfig":"182"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},"iuro77",{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"364"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"364"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"364"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"364"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"364"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"364"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"364"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"364"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"364"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"364"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"364"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"364"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"364"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"364"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"364"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"364"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"364"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"364"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"364"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"364"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"364"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"364"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"364"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"364"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"364"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"364"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"364"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"364"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"364"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"364"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"364"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"594","usedDeprecatedRules":"364"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597","usedDeprecatedRules":"364"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"364"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"364"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"364"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"364"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"364"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"657","messages":"658","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659","usedDeprecatedRules":"364"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"364"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"364"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"364"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"364"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"364"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"364"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"364"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"364"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"364"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"747","usedDeprecatedRules":"364"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770","usedDeprecatedRules":"364"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"364"},"/app/src/index.js",[],["773","774"],"/app/src/reportWebVitals.js",[],"/app/src/App.jsx",[],"/app/src/context/auth/auth.context.jsx",["775"],"import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { getUser, createNewUser, resetPassword, setNewPassword, fetchUser } from './auth.queries'\n\nexport const AuthContext = createContext({\n    currentUser: null,\n    isAdmin: false,\n    isOptometrist: false,\n    token: null,\n    stats: null,\n    logIn: () => { },\n    logOut: () => { },\n    register: () => { },\n    handleResetPassword: () => { },\n    handleCreatingNewPassword: () => { }\n})\n\nconst AuthProvider = ({ children }) => {\n    const { setShowModal, setIsLoading, getMessage, closeModal } = useContext(LoadingModalContext)\n    const [currentUser, setCurrentUser] = useState(null)\n    const [token, setToken] = useState(null)\n    const [isAdmin, setIsAdmin] = useState(false)\n    const [isOptometrist, setIsOptometrist] = useState(false)\n    const [stats, setStats] = useState(null)\n\n    const checkIfOptometrist = user => {\n        if (user.optometrist) {\n            setIsOptometrist(true)\n        } else {\n            setIsOptometrist(false)\n        }\n    }\n\n    const checkIfAdmin = (user) => {\n        if (user.admin > 1) {\n            setIsAdmin(true)\n        } else {\n            setIsAdmin(false)\n        }\n    }\n\n    const logIn = async (email, password) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!email) {\n            console.log(\"Ziadny e-mail\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        if (!password) {\n            console.log(\"Ziadne heslo\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await getUser({ email, password })\n            const user = await response.json()\n\n            getMessage(user.message)\n            setIsLoading(false)\n            if (user.user) {\n                setCurrentUser(user.user)\n                setToken(user.authToken)\n                localStorage.setItem(process.env.REACT_APP_ADMIN_TOKEN, user.authToken)\n                checkIfAdmin(user.user)\n\n                closeModal()\n            }\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const logOut = () => {\n        localStorage.removeItem(process.env.REACT_APP_ADMIN_TOKEN)\n        setCurrentUser(null)\n        setToken(null)\n    }\n\n    const register = async (name, email, password, confirmPassword) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!name) {\n            console.log(\"Ziadne meno\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        if (!email) {\n            console.log(\"Ziadny e-mail\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        if (!password) {\n            console.log(\"Ziadne heslo\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n\n        if (password !== confirmPassword) {\n            console.log(\"hesla sa nezhoduju\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await createNewUser({ name, email, password })\n            const data = await response.json()\n\n            setIsLoading(false)\n            getMessage(data.messageSK)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const handleResetPassword = async (email) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!email) {\n            console.log(\"Ziadny e-mail\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await resetPassword(email)\n            const user = await response.json()\n\n            getMessage(user.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const handleCreatingNewPassword = async (resetSecret, password) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!resetSecret) {\n            console.log(\"Ziadny reset token\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n        if (!password) {\n            console.log(\"Ziadne heslo\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await setNewPassword(resetSecret, password)\n            const user = await response.json()\n\n            getMessage(user.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const getStats = async () => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats/collectionCounts`, requestOptions)\n            const data = await response.json()\n\n            setStats(data)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        if (localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN)) {\n            setToken(localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN))\n        }\n    }, [])\n\n    useEffect(() => {\n        if (token) {\n            // console.log(\"GET USER\")\n            const getUserProfile = async () => {\n                const response = await fetchUser(token)\n                const data = await response.json()\n                // console.log(data)\n                if (data.user) {\n                    setCurrentUser(data.user)\n                    checkIfAdmin(data.user)\n                    checkIfOptometrist(data.user)\n                }\n            }\n            getUserProfile()\n            getStats()\n        }\n    }, [token])\n\n    return (\n        <AuthContext.Provider\n            value={{\n                token,\n                currentUser,\n                isAdmin,\n                isOptometrist,\n                stats,\n                logIn,\n                logOut,\n                register,\n                handleResetPassword,\n                handleCreatingNewPassword\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider","/app/src/context/loading-modal/loading-modal.contenxt.jsx",[],"/app/src/global.styles.jsx",[],"/app/src/components/popup/pop-up.component.jsx",[],"/app/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.jsx",[],"/app/src/pages/reset-password/reset-password.jsx",[],"/app/src/pages/dashboard/dashboard.jsx",[],"/app/src/context/auth/auth.queries.jsx",[],"/app/src/components/popup/pop.up.styles.jsx",[],"/app/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.styles.jsx",[],"/app/src/pages/reset-password/reset.password.styles.jsx",[],"/app/src/pages/dashboard/dashboard.styles.jsx",[],"/app/src/components/custom-button/custom-button.component.jsx",[],"/app/src/components/spinner/spinner.component.jsx",[],"/app/src/components/sign-in/sign-in.component.jsx",[],"/app/src/components/forgot-password/forgot-password.component.jsx",[],"/app/src/components/custom-input/custom-input.component.jsx",[],"/app/src/components/sidenav/sidenav.component.jsx",[],"/app/src/context/image/image.context.jsx",[],"/app/src/context/blog/blog.context.jsx",[],"/app/src/context/user/user.context.jsx",["776"],"import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n// import { OrderContext } from '../order/order.context'\n\nimport {\n    // fetchUsers,\n    fetchUser,\n    patchUser,\n    postAdmin,\n    postUser,\n} from './user.queries'\n\nimport {\n    initUserObj\n} from './user.utils'\n\nexport const UserContext = createContext({\n    isUpdating: false,\n    activeIndex: 0,\n    handleChangeFilterItem: () => { },\n    filterItems: [],\n    totalCount: 0,\n    users: null,\n    user: null,\n    // getUsers: () => { },\n    getUser: () => { },\n    handleChange: () => { },\n    handleParameterChange: () => { },\n    handleCompanyChange: () => { },\n    updateUser: () => { },\n    resetUser: () => { },\n    formToShow: 0,\n    switchFormButtons: [],\n    toggleUserForm: () => { },\n    createUser: () => { },\n    getFilteredUsers: () => { },\n    getUserByQuery: () => { },\n    deleteUser: () => { },\n})\n\nconst UserProvider = ({ children }) => {\n    const { push } = useHistory()\n    const { token } = useContext(AuthContext)\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n    // ------------------------\n\n    const [user, setUser] = useState(initUserObj)\n    const [users, setUsers] = useState(null)\n    const [totalCount] = useState(0)\n\n    // ------------------------\n\n    console.count(\"USERCONTEXT\")\n    console.log(user)\n\n    const [isUpdating, setIsUpdating] = useState(false)\n    const [activeIndex, setActiveIndex] = useState(0)\n    const filterItems = [\n        {\n            id: 0,\n            name: \"Zákazníci\",\n            filter: 0,\n        },\n        {\n            id: 1,\n            name: \"Zamestnanci\",\n            filter: 1,\n        },\n        {\n            id: 2,\n            name: \"Vedúci\",\n            filter: 2,\n        },\n        // {\n        //     id: 3,\n        //     name: \"Velký brat\",\n        //     filter: 3,\n        // },\n        // {\n        //     id: 4,\n        //     name: \"Odstránené\",\n        //     filter: 3\n        // }\n    ]\n\n    // ------------------------\n\n    const [formToShow, setFormToShow] = useState(0)\n    const switchFormButtons = [\n        {\n            name: \"Zákazník\"\n        },\n        {\n            name: \"Zamestnanec\"\n        }\n    ]\n\n    const toggleUserForm = (e, idx) => {\n        e.preventDefault()\n        setFormToShow(idx)\n    }\n\n    // ------------------------\n\n\n    const handleChangeFilterItem = (itemIndex) => {\n        setActiveIndex(itemIndex)\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n\n        setUser({\n            ...user,\n            [name]: value\n        })\n    }\n\n    const handleParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value === '' ? 1001 : value\n        setUser({\n            ...user,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleCompanyChange = (e) => {\n        const { name, value } = e.target\n        setUser({\n            ...user,\n            company: {\n                ...user.company,\n                [name]: value\n            }\n        })\n    }\n\n    useEffect(() => {\n        setUser({\n            ...user,\n            name: user?.fName + \" \" + user?.lName\n        })\n    }, [user?.fName, user?.lName])\n\n    const resetUser = () => {\n        setUser(initUserObj)\n        setIsUpdating(false)\n        setFormToShow(0)\n    }\n\n    // ------------------------\n    // USER ACTIONS\n    // ------------------------\n\n    // Get all users\n    // const getUsers = async () => {\n    //     setIsLoading(true)\n    //     setShowModal(true)\n\n    //     try {\n    //         const response = await fetchUsers(token)\n    //         const data = await response.json()\n\n    //         console.log(data)\n    //         if (data.users) {\n    //             setUsers(data.users)\n    //             setTotalCount(data.count)\n    //             setIsLoading(false)\n    //             closeModal()\n\n    //         } else {\n    //             getMessage(data.message)\n    //             setIsLoading(false)\n    //         }\n    //     } catch (err) {\n    //         console.log(err)\n    //         getMessage(\"Nieco sa pokazilo\")\n    //         setIsLoading(false)\n    //     }\n    // }\n\n    // Get single user\n    const getUser = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n        setIsUpdating(true)\n\n        try {\n            const response = await fetchUser(token, id)\n            const data = await response.json()\n\n            if (data.user) {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                setIsLoading(false)\n                closeModal()\n\n            } else {\n                getMessage(data.message)\n                setIsLoading(false)\n            }\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // Update user\n    const updateUser = async (user, id, path, refetchUser, close, addUser) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await patchUser(token, user, id)\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.messageSK)\n                setIsLoading(false)\n                return\n            }\n\n\n            setIsLoading(false)\n            closeModal()\n\n            if (path === 'order') {\n                push(`/dashboard/objednavky/${id}`)\n            } else if (path === 'profile') {\n                push(`/dashboard/zakaznici/${id}`)\n            } else if (path === 'isOrder') {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n\n                addUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // refetchUser()\n                close()\n            } else {\n                push(\"/dashboard/zakaznici\")\n            }\n\n            getFilteredUsers({\n                filters: {\n                    admin: activeIndex\n                }\n            })\n            // http://localhost:1000/#/dashboard/zakaznici\n\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createUser = async (user, path) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            if (formToShow === 0) {\n                let data = {}\n                if (!user._id) {\n                    const response = await postUser(token, user)\n                    data = await response.json()\n\n                    if (data.error) {\n                        getMessage(data.message)\n\n                        if (data.type === 'email') {\n                            getMessage(\"Email existuje\")\n                        }\n                        if (data.error === 'format' && data.message.includes('email')) {\n                            getMessage(\"Email musi byt platny email\")\n                        }\n                        setIsLoading(false)\n                        return\n                    }\n\n                    setUser({\n                        ...data.user,\n                        _id: data.user._id\n                    })\n                }\n\n                const userId = data.user ? data.user._id : user._id\n\n                updateUser({\n                    ...user\n                }, userId, path)\n\n                // setIsLoading(false)\n                // getUsers()\n                // push('/dashboard/zakaznici')\n                // closeModal()\n\n            } else {\n                if (user.password !== user.confirmPassword) {\n                    getMessage(\"Heslá sa nezhodujú\")\n                    setIsLoading(false)\n                    return\n                }\n\n                const response = await postAdmin(token, user)\n                const data = await response.json()\n\n                if (data.error) {\n                    getMessage(data.message)\n                    setIsLoading(false)\n                    return\n                }\n\n                setIsLoading(false)\n                getFilteredUsers({\n                    filters: {\n                        admin: activeIndex\n                    }\n                })\n\n                push(\"/dashboard/zakaznici\")\n                closeModal()\n            }\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n\n\n    // ----------------------------------------------\n    // ----------------------------------------------\n    // ----------------------------------------------\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const deleteUser = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            // body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.user) {\n\n                push(\"/dashboard/zakaznici\")\n                setIsLoading(false)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getFilteredUsers = async (filter) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(filter)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getUserByQuery = async (query) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(query)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <UserContext.Provider\n            value={{\n                isUpdating,\n                activeIndex,\n                handleChangeFilterItem,\n                filterItems,\n                users,\n                user,\n                totalCount,\n                // getUsers,\n                getUser,\n                handleChange,\n                handleParameterChange,\n                handleCompanyChange,\n                updateUser,\n                resetUser,\n                formToShow,\n                switchFormButtons,\n                toggleUserForm,\n                createUser,\n                getFilteredUsers,\n                getUserByQuery,\n                deleteUser\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    )\n}\n\nexport default UserProvider","/app/src/context/warehouse/warehouse.context.jsx",["777","778","779"],"import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\nimport { useSlug } from '../../hooks/slug'\n\nimport {\n    // premisesTabs,\n    categoryTabs,\n    initLensesObj,\n    initProductObj,\n    formatPrice,\n    diaConvert,\n    initContactLensesObj,\n    initGlassesObj,\n    formatfloatNumber,\n    formatLink,\n} from './warehouse.utils'\n\nimport {\n    retailNamesTabs\n} from '../../utils/warehouse.utils'\n\nexport const WarehouseContext = createContext({\n    eanCode: null,\n    product: {},\n    lenses: {},\n    contactLensesParameters: {},\n    glassesParameters: {},\n    totalProducts: 0,\n    totalLenses: 0,\n    activePremisesTab: 0,\n    activeCategoryTypeTab: 0,\n    retailPremisesTabs: [],\n    productCategoryTypeTabs: [],\n    products: null,\n    lensesProducts: null,\n    handleChangeCategoryTypeTab: () => { },\n    handleChangePremisesTab: () => { },\n    getProductsByQuery: () => { },\n    handleProductChange: () => { },\n    handleProductAvailableChange: () => { },\n    getSingleProduct: () => { },\n    createProduct: () => { },\n    updateProduct: () => { },\n    deleteProduct: () => { },\n    getSingleLenses: () => { },\n    getLenses: () => { },\n    createLenses: () => { },\n    updateLenses: () => { },\n    deleteLenses: () => { },\n    handleLensesChange: () => { },\n    handleLensesParameterChange: () => { },\n    resetProduct: () => { },\n    resetLenses: () => { },\n    resetContactLenses: () => { },\n    resetGlassesParameters: () => { },\n    getEanCode: () => { },\n    handleAddNewParameter: () => { },\n    handleContactLensesParameterChange: () => { },\n    handleGlassesParameterChange: () => { },\n    handleGlassesParameterSpecsChange: () => { },\n    handleGlassesSizeChange: () => { },\n    deactivateMany: () => { },\n})\n\nconst WarehouseProvider = ({ children }) => {\n    const { getSlug } = useSlug()\n    const { push } = useHistory()\n    const { token, isAdmin, currentUser, stats } = useContext(AuthContext)\n    const { closeModal, setIsLoading, setShowModal, getMessage } = useContext(LoadingModalContext)\n\n    const [totalProducts, setTotalProducts] = useState(0)\n    const [totalLenses, setTotalLenses] = useState(0)\n    const [eanCode, setEanCode] = useState(null)\n\n    const [product, setProduct] = useState({ ...initProductObj })\n    const [lenses, setLenses] = useState({ ...initLensesObj })\n    const [contactLensesParameters, setContactLensesParameters] = useState({ ...initContactLensesObj })\n    const [glassesParameters, setGlassesParameters] = useState({ ...initGlassesObj })\n\n    const [products, setProducts] = useState(null)\n    const [lensesProducts, setLensesProducts] = useState(null)\n    const [activePremisesTab, setActivePremisesTab] = useState(0)\n    const [retailPremisesTabs, setRetailPremisesTabs] = useState([])\n\n    const [productCategoryTypeTabs] = useState(categoryTabs)\n    const [activeCategoryTypeTab, setActiveCategoryTypeTab] = useState(0)\n\n    const handleGlassesParameterChange = e => {\n        const { name, value } = e.target\n        setGlassesParameters({\n            ...glassesParameters,\n            [name]: value\n        })\n    }\n\n    const handleGlassesParameterSpecsChange = e => {\n        const { name, value } = e.target\n        setGlassesParameters({\n            ...glassesParameters,\n            specs: {\n                ...glassesParameters.specs,\n                [name]: value\n            }\n        })\n    }\n\n    const handleGlassesSizeChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = glassesParameters.specs[name]\n        arr[idx] = value === '' ? 1001 : value\n        setGlassesParameters({\n            ...glassesParameters,\n            specs: {\n                ...glassesParameters.specs,\n                [name]: arr\n            }\n        })\n\n    }\n\n    const handleAddNewParameter = e => {\n        const { name } = e.target\n        setContactLensesParameters({\n            ...contactLensesParameters,\n            [name]: [...contactLensesParameters[name], 1001]\n        })\n    }\n\n    const handleContactLensesParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = contactLensesParameters[name]\n        arr[idx] = value === '' ? 1001 : value\n        setContactLensesParameters({\n            ...contactLensesParameters,\n            [name]: arr\n        })\n    }\n\n    const handleProductChange = e => {\n        const { name, value } = e.target\n\n        setProduct({\n            ...product,\n            [name]: value\n        })\n    }\n\n    const handleProductAvailableChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = product[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n        setProduct({\n            ...product,\n            [name]: arr\n        })\n    }\n\n    const handleLensesChange = e => {\n        const { name, value } = e.target\n\n        setLenses({\n            ...lenses,\n            [name]: value\n        })\n    }\n\n    const handleLensesParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = lenses[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n        setLenses({\n            ...lenses,\n            [name]: arr\n        })\n    }\n\n    const resetProduct = () => {\n        setProduct({\n            ...initProductObj,\n            available: [0, 1001, 1001, 1001, 1001, 1001, 1001],\n        })\n        setEanCode(null)\n    }\n\n    const resetLenses = () => {\n        // setLenses({ ...initLensesObj })\n        setLenses({\n            ...initLensesObj,\n            dioptersRange: [1001, 1001],\n            cylinderRange: [1001, 1001],\n        })\n    }\n\n    const resetContactLenses = () => {\n        setContactLensesParameters({\n            ...initContactLensesObj,\n            allowedCurves: [1001],\n            allowedDiameters: [1001],\n            dioptersRange: [1001, 1001]\n        })\n    }\n\n    const resetGlassesParameters = () => {\n        setGlassesParameters({\n            ...initGlassesObj,\n            specs: {\n                ...initGlassesObj.specs,\n                size: [1001, 1001, 1001, 1001]\n            }\n        })\n    }\n\n    const handleChangePremisesTab = (idx) => {\n        setActivePremisesTab(idx)\n    }\n\n    const handleChangeCategoryTypeTab = (idx) => {\n        setActiveCategoryTypeTab(idx)\n    }\n\n\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const getEanCode = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/nextEanCode`, requestOptions)\n            const data = await response.json()\n\n            if (data.eanCode) {\n                setEanCode(data.eanCode)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getProductsByQuery = async (query) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(query)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.products) {\n                setProducts(data.products)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getLenses = async (query) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(query)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/lenses/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.lenses) {\n                setProducts(data.lenses)\n                setLensesProducts(data.lenses)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getSingleProduct = async (id, callback) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/store/products/${id}`)\n            const data = await response.json()\n\n            if (data.error === 'not-found') {\n                getSingleLenses(id, () => { })\n            }\n\n            if (data.product) {\n                setProduct({\n                    ...data.product,\n                    price: (data.product.price / 100).toFixed(2)\n                })\n                if (data.product.type === 3) {\n                    setContactLensesParameters({\n                        ...data.product.contactLenses\n                    })\n                } else {\n                    setGlassesParameters({\n                        colorCode: data.product.colorCode ?? \"\",\n                        specs: {\n                            ...data.product.specs,\n                            size: [...Array(4)].map((value, idx) => data.product.specs.size[idx] ? data.product.specs.size[idx] : 0)\n                        }\n                    })\n                }\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createProduct = async (productToAdd) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        let linkSize1 = null\n\n        if (productToAdd?.specs?.size) {\n            linkSize1 = diaConvert(productToAdd?.specs?.size[0].toString() || '').replaceAll(\" \", \"-\").replaceAll(\",\", \"-\").replaceAll(\".\", \"-\").toLowerCase().trim()\n        }\n\n        const finalSlug = getSlug(`${productToAdd?.name || \"neuvedene\"}-${productToAdd?.specs?.frameColor || \"neuvedene\"}-${productToAdd?.specs?.size || \"neuvedene\"}`)\n\n        let modifiedProduct = {\n            ...productToAdd,\n            price: formatPrice(productToAdd?.price?.toString() || \"\"),\n            link: finalSlug,\n        }\n\n        if (productToAdd.specs) {\n            if (productToAdd.specs.size) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    specs: {\n                        ...modifiedProduct.specs,\n                        size: productToAdd.specs.size.map(value => value === 1001 ? 0 : formatfloatNumber(value))\n                    }\n                }\n            }\n        }\n\n        if (productToAdd.contactLenses) {\n            if (productToAdd.contactLenses.allowedCurves) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedCurves: productToAdd.contactLenses.allowedCurves.map(value => formatfloatNumber(value))\n                    }\n                }\n            }\n            if (productToAdd.contactLenses.allowedDiameters) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedDiameters: productToAdd.contactLenses.allowedDiameters.map(value => formatfloatNumber(value))\n                    }\n                }\n            }\n            if (productToAdd.contactLenses.dioptersRange) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        dioptersRange: productToAdd.contactLenses.dioptersRange.map(value => formatfloatNumber(value))\n                    }\n                }\n            }\n        }\n\n        const raw = JSON.stringify({\n            ...modifiedProduct,\n        })\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products`, requestOptions)\n            const data = await response.json()\n\n            if (data.product) {\n                push('/dashboard/obchod')\n                getProductsByQuery({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n                setEanCode(null)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateProduct = async (productToUpdate) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        console.log(productToUpdate)\n\n        const finalSlug = getSlug(`${productToUpdate?.name || product?.name}-${productToUpdate?.specs?.frameColor || product?.specs?.frameColor}-${productToUpdate?.specs?.size || product?.specs?.size}`)\n\n\n        let modifiedProduct = {\n            ...productToUpdate,\n            link: finalSlug,\n            specs: {\n                frameColor: productToUpdate?.specs?.frameColor || product?.specs?.frameColor,\n                size: productToUpdate?.specs?.size || product?.specs?.size,\n                frameMaterial: productToUpdate?.specs?.frameMaterial || product?.specs.frameMaterial,\n                frameStyle: productToUpdate?.specs?.frameStyle || product?.specs.frameStyle,\n                lensColor: productToUpdate?.specs?.lensColor || product?.specs.lensColor,\n                sex: productToUpdate?.specs?.sex || product?.specs.sex,\n            }\n        }\n\n\n        // return\n\n        if (modifiedProduct.price) {\n            modifiedProduct = {\n                ...modifiedProduct,\n                price: formatPrice(productToUpdate.price.toString()),\n            }\n        }\n\n        if (modifiedProduct.available) {\n            if (typeof modifiedProduct.available === \"number\") {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    available: productToUpdate.available\n                }\n            } else {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    available: productToUpdate.available ? productToUpdate.available.map(value => value === 1001 ? 0 : value) : [0, 0, 0, 0, 0, 0, 0]\n                }\n            }\n        }\n\n        // if (productToUpdate.name || productToUpdate?.specs?.frameColor || productToUpdate?.specs?.size) {\n        //     const linkName = diaConvert(productToUpdate?.name || product?.name || \"\").replaceAll(\" \", \"-\").toLowerCase().trim()\n        //     const linkFrameColor = diaConvert(productToUpdate?.specs?.frameColor || product?.specs?.frameColor || '').replaceAll(\" \", \"-\").toLowerCase().trim()\n\n        //     let linkSize1 = null\n\n        //     if (product?.specs?.size) {\n        //         linkSize1 = diaConvert(productToUpdate?.specs?.size[0].toString() || product?.specs?.size[0].toString() || '').replaceAll(\" \", \"-\").replaceAll(\",\", \"-\").replaceAll(\".\", \"-\").toLowerCase().trim()\n        //     }\n\n        //     const slug = linkName + (linkFrameColor ? `-${linkFrameColor}` : \"\") + (linkSize1 !== null ? `-${linkSize1}` : \"\")\n\n        //     const finalSlug = getSlug(slug)\n\n        //     console.log(finalSlug)\n\n        //     modifiedProduct = {\n        //         ...modifiedProduct,\n        //         link: finalSlug\n        //     }\n        // }\n\n        if (productToUpdate.specs) {\n            if (productToUpdate.specs.size) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    specs: {\n                        ...modifiedProduct.specs,\n                        size: productToUpdate.specs.size.map(value => value === 1001 ? 0 : formatfloatNumber(value))\n                    }\n                }\n            }\n        }\n\n        if (productToUpdate.contactLenses) {\n            if (productToUpdate.contactLenses.allowedCurves) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedCurves: productToUpdate.contactLenses.allowedCurves.map(value => formatfloatNumber(value))\n                    }\n                }\n            } else {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedCurves: contactLensesParameters.allowedCurves\n                    }\n                }\n            }\n\n            if (productToUpdate.contactLenses.allowedDiameters) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedDiameters: productToUpdate.contactLenses.allowedDiameters.map(value => formatfloatNumber(value))\n                    }\n                }\n            } else {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedDiameters: contactLensesParameters.allowedDiameters\n                    }\n                }\n            }\n            if (productToUpdate.contactLenses.dioptersRange) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        dioptersRange: productToUpdate.contactLenses.dioptersRange.map(value => formatfloatNumber(value))\n                    }\n                }\n            } else {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        dioptersRange: contactLensesParameters.dioptersRange\n                    }\n                }\n            }\n        }\n\n        const raw = JSON.stringify({\n            ...modifiedProduct,\n        })\n\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/${product._id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.messageSK)\n                setIsLoading(false)\n                return\n\n            }\n\n            if (data.product) {\n                push('/dashboard/obchod')\n                getProductsByQuery({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const deleteProduct = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.product) {\n                // push('/dashboard/obchod')\n                getProductsByQuery({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getSingleLenses = async (id, callback) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/store/lenses/${id}`)\n            const data = await response.json()\n\n            if (data.lenses) {\n                setLenses(data.lenses)\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createLenses = async (lensesToAdd) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify({\n            ...lensesToAdd,\n            price: formatPrice(lensesToAdd.price.toString())\n        });\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/lenses`, requestOptions)\n            const data = await response.json()\n\n            if (data.lenses) {\n                push('/dashboard/obchod')\n                getLenses({\n                    sortBy: {\n                        dateCreated: -1\n                    }\n                })\n                closeModal()\n                return\n            }\n\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateLenses = async (lensesToUpdate, id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        let modifiedLenses = {\n            ...lensesToUpdate\n        }\n\n        if (modifiedLenses.price) {\n            modifiedLenses = {\n                ...modifiedLenses,\n                price: formatPrice(lensesToUpdate.price.toString()),\n            }\n        }\n\n        const raw = JSON.stringify({\n            ...modifiedLenses,\n        });\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/lenses/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.lenses) {\n                push('/dashboard/obchod')\n                getLenses({\n                    sortBy: {\n                        dateCreated: -1\n                    }\n                })\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const deleteLenses = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/lenses/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.lenses) {\n                getLenses({\n                    sortBy: {\n                        dateCreated: -1\n                    }\n                })\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const deactivateMany = async (databObj) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(databObj);\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/deactivateMany`, requestOptions)\n            const data = await response.json()\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        if (products) {\n            if (activeCategoryTypeTab === 0) {\n                getProductsByQuery({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n            } else if (activeCategoryTypeTab === 1) {\n                getLenses({\n                    sortBy: {\n                        dateCreated: -1\n                    }\n                })\n            } else {\n                getProductsByQuery({\n                    limit: 10,\n                    filters: {\n                        type: 3\n                    },\n                    sortBy: {\n                        date: -1\n                    }\n                })\n            }\n        }\n    }, [activeCategoryTypeTab])\n\n    useEffect(() => {\n        if (currentUser) {\n            if (isAdmin) {\n                setRetailPremisesTabs(retailNamesTabs)\n                setActivePremisesTab(0)\n            } else {\n                setRetailPremisesTabs(retailNamesTabs.filter(tab => tab.premises === currentUser.premises))\n                setActivePremisesTab(0)\n            }\n        }\n    }, [currentUser, isAdmin])\n\n    useEffect(() => {\n        if (stats) {\n            setTotalProducts(stats.products)\n            setTotalLenses(stats.lenses)\n        }\n    }, [stats])\n\n    useEffect(() => {\n        if (product.name !== '') {\n            setProduct({\n                ...product,\n                link: formatLink(product.name)\n            })\n        }\n    }, [product.name])\n\n    return (\n        <WarehouseContext.Provider\n            value={{\n                eanCode,\n                product,\n                lenses,\n                contactLensesParameters,\n                glassesParameters,\n                totalProducts,\n                totalLenses,\n                activePremisesTab,\n                activeCategoryTypeTab,\n                retailPremisesTabs,\n                productCategoryTypeTabs,\n                products,\n                lensesProducts,\n                handleChangeCategoryTypeTab,\n                handleChangePremisesTab,\n                getProductsByQuery,\n                handleProductChange,\n                handleProductAvailableChange,\n                getLenses,\n                getSingleProduct,\n                createProduct,\n                updateProduct,\n                deleteProduct,\n                getSingleLenses,\n                createLenses,\n                updateLenses,\n                deleteLenses,\n                handleLensesChange,\n                handleLensesParameterChange,\n                resetProduct,\n                resetLenses,\n                resetContactLenses,\n                resetGlassesParameters,\n                getEanCode,\n                handleAddNewParameter,\n                handleContactLensesParameterChange,\n                handleGlassesParameterChange,\n                handleGlassesParameterSpecsChange,\n                handleGlassesSizeChange,\n                deactivateMany\n            }}\n        >\n            {children}\n        </WarehouseContext.Provider>\n    )\n}\n\nexport default WarehouseProvider","/app/src/context/booking/booking.context.jsx",[],"/app/src/context/analytics/analytics.context.jsx",[],"/app/src/context/orders/orders.context.jsx",[],"/app/src/context/coupons/coupons.context.jsx",["780"],"import React, { createContext, useContext, useState } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\nimport { useHistory } from 'react-router-dom'\nimport { formatPrice } from '../../utils/warehouse.utils'\n\nexport const CouponsContext = createContext({\n    coupon: null,\n    coupons: null,\n    handleChange: () => { },\n    getCoupon: () => { },\n    getCoupons: () => { },\n    createCoupon: () => { },\n    // updateCoupon: () => { },\n    deleteCoupon: () => { },\n    isUpdating: false,\n    resetCoupons: () => { }\n})\n\nconst initCouponObj = {\n    code: '',\n    type: 'percentage', // flat\n    value: 0,\n    maxUses: 0,\n    minValue: 0,\n    maxUsesTotal: 0\n}\n\n\nconst CouponsProvider = ({ children }) => {\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n    const { token } = useContext(AuthContext)\n    const { push } = useHistory()\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const [coupon, setCoupon] = useState(initCouponObj)\n    const [coupons, setCoupons] = useState(null)\n\n    const [isUpdating, setIsupdating] = useState(false)\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n\n        setCoupon({\n            ...coupon,\n            [name]: value\n        })\n    }\n\n    const getCoupon = async (id) => {\n        setIsupdating(true)\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.coupon) {\n                setCoupon({\n                    ...coupon,\n                    ...data.coupon\n                })\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n\n    }\n\n    const getCoupons = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons`, requestOptions)\n            const data = await response.json()\n\n            if (data.coupons) {\n                setCoupons(data.coupons)\n            }\n            setIsLoading(false)\n            closeModal()\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createCoupon = async (couponToCreate) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        console.log(couponToCreate.value)\n\n        const raw = JSON.stringify({\n            code: couponToCreate.code,\n            type: couponToCreate.type, // flat\n            ...(couponToCreate.value) && { value: couponToCreate.type === \"flat\" ? formatPrice(couponToCreate.value) : Number(couponToCreate.value) },\n            // value: couponToCreate.value === '' || couponToCreate.value === '0' ? undefined : Number(couponToCreate.value),\n            maxUses: couponToCreate.maxUses === '' || couponToCreate.maxUses === '0' ? undefined : Number(couponToCreate.maxUses),\n            ...(couponToCreate.minValue) && { minValue: formatPrice(couponToCreate.minValue) },\n            maxUsesTotal: couponToCreate.maxUsesTotal === '' || couponToCreate.maxUsesTotal === '0' ? undefined : Number(couponToCreate.maxUsesTotal)\n        })\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/create`, requestOptions)\n            const data = await response.json()\n\n            if (data.error === \"format\") {\n                getMessage(\"Kód kupónu je povinný\")\n            }\n            if (data.error === 'exists') {\n                getMessage(\"Kupón už existuje\")\n            }\n\n            if (response.ok) {\n                getCoupons()\n                push('/dashboard/kupony')\n            }\n\n            // getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n\n    }\n\n    // const updateCoupon = async () => {\n    //     console.log(\"Update coupon\")\n\n    //     setIsLoading(true)\n    //     setShowModal(true)\n\n    //     const requestOptions = {\n    //         method: 'GET',\n    //         headers: myHeaders,\n    //         redirect: 'follow'\n    //     };\n\n    //     try {\n    //         const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/${id}`, requestOptions)\n    //         const data = await response.json()\n\n    //         getMessage(data.message)\n    //         setIsLoading(false)\n    //     } catch (err) {\n    //         console.log(err)\n    //         getMessage(\"Niečo sa pokazilo\")\n    //         setIsLoading(false)\n    //     }\n\n    // }\n\n    const deleteCoupon = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (response.ok) {\n                getCoupons()\n                push('/dashboard/kupony')\n            }\n            // getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const resetCoupons = async () => {\n        setIsupdating(false)\n        setCoupon(initCouponObj)\n    }\n\n    return (\n        <CouponsContext.Provider\n            value={{\n                coupon,\n                coupons,\n                handleChange,\n                getCoupon,\n                getCoupons,\n                createCoupon,\n                // updateCoupon,\n                deleteCoupon,\n                isUpdating,\n                resetCoupons\n            }}\n        >\n            {children}\n        </CouponsContext.Provider>\n    )\n}\n\nexport default CouponsProvider","/app/src/context/examination/examination.context.jsx",["781","782"],"import React, { createContext, useContext, useState } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport {useFetchContext} from '../fetch-context/fetch.context'\nimport examSchema from './exam.json'\nimport lodash from 'lodash'\n\nexport const ExaminationContext = createContext({\n    createExamination: () => { },\n    updateExamination: () => { },\n    deleteExamination: () => { },\n})\n\nexport const useExaminationContext = () => useContext(ExaminationContext)\n\nconst ExaminationProvider = ({ children }) => {\n    const { fetchData } = useFetchContext()\n\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n\n\n    const createExamination = (examsToAdd, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        console.log(examSchema)\n        console.log(examsToAdd)\n\n        fetchData(\"/api/admin/exams/\", examsToAdd, (data) => {\n            console.log(\"CREATE new examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"POST\")\n\n    }\n\n    const updateExamination = async (examToUpdate, examId, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}`, examToUpdate, (data) => {\n            console.log(\"UPDATE existed examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"PATCH\")\n\n    }\n\n    const deleteExamination = async (examId, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}`, null, (data) => {\n            console.log(\"DELETE existed examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"DELETE\")\n    }\n\n    return (\n        <ExaminationContext.Provider\n            value={{\n                createExamination,\n                updateExamination,\n                deleteExamination\n            }}\n        >\n            {children}\n        </ExaminationContext.Provider>\n    )\n}\n\nexport default ExaminationProvider","/app/src/context/order/order.context.jsx",[],"/app/src/sections/e-shop/e-shop.section.jsx",["783","784"],"import React, { useState, useContext, useEffect } from 'react'\n// import { AuthContext } from '../..//context/auth/auth.context'\nimport { WarehouseContext } from '../../context/warehouse/warehouse.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useHistory } from 'react-router-dom'\n\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport ProductOverview from '../../components/product-overview/product-overview.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport EshopFilterModal from '../../components/modal-eshop-filter/modal-eshop-filter.component'\n\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    Filterbutton,\n    ResetButton,\n    PublicButton,\n} from './e-shop.styles'\n\nconst EshopSection = () => {\n    const { push } = useHistory()\n    const { closeModal, showModal, isLoading, message } = useContext(LoadingModalContext)\n    const [searchQuery, setSearchQuery] = useState('')\n    const [productItems, setProductItems] = useState([])\n    const [queryFilter, setQueryFilter] = useState({\n        limit: 10,\n        skip: 0,\n        sortBy: {\n            date: -1\n        }\n    })\n\n    const [showFilterModal, setShowFilterModal] = useState(false)\n    const [hasFilter, setHasFilter] = useState(false)\n\n    const [selectedProducts, setSelectedProducts] = useState([])\n\n    const selectProduct = (productID) => {\n        setSelectedProducts(prevValue => ([\n            ...prevValue,\n            productID\n        ]))\n    }\n\n\n\n    const deselectProduct = (selectedProductsArr, productID) => {\n        const newArr = selectedProductsArr.filter(product => product !== productID)\n\n        setSelectedProducts(newArr)\n    }\n\n    const {\n        activePremisesTab,\n        products,\n        retailPremisesTabs,\n        getProductsByQuery,\n        handleChangePremisesTab,\n        productCategoryTypeTabs,\n        activeCategoryTypeTab,\n        handleChangeCategoryTypeTab,\n        deleteProduct,\n        deleteLenses,\n        deactivateMany,\n    } = useContext(WarehouseContext)\n\n    const handleDeactivateMany = (productIDs, boolean) => {\n        const dataObj = {\n            products: productIDs,\n            activate: boolean\n        }\n        deactivateMany(dataObj)\n        setSelectedProducts([])\n    }\n\n    const applyFilter = filter => {\n        getProductsByQuery(filter)\n        setShowFilterModal(false)\n        setHasFilter(true)\n    }\n\n    const resetFilter = () => {\n        getProductsByQuery({\n            limit: 10,\n            skip: 0,\n            sortBy: {\n                date: -1\n            }\n        })\n        setShowFilterModal(false)\n        setHasFilter(false)\n    }\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            if (activeCategoryTypeTab === 0) {\n                getProductsByQuery({\n                    query: searchQuery,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n            }\n        }\n    }\n\n    const handleDeleteProduct = (id) => {\n        deleteProduct(id)\n    }\n\n    useEffect(() => {\n        if (!products) {\n            getProductsByQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                }\n            })\n        }\n        if (products) {\n            setProductItems(products)\n        }\n    }, [products])\n\n    useEffect(() => {\n        if (!searchQuery && products) {\n            if (activeCategoryTypeTab === 0) {\n                getProductsByQuery({\n                    limit: 10,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n            }\n        }\n    }, [searchQuery])\n\n\n    const getNextPage = () => {\n        if (productItems.length < 10) return\n        getProductsByQuery({\n            ...queryFilter,\n            skip: queryFilter.skip + 10\n        })\n        setQueryFilter({\n            ...queryFilter,\n            skip: queryFilter.skip + 10\n        })\n    }\n\n    const getPrevPage = () => {\n        if (queryFilter.skip === 0) return\n        getProductsByQuery({\n            ...queryFilter,\n            skip: queryFilter.skip - 10\n        })\n        setQueryFilter({\n            ...queryFilter,\n            skip: queryFilter.skip - 10\n        })\n    }\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            {showFilterModal && <EshopFilterModal applyFilter={applyFilter} resetFilter={resetFilter} close={() => setShowFilterModal(false)} />}\n\n            <SectionHeader\n                title=\"Sklad\"\n                searchQuery={searchQuery}\n                handleSearch={handleSearch}\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push('sklad/novy-produkt')}\n\n            />\n\n            <FlexContainer>\n                <FixedContainer>\n\n                    <SectionNavbar\n                        items={retailPremisesTabs}\n                        activeIndex={activePremisesTab}\n                        setActiveIndex={handleChangePremisesTab}\n                    />\n                </FixedContainer>\n            </FlexContainer>\n\n\n            <FlexContainer>\n                <FixedContainer>\n                    <SectionNavbar\n                        items={productCategoryTypeTabs}\n                        activeIndex={activeCategoryTypeTab}\n                        setActiveIndex={handleChangeCategoryTypeTab}\n                    />\n                    {selectedProducts.length > 0 && <div>\n                        <PublicButton onClick={() => handleDeactivateMany(selectedProducts, false)}>Neverejné</PublicButton>\n                        <PublicButton onClick={() => handleDeactivateMany(selectedProducts, true)}>Verejné</PublicButton>\n                    </div>}\n                    {activeCategoryTypeTab === 0 && <div>\n                        {hasFilter && <ResetButton onClick={resetFilter}>reset</ResetButton>}\n                        <Filterbutton onClick={() => setShowFilterModal(true)}>Filter</Filterbutton>\n                    </div>}\n                </FixedContainer>\n            </FlexContainer>\n\n            <ScrollContainer>\n                {productItems.map((product, idx) => (\n                    <ProductOverview\n                        key={idx}\n                        product={product}\n                        activePremisesTab={activePremisesTab}\n                        handleUpdateButton={() => push(`sklad/${product._id}`)}\n                        handleDeleteButton={activeCategoryTypeTab === 0 ? () => handleDeleteProduct(product._id) : () => deleteLenses((product._id))}\n                        selectProduct={selectProduct}\n                        deselectProduct={deselectProduct}\n                        selectedProducts={selectedProducts}\n                    />\n                ))}\n\n                <ListArrows\n                    listItems={productItems}\n                    handleClickPrev={getPrevPage}\n                    handleClickNext={getNextPage}\n                />\n            </ScrollContainer>\n        </section >\n    )\n}\n\nexport default EshopSection\n","/app/src/sections/analytics/analytics.section.jsx",["785","786","787"],"import React, { useState, useContext, useEffect } from 'react'\nimport { AnalyticsContext } from '../../context/analytics/analytics.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../../context/auth/auth.context'\n\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport CustomInput from '../../components/custom-input/custom-input.component'\n\nimport { retailNamesTabs } from '../../utils/warehouse.utils'\nimport { analyticsTabItems } from '../../utils/analytics.utils'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    GridContainer,\n    StatsContainer,\n    StatsGrid,\n    ReportContainer,\n    SubmitButton,\n    TypeCheckbox,\n    TwoColContainer,\n    CheckboxContainer,\n    Container,\n    PaymentsContainer\n} from './analytics.styles'\n\nconst AnalyticsSection = () => {\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n    const { stats: storeData, isAdmin, currentUser } = useContext(AuthContext)\n    const { stats, getAnalytics, generateReport } = useContext(AnalyticsContext)\n    const premisesTabs = isAdmin ? analyticsRetailNames : analyticsRetailNames.filter(tab => tab.id === currentUser.premises || tab.id === 0)\n\n    const [activePremiseIndex, setActivePremiseIndex] = useState(currentUser.premises || 0)\n    const [activeIndex, setActiveIndex] = useState(2)\n\n    const [activeTabStats, setActiveTabStats] = useState(null)\n\n    const [reportObj, setReportObj] = useState({})\n    const [activeReportType, setActiveReportType] = useState(reportTypes[0].value)\n    const [activeRetailType, setActiveRetailType] = useState(retailTypes[0].value)\n\n    const [fitlterQuery, setFilterQuery] = useState({})\n\n    const handleChangeActiveIndex = idx => {\n        setActiveIndex(idx)\n        setFilterQuery({})\n    }\n\n    const handleChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete reportObj[name]\n            setReportObj({\n                ...reportObj,\n            })\n            return\n        }\n\n        setReportObj({\n            ...reportObj,\n            [name]: value\n        })\n    }\n    const handleFitlterQueryChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete fitlterQuery[name]\n            setFilterQuery({\n                ...fitlterQuery,\n            })\n            return\n        }\n\n        setFilterQuery({\n            ...fitlterQuery,\n            [name]: value\n        })\n    }\n\n    const handleSubmitReport = () => {\n\n        if (!reportObj?.from && !reportObj?.to) {\n            const reportQueryObj = {\n                type: activeReportType,\n                timespan: \"all\",\n                ...(activeReportType !== \"users\") && {\n                    filters: {\n                        premises: activeRetailType\n                    }\n                }\n            }\n            generateReport(reportQueryObj)\n        } else {\n            const formatedFrom = reportObj?.from.split(\"-\").reverse().join(\"/\")\n            const formatedto = reportObj?.to.split(\"-\").reverse().join(\"/\")\n\n            const reportQueryObj = {\n                type: activeReportType,\n                timespan: activeReportType === 'users' ? \"all\" : `${formatedFrom}:${formatedto}`,\n                ...(activeReportType !== \"users\") && {\n                    filters: {\n                        premises: activeRetailType\n                    }\n                }\n            }\n\n            generateReport(reportQueryObj)\n        }\n\n    }\n\n    useEffect(() => {\n        if (!fitlterQuery?.from || !fitlterQuery?.to) return\n        const formatedFrom = fitlterQuery?.from.split(\"-\").reverse().join(\"/\")\n        const formatedto = fitlterQuery?.to.split(\"-\").reverse().join(\"/\")\n        getAnalytics(`${formatedFrom}:${formatedto}`)\n\n\n    }, [fitlterQuery])\n\n    useEffect(() => {\n        setActiveRetailType(retailTypes[0].value)\n    }, [activeReportType])\n\n    useEffect(() => {\n        getAnalytics(analyticsTabItems[activeIndex - 1].value)\n    }, [activeIndex])\n\n    useEffect(() => {\n        if (stats) {\n            setActiveTabStats(stats?.find(tab => tab._id.premises === activePremiseIndex))\n        }\n    }, [stats, activePremiseIndex])\n\n    useEffect(() => {\n        return () => {\n            setActivePremiseIndex(0)\n            setActiveIndex(2)\n            setActiveTabStats(null)\n            setReportObj({})\n            setActiveReportType(reportTypes[0].value)\n            setActiveRetailType(retailTypes[0].value)\n        }\n    }, [])\n\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <Header>\n                <h1>Analytiká</h1>\n            </Header>\n\n            <FlexContainer>\n                <FixedContainer>\n                    <SectionNavbar\n                        items={premisesTabs}\n                        activeIndex={activePremiseIndex}\n                        setActiveIndex={setActivePremiseIndex}\n                    />\n                </FixedContainer>\n            </FlexContainer>\n            <FlexContainer>\n                <FixedContainer>\n                    <SectionNavbar\n                        items={analyticsTabItems}\n                        activeIndex={activeIndex}\n                        setActiveIndex={handleChangeActiveIndex}\n                    />\n                </FixedContainer>\n            </FlexContainer>\n\n\n            <ScrollContainer>\n                <Container>\n                    <h3>Dátum:</h3>\n\n                    <TwoColContainer>\n                        <div>\n                            <h5>Od:</h5>\n                            <CustomInput\n                                label={''}\n                                value={fitlterQuery?.from || \"\"}\n                                type=\"date\"\n                                name=\"from\"\n                                handleChange={handleFitlterQueryChange}\n                            />\n                        </div>\n                        <div>\n                            <h5>Do:</h5>\n                            <CustomInput\n                                label={''}\n                                value={fitlterQuery?.to || \"\"}\n                                type=\"date\"\n                                name=\"to\"\n                                handleChange={handleFitlterQueryChange}\n                            />\n                        </div>\n                    </TwoColContainer>\n\n                </Container>\n                {isAdmin && <GridContainer>\n                    <div>\n                        <h3>Zákazníci</h3>\n                        <p>{storeData?.users}</p>\n                    </div>\n                    <div>\n                        <h3>Produkty</h3>\n                        <p>{storeData?.products}</p>\n                    </div>\n                    <div>\n                        <h3>Šošovky</h3>\n                        <p>{storeData?.lenses}</p>\n                    </div>\n                    <div>\n                        <h3>Zákazky</h3>\n                        <p>{storeData?.orders}</p>\n                    </div>\n                    <div>\n                        <h3>Vyšetrenia</h3>\n                        <p>{storeData?.bookings}</p>\n                    </div>\n                </GridContainer>}\n\n\n\n                {stats && (\n                    <StatsGrid>\n                        {\n                            activeTabStats ? (\n                                <PaymentsContainer>\n                                    <div>\n                                        <h3>Tržba</h3>\n                                        <p>{((activeTabStats?.cash + activeTabStats?.card + activeTabStats?.coupons + activeTabStats?.eshopPickupPayments) / 100).toFixed(2)}€</p>\n                                    </div>\n                                    <div>\n                                        <h3>hodnota nových zákazok</h3>\n                                        <p>{(activeTabStats?.potential / 100).toFixed(2)}€</p>\n                                    </div>\n                                </PaymentsContainer>\n                            ) : (\n                                <PaymentsContainer>\n                                    <p>Žiadné štatistiky</p>\n                                </PaymentsContainer>\n                            )\n                        }\n                    </StatsGrid>\n                )}\n\n                {stats && (\n                    <StatsGrid>\n                        {activeTabStats && (\n                            <StatsContainer>\n                                <div>\n                                    <h3>Hotovosť</h3>\n                                    <p>{(activeTabStats?.cash / 100).toFixed(2)}€</p>\n                                </div>\n                                <div>\n                                    <h3>Karta</h3>\n                                    <p>{(activeTabStats?.card / 100).toFixed(2)}€</p>\n                                </div>\n                                <div>\n                                    <h3>Kupóny</h3>\n                                    <p>{(activeTabStats?.coupons / 100).toFixed(2)}€</p>\n                                </div>\n                                <div>\n                                    <h3>Objednávky</h3>\n                                    <p>{activeTabStats?.orders}</p>\n                                </div>\n                            </StatsContainer>\n                        )}\n                    </StatsGrid>\n                )}\n\n                {isAdmin && <ReportContainer>\n                    <h2>Vytvoriť report</h2>\n                    <CheckboxContainer>\n                        <h5>Typ reportu</h5>\n                        {reportTypes.map((type, idx) => (\n                            <TypeCheckbox\n                                key={idx}\n                                label={type.name}\n                                isActive={activeReportType === type.value}\n                                handleClick={() => setActiveReportType(type.value)}\n                            />\n                        ))}\n                    </CheckboxContainer>\n\n                    {activeReportType !== 'users' && <CheckboxContainer>\n                        <h5>Prevádzka</h5>\n                        {retailTypes.map((type, idx) => (\n                            <TypeCheckbox\n                                key={idx}\n                                label={type.name}\n                                isActive={activeRetailType === type.value}\n                                handleClick={() => setActiveRetailType(type.value)}\n                            />\n                        ))}\n                    </CheckboxContainer>}\n\n                    {activeReportType !== 'users' ? <TwoColContainer>\n                        <div>\n                            <h5>Od:</h5>\n                            <CustomInput\n                                label={''}\n                                value={reportObj?.from || \"\"}\n                                type=\"date\"\n                                name=\"from\"\n                                handleChange={handleChange}\n                            />\n                        </div>\n                        <div>\n                            <h5>Do:</h5>\n                            <CustomInput\n                                label={''}\n                                value={reportObj?.to || \"\"}\n                                type=\"date\"\n                                name=\"to\"\n                                handleChange={handleChange}\n                            />\n                        </div>\n                    </TwoColContainer> : <div style={{ marginBottom: \"2rem\" }}><p>Žiadne možnosti</p></div>}\n\n                    <SubmitButton onClick={handleSubmitReport}>Generovať</SubmitButton>\n                </ReportContainer>}\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default AnalyticsSection\n\nconst reportTypes = [\n    {\n        name: \"Zákazníci\",\n        value: \"users\",\n    },\n    {\n        name: \"Produkty\",\n        value: \"products\",\n    },\n    {\n        name: \"Zákazky\",\n        value: \"orders\",\n    },\n]\n\nconst retailTypes = [\n    // {\n    //     name: \"E-shop\",\n    //     value: 0,\n    // },\n    {\n        name: \"Centrálny sklad\",\n        value: 1,\n    },\n    {\n        name: \"Obchodná, Bratislava\",\n        value: 2,\n    },\n    {\n        name: \"Miletičova, Bratislava\",\n        value: 3,\n    },\n    {\n        name: \"Vajnory, Bratislava\",\n        value: 4,\n    },\n    {\n        name: \"Vajnorská 53, Bratislava\",\n        value: 5,\n    },\n    {\n        name: \"OC Branč, Senica\",\n        value: 6,\n    },\n]\n\n\nexport const analyticsRetailNames = [\n    // {\n    //     id: 0,\n    //     name: \"E-shop\",\n    // },\n    {\n        id: 1,\n        name: \"Centrálny sklad\",\n    },\n    {\n        id: 2,\n        name: \"Obchodná, Bratislava\",\n    },\n    {\n        id: 3,\n        name: \"Miletičova, Bratislava\",\n    },\n    {\n        id: 4,\n        name: \"Vajnory, Bratislava\",\n    },\n    {\n        id: 5,\n        name: \"Vajnorská 53, Bratislava\",\n    },\n    {\n        id: 6,\n        name: \"OC Branč, Senica\",\n    },\n]\n\n// export const retailNames = [\n//     \"eshop\",\n//     \"Centrálny sklad\",\n//     \"Obchodná, Bratislava\",\n//     \"Miletičova, Bratislava\",\n//     \"Vajnory, Bratislava\",\n//     \"Vajnorská 53, Bratislava\",\n//     \"OC Branč, Senica\"\n// ]","/app/src/sections/orders/orders.section.jsx",["788","789"],"import React, { useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\n// import OrderDeligateModal from '../../components/order-deligate-modal/order-deligate-modal.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport {\n    GoArrowSmallDown,\n    GoArrowSmallUp\n} from 'react-icons/go'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    tabItems\n} from '../../context/orders/orders.utils'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    TableHead,\n    OrdersTable,\n    TableCol,\n    IconContainer,\n    OrderOverviewRow\n} from './orders.styles'\n\nconst OrdersSection = () => {\n    const { push } = useHistory()\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n\n    const [searchQuery, setSearchQuery] = useState('')\n    const [activeIndex, setActiveIndex] = useState(1)\n    const [orders, setOrders] = useState([])\n    const [fetchQueryObj, setFetchQueryObj] = useState({\n        limit: 10,\n        skip: 0,\n        sortBy: {\n            date: -1\n        },\n        filters: {\n            finished: false\n        }\n    })\n\n    const { isLoading: isFetching, response, refetch } = useFetchByQuery('api/admin/orders/filter', fetchQueryObj)\n\n    const handleRefetch = () => {\n        refetch()\n    }\n\n    const handleIndexChange = (idx) => {\n        setActiveIndex(idx)\n        if (idx === 1) {\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    finished: false\n                }\n            })\n        } else if (idx === 2) {\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    finished: true\n                }\n            })\n        } else if (idx === 3) {\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    status: \"cancelled\"\n                }\n            })\n        }\n        handleRefetch()\n    }\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            setFetchQueryObj(prevValue => ({\n                // ...prevValue,\n                // sortBy: {\n                //     date: -1\n                // },\n                filters: {\n                    customId: Number(searchQuery)\n                },\n            }))\n        }\n        refetch()\n    }\n\n    const getNextPage = () => {\n        if (orders.length < 10) return\n        setFetchQueryObj(prevValue => ({\n            ...prevValue,\n            skip: prevValue.skip + 10,\n        }))\n        refetch()\n    }\n\n    const getPrevPage = () => {\n        if (fetchQueryObj.skip === 0) return\n        setFetchQueryObj(prevValue => ({\n            ...prevValue,\n            skip: prevValue.skip - 10,\n        }))\n        refetch()\n    }\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            if (activeIndex === 1) {\n                setFetchQueryObj({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    },\n                    filters: {\n                        finished: false\n                    }\n                })\n            } else if (activeIndex === 2) {\n                setFetchQueryObj({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    },\n                    filters: {\n                        finished: true\n                    }\n                })\n            } else if (activeIndex === 3) {\n                setFetchQueryObj({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    },\n                    filters: {\n                        status: \"cancelled\"\n                    }\n                })\n            }\n            handleRefetch()\n        }\n    }, [searchQuery])\n\n    useEffect(() => {\n        if (!isFetching) {\n            if (response) {\n                if (activeIndex === 1) {\n                    setOrders(response?.orders)\n                } else {\n                    setOrders(response?.orders)\n                }\n                closeModal()\n            }\n        }\n    }, [isFetching, response, activeIndex])\n\n\n    useEffect(() => {\n        return () => {\n            setActiveIndex(1)\n            setSearchQuery('')\n            setOrders([])\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    finished: false\n                }\n            })\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <SectionHeader\n                searchQuery={searchQuery}\n                handleSearch={handleSearch}\n\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push(\"/dashboard/objednavky/nova-objednavka\")}\n                title=\"Zákazky\"\n            />\n\n            <FlexContainer>\n                <FixedContainer>\n\n                    <SectionNavbar\n                        items={tabItems}\n                        activeIndex={activeIndex}\n                        setActiveIndex={handleIndexChange}\n                    />\n                </FixedContainer>\n\n            </FlexContainer>\n\n            <ScrollContainer>\n                <OrdersTable>\n                    <TableHead>\n                        <TableCol>ID</TableCol>\n                        <TableCol clickable onClick={() => {\n                            setFetchQueryObj((prevObj) => ({\n                                ...fetchQueryObj,\n                                sortBy: {\n                                    date: prevObj?.sortBy?.date === 1 ? -1 : 1\n                                }\n                            }))\n                            handleRefetch()\n                        }}>\n                            <p>\n                                Dátum {fetchQueryObj?.sortBy?.date === 1 ? <IconContainer>\n                                    <GoArrowSmallDown />\n                                </IconContainer> : <IconContainer>\n                                    <GoArrowSmallUp />\n                                </IconContainer>\n                                }\n                            </p>\n                        </TableCol>\n                        <TableCol>Prevádzka</TableCol>\n                        <TableCol>Meno</TableCol>\n                        <TableCol>Tel. číslo</TableCol>\n                        <TableCol>Status</TableCol>\n                        <TableCol>Možnosti</TableCol>\n                    </TableHead>\n                    {orders?.map((order, idx) => (\n                        <OrderOverviewRow key={idx} order={order} refetch={handleRefetch} />\n                    ))}\n                </OrdersTable>\n\n                <ListArrows\n                    listItems={orders}\n                    handleClickNext={getNextPage}\n                    handleClickPrev={getPrevPage}\n                />\n            </ScrollContainer>\n        </section>\n    )\n}\n\n\n\nexport default OrdersSection\n","/app/src/sections/customers/customers.section.jsx",["790","791","792"],"import React, { useState, useContext, useEffect } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from \"../../components/section-navbar/section-navbar.component\"\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\nimport { userTabs } from '../../utils/user.utils'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    TableCol,\n    TableContainer,\n    TableHead,\n    TableRow,\n    UpdateButton,\n    Container,\n    DeleteButton\n} from './customers.styles'\n\nconst CustomersSection = () => {\n    const [searchQuery, setSearchQuery] = useState('')\n    const { push } = useHistory()\n    const { isAdmin } = useContext(AuthContext)\n    const [userItems, setUserItems] = useState([])\n    const [activeIndex, setActiveIndex] = useState(0)\n    const [filterQuery, setFilterQuery] = useState({\n        limit: 10,\n        skip: 0,\n        filters: {\n            admin: activeIndex\n        },\n        sortBy: {\n            date: -1\n        }\n    })\n\n    const { response, isLoading, refetch } = useFetchByQuery('api/admin/users/filter', filterQuery)\n\n    const {\n        // isLoading,\n        showModal,\n        message,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            setFilterQuery({\n                limit: 10,\n                skip: 0,\n                query: searchQuery,\n                filters: {\n                    admin: activeIndex\n                },\n                sortBy: {\n                    date: -1\n                }\n            })\n            refetch()\n        }\n    }\n\n    const handleActiveIndexChange = (index) => {\n        setActiveIndex(index)\n        setFilterQuery({\n            limit: 10,\n            skip: 0,\n            filters: {\n                admin: index\n            },\n            sortBy: {\n                date: -1\n            }\n        })\n        refetch()\n    }\n\n    const getNextPage = () => {\n        if (userItems.length < 10) return\n        setFilterQuery({\n            ...filterQuery,\n            skip: filterQuery.skip + 10\n        })\n        refetch()\n\n    }\n\n    const getPrevPage = () => {\n        if (filterQuery.skip === 0) return\n        setFilterQuery({\n            ...filterQuery,\n            skip: filterQuery.skip - 10\n        })\n        refetch()\n\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response) {\n            setUserItems(response.users)\n            closeModal()\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            setFilterQuery({\n                limit: 10,\n                skip: 0,\n                filters: {\n                    admin: activeIndex\n                },\n                sortBy: {\n                    date: -1\n                }\n            })\n            refetch()\n        }\n    }, [searchQuery])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <SectionHeader\n                searchQuery={searchQuery}\n                handleSearch={handleSearch}\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push('zakaznici/novy-zakaznik')}\n                title=\"Zákazníci\"\n            />\n\n            <FlexContainer>\n                <FixedContainer>\n                    <SectionNavbar\n                        items={isAdmin ? userTabs : [\n                            {\n                                id: 0,\n                                name: \"Zákazníci\",\n                                filter: 0,\n                            },]}\n                        activeIndex={activeIndex}\n                        setActiveIndex={handleActiveIndexChange}\n                    />\n\n                </FixedContainer>\n            </FlexContainer>\n\n            <ScrollContainer>\n                <Container>\n                    <TableContainer>\n                        <TableHead>\n                            <TableCol>Meno a priezvisko</TableCol>\n                            <TableCol>Email</TableCol>\n                            <TableCol>Tel. číslo</TableCol>\n                            <TableCol>Možnosti</TableCol>\n                        </TableHead>\n                        {userItems && userItems.map((user, idx) => (\n                            <TableRow key={idx}>\n                                <TableCol>{user.name}</TableCol>\n                                <TableCol>{user.email}</TableCol>\n                                <TableCol>{user.phone}</TableCol>\n                                <TableCol>\n                                    <UpdateButton onClick={() => push(`zakaznici/${user._id}`)}>Upraviť</UpdateButton>\n                                    {/* <DeleteButton onClick={() => alert(\"Pekný pokus! Tu velím zatiaľ ja :)\")}>Odstrániť</DeleteButton> */}\n                                </TableCol>\n                            </TableRow>\n                        ))}\n                    </TableContainer>\n                </Container>\n\n                <ListArrows\n                    listItems={userItems}\n                    handleClickPrev={getPrevPage}\n                    handleClickNext={getNextPage}\n                />\n            </ScrollContainer>\n\n        </section>\n    )\n}\n\nexport default CustomersSection\n","/app/src/sections/customer-profile/customer-profile.section.jsx",["793","794","795"],"import React, { useContext, useEffect, useState } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { UserContext } from '../../context/user/user.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport UserForm from '../../components/user-form/user-form.component'\nimport NewUserForm from '../../components/new-user-form/new-user-form.component'\n\nimport Popup from '../../components/popup/pop-up.component'\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    DeleteProfileButton,\n    // Name,\n    SaveButton,\n} from './customer-profile.styles'\n\nconst CustomerProfile = () => {\n    const { id } = useParams()\n    const { isAdmin, isOptometrist } = useContext(AuthContext)\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal,\n        setShowModal,\n        getMessage,\n    } = useContext(LoadingModalContext)\n\n    const {\n        isUpdating,\n        user,\n        getUser,\n        handleChange,\n        handleParameterChange,\n        handleCompanyChange,\n        updateUser,\n        resetUser,\n        formToShow,\n        switchFormButtons,\n        toggleUserForm,\n        createUser,\n        deleteUser\n    } = useContext(UserContext)\n\n    const [userObj, setUserObj] = useState({})\n    // const [hasChanges, setHasChanges] = useState(false)\n\n    const handleUserChange = (e) => {\n        // setHasChanges(true)\n        const { name, value } = e.target\n\n        handleChange(e)\n\n\n        if (value === '') {\n            delete userObj[name]\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            [name]: value\n        })\n    }\n\n    const handleLensesParameterChange = (e, idx) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value\n\n\n        handleParameterChange(e, idx)\n        setUserObj({\n            ...userObj,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n\n    const handleCompanyAddressChange = (e) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        handleCompanyChange(e)\n\n        if (value === '') {\n            delete userObj.company[name]\n            if (Object.keys(userObj.company).length === 0) {\n                delete userObj[\"company\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            company: {\n                ...userObj.company,\n                [name]: value\n            }\n        })\n    }\n\n    console.log(userObj)\n\n    const handleSubmit = (e, path) => {\n        e.preventDefault()\n        // setHasChanges(false)\n\n        if (id === 'novy-zakaznik') {\n            if (userObj.fName || userObj.lName) {\n                delete userObj[\"fName\"]\n                delete userObj[\"lName\"]\n            }\n\n            if (formToShow === 1) {\n                const newUserObj = {\n                    ...userObj,\n                    admin: userObj.admin || 1\n                }\n                createUser(newUserObj, path)\n                return\n            }\n\n            if(!userObj?.phone) {\n                setShowModal(true)\n                getMessage(\"Tel. číslo je povinné\")\n                return\n            }\n\n            createUser(userObj, path)\n        } else {\n            if (userObj.fName || userObj.lName) {\n                delete userObj[\"fName\"]\n                delete userObj[\"lName\"]\n            } else if (!userObj.fName || !userObj.lName) {\n                delete userObj[\"name\"]\n            }\n\n            if (userObj.company) {\n                const newUserObj = {\n                    ...userObj,\n                    company: {\n                        ...user.company,\n                        ...userObj.company\n                    }\n                }\n                updateUser(newUserObj, user._id)\n                return\n            }\n            updateUser(userObj, user._id)\n        }\n    }\n\n    useEffect(() => {\n        setUserObj({\n            ...userObj,\n            name: user.fName + \" \" + user.lName\n        })\n    }, [userObj.fName, userObj.lName])\n\n    useEffect(() => {\n        if (id !== 'novy-zakaznik') {\n            getUser(id)\n        }\n    }, [id])\n\n    //unmount\n    useEffect(() => {\n        return () => {\n            resetUser()\n            handleChange({\n                target: {\n                    name: 'lenses',\n                    value: {\n                        cylinder: [1001, 1001, 1001, 1001],\n                        cylinderAxes: [1001, 1001, 1001, 1001],\n                        diopters: [1001, 1001, 1001, 1001],\n                        distance: [1001, 1001, 1001, 1001],\n                        addition: [1001, 1001, 1001, 1001],\n                        basis: [1001, 1001, 1001, 1001],\n                        prism: [1001, 1001, 1001, 1001],\n                    },\n                }\n            })\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            {/* <Prompt\n                when={hasChanges}\n                message={\"Chcete opustiť tuto stránku?\"}\n            /> */}\n            <form>\n                <Header>\n                    <FixedContainer>\n                        <h1>Profil</h1>\n                        <div>\n                            {isUpdating && <DeleteProfileButton onClick={() => deleteUser(user._id)} type='button'>Vymazať</DeleteProfileButton>}\n                            {!isUpdating && <SaveButton onClick={(e) => handleSubmit(e, 'profile')}>Vytvoriť a prejsť na profil</SaveButton>}\n                            {!isUpdating && !(formToShow === 1) && <SaveButton onClick={(e) => handleSubmit(e, 'order')}>Vytvoriť a prejsť na objednávku</SaveButton>}\n                            <SaveButton onClick={(e) => handleSubmit(e, 'customers')}>\n                                {isUpdating ? \"Uložiť zmeny\" : \"Vytvoriť\"}\n                            </SaveButton>\n                        </div>\n\n                    </FixedContainer>\n                </Header>\n\n                <ScrollContainer>\n                    {\n                        isUpdating ? (\n                            <UserForm\n                                user={user}\n                                isAdmin={isAdmin}\n                                isUpdating={isUpdating}\n                                isOptometrist={isOptometrist}\n                                handleChange={handleUserChange}\n                                handleParameterChange={handleLensesParameterChange}\n                                handleCompanyChange={handleCompanyAddressChange}\n                                isCustomer={user.admin === 0 ? true : false}\n\n                            />\n                        ) : (\n                            <NewUserForm\n                                isAdmin={isAdmin}\n                                handleParameterChange={handleLensesParameterChange}\n                                formToShow={formToShow}\n                                switchFormButtons={switchFormButtons}\n                                toggleUserForm={toggleUserForm}\n                                user={user}\n                                handleChange={handleUserChange}\n                                handleCompanyChange={handleCompanyAddressChange}\n                                resetUser={resetUser}\n\n                            />\n                        )\n                    }\n\n\n                </ScrollContainer>\n\n            </form>\n        </section>\n    )\n}\n\nexport default CustomerProfile\n","/app/src/sections/blog-posts/blog-posts.section.jsx",["796","797","798","799"],"import React, { useState, useEffect, useContext } from 'react'\nimport { BlogContext } from '../../context/blog/blog.context'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from \"../../components/scroll-container/scroll-container.component\"\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    PostContainer,\n    PostImage,\n    PostContent,\n    Options,\n    UpdateButton,\n    DeleteButton\n} from './blog-posts.styles'\n\nconst BlogPosts = () => {\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n    const { postsCount, handlePostDelete } = useContext(BlogContext)\n    const { push } = useHistory()\n\n    const [posts, setPosts] = useState([])\n\n    const [filterQuery, setFilterQuery] = useState({\n        limit: 10,\n        sortBy: {\n            date: -1\n        },\n        // query: \"\"\n    })\n    const [searchQuery, setSearchQuery] = useState('')\n\n\n\n    const [activeIndex, setActiveIndex] = useState(0)\n    const items = [\n        {\n            id: 0,\n            name: \"Zostupne\"\n        },\n        {\n            id: 1,\n            name: \"Vzostupne\"\n        },\n    ]\n\n    const blogsData = useFetchByQuery('api/blogs/filter', filterQuery)\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n                query: searchQuery\n            })\n            blogsData.refetch()\n        }\n    }\n\n    const handlePostDeleteClick = (postID) => {\n        handlePostDelete(postID)\n        blogsData.refetch()\n    }\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n            })\n            blogsData.refetch()\n        }\n    }, [searchQuery])\n\n    useEffect(() => {\n        if (activeIndex === 0) {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n                // query: \"\"\n            })\n            blogsData.refetch()\n        } else {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: 1\n                },\n                // query: \"\"\n            })\n            blogsData.refetch()\n        }\n    }, [activeIndex])\n\n    useEffect(() => {\n        if (!blogsData.isLoading) {\n            setPosts(blogsData.response?.blogs)\n        }\n    }, [blogsData.isLoading])\n\n    useEffect(() => {\n        return () => {\n            closeModal()\n            setSearchQuery('')\n            setActiveIndex(0)\n            setPosts([])\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n            })\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n\n            <SectionHeader\n                searchQuery={searchQuery}\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleSearch={handleSearch}\n                handleAddButton={() => push('blog/novy-prispevok')}\n                count={postsCount}\n                title=\"Blog\"\n            />\n            <FlexContainer>\n                <FixedContainer>\n\n                    <SectionNavbar\n                        items={items}\n                        activeIndex={activeIndex}\n                        setActiveIndex={setActiveIndex}\n                    />\n\n                </FixedContainer>\n\n            </FlexContainer>\n\n            <ScrollContainer>\n                {posts && posts.length ? posts.map(post => (\n                    <PostContainer key={post._id}>\n                        <PostImage>\n                            {post.image && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${post.image.imagePath}`} alt={post.image.alt} />}\n                        </PostImage>\n                        <PostContent>\n                            <h2>{post.name}</h2>\n                            <p>{post.description}</p>\n                        </PostContent>\n                        <Options>\n                            <UpdateButton onClick={() => push(`blog/${post._id}`)}>Upraviť</UpdateButton>\n                            <DeleteButton onClick={() => handlePostDeleteClick(post._id)}>Vymazať</DeleteButton>\n                        </Options>\n                    </PostContainer>\n                )) : (\n                        <div>\n                            Žiadne príspevky\n                        </div>\n                    )}\n\n                <ListArrows\n                    listItems={posts}\n                />\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default BlogPosts\n","/app/src/sections/product/product.section.jsx",["800","801","802","803","804","805","806","807"],"import React, { useState, useContext, useEffect } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { WarehouseContext } from '../../context/warehouse/warehouse.context'\nimport { ImageContext } from '../../context/image/image.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams, Prompt } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport ModalImage from '../../components/modal-product-image-gallery/modal-product-image-gallery.component'\nimport OldModalImage from '../../components/modal-images/modal-images.component'\nimport GetProductDataModal from '../../components/modal-get-product-data/modal-get-product-data.component'\nimport GetLensesDataModal from '../../components/modal-get-lenses-data/modal-get-lenses-data.component'\nimport Popup from '../../components/popup/pop-up.component'\n\nimport ProductGlassesForm from '../../components/product-glasses-form/product-glasses-form.component'\nimport ProductLensesForm from '../../components/product-lenses-form/product-lenses-form.component'\nimport ProductAccessoriesForm from '../../components/product-accessories-form/product-accessories-form.component'\nimport ProductContactLensesForm from '../../components/product-contact-lenses-form/product-contact-lenses-form.component'\nimport ProductServiceForm from '../../components/product-service-form/product-service-form.component'\n\nimport { productCategories, checkParameter, formatLink } from '../../context/warehouse/warehouse.utils'\nimport { retailNames } from '../../utils/warehouse.utils'\nimport { useFetch } from '../../hooks/useFetch'\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    CategoryContainer,\n    CategoryCheckbox,\n    SubmitButton,\n    IsPublicCheckbox,\n\n} from './product.styles'\n\nconst ProductSection = () => {\n    const { id } = useParams()\n    const { currentUser } = useContext(AuthContext)\n    const { closeModal, message, isLoading, showModal, getMessage, setShowModal } = useContext(LoadingModalContext)\n    const { selectedImage, setSelectedImage } = useContext(ImageContext)\n    const [showImageModal, setImageModal] = useState(false)\n    const [showOldImageModal, setOldImageModal] = useState(false)\n    const [isGetProductDataModalVisible, setIsGetProductDataModalVisible] = useState(false)\n    const [isGetLensesDataModalVisible, setIsGetLensesDataModalVisible] = useState(false)\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const {\n        eanCode,\n        product,\n        lenses,\n        contactLensesParameters,\n        glassesParameters,\n        handleLensesChange,\n        handleLensesParameterChange,\n        createProduct,\n        updateProduct,\n        resetProduct,\n        resetLenses,\n        resetContactLenses,\n        resetGlassesParameters,\n        createLenses,\n        updateLenses,\n        handleProductChange,\n        handleProductAvailableChange,\n        getEanCode,\n        handleAddNewParameter,\n        handleContactLensesParameterChange,\n        handleGlassesParameterChange,\n        handleGlassesParameterSpecsChange,\n        handleGlassesSizeChange,\n        getSingleProduct,\n        getSingleLenses\n    } = useContext(WarehouseContext)\n\n    const [hasChanged, setHasChanged] = useState(false)\n    const [productObj, setProductObj] = useState({})\n\n\n    const { response, isLoading: isLoadingFilters, refetch } = useFetch(`api/store/products/${productObj?.type}/filters`, !productObj?.type, \"GET\")\n    const [filters, setFilters] = useState(null)\n\n    const handleGetProductData = (boolean) => {\n        setIsGetProductDataModalVisible(boolean)\n    }\n\n    const handleGetLensesData = (boolean) => {\n        setIsGetLensesDataModalVisible(boolean)\n    }\n\n    const handleChangeType = e => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        if (!isUpdating) {\n            if (productObj.type === 0) {\n                if (Object.keys(productObj).length > 2) {\n                    const confirm = window.confirm(\"Rozpisane polia budú vymazane\")\n                    if (confirm) {\n                        resetLenses()\n                        setSelectedImage('')\n                    } else {\n                        return\n                    }\n                }\n            } else {\n                if (Object.keys(productObj).length > 2) {\n                    const confirm = window.confirm(\"Rozpisane polia budú vymazane\")\n                    if (confirm) {\n                        resetProduct()\n                        resetContactLenses()\n                        resetGlassesParameters()\n                        setSelectedImage('')\n                    } else {\n                        return\n                    }\n                }\n            }\n        }\n        setProductObj({\n            [name]: value\n        })\n\n    }\n    // console.count(\"PRODUCT OBJ\")\n    // console.log(productObj)\n    // console.count(\"PRODUCT OBJ\")\n\n    const handleChange = (e) => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        if (productObj.type === 0) {\n            handleLensesChange(e)\n        }\n\n        if (productObj.type === 6) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 5) {\n            handleProductChange(e)\n        }\n\n        if (productObj.type === 4) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 3) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 2) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 1) {\n            handleProductChange(e)\n        }\n\n\n\n        if (value === '') {\n            delete productObj[name]\n            return\n        }\n\n        if (isUpdating) {\n            if (name === 'name') {\n                setProductObj({\n                    ...productObj,\n                    [name]: value,\n                    link: formatLink(value)\n                })\n                return\n            }\n        }\n\n        setProductObj({\n            ...productObj,\n            [name]: value\n        })\n    }\n\n    const handleGlassesParametersChange = e => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        handleGlassesParameterChange(e)\n\n        if (value === '') {\n            delete productObj[name]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            [name]: value\n        })\n    }\n\n    const handleSpecsChange = (e) => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        handleGlassesParameterSpecsChange(e)\n\n        if (value === '') {\n            delete productObj.specs[name]\n\n            if (Object.keys(productObj.specs).length === 0) {\n                delete productObj[\"specs\"]\n            }\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            specs: {\n                ...productObj.specs,\n                [name]: value\n            }\n        })\n    }\n\n    const handleGlassesSpecsSizeChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = glassesParameters.specs[name]\n        arr[idx] = value === '' ? 1001 : value\n\n        handleGlassesSizeChange(e, idx)\n\n        if (value === '') {\n            if (productObj.specs[name].length > 1) {\n                arr[idx] = 1001\n\n                const firstIndex = arr[0]\n                const canDeleteSpecs = arr.map(value => {\n                    if (firstIndex !== value) {\n                        return false\n                    } else {\n                        return true\n                    }\n                })\n\n                const verdict = canDeleteSpecs.find(value => value === false)\n\n                if (verdict === false) {\n                    setProductObj({\n                        ...productObj,\n                        specs: {\n                            ...productObj.specs,\n                            [name]: arr\n                        }\n                    })\n                } else {\n                    delete productObj.specs[name]\n                }\n\n            }\n            if (Object.keys(productObj.specs).length === 0) {\n                delete productObj[\"specs\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            specs: {\n                ...productObj.specs,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleAvailableChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = product[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        handleProductAvailableChange(e, idx)\n        setProductObj({\n            ...productObj,\n            [name]: arr\n        })\n    }\n\n    const handleContactLensesChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = contactLensesParameters[name]\n        arr[idx] = value === '' ? 1001 : value\n\n        handleContactLensesParameterChange(e, idx)\n\n        if (value === '') {\n            if (productObj.contactLenses[name].length > 1) {\n                arr.splice(idx, 1)\n                setProductObj({\n                    ...productObj,\n                    contactLenses: {\n                        ...productObj.contactLenses,\n                        [name]: arr\n                    }\n                })\n            } else {\n                delete productObj.contactLenses[name]\n            }\n            if (Object.keys(productObj.contactLenses).length === 0) {\n                delete productObj[\"contactLenses\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            contactLenses: {\n                ...productObj.contactLenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = lenses[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        handleLensesParameterChange(e, idx)\n        setProductObj({\n            ...productObj,\n            [name]: arr\n        })\n    }\n\n    const handleSelectImage = (imgId = '', bonusImages, img) => {\n        setHasChanged(true)\n        setSelectedImage(img)\n        setProductObj({\n            ...productObj,\n            image: imgId,\n            ...(bonusImages) && { bonusImages }\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        let newProductObj = {\n            ...productObj,\n            ...(productObj.type === 0) && { lensType: lenses.lensType },\n            ...(productObj.type === 0) && { dioptric: lenses.dioptric }\n        }\n\n        // console.log(\"PRODUCT OBJECT\")\n        // console.log(lensObj)\n        // console.log(productObj)\n\n\n\n        if (currentUser.admin < 2) {\n            if (newProductObj.available) {\n                newProductObj = {\n                    ...productObj,\n                    available: productObj.available[currentUser.premises]\n                }\n            }\n        } else {\n            if (newProductObj.available) {\n                newProductObj = {\n                    ...productObj,\n                    available: newProductObj.available ? newProductObj.available.map(value => value === 1001 ? 0 : value) : [0, 0, 0, 0, 0, 0]\n                }\n            }\n        }\n\n        if (isUpdating) {\n            if (newProductObj.type === 0) {\n                setHasChanged(false)\n                delete newProductObj['link']\n                delete newProductObj['type']\n                const updatedObj = {\n                    ...newProductObj,\n                    // type: newProductObj.lensType,\n                    eanCode: lenses.eanCode\n                }\n                // delete updatedObj['lensType']\n                updateLenses(updatedObj, id)\n                return\n            } else if (newProductObj.type === 3) {\n                setHasChanged(false)\n                delete newProductObj['type']\n                updateProduct({ ...newProductObj, contactLenses: {} })\n                return\n            } else {\n                setHasChanged(false)\n                delete newProductObj['type']\n\n                const obj = {\n                    ...newProductObj,\n                    ...(newProductObj.bonusImages) && { bonusImages: newProductObj.bonusImages.map(img => img._id) }\n                }\n\n                updateProduct(obj)\n                return\n            }\n        } else {\n            if (productObj.type === 0) {\n                setHasChanged(false)\n                delete newProductObj['type']\n                // const updatedObg = {\n                //     ...newProductObj,\n                //     type: newProductObj.lensType\n                // }\n                // delete updatedObg['lensType']\n\n                createLenses(newProductObj)\n            }\n            if (newProductObj.type === 6 || newProductObj.type === 5 || newProductObj.type === 4 || newProductObj.type === 3 || newProductObj.type === 2 || newProductObj.type === 1) {\n                if (!newProductObj.name || !newProductObj.price) {\n                    setShowModal(true)\n                    getMessage(\"Povinné údaje sú prázdne\")\n                    return\n                } else {\n                    setHasChanged(false)\n                    delete newProductObj['_id']\n\n                    const obj = {\n                        ...newProductObj,\n                        ...(newProductObj.bonusImages) && { bonusImages: newProductObj.bonusImages.map(img => img._id) }\n                    }\n\n\n                    createProduct(obj)\n                }\n            }\n        }\n\n\n    }\n\n    const [lensObj, setLensObj] = useState(null)\n\n    const fillProductData = (productData) => {\n\n        setLensObj({\n            ...productObj,\n            ...productData\n        })\n\n        setProductObj({\n            ...productObj,\n            ...productData\n        })\n    }\n\n    useEffect(() => {\n        if (!productObj?.type) return\n        setFilters(null)\n        refetch()\n    }, [productObj?.type])\n\n    useEffect(() => {\n        if (productObj.type === 0) {\n            if (productObj.lensType) return\n            handleChange({\n                target: {\n                    name: \"lensType\",\n                    value: lenses?.lensType\n                }\n            })\n        }\n    }, [lenses.lensType])\n\n    useEffect(() => {\n        if (isLoadingFilters) return\n        if (response?.filters) {\n            setFilters(response?.filters)\n        }\n    }, [isLoadingFilters])\n\n    useEffect(() => {\n        if (id === \"novy-produkt\") {\n            if (!eanCode) {\n                getEanCode()\n            } else {\n                if (productObj.type !== undefined && !productObj.eanCode) {\n                    handleChange({\n                        target: {\n                            name: \"eanCode\",\n                            value: eanCode\n                        }\n                    })\n                }\n            }\n        }\n    }, [id, eanCode, productObj.type, productObj.eanCode, product.type])\n\n    useEffect(() => {\n        if (id !== 'novy-produkt') {\n            getSingleProduct(id, (data) => {\n                handleSelectImage(data?.product?.image?._id, data.product.bonusImages, data.product.image)\n                setProductObj(prevValue => ({\n                    ...prevValue,\n                    type: data.product.type,\n                }))\n            })\n            setIsUpdating(true)\n            if (!productObj.type) {\n                handleChangeType({\n                    target: {\n                        name: \"type\",\n                        value: product.type\n                    }\n                })\n\n            }\n        }\n    }, [id,])\n\n    useEffect(() => {\n        // if (product.image) {\n        //     setSelectedImage(product.image)\n        // }\n        if (lenses.image) {\n            setSelectedImage(lenses.image)\n        }\n    }, [lenses.image])\n\n    useEffect(() => {\n        return () => {\n            resetProduct()\n            resetLenses()\n            resetContactLenses()\n            resetGlassesParameters()\n            setProductObj({})\n            setSelectedImage(null)\n            setIsUpdating(false)\n        }\n    }, [])\n\n    return (\n        <section>\n            <Prompt\n                when={hasChanged}\n                message=\"Chcete opustiť formulár?\"\n            />\n\n            {isGetLensesDataModalVisible && <GetLensesDataModal close={() => handleGetLensesData(false)} getSingleProduct={getSingleProduct} productObj={productObj} setProductObj={setProductObj} getSingleLenses={getSingleLenses} fillProductData={fillProductData} />}\n            {isGetProductDataModalVisible && <GetProductDataModal close={() => setIsGetProductDataModalVisible(false)} getSingleProduct={getSingleProduct} productObj={productObj} setProductObj={setProductObj} />}\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            {showImageModal && <ModalImage close={() => setImageModal(false)} setImage={handleSelectImage} />}\n            {showOldImageModal && <OldModalImage close={() => setOldImageModal(false)} setImage={handleSelectImage} />}\n            <Header>\n                <FixedContainer>\n\n                    <div>\n                        <h1>{isUpdating ? \"Upraviť produkt\" : \"Nový produkt\"}</h1>\n                    </div>\n                    <div>\n                        <IsPublicCheckbox\n                            label=\"Verejné\"\n                            // value={product.ehop}\n                            name='eshop'\n                            isActive={product.eshop}\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"eshop\",\n                                    value: !product.eshop\n                                }\n                            })}\n                        />\n                        <SubmitButton onClick={handleSubmit}>{isUpdating ? \"Upraviť\" : \"Vytvoriť\"}</SubmitButton>\n                    </div>\n                </FixedContainer>\n            </Header>\n\n            <ScrollContainer>\n                {!isUpdating && <CategoryContainer>\n                    <h3>Aký produkt chcete pridať?</h3>\n                    {productCategories.map((category, idx) => (\n                        <CategoryCheckbox\n                            key={idx}\n                            label={category.name}\n                            value={category.value}\n                            name='type'\n                            isActive={category.value === productObj.type}\n                            handleClick={() => handleChangeType({\n                                target: {\n                                    name: \"type\",\n                                    value: category.value\n                                }\n                            })}\n                        />\n                    ))}\n                </CategoryContainer>}\n\n                {productObj.type === 0 && (\n                    <ProductLensesForm\n                        lenses={lenses}\n                        selectedImage={selectedImage}\n                        setImageModal={setOldImageModal}\n                        handleChange={handleChange}\n                        handleParameterChange={handleParameterChange}\n                        checkParameter={checkParameter}\n                        filters={filters}\n                        handleGetProductData={handleGetLensesData}\n                    />\n                )}\n\n                {productObj.type === 6 && (\n                    <ProductServiceForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        handleChange={handleChange}\n                        selectedImage={selectedImage}\n                        setImageModal={setImageModal}\n                        filters={filters}\n                    />\n                )}\n\n                {productObj.type === 5 && (\n                    <ProductAccessoriesForm\n                        product={product}\n                        productObj={productObj}\n                        isUpdating={isUpdating}\n                        currentUser={currentUser}\n                        retailNames={retailNames}\n                        selectedImage={selectedImage}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleAvailableChange={handleAvailableChange}\n                        filters={filters}\n                    />\n                )}\n\n                {productObj.type === 3 && (\n                    <ProductContactLensesForm\n                        product={product}\n                        productObj={productObj}\n\n                        isUpdating={isUpdating}\n                        retailNames={retailNames}\n                        currentUser={currentUser}\n                        selectedImage={selectedImage}\n                        contactLensesParameters={contactLensesParameters}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleAddNewParameter={handleAddNewParameter}\n                        handleAvailableChange={handleAvailableChange}\n                        handleContactLensesChange={handleContactLensesChange}\n                        filters={filters}\n                        handleGetProductData={handleGetProductData}\n                    />\n                )}\n\n                {(productObj.type === 1 || productObj.type === 2 || productObj.type === 4) && (\n                    <ProductGlassesForm\n                        product={product}\n                        productObj={productObj}\n                        isUpdating={isUpdating}\n                        retailNames={retailNames}\n                        currentUser={currentUser}\n                        selectedImage={selectedImage}\n                        glassesParameters={glassesParameters}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleSpecsChange={handleSpecsChange}\n                        handleAvailableChange={handleAvailableChange}\n                        handleGlassesSpecsSizeChange={handleGlassesSpecsSizeChange}\n                        handleGlassesParametersChange={handleGlassesParametersChange}\n                        filters={filters}\n                        handleGetProductData={handleGetProductData}\n                    />\n                )}\n\n            </ScrollContainer>\n\n        </section >\n    )\n}\n\nexport default ProductSection\n","/app/src/sections/booking/booking.section.jsx",["808","809"],"import React, { useState, useEffect, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../../context/auth/auth.context'\n\n// import SectionHeader from '../../components/section-header/section-header.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport BookingCalendarOverview from \"../../components/booking-calendar-overview/booking-calendar-overview.component\"\nimport WeekCalendarProvider from '../../context/week-calendar/week-calendar.context'\n\nimport Calendar from '../../components/calendar/calendar.component'\nimport WeekDays from '../../components/calendar-weekdays/calendar-weekdays.component'\n// import BookingAppoinments from '../../components/booking-appoinments/booking-appoinment.component'\nimport BookingCalendarBookings from '../../components/booking-calendar-bookings/booking-calendar-bookings.component'\n\nimport { useFetch } from '../../hooks/useFetch'\nimport { calendarFormat, months } from '../../utils/calendar.utils'\n\nimport {\n    AiOutlineLeft,\n    AiOutlineRight,\n    AiOutlineDownCircle,\n    AiOutlineUpCircle\n} from 'react-icons/ai'\n\nimport {\n    FixedContainer,\n} from '../../global.styles'\n\nimport {\n    Header,\n    Title,\n    GridRow,\n    CalendarGridContainer,\n    CalendarHeading,\n    CalendarHeader,\n    CalendarFormat,\n    CalendarMonthContainer,\n    IconContainer,\n    UpdateButton\n} from './booking.styles'\n\nconst BookingSection = () => {\n    const { isAdmin, currentUser, isOptometrist } = useContext(AuthContext)\n    const { showModal, setShowModal, message, closeModal } = useContext(LoadingModalContext)\n    const { push } = useHistory()\n    // const [showModal, setShowModal] = useState(true)\n    const [showPremisesSection, setShowPremisesSection] = useState(true)\n    const [activeCalendarFormat, setActiveCalendarFormat] = useState(1)\n    const [calendars, setCalendars] = useState([])\n    const [selectedCalendar, setSelectedCalendar] = useState(null)\n    const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth())\n    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear())\n    const [calendarWeekIndex, setCalendarWeekIndex] = useState(0)\n    const [selectedDay, setSelectedDay] = useState(null)\n\n    const [showUserBooking, setShowUserBooking] = useState(false)\n\n\n    const handleOpenUserBookingModal = (dayData) => {\n        if (dayData !== null) {\n            setSelectedDay({\n                ...dayData,\n            })\n        }\n        setShowUserBooking(true)\n    }\n\n    const { isLoading, response } = useFetch('api/booking/calendars')\n\n    const handleShowCalendarClick = (calendarId) => {\n        if (!calendarId) return\n        setSelectedCalendar(calendarId)\n        setShowPremisesSection(false)\n        resetCalendarToDefault()\n    }\n\n    const getPrevWeek = () => {\n        if (calendarWeekIndex - 1 < 0) {\n            if (selectedMonth === 0) {\n                setSelectedYear(prevValue => prevValue - 1)\n                setSelectedMonth(11)\n                setCalendarWeekIndex(Math.ceil(new Date(selectedYear, selectedMonth, 0).getDate() / 7) - 1)\n\n            } else {\n                setSelectedMonth(prevValue => prevValue - 1)\n                setCalendarWeekIndex(Math.ceil(new Date(selectedYear, selectedMonth, 0).getDate() / 7) - 1)\n                // setCalendarWeekIndex(Math.ceil(new Date().getDate() / 7))\n\n            }\n        } else {\n            setCalendarWeekIndex(prevValue => prevValue - 1)\n        }\n    }\n\n    const getNextWeek = () => {\n        const lastDayIndex = new Date(selectedYear, selectedMonth, 0).getDate()\n\n        if (((calendarWeekIndex) * 7) >= lastDayIndex - 7) {\n            setCalendarWeekIndex(0)\n            setSelectedMonth(prevValue => prevValue + 1)\n\n            if (selectedMonth === 11) {\n                setSelectedYear(prevValue => prevValue + 1)\n                setSelectedMonth(0)\n                setCalendarWeekIndex(0)\n\n            }\n        } else {\n            setCalendarWeekIndex(prevValue => prevValue + 1)\n        }\n    }\n\n    const getPrevMonth = () => {\n        if (selectedMonth === 0) {\n            setSelectedYear(prevValue => prevValue - 1)\n            setSelectedMonth(11)\n        } else {\n            setSelectedMonth(prevValue => prevValue - 1)\n        }\n    }\n\n    const getNextMonth = () => {\n        if (selectedMonth === 11) {\n            setSelectedYear(prevValue => prevValue + 1)\n            setSelectedMonth(0)\n        } else {\n            setSelectedMonth(prevValue => prevValue + 1)\n        }\n\n    }\n\n    const resetCalendarToDefault = () => {\n        setSelectedMonth(new Date().getMonth())\n        setSelectedYear(new Date().getFullYear())\n        if(new Date(selectedYear, selectedMonth, 0).getDay() === 1) {\n            setCalendarWeekIndex(Math.ceil(new Date().getDate() / 7) - 1)\n        } else {\n            setCalendarWeekIndex(Math.ceil(new Date().getDate() / 7))\n        }\n        // setSelectedDay(null)\n    }\n\n    const handleCalendarBlockClick = (dayData) => {\n        // if (!dayData.bookings) return\n        // if (!dayData.bookingDate) return\n\n        // setSelectedCalendar(null)\n        // setSelectedDay(dayData)\n        setCalendarWeekIndex(Math.ceil(dayData.dayNumber / 7) - 1)\n        setActiveCalendarFormat(1)\n    }\n\n    // useEffect(() => {\n    //     // if(!dayData.dayNumber) return\n    //     // if()\n    //     console.log(Math.ceil(new Date(selectedYear, selectedMonth + 1, 0).getDate()  / 7))\n    //     console.log(new Date(selectedYear, selectedMonth + 1, 0).getDate())\n\n    //     setCalendarWeekIndex(Math.ceil(new Date().getDate() / 7))\n    // }, [])\n\n    useEffect(() => {\n        if (!isLoading) {\n            if (response) {\n                if (isAdmin) {\n                    setCalendars(response.calendars)\n                    const userCalendar = response.calendars.find(calendar => calendar.premises === currentUser.premises)\n                    handleShowCalendarClick(userCalendar?._id)\n                    setShowModal(false)\n                } else {\n                    setCalendars(response.calendars.filter(calendar => calendar.premises === currentUser.premises))\n                    const userCalendar = response.calendars.find(calendar => calendar.premises === currentUser.premises)\n                    handleShowCalendarClick(userCalendar?._id)\n                    setShowModal(false)\n                }\n                closeModal()\n            }\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        return () => {\n            setShowModal(true)\n            setShowPremisesSection(true)\n            setActiveCalendarFormat(0)\n            setCalendars([])\n            setSelectedCalendar(null)\n            setSelectedMonth(new Date().getMonth())\n            setSelectedYear(new Date().getFullYear())\n            setCalendarWeekIndex(0)\n            setSelectedDay(null)\n            closeModal()\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={() => setShowModal(false)} />}\n\n            {isAdmin && <Header>\n                <FixedContainer>\n                    <div>\n                        <h1>Rezervácie</h1>\n                    </div>\n                    <div>\n                        <UpdateButton onClick={() => handleOpenUserBookingModal(null)}>Pridať rezerváciu</UpdateButton>\n                        <UpdateButton onClick={() => push('rezervacie/novy-kalendar')}>Pridať kalendár</UpdateButton>\n                    </div>\n\n                </FixedContainer>\n            </Header>}\n\n            {(!isOptometrist && !isAdmin) && (\n                <Header>\n                    <FixedContainer>\n                        <div>\n                            <h1>Rezervácie</h1>\n                        </div>\n                        {selectedCalendar ? <div>\n                            <UpdateButton onClick={() => handleOpenUserBookingModal(null)}>Pridať rezerváciu</UpdateButton>\n                        </div> : (\n                                <div>\n                                    <p>K vašemu účtu nieje priradená prevádzka</p>\n                                </div>\n                            )}\n\n                    </FixedContainer>\n                </Header>\n            )}\n\n            {(isOptometrist && !isAdmin) && (\n                <Header>\n                    <FixedContainer>\n                        <div>\n                            <h1>Rezervácie</h1>\n                        </div>\n                        {selectedCalendar ? <div>\n                            <UpdateButton onClick={() => handleOpenUserBookingModal(null)}>Pridať rezerváciu</UpdateButton>\n                            <UpdateButton onClick={() => push(`rezervacie/${selectedCalendar}`)}>Upraviť kalendár</UpdateButton>\n                        </div> : (\n                                <div>\n                                    <p>K vašemu účtu nieje priradená prevádzka</p>\n                                </div>\n                            )}\n\n                    </FixedContainer>\n                </Header>\n            )}\n\n            <ScrollContainer>\n                {isAdmin && <CalendarHeading>\n                    <Title>Pobočky</Title>\n                    <div onClick={() => setShowPremisesSection(prevValue => !prevValue)}>\n                        <p>\n                            {calendars.find(calendar => calendar._id === selectedCalendar)?.name}\n                        </p>\n                        <IconContainer>\n                            {showPremisesSection ? <AiOutlineUpCircle /> : <AiOutlineDownCircle />}\n                        </IconContainer>\n                    </div>\n                </CalendarHeading>}\n\n                {showPremisesSection && <GridRow>\n                    {calendars && calendars.map((calendar, idx) => (\n                        <BookingCalendarOverview\n                            key={idx}\n                            calendar={calendar}\n                            selectedCalendar={selectedCalendar}\n                            handleShowUpClick={() => handleShowCalendarClick(calendar._id)}\n                            handleUpdateClick={() => push(`rezervacie/${calendar._id}`)}\n                        />\n                    ))}\n                </GridRow>}\n\n                {selectedCalendar && (\n                    <React.Fragment>\n\n                        <CalendarHeader>\n                            <Title>Kalendár</Title>\n\n                            {activeCalendarFormat === 0 ? (\n                                <CalendarMonthContainer>\n                                    <button onClick={getPrevMonth}><AiOutlineLeft /></button>\n                                    <p>{months[selectedMonth]}</p>\n                                    <button onClick={getNextMonth}><AiOutlineRight /></button>\n                                </CalendarMonthContainer>\n                            ) : (\n                                    <CalendarMonthContainer>\n                                        <button onClick={getPrevWeek}><AiOutlineLeft /></button>\n                                        <div>\n                                            <p>{calendarWeekIndex + 1}</p>\n                                            <p>{months[selectedMonth]}</p>\n                                        </div>\n                                        <button onClick={getNextWeek}><AiOutlineRight /></button>\n                                    </CalendarMonthContainer>\n                                )}\n\n                            <ul>\n                                {calendarFormat.map((name, idx) => (\n                                    <CalendarFormat key={idx} isActive={activeCalendarFormat === idx} onClick={() => setActiveCalendarFormat(idx)}>{name}</CalendarFormat>\n                                ))}\n                            </ul>\n                        </CalendarHeader>\n                        <CalendarGridContainer>\n                            {activeCalendarFormat === 0 ? (\n                                <Calendar\n                                    calendar={selectedCalendar}\n                                    month={selectedMonth}\n                                    year={selectedYear}\n                                    handleCalendarBlockClick={handleCalendarBlockClick}\n                                />\n                            ) : (\n                                    <WeekCalendarProvider\n                                        calendar={selectedCalendar}\n                                        month={selectedMonth}\n                                        year={selectedYear}\n                                        weekIndex={calendarWeekIndex}\n                                        handleCalendarBlockClick={handleCalendarBlockClick}\n                                    >\n                                        <WeekDays\n                                            calendar={selectedCalendar}\n                                            month={selectedMonth}\n                                            year={selectedYear}\n                                            weekIndex={calendarWeekIndex}\n                                            handleCalendarBlockClick={handleCalendarBlockClick}\n                                            showUserBooking={showUserBooking}\n                                            setShowUserBooking={setShowUserBooking}\n                                            handleOpenUserBookingModal={handleOpenUserBookingModal}\n                                            selectedDay={selectedDay}\n                                            getNextWeek={getNextWeek}\n                                        />\n\n                                    </WeekCalendarProvider>\n                                )}\n                        </CalendarGridContainer>\n\n                        <BookingCalendarBookings calendarId={selectedCalendar} />\n                    </React.Fragment>\n                )}\n\n                {/* {selectedDay && (\n                    <BookingAppoinments\n                        day={selectedDay}\n                    />\n                )} */}\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default BookingSection\n","/app/src/sections/post/post.section.jsx",["810","811","812"],"import React, { useState, useContext, useEffect } from 'react'\nimport { BlogContext } from '../../context/blog/blog.context'\nimport { ImageContext } from '../../context/image/image.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams, useHistory } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport CustomInput from '../../components/custom-input/custom-input.component'\nimport CustomTextarea from '../../components/custom-textarea/custom-textarea.component'\nimport CustomCheckbox from '../../components/custom-checkbox/custom-checkbox.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport ModalImage from '../../components/modal-images/modal-images.component'\nimport { Quill } from 'react-quill'\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\n\nimport {\n    Header,\n    GridContainer,\n    PostImage,\n    DeleteButton,\n    AddButton,\n    Title,\n    ContentTextare,\n    Container,\n} from './post.styles'\n\nconst PostSection = () => {\n    const { id } = useParams()\n    const { push } = useHistory()\n    const {\n        createPost,\n        isLoading,\n        message,\n        showLoading,\n        setIsLoading,\n        getPost,\n        post,\n        handlePostUpdate,\n        resetBlog\n    } = useContext(BlogContext)\n    const { closeModal } = useContext(LoadingModalContext)\n    const { selectedImage, setSelectedImage } = useContext(ImageContext)\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [content, setContent] = useState('')\n    const [image, setImage] = useState('')\n    const [draft, toggleDraft] = useState(false)\n    const [showImageModal, setImageModal] = useState(false)\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        if (image.length <= 0) return\n        if (content.length <= 0) return\n\n        if (id === 'novy-prispevok') {\n            createPost(image, title, description, draft, content)\n        } else {\n            handlePostUpdate(title, description, draft, content, image, id)\n        }\n\n        push('/dashboard/blog')\n\n    }\n\n    useEffect(() => {\n        setSelectedImage(null)\n\n        if (id !== 'novy-prispevok') {\n            getPost(id)\n            setIsUpdating(true)\n        }\n    }, [id])\n\n    useEffect(() => {\n        if (id !== 'novy-prispevok') {\n            if (post) {\n                setTitle(post.name)\n                setDescription(post.description)\n                setContent(post.html)\n                toggleDraft(post.draft)\n                if (post.image) {\n                    setImage(post.image._id)\n                    setSelectedImage(post.image)\n                }\n            }\n        }\n    }, [post])\n\n    useEffect(() => {\n        return () => {\n            closeModal()\n            resetBlog()\n            setTitle('')\n            setDescription('')\n            setContent('')\n            setImage('')\n            toggleDraft(false)\n            setImageModal(false)\n            setIsUpdating(false)\n        }\n    }, [])\n\n    return (\n        <form onSubmit={handleSubmit}>\n            {isLoading && <Popup loading={showLoading} title={message} close={() => setIsLoading(false)} />}\n            {showImageModal && <ModalImage close={() => setImageModal(false)} setImage={setImage} />}\n\n            <Header>\n                <FixedContainer>\n                    <div>\n                        <h1>Post</h1>\n                    </div>\n                    <div>\n                        <CustomCheckbox\n                            label='Draft'\n                            isActive={draft}\n                            handleClick={() => toggleDraft(prevValue => !prevValue)}\n                        />\n                        <DeleteButton>Vymazať</DeleteButton>\n                        <AddButton type='submit'>{isUpdating ? \"Upraviť príspevok\" : \"Pridať príspevok\"}</AddButton>\n                    </div>\n\n                </FixedContainer>\n            </Header>\n\n            <ScrollContainer>\n\n                <GridContainer>\n                    <Container>\n                        <h2>Informácia</h2>\n                        <CustomInput\n                            label=\"Nadpis\"\n                            type='text'\n                            name='title'\n                            value={title}\n                            handleChange={(e) => setTitle(e.target.value)}\n                            required\n                        />\n                        <CustomTextarea\n                            label=\"Popis\"\n                            name='description'\n                            rows='5'\n                            value={description}\n                            handleChange={(e) => setDescription(e.target.value)}\n                            required\n                        />\n                        <h2>Titulná fotka</h2>\n                        <PostImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                            {!selectedImage && \"Vybrať obrázok\"}\n                            {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                        </PostImage>\n                    </Container>\n                    <Container>\n                        <Title>Obsah</Title>\n                        <QuillToolbar />\n                        <ContentTextare\n                            value={content}\n                            onChange={setContent}\n                            modules={modules}\n                            formats={formats}\n                        />\n                    </Container>\n\n                </GridContainer>\n\n            </ScrollContainer>\n        </form>\n    )\n}\n\n\nconst CustomUndo = () => (\n    <svg viewBox=\"0 0 18 18\">\n        <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n        <path\n            className=\"ql-stroke\"\n            d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n        />\n    </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n    <svg viewBox=\"0 0 18 18\">\n        <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n        <path\n            className=\"ql-stroke\"\n            d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n        />\n    </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange() {\n    this.quill.history.undo();\n}\nfunction redoChange() {\n    this.quill.history.redo();\n}\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n    \"arial\",\n    \"comic-sans\",\n    \"courier-new\",\n    \"georgia\",\n    \"helvetica\",\n    \"lucida\"\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\nconst modules = {\n    toolbar: {\n        container: \"#toolbar\",\n        handlers: {\n            undo: undoChange,\n            redo: redoChange\n        }\n    },\n    history: {\n        delay: 500,\n        maxStack: 100,\n        userOnly: true\n    }\n};\n\n// Formats objects for setting up the Quill editor\nconst formats = [\n    \"header\",\n    \"font\",\n    \"size\",\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"align\",\n    \"strike\",\n    \"script\",\n    \"blockquote\",\n    \"background\",\n    \"list\",\n    \"bullet\",\n    \"indent\",\n    \"link\",\n    \"image\",\n    \"color\",\n    \"code-block\"\n];\n\n// Quill Toolbar component\nconst QuillToolbar = () => (\n    <div id=\"toolbar\" className=\"toolbar\">\n        <span className=\"ql-formats\">\n            <select className=\"ql-size\" defaultValue=\"medium\">\n                <option value=\"extra-small\">Size 1</option>\n                <option value=\"small\">Size 2</option>\n                <option value=\"medium\">Size 3</option>\n                <option value=\"large\">Size 4</option>\n            </select>\n            <select className=\"ql-header\" defaultValue=\"3\">\n                <option value=\"1\">Heading</option>\n                <option value=\"2\">Subheading</option>\n                <option value=\"3\">Normal</option>\n            </select>\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-bold\" />\n            <button className=\"ql-italic\" />\n            <button className=\"ql-underline\" />\n            <button className=\"ql-strike\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-list\" value=\"ordered\" />\n            <button className=\"ql-list\" value=\"bullet\" />\n            <button className=\"ql-indent\" value=\"-1\" />\n            <button className=\"ql-indent\" value=\"+1\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-script\" value=\"super\" />\n            <button className=\"ql-script\" value=\"sub\" />\n            <button className=\"ql-blockquote\" />\n            <button className=\"ql-direction\" />\n        </span>\n        <span className=\"ql-formats\">\n            <select className=\"ql-align\" />\n            <select className=\"ql-color\" />\n            <select className=\"ql-background\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-link\" />\n            <button className=\"ql-image\" />\n            <button className=\"ql-video\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-formula\" />\n            <button className=\"ql-code-block\" />\n            <button className=\"ql-clean\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-undo\">\n                <CustomUndo />\n            </button>\n            <button className=\"ql-redo\">\n                <CustomRedo />\n            </button>\n        </span>\n    </div>\n);\n\n\nexport default PostSection\n","/app/src/sections/calendar/calendar.section.jsx",["813","814","815"],"import React, { useState, useContext, useEffect } from 'react'\nimport { BookingContext } from '../../context/booking/booking.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { useParams } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport CustomRetailSelect from '../../components/custom-select/custom-select.component'\nimport CustomInput from '../../components/custom-input/custom-input.component'\nimport Popup from '../../components/popup/pop-up.component'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport { retailNames } from '../../utils/warehouse.utils'\nimport {\n    dayNames,\n    calendarTimes,\n    formatCalendarObj,\n    formatExceptDays,\n    formatExceptDaysToObj\n} from '../../utils/calendar.utils'\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    CreateCalendarButton,\n    Container,\n    GridContainer,\n    ContainerRow,\n    TableHead,\n    TableCol,\n    TableRow,\n    AddDayButton,\n    DeleteCalendarButton\n} from './calendar.styles'\n\nconst CalendarSection = () => {\n    const {\n        closeModal,\n        getMessage,\n        setShowModal,\n        isLoading,\n        message,\n        showModal,\n    } = useContext(LoadingModalContext)\n    const { isAdmin } = useContext(AuthContext)\n    const { createCalendar, updateCalendar, deleteCalendar } = useContext(BookingContext)\n    const { calendarId } = useParams()\n    const { response, isLoading: isFetching } = useFetchById(\"api/booking/calendars\", calendarId, calendarId === 'novy-kalendar')\n    const [calendar, setCalendar] = useState({})\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const handleCalendarValueChange = (e) => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete calendar[name]\n            setCalendar({\n                ...calendar\n            })\n            return\n        }\n\n        setCalendar(prevValue => ({\n            ...prevValue,\n            [name]: value\n        }))\n    }\n\n    const handleCalendarTimeChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = calendar[name] ? calendar[name] : ['X', 'X', 'X', 'X', 'X', 'X', 'X']\n        arr[idx] = value\n\n        setCalendar(prevValue => ({\n            ...prevValue,\n            [name]: arr\n        }))\n    }\n\n    const handleCalendarExceptDaysChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = calendar[name]\n        arr[idx] = value\n\n        setCalendar(prevValue => ({\n            ...prevValue,\n            [name]: arr\n        }))\n    }\n\n    const handleAddNewDay = () => {\n        setCalendar(prevValue => ({\n            ...prevValue,\n            exceptDays: prevValue.exceptDays ? [...prevValue.exceptDays, \"\"] : [\"\"]\n        }))\n    }\n\n    const handleSubmit = () => {\n        if (!calendar.name) {\n            getMessage(\"Meno Kalendára je povinné\")\n            setShowModal(true)\n            return\n        }\n        if (!calendar.premises) {\n            getMessage(\"Nie je zvolená prevádzka ku ktorej patrí kalendár\")\n            setShowModal(true)\n            return\n        }\n        if (!calendar.endTimes && !calendar.startTimes) {\n            getMessage(\"Nie sú vyplnené časy na prehliadky\")\n            setShowModal(true)\n            return\n        }\n        if (!calendar.interval) {\n            getMessage(\"Nie je zvolený interval\")\n            setShowModal(true)\n            return\n        }\n\n        if (isUpdating) {\n            const calendarToUpdate = formatCalendarObj(calendar)\n\n            updateCalendar(calendarToUpdate, calendar._id)\n        } else {\n            let calendarToCreate = {}\n            if (calendar.exceptDays) {\n                calendarToCreate = {\n                    ...calendar,\n                    exceptDays: formatExceptDaysToObj(calendar.exceptDays)\n                }\n            } else {\n                calendarToCreate = { ...calendar }\n            }\n\n\n            createCalendar(calendarToCreate)\n        }\n    }\n\n    useEffect(() => {\n        if (isFetching) return\n        if (response.calendar) {\n            setIsUpdating(true)\n            if (response.calendar.exceptDays) {\n                const exceptDaysArr = formatExceptDays(response.calendar.exceptDays)\n\n                setCalendar({\n                    ...response.calendar,\n                    exceptDays: exceptDaysArr\n                })\n                closeModal()\n            } else {\n                setCalendar(response.calendar)\n                closeModal()\n            }\n        }\n    }, [isFetching])\n\n    useEffect(() => {\n        return () => {\n            setIsUpdating(false)\n            setCalendar({})\n        }\n    }, [])\n\n    return (\n        <section>\n            {(showModal) && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <Header>\n                <FixedContainer>\n                    <div>\n                        {isUpdating ? (\n                            <h1>Kalendár: {calendar?.name}</h1>\n                        ) : (\n                            <h1>Nový kalendár</h1>\n                        )}\n                    </div>\n                    <div>\n                        {/* {isUpdating && <DeleteCalendarButton onClick={() => deleteCalendar(calendar?._id)}>Vymazať</DeleteCalendarButton>} */}\n                        <CreateCalendarButton onClick={handleSubmit}>{isUpdating ? \"Upraviť\" : \"Vytvoriť\"}</CreateCalendarButton>\n                    </div>\n\n                </FixedContainer>\n            </Header>\n            <ScrollContainer>\n                <GridContainer>\n                    <div>\n                        {isAdmin && <Container>\n                            <h3>Základné informácie</h3>\n                            <div>\n                                <h4>Kalendár je pre prevádzku</h4>\n                                <CustomRetailSelect\n                                    name='premises'\n                                    value={calendar?.premises || \"0\"}\n                                    listItems={retailNames}\n                                    defaultOption\n                                    defaultValue={0}\n                                    defaultLabel=\"Nezadané\"\n                                    handleChange={handleCalendarValueChange}\n                                />\n                            </div>\n                            <div>\n                                <h4>Meno kalendára</h4>\n                                <CustomInput\n                                    type=\"text\"\n                                    label='Meno*'\n                                    name=\"name\"\n                                    value={calendar?.name || \"\"}\n                                    handleChange={handleCalendarValueChange}\n                                />\n                            </div>\n                        </Container>}\n                        <Container>\n                            <h3>Dovolenka</h3>\n                            {calendar?.exceptDays && calendar?.exceptDays?.map((value, idx) => (\n                                <div key={idx}>\n                                    <CustomInput\n                                        type=\"date\"\n                                        // label='Dátum'\n                                        name=\"exceptDays\"\n                                        value={value || \"\"}\n                                        handleChange={(e) => handleCalendarExceptDaysChange(e, idx)}\n                                    />\n                                </div>\n                            ))}\n                            <AddDayButton onClick={handleAddNewDay}>Pridať</AddDayButton>\n                        </Container>\n                    </div>\n\n                    <Container>\n                        <h3>Nastavenie kalendára</h3>\n\n                        <div>\n                            <h4>Interval medzi prehliadkami</h4>\n                            <select\n                                name='interval'\n                                value={calendar?.interval || \"\"}\n                                onChange={handleCalendarValueChange}\n                            >\n                                <option value={\"\"}>Nezadané</option>\n                                <option value={30}>30min</option>\n                                <option value={60}>60min</option>\n                            </select>\n                        </div>\n                        <div>\n                            <h4>Čas pred objednaním</h4>\n                            <CustomInput\n                                type=\"text\"\n                                label='Počet minút'\n                                name=\"allowMinutesBefore\"\n                                value={calendar?.allowMinutesBefore?.toString() || \"\"}\n                                handleChange={handleCalendarValueChange}\n                            />\n                        </div>\n                        <div>\n                            <h4>Koľko dní dopredu sa dá objednať</h4>\n                            <CustomInput\n                                type=\"text\"\n                                label='Počet dní'\n                                name=\"daysIntoFuture\"\n                                value={calendar?.daysIntoFuture?.toString() || \"\"}\n                                handleChange={handleCalendarValueChange}\n                            />\n                        </div>\n                    </Container>\n\n                    <ContainerRow>\n                        <h3>Ordinačné hodiny</h3>\n                        <TableHead>\n                            <TableCol isFirst>\n                                Čas \\ Deň\n                            </TableCol>\n                            {dayNames.map((name, idx) => (\n                                <TableCol key={idx}>\n                                    {name}\n                                </TableCol>\n                            ))}\n                        </TableHead>\n                        <TableRow>\n                            <TableCol isFirst>\n                                Začiatok\n                            </TableCol>\n                            {[...Array(7)].map((value, idx) => (\n                                <TableCol key={idx}>\n                                    <select name='startTimes' value={calendar?.startTimes ? calendar?.startTimes[idx] : \"x\"} onChange={(e) => handleCalendarTimeChange(e, idx)}>\n                                        <option value={\"X\"}>Žiadny</option>\n                                        {calendarTimes.map(({ name, value }, idx) => (\n                                            <option key={idx} value={value}>{name}</option>\n                                        ))}\n                                    </select>\n                                </TableCol>\n                            ))}\n                        </TableRow>\n                        <TableRow>\n                            <TableCol isFirst>\n                                Koniec\n                            </TableCol>\n                            {[...Array(7)].map((value, idx) => (\n                                <TableCol key={idx}>\n                                    <select name='endTimes' value={calendar?.endTimes ? calendar?.endTimes[idx] : \"x\"} onChange={(e) => handleCalendarTimeChange(e, idx)}>\n                                        <option value={\"X\"}>Žiadny</option>\n                                        {calendarTimes.map(({ name, value }, idx) => (\n                                            <option key={idx} value={value}>{name}</option>\n                                        ))}\n                                    </select>\n                                </TableCol>\n                            ))}\n                        </TableRow>\n                    </ContainerRow>\n                </GridContainer>\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default CalendarSection\n","/app/src/sections/coupons/coupons.section.jsx",["816","817"],"import React, { useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { CouponsContext } from '../../context/coupons/coupons.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\n\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport { formatPrice } from '../../utils/warehouse.utils'\n\nimport {\n    // CouponOverviewContainer,\n    DeleteButton,\n    OpenButton,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TableCol\n} from './coupons.styles'\n\nconst CouponsSection = () => {\n    // const [searchQuery, setSearchQuery] = useState('')\n    const { push } = useHistory()\n\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n\n    const {\n        coupons,\n        getCoupons,\n        deleteCoupon\n    } = useContext(CouponsContext)\n\n    useEffect(() => {\n        if (!coupons) {\n            getCoupons()\n        }\n    }, [coupons])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n\n            <SectionHeader\n                title='Kupóny'\n                // searchQuery={searchQuery}\n                // handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push('kupony/novy-kupon')}\n            />\n            <ScrollContainer>\n\n                <TableContainer>\n                    <TableHead>\n                        <TableCol>#</TableCol>\n                        <TableCol>Kód</TableCol>\n                        <TableCol>Typ</TableCol>\n                        <TableCol>Hodnota</TableCol>\n                        <TableCol>Možnosti</TableCol>\n                    </TableHead>\n                    {coupons && coupons.map((coupon, idx) => (\n                        <TableRow key={idx}>\n                            <TableCol>{idx + 1}</TableCol>\n                            <TableCol>{coupon.code}</TableCol>\n                            <TableCol>{coupon.type === \"percentage\" ? \"Percentá\" : \"Fixná suma\"}</TableCol>\n                            <TableCol>{coupon.type === \"percentage\" ? `${coupon.value}%` : `${(coupon.value / 100).toFixed(2)}€`}</TableCol>\n                            <TableCol>\n                                <OpenButton onClick={() => push(`kupony/${coupon._id}`)}>Zobraziť</OpenButton>\n                                <DeleteButton onClick={() => deleteCoupon(coupon._id)}>Ostrániť</DeleteButton>\n                            </TableCol>\n                        </TableRow>\n                    ))}\n                </TableContainer>\n                <ListArrows\n                    listItems={coupons}\n                />\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default CouponsSection\n","/app/src/sections/no-permission/no-permission.section.jsx",[],"/app/src/sections/order/order.section.jsx",["818","819","820"],"import React, { useContext, useState, useEffect } from 'react'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { OrderContext } from '../../context/order/order.context'\nimport { useParams, Prompt } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\n\nimport Popup from \"../../components/popup/pop-up.component\"\n\nimport SelectUserComponent from './steps/1-select-user/select-user.component'\nimport SelectProductComponent from \"./steps/2-select-product/select-product.component\"\nimport SelectLensesComponent from './steps/3-select-lenses/select-lenses.component'\nimport SummaryComponent from './steps/4-summary/summary.component'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    Header,\n} from './order.styles'\n\nconst OrderSection = () => {\n    const {\n        step,\n        order,\n        setOrder,\n        addUser,\n        resetOrder,\n        changeStep\n    } = useContext(OrderContext)\n\n    const { userId, orderId } = useParams()\n\n    const [hasChanged, setHasChanged] = useState(false)\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const handleOrderChange = valueToAdd => {\n        setHasChanged(true)\n        const { name, value } = valueToAdd\n        setOrder({\n            ...order,\n            [name]: value\n        })\n    }\n\n    const {\n        getMessage,\n        setShowModal,\n        closeModal,\n        isLoading,\n        showModal,\n        message\n    } = useContext(LoadingModalContext)\n\n    const showErrorMessage = (message) => {\n        getMessage(message)\n        setShowModal(true)\n    }\n\n    const userData = useFetchById(\"api/admin/users\", userId, !(userId !== 'nova-objednavka'))\n    const orderData = useFetchById(\"api/admin/orders\", orderId, !orderId)\n\n    const handleAddNextProduct = () => {\n        changeStep('findProduct')\n        if (order?.product) {\n            if (order?.lenses) {\n                delete order[\"lenses\"]\n                delete order[\"product\"]\n            } else {\n                delete order[\"product\"]\n            }\n            setOrder({ ...order })\n        }\n    }\n\n    useEffect(() => {\n        if (userId !== 'nova-objednavka' && orderId) {\n            setIsUpdating(true)\n            changeStep('summary')\n            if (orderData.response) {\n                addUser(orderData.response.order.orderedBy)\n                setOrder({\n                    ...order,\n                    order: orderData.response.order,\n                    user: orderData.response.order.orderedBy,\n                    combinedProducts: orderData.response.order.combinedProducts\n                })\n            }\n        } else if (userId !== 'nova-objednavka' && orderId === undefined) {\n            changeStep('select-product')\n            if (userData.response) {\n                addUser(userData.response.user)\n            }\n        }\n\n    }, [userId, orderId, userData.response, orderData.response])\n\n    useEffect(() => {\n        if (userData.isLoading) return\n        addUser(userData.response.user)\n\n    }, [userData.isLoading])\n\n    useEffect(() => {\n        return () => {\n            changeStep('select-user')\n            resetOrder({})\n            setHasChanged(false)\n            setIsUpdating(false)\n        }\n    }, [])\n\n    // console.log(\"ORDER OBJECT\")\n    // console.log(userData.isLoading)\n\n    return (\n\n        <section>\n            <Prompt\n                when={hasChanged}\n                message={\"Máte nedokončenú objednávku, skutočne chcete odísť?\"}\n            />\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <Header>\n                <div>\n                    <h1>{isUpdating ? `Objednavka číslo ${order?.order?.customId}` : \"Nová objednávka\"}</h1>\n                </div>\n            </Header>\n            <ScrollContainer>\n                <div>\n                    {step === 'select-user' && (\n                        <SelectUserComponent\n                            next={() => changeStep('select-product')}\n                            addToOrder={handleOrderChange}\n                        />\n                    )}\n                    {step === 'select-product' && (\n                        <SelectProductComponent\n                            back={() => changeStep(\"select-user\")}\n                            next={changeStep}\n                            showErrorMessage={showErrorMessage}\n                        />\n                    )}\n                    {step === 'select-lenses' && (\n                        <SelectLensesComponent\n                            back={() => changeStep(\"select-product\")}\n                            next={() => changeStep('summary')}\n                        />\n                    )}\n                    {step === 'summary' && (\n                        <SummaryComponent\n                            isUpdating={isUpdating}\n                            back={() => changeStep(\"select-lenses\")}\n                            addNextProduct={handleAddNextProduct}\n                            setHasChanged={setHasChanged}\n                            refetchUser={userData.refetch}\n                        />\n                    )}\n                </div>\n\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default OrderSection\n","/app/src/sections/coupon/coupon.section.jsx",["821","822"],"import React, { useContext, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { CouponsContext } from '../../context/coupons/coupons.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport InputRow from '../../components/product-input-row/product-input-row.component'\nimport CustomInput from '../../components/custom-input/custom-input.component'\nimport Popup from \"../../components/popup/pop-up.component\"\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    CustomSelect,\n    SubmitButton,\n    DeleteButton,\n    GridRow,\n    GridCol\n} from './coupon.styles'\n\nconst CouponSection = () => {\n    const { couponId } = useParams()\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n    const {\n        coupon,\n        getCoupon,\n        handleChange,\n        createCoupon,\n        isUpdating,\n        deleteCoupon,\n        resetCoupons\n    } = useContext(CouponsContext)\n\n    useEffect(() => {\n        if (couponId !== 'novy-kupon') {\n            getCoupon(couponId)\n        }\n    }, [couponId])\n\n    useEffect(() => {\n        return () => {\n            resetCoupons()\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n\n            <Header>\n                <FixedContainer>\n                    <div>\n                        <h1>Nový kupón</h1>\n                    </div>\n\n                    <div>\n                        {isUpdating && <DeleteButton onClick={() => deleteCoupon(couponId)}>Odstrániť</DeleteButton>}\n                        {!isUpdating && <SubmitButton onClick={() => createCoupon(coupon)}>Vytvoriť</SubmitButton>}\n                    </div>\n\n                </FixedContainer>\n            </Header>\n            <ScrollContainer>\n                <GridRow>\n                    <GridCol>\n                        <h3>Základné informácie</h3>\n                        <InputRow\n                            label=\"Kód kupónu\"\n                            example=\"napr: 50off\"\n                        >\n                            <CustomInput\n                                label=\"Kód\"\n                                type='text'\n                                name='code'\n                                value={coupon.code}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                        <InputRow\n                            label=\"Typ kupónu\"\n                            example=\"\"\n                        >\n                            <CustomSelect name='type' value={coupon.type} onChange={(e) => handleChange(e)}>\n                                <option value={\"percentage\"}>Percentá</option>\n                                <option value={\"flat\"}>Fixná suma</option>\n                            </CustomSelect>\n                        </InputRow>\n                    </GridCol>\n                    <GridCol>\n                        <h3>Parametre</h3>\n\n                        <InputRow\n                            label=\"Hodnota\"\n                            example=\"\"\n                        >\n                            <CustomInput\n                                label=\"Suma\"\n                                type='number'\n                                name='value'\n                                value={coupon.value.toString()}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                        <InputRow\n                            label=\"Počet použití jedným používateľom\"\n                            example=\"\"\n                        >\n                            <CustomInput\n                                label=\"Suma\"\n                                type='number'\n                                name='maxUses'\n                                value={coupon.maxUses.toString()}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                        <InputRow\n                            label=\"Minimálna hodnota objednávky pre použitie kupónu\"\n                            example=\"\"\n                        >\n                            <CustomInput\n                                label=\"Suma\"\n                                type='number'\n                                name='minValue'\n                                value={coupon.minValue.toString()}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                        <InputRow\n                            label=\"Počet celkových použití kupónu\"\n                            example=\"\"\n                        >\n                            <CustomInput\n                                label=\"Suma\"\n                                type='number'\n                                name='maxUsesTotal'\n                                value={coupon.maxUsesTotal.toString()}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                    </GridCol>\n                </GridRow>\n\n\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default CouponSection\n","/app/src/components/custom-button/custom-button.styles.jsx",[],"/app/src/components/spinner/spinner.styles.jsx",[],"/app/src/components/forgot-password/forgot-password.styles.jsx",[],"/app/src/components/custom-input/custom-input.styles.jsx",[],"/app/src/components/sign-in/sign-in.styles.jsx",[],"/app/src/context/blog/blog.queries.jsx",[],"/app/src/components/sidenav/sidenav.styles.jsx",[],"/app/src/context/user/user.queries.jsx",[],"/app/src/context/image/image.queries.jsx",[],"/app/src/context/user/user.utils.jsx",[],"/app/src/context/warehouse/warehouse.utils.jsx",[],"/app/src/hooks/slug.jsx",["823","824","825","826"],"import { useState, useEffect } from 'react'\n\nexport const useSlug = (string = '') => {\n    const a = 'àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;'\n    const b = 'aaaaaaaaaacccddeeeeeeeegghiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------'\n    const p = new RegExp(a.split('').join('|'), 'g')\n\n    const [slug, setSlug] = useState('')\n\n    const getSlug = (string) => {\n        return string.toString().toLowerCase()\n            .replace(/\\s+/g, '-') // Replace spaces with -\n            .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n            .replace(/&/g, '-and-') // Replace & with 'and'\n            .replace(/[^\\w\\-]+/g, '') // Remove all non-word characters\n            .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n            .replace(/^-+/, '') // Trim - from start of text\n            .replace(/-+$/, '') // Trim - from end of text\n    }\n\n    useEffect(() => {\n        const s = getSlug(string)\n        setSlug(s)\n\n    }, [string])\n\n    return { slug, getSlug }\n}","/app/src/utils/warehouse.utils.jsx",[],"/app/src/sections/e-shop/e-shop.styles.jsx",[],"/app/src/utils/analytics.utils.jsx",[],"/app/src/sections/analytics/analytics.styles.jsx",[],"/app/src/hooks/useFetch.jsx",["827","828","829"],"import { useEffect, useState } from 'react'\n\nexport const useFetch = (path, skip = false, method = \"GET\") => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [message, setMessage] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const requestOptions = {\n        method: method,\n        // headers: myHeaders,\n        // body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setMessage(data.message)\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n                setMessage(\"Niečo sa pokazilo\")\n            }\n        }\n        fetchData()\n    }, [refetchIndex])\n\n    return { response, isLoading, error, message, refetch }\n}\n\nexport const useFetchByQuery = (path, queryObj, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify(queryObj)\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path])\n\n    return { response, isLoading, error, refetch }\n}\n\nexport const useFetchById = (path, id, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}/${id}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path, id])\n\n    return { response, isLoading, error, refetch }\n}\n","/app/src/sections/orders/orders.styles.jsx",[],"/app/src/context/orders/orders.utils.jsx",[],"/app/src/utils/user.utils.jsx",[],"/app/src/sections/customer-profile/customer-profile.styles.jsx",[],"/app/src/sections/customers/customers.styles.jsx",[],"/app/src/sections/blog-posts/blog-posts.styles.jsx",[],"/app/src/sections/product/product.styles.jsx",[],"/app/src/sections/coupon/coupon.styles.jsx",[],"/app/src/sections/order/order.styles.jsx",[],"/app/src/sections/coupons/coupons.styles.jsx",[],"/app/src/sections/calendar/calendar.styles.jsx",[],"/app/src/utils/calendar.utils.jsx",[],"/app/src/sections/no-permission/no-permission.styles.jsx",[],"/app/src/sections/post/post.styles.jsx",[],"/app/src/sections/booking/booking.styles.jsx",[],"/app/src/components/section-navbar/section-navbar.component.jsx",[],"/app/src/components/section-header/section-header.component.jsx",[],"/app/src/components/list-arrows/list-arrows.component.jsx",["830","831"],"import React, { useState, useEffect } from 'react'\n\nimport {\n    AiFillLeftCircle,\n    AiFillRightCircle\n} from 'react-icons/ai'\n\nimport {\n    ArrowsContainer,\n    IconContainer\n} from './list-arrows.styles'\n\nconst ListArrows = ({\n    listItems = [],\n    handleClickPrev = () => { },\n    handleClickNext = () => { }\n}) => {\n    const [isDisablePrev, setIsDisablePrev] = useState(true)\n    const [isDisableNext, setIsDisableNext] = useState(true)\n    const [currentPage, setCurrentPage] = useState(0)\n\n    useEffect(() => {\n        if (currentPage === 0) {\n            setIsDisablePrev(true)\n        } else {\n            setIsDisablePrev(false)\n            // setCurrentPage(0)\n        }\n    }, [listItems])\n\n    useEffect(() => {\n        if (listItems?.length < 10) {\n            setIsDisableNext(true)\n        } else {\n            setIsDisableNext(false)\n        }\n    }, [listItems])\n\n    useEffect(() => {\n        if (currentPage === 0) return\n        setCurrentPage(prevValue => prevValue--)\n    }, [handleClickPrev])\n    useEffect(() => {\n        // if (currentPage === 0) return\n        setCurrentPage(prevValue => prevValue++)\n    }, [handleClickNext])\n\n    const handlePrev = () => {\n        handleClickPrev()\n        if (currentPage === 0) return\n        setCurrentPage(prevValue => prevValue - 1)\n    }\n    const handleNext = () => {\n        handleClickNext()\n        setCurrentPage(prevValue => prevValue + 1)\n    }\n\n    return (\n        <ArrowsContainer>\n            <IconContainer disabled={isDisablePrev} onClick={handlePrev}>\n                <AiFillLeftCircle />\n            </IconContainer>\n            <IconContainer disabled={isDisableNext} onClick={handleNext}>\n                <AiFillRightCircle />\n            </IconContainer>\n        </ArrowsContainer>\n    )\n}\n\nexport default ListArrows\n","/app/src/components/product-overview/product-overview.component.jsx",[],"/app/src/components/modal-eshop-filter/modal-eshop-filter.component.jsx",["832","833"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\n// import { brands } from '../../utils/warehouse.utils'\nimport { useFetch } from '../../hooks/useFetch'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    Container,\n    ApplyButton,\n    ResetButton,\n    OptionsContainer\n} from './modal-eshop-filter.styles'\n\nconst EshopFilterModal = ({ close, applyFilter, resetFilter }) => {\n    const [filter, setFilter] = useState({})\n\n    const { response, isLoading, refetch } = useFetch(`api/store/products/${filter?.filters?.type}/filters`, !filter?.filters?.type, \"GET\")\n    const [filters, setFilters] = useState(null)\n\n    const handleChangeFilters = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            if (Object.keys(filter?.filters).length > 1) {\n                delete filter?.filters[name]\n                setFilter({\n                    ...filter\n                })\n            } else {\n                delete filter[\"filters\"]\n                setFilter({\n                    ...filter\n                })\n            }\n            return\n        }\n\n        setFilter(prevValue => ({\n            ...prevValue,\n            filters: {\n                ...prevValue?.filters,\n                [name]: value\n            }\n        }))\n    }\n\n    const handleChangeFilterQuery = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete filter[\"query\"]\n            setFilter({\n                ...filter\n            })\n            return\n        }\n\n        setFilter(prevValue => ({\n            ...prevValue,\n            [name]: value\n        }))\n    }\n\n\n    useEffect(() => {\n        if (!filter?.filters?.type) return\n        setFilters(null)\n        refetch()\n    }, [filter?.filters?.type])\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response?.filters) {\n            setFilters(response?.filters)\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        return () => {\n            setFilter({})\n        }\n    }, [])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h2>Vybrať filter</h2>\n                <Container>\n                    <div>\n                        <h4>Typ produktu</h4>\n                        <CustomCheckbox\n                            label=\"Dioptrické\"\n                            isActive={filter?.filters?.type === 1}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 1 ? '' : 1 : 1\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Slnečné\"\n                            isActive={filter?.filters?.type === 2}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 2 ? '' : 2 : 2\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Športové\"\n                            isActive={filter?.filters?.type === 4}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 4 ? '' : 4 : 4\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Kontaktné šošovky\"\n                            isActive={filter?.filters?.type === 3}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 3 ? '' : 3 : 3\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Doplnky\"\n                            isActive={filter?.filters?.type === 5}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 5 ? '' : 5 : 5\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Služby\"\n                            isActive={filter?.filters?.type === 6}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 6 ? '' : 6 : 6\n                                }\n                            })}\n                        />\n                    </div>\n                    <h3>Filtovat podla:</h3>\n                    <div>\n                        <CustomInput\n                            label='Meno produktu'\n                            name='query'\n                            value={filter?.query || \"\"}\n                            handleChange={handleChangeFilterQuery}\n                        />\n                    </div>\n                    <div>\n                        <CustomInput\n                            label='Značka produktu'\n                            name='brand'\n                            value={filter?.filters?.brand || \"\"}\n                            handleChange={handleChangeFilters}\n                            list=\"brands\"\n\n                        />\n                        <datalist id=\"brands\">\n                            {filters?.brands.length > 0 && filters.brands.map((brand, idx) => (\n                                <option key={idx} value={brand} />\n                            ))}\n                        </datalist>\n                    </div>\n                    {/* <div>\n                        <CustomInput\n                            label='Kategoria produktu'\n                            name='category'\n                            value={filter?.filters?.category || \"\"}\n                            handleChange={handleChangeFilters}\n                            list=\"categories\"\n\n                        />\n                        <datalist id=\"categories\">\n                            {filters?.categories.length > 0 && filters.categories.map((brand, idx) => (\n                                <option key={idx} value={brand} />\n                            ))}\n                        </datalist>\n\n                    </div> */}\n                    <div>\n                        <CustomInput\n                            label='Eankód produktu'\n                            name='eanCode'\n                            value={filter?.filters?.eanCode || \"\"}\n                            handleChange={handleChangeFilters}\n                        />\n                    </div>\n\n\n                </Container>\n\n                <OptionsContainer>\n                    <ResetButton onClick={() => resetFilter()}>Resetovať filter</ResetButton>\n                    <ApplyButton onClick={() => applyFilter(filter)}>Filtrovať</ApplyButton>\n                </OptionsContainer>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default EshopFilterModal\n","/app/src/components/scroll-container/scroll-container.component.jsx",[],"/app/src/components/user-form/user-form.component.jsx",["834"],"import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport ProfileOrderOverview from '../profile-order-overview/profile-order-overview.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\nimport ExaminationsOverview from '../examinations-overview/examinations-overview.component'\n\nimport {\n    retailNames\n} from '../../utils/warehouse.utils'\n\nimport {\n    Profile,\n    GridContainer,\n    GridRow,\n    Row,\n    // ThreeColRow,\n    ZeroMargin,\n    Title,\n    Container,\n    OrderHeader,\n    OrderButton,\n    CustomSelect,\n    AdminPanelContainer\n} from './user.form-styles'\n\nconst UserForm = ({\n    isAdmin,\n    isUpdating,\n    user,\n    handleChange,\n    handleParameterChange,\n    handleCompanyChange,\n    isOptometrist,\n    isOrder = false,\n    isCustomer\n}) => {\n    const { push } = useHistory()\n\n    const handleAddOrderButtonClick = e => {\n        e.preventDefault()\n        push(`/dashboard/objednavky/${user._id}`)\n    }\n\n\n    return (\n        <GridContainer>\n            <Profile>\n                {isAdmin && !isCustomer && <AdminPanelContainer>\n                    <h2>Admin panel</h2>\n                    <InputRow\n                        label=\"Predajňa na ktorej uživatel pracuje\"\n                        example=''\n                    >\n                        <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Nezadané</option>\n                            {\n                                retailNames.map((name, idx) => {\n                                    if (idx === 0) return\n                                    return (\n                                        <option key={idx} value={idx}>{name}</option>\n                                    )\n                                })\n                            }\n                        </CustomSelect>\n                    </InputRow>\n                    <InputRow\n                        label=\"Výška administrativných práv\"\n                        example=\"\"\n                    >\n                        <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Zákaznik</option>\n                            <option value={1}>Predavač</option>\n                            <option value={2}>Vedúci</option>\n                        </CustomSelect>\n                    </InputRow>\n\n                    <Container>\n                        <CustomCheckbox\n                            label='Optometrista'\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"optometrist\",\n                                    value: !user.optometrist\n                                }\n                            })}\n                            isActive={user.optometrist}\n                        />\n                    </Container>\n                </AdminPanelContainer>}\n                <div>\n                    <h2>Informácie</h2>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        {isCustomer && <div>\n                            <CustomInput\n                                // label=\"Priezvisko*\"\n                                type='date'\n                                name='birthDate'\n                                value={user.birthDate}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>}\n                    </GridRow>\n                </div>\n\n                <Container>\n                    <h2>Kontaktné údaje</h2>\n                    <Row>\n                        <div>\n                            <CustomInput\n                                label=\"E-mail*\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        {isCustomer && <div>\n                            <CustomInput\n                                label=\"Telefónne číslo\"\n                                type='text'\n                                name='phone'\n                                value={user.phone ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>}\n                    </Row>\n                </Container>\n\n                {isCustomer && <Container>\n                    <h2>Fakturačné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.address ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.psc ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.city ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.country ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>}\n                {isCustomer && <Container>\n                    <h2>Firemné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČO\"\n                                type='text'\n                                name='ico'\n                                value={user.company.ico ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"DIČ\"\n                                type='text'\n                                name='dic'\n                                value={user.company.dic ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČ DPH\"\n                                type='text'\n                                name='icdph'\n                                value={user.company.icdph ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            {/* <CustomInput\n                                label=\"IČ DPH\"\n                                type='text'\n                                name='icdph'\n                                value={user.company.icdph ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            /> */}\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.company.address ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.company.psc ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.company.city ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.company.country ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>}\n\n                {isCustomer && <Container>\n                    <h2>Parametre</h2>\n\n                    <ParametersTable\n                        parameters={user.lenses}\n                        handleChange={handleParameterChange}\n                    />\n                </Container>}\n\n\n            </Profile>\n\n            {\n                isCustomer && !isOrder && isUpdating && <div>\n                    <OrderHeader>\n                        <Title>\n                            Objednávky\n                    </Title>\n                        <OrderButton onClick={e => handleAddOrderButtonClick(e)}>Pridať objednávku</OrderButton>\n                    </OrderHeader>\n                    <div>\n                        {user.orders.length > 0 ? user.orders.map((order, idx) => (\n                            <ProfileOrderOverview\n                                key={idx}\n                                id={order}\n                                handleUpdateClick={() => push(`/dashboard/objednavky/${user._id}/${order}`)}\n                            />\n                        )).reverse().slice(0, 5) : (\n                            <p>Žiadné objednávky</p>\n                        )}\n                    </div>\n                    {isOptometrist && <ExaminationsOverview />}\n                </div>\n            }\n        </GridContainer >\n    )\n}\n\nexport default UserForm\n","/app/src/components/new-user-form/new-user-form.component.jsx",["835"],"import React from 'react'\n\nimport CustomFormSwitch from '../custom-form-switch/custom-form-switch.component'\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from \"../custom-checkbox/custom-checkbox.component\"\n\nimport {\n    retailNames\n} from '../../utils/warehouse.utils'\n\nimport {\n    CustomSelect,\n    Container,\n    GridRow,\n    ZeroMargin,\n    ColContainer,\n    CustomerForm,\n    SectionTitle\n} from './new-user-form.styles'\n\n\nconst NewUserForm = ({\n    formToShow,\n    switchFormButtons,\n    toggleUserForm,\n    user,\n    handleChange,\n    isAdmin,\n    handleParameterChange,\n    handleCompanyChange\n}) => {\n\n    return (\n        <div>\n            {/* Akého uživatela chcete vytvoriť? */}\n            {isAdmin && <CustomFormSwitch\n                items={switchFormButtons}\n                title=\"Akého uživatela chcete vytvoriť ?\"\n                activeIndex={formToShow}\n                handleClick={toggleUserForm}\n            />}\n\n            {\n                formToShow === 0 ? (\n                    <CustomerForm>\n                        <ColContainer>\n                            <h2>Informácie</h2>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"E-mail\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Telefónne číslo*\"\n                                type='text'\n                                name='phone'\n                                value={user.phone ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <InputRow\n                                label=\"Dátum narodenia\"\n                                example=''\n                            >\n                                <CustomInput\n                                    // label=\"Priezvisko*\"\n                                    type='date'\n                                    name='birthDate'\n                                    value={user.birthDate}\n                                    handleChange={(e) => handleChange(e)}\n                                />\n                            </InputRow>\n\n                            <Container>\n                                <h2>Parametre</h2>\n\n                                <ParametersTable\n                                    parameters={user.lenses}\n                                    handleChange={handleParameterChange}\n                                />\n                            </Container>\n                        </ColContainer>\n\n                        <ColContainer>\n                            <div>\n                                <h2>Fakturačné údaje</h2>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"Ulica a čislo domu\"\n                                            type='text'\n                                            name='address'\n                                            value={user.address ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"PSČ\"\n                                            type='text'\n                                            name='psc'\n                                            value={user.psc ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Mesto\"\n                                            type='text'\n                                            name='city'\n                                            value={user.city ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Krajina\"\n                                            type='text'\n                                            name='country'\n                                            value={user.country ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </div>\n\n                            <Container>\n                                <h2>Firemné údaje</h2>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"IČO\"\n                                            type='text'\n                                            name='ico'\n                                            value={user.company.ico ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"DIČ\"\n                                            type='text'\n                                            name='dic'\n                                            value={user.company.dic ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"IČ DPH\"\n                                            type='text'\n                                            name='icdph'\n                                            value={user.company.icdph ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        {/* <CustomInput\n                                            label=\"IČ DPH\"\n                                            type='text'\n                                            name='icdph'\n                                            value={user.company.icdph ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        /> */}\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"Ulica a čislo domu\"\n                                            type='text'\n                                            name='address'\n                                            value={user.company.address ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"PSČ\"\n                                            type='text'\n                                            name='psc'\n                                            value={user.company.psc ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Mesto\"\n                                            type='text'\n                                            name='city'\n                                            value={user.company.city ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Krajina\"\n                                            type='text'\n                                            name='country'\n                                            value={user.company.country ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </Container>\n                        </ColContainer>\n\n                    </CustomerForm>\n                ) : (\n                    <CustomerForm>\n\n                        <ColContainer>\n                            <h2>Informácie</h2>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"E-mail\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Heslo*\"\n                                type='password'\n                                name='password'\n                                value={user.password ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Potvrď heslo*\"\n                                type='password'\n                                name='confirmPassword'\n                                value={user.confirmPassword ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ColContainer>\n\n                        <ColContainer>\n                            <SectionTitle>Admin privilégiá</SectionTitle>\n                            <div>\n                                <h4>Predajňa na ktorej zamestnanec pracuje</h4>\n                                <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                                    <option value={0}>Nezadané</option>\n                                    {retailNames.map((name, idx) => {\n                                        if (idx === 0) return\n                                        return (\n                                            <option key={idx} value={idx}>{name}</option>\n\n                                        )\n                                    })}\n                                </CustomSelect>\n\n                            </div>\n                            <div>\n                                <h4>Výška administrativných práv</h4>\n                                <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                                    {/* <option value={0}>Zákaznik</option> */}\n                                    <option value={1}>Zamestnanec</option>\n                                    <option value={2}>Vedúci</option>\n                                </CustomSelect>\n\n                            </div>\n                            <Container>\n                                <CustomCheckbox\n                                    label='Optometrista'\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"optometrist\",\n                                            value: !user.optometrist\n                                        }\n                                    })}\n                                    isActive={user.optometrist}\n                                />\n                            </Container>\n                        </ColContainer>\n                    </CustomerForm>\n                )\n            }\n        </div>\n    )\n}\n\nexport default NewUserForm\n","/app/src/components/product-input-row/product-input-row.component.jsx",[],"/app/src/components/custom-checkbox/custom-checkbox.component.jsx",[],"/app/src/components/modal-images/modal-images.component.jsx",[],"/app/src/components/custom-select/custom-select.component.jsx",["836"],"import React from 'react'\n\nimport { CustomSelectContainer } from './custom-select.styles'\n\nconst CustomRetailSelect = ({ name, value, handleChange, listItems, defaultOption = false, defaultValue, defaultLabel }) => {\n    return (\n        <CustomSelectContainer name={name} value={value} onChange={(e) => handleChange(e)}>\n            {defaultOption && <option value={defaultValue}>{defaultLabel}</option>}\n            {listItems.map((name, idx) => {\n                if (idx === 0) return\n                return (\n                    <option key={idx} value={idx}>{name}</option>\n                )\n            })}\n        </CustomSelectContainer>\n    )\n}\n\nexport default CustomRetailSelect\n","/app/src/components/custom-textarea/custom-textarea.component.jsx",[],"/app/src/context/week-calendar/week-calendar.context.jsx",["837","838","839","840","841"],"import React, { createContext, useState, useEffect, useContext } from 'react'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { useFetchById } from '../../hooks/useFetch'\nimport {\n    getHourTime,\n    checkBookings,\n    getTimeline\n} from '../../utils/week-calendar.utils'\n\nexport const WeekCalendarContext = createContext({\n    timeline: null,\n    getDayData: () => { },\n    refetchWeekCalendar: () => { },\n    cancelUserBooking: () => { },\n    // fillDayData: () => { }\n})\n\nconst WeekCalendarProvider = ({ children, calendar, month, year }) => {\n    const { response, isLoading, refetch } = useFetchById('api/booking/calendars', calendar, !calendar)\n    const { closeModal, setIsLoading, setShowModal, getMessage } = useContext(LoadingModalContext)\n    const { token } = useContext(AuthContext)\n    const [numberOfHours, setNumberOfHours] = useState(0)\n    const [timeline, setTimeline] = useState(null)\n\n    const getDayData = (dayNumber, dayIdx, calendar) => {\n        if (!calendar) return\n        const numberedStartTimes = calendar.startTimes.filter(number => number !== \"X\").map(time => (Number(time.split(\"/\")[0])))\n        const startTime = Math.min(...numberedStartTimes)\n\n        const hourblock = [...Array(numberOfHours)].map((value, idx) => {\n            const splitedStartTime = calendar.startTimes[dayIdx]?.split(\"/\").map(value => Number(value))\n            const splitedEndTime = calendar.endTimes[dayIdx]?.split(\"/\").map(value => Number(value))\n            const time = getHourTime(idx, calendar.interval)\n            const splitedTime = time.split('/').map(value => Number(value))\n\n            if (startTime > splitedTime[0]) return\n            if (splitedStartTime[0] > startTime && splitedStartTime[0] > splitedTime[0]) return ({ empty: true })\n            if (splitedStartTime[0] > startTime && splitedStartTime[0] > splitedTime[0] && !(splitedStartTime[1] === splitedTime[1]) && splitedTime[1] === 30) return ({ empty: true })\n\n            if (splitedEndTime[0] < splitedTime[0]) return\n            if (calendar.startTimes[dayIdx] === 'X') return\n            if (splitedEndTime[0] === splitedTime[0] && !(splitedEndTime[1] === splitedTime[1]) && splitedTime[1] === 30) return\n\n            return ({\n                id: idx,\n                time: time,\n                userBookings: checkBookings(calendar, idx, dayNumber, month, year)\n            })\n        }).filter(item => item !== undefined)\n\n        return hourblock\n    }\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const cancelUserBooking = async (userBookingId, refetchCalendar, setShowBookingDetails) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            // body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/userBookings/${userBookingId}/cancel`, requestOptions)\n            const data = await response.json()\n\n            if (data.userBooking) {\n                closeModal()\n                setShowBookingDetails()\n                setTimeout(() => {\n                    refetchCalendar()\n                }, 200);\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response.calendar.interval === 30) setNumberOfHours(48)\n        if (response.calendar.interval === 60) setNumberOfHours(24)\n        const timelineArr = getTimeline(response.calendar.startTimes, response.calendar.endTimes, response.calendar.interval)\n        setTimeline(timelineArr)\n    }, [isLoading])\n\n    return (\n        <WeekCalendarContext.Provider\n            value={{\n                timeline,\n                getDayData,\n                refetchWeekCalendar: refetch,\n                cancelUserBooking,\n                // fillDayData\n            }}\n        >\n            {children}\n        </WeekCalendarContext.Provider>\n    )\n}\n\nexport default WeekCalendarProvider","/app/src/components/booking-calendar-bookings/booking-calendar-bookings.component.jsx",[],"/app/src/components/calendar/calendar.component.jsx",["842","843","844"],"import React, { useState, useEffect } from 'react'\n\nimport {\n    dayNames,\n    getPreviousMonthDays,\n    getNextMonthDays,\n    getCurrentMonthDays,\n    getBooking\n} from '../../utils/calendar.utils'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    Container,\n    HeaderBlock,\n    Dayblock,\n\n} from './calendar.styles'\n\nconst Calendar = ({\n    calendar,\n    month,\n    year,\n    handleCalendarBlockClick\n}) => {\n    const date = new Date()\n\n    date.setDate(1)\n    const lastDay = new Date(year, month + 1, 0).getDate()\n    const prevLastDay = new Date(year, month, 0).getDate()\n\n    const firstDayIndex = new Date(year, month, 0).getDay();\n    const lastDayIndex = new Date(year, month + 1, 0).getDay()\n\n    const nextDays = 7 - lastDayIndex\n\n    const { response, isLoading, refetch } = useFetchById('api/booking/calendars', calendar, !calendar)\n    const [prevDays, setPrevDays] = useState([])\n    const [currentMonthDays, setCurrentMonthDays] = useState([])\n    const [nextMonthDays, setMonthNextDays] = useState([])\n\n    useEffect(() => {\n        refetch()\n    }, [month])\n\n    useEffect(() => {\n        if (calendar) {\n            refetch()\n        }\n    }, [calendar])\n\n    useEffect(() => {\n        if (!isLoading) {\n            if (response?.calendar) {\n                const prevDaysArr = getPreviousMonthDays(firstDayIndex)\n                const arr = getCurrentMonthDays(lastDay)\n                const nextDaysArr = getNextMonthDays(nextDays)\n                const checkedArr = getBooking(arr, response.calendar, month, year)\n\n                setPrevDays(prevDaysArr)\n                setCurrentMonthDays(checkedArr)\n                setMonthNextDays(nextDaysArr)\n            }\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        return () => {\n            setPrevDays([])\n            setCurrentMonthDays([])\n            setMonthNextDays([])\n        }\n    }, [])\n\n    return (\n        <Container>\n\n            {dayNames.map((name, idx) => (\n                <HeaderBlock key={idx}>\n                    {name}\n                </HeaderBlock>\n            ))}\n\n            {prevDays.map((value, idx) => (\n                <Dayblock faded={true} key={idx}>\n                    <p>\n                    </p>\n                    <p>\n                        {prevLastDay - idx}\n                    </p>\n                </Dayblock>\n            ))}\n\n            {currentMonthDays.map((data, idx) => {\n                const { dayNumber, bookings } = data\n                return (\n                    <Dayblock key={idx} onClick={() => handleCalendarBlockClick(data)}>\n                        <p>\n                            {bookings && <span>\n                                {bookings.length}\n                            </span>}\n                        </p>\n                        <p>\n                            {dayNumber}\n                        </p>\n                    </Dayblock>\n                )\n            })}\n            {nextMonthDays.map((value, idx) => (\n                <Dayblock faded={true} key={idx}>\n                    <p>\n                    </p>\n                    <p>\n                        {idx + 1}\n                    </p>\n                </Dayblock>\n            ))}\n        </Container>\n    )\n}\n\nexport default Calendar\n","/app/src/components/calendar-weekdays/calendar-weekdays.component.jsx",["845","846"],"import React, { useState, useEffect, useContext } from 'react'\nimport { useFetchById } from '../../hooks/useFetch'\nimport { BookingContext } from '../../context/booking/booking.context'\nimport { WeekCalendarContext } from '../../context/week-calendar/week-calendar.context'\n\nimport UserbookingDetailsModal from '../modal-userbookings-details/modal-userbookings-details.component'\nimport UserBookingModal from '../modal-user-bookings/modal-user-booking.component'\nimport CalendarBookedDay from '../calendar-booked-day/calendar-booked-day.component'\n\nimport {\n    dayNames,\n    getPreviousMonthDays,\n    getNextMonthDays,\n    getCurrentMonthDays,\n    getBooking,\n} from '../../utils/calendar.utils'\n\nimport { changeSlash } from '../../utils/week-calendar.utils'\n\nimport {\n    Container,\n    HeaderBlock,\n    HourBlock,\n    HourGrid,\n    TableHead,\n    HourBlockContainer,\n    EmptyContainer,\n    HourTime,\n    EmptyHourBlock\n} from './calendar-weekdays.styles'\n\nconst WeekDays = ({\n    calendar,\n    year,\n    month,\n    weekIndex,\n    showUserBooking,\n    setShowUserBooking,\n    handleOpenUserBookingModal,\n    selectedDay,\n}) => {\n    const { timeline, getDayData, refetchWeekCalendar, cancelUserBooking } = useContext(WeekCalendarContext)\n    const { createUserBooking } = useContext(BookingContext)\n    const { response, isLoading, refetch } = useFetchById('api/booking/calendars', calendar, !calendar)\n    const lastDay = new Date(year, month + 1, 0).getDate()\n    const firstDayIndex = new Date(year, month, 0).getDay();\n    const lastDayIndex = new Date(year, month + 1, 0).getDay()\n    const prevLastDay = new Date(year, month, 0).getDate()\n\n    const nextDays = 7 - lastDayIndex\n\n    const [calendarDays, setCalendarDays] = useState([])\n    // const [selectedDay, setSelectedDay] = useState(null)\n    const [showBookingDetails, setShowBookingDetails] = useState(false)\n\n    const [selectedUserBooking, setSelectedUserBooking] = useState(null)\n\n    const handleOpenDetailsModal = (userBooking) => {\n        setSelectedUserBooking(userBooking)\n        setShowBookingDetails(true)\n    }\n\n    const handleCancelUserBooking = (userBookingId) => {\n        cancelUserBooking(userBookingId, refetch, setShowBookingDetails)\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        if (response.calendar) {\n            const prevMonthDays = getPreviousMonthDays(firstDayIndex)\n            const monthDays = getCurrentMonthDays(lastDay)\n            const nextMonthDays = getNextMonthDays(nextDays)\n            const monthDaysWithBookings = getBooking(monthDays, response.calendar, month, year)\n\n            setCalendarDays([\n                ...prevMonthDays,\n                ...monthDaysWithBookings,\n                ...nextMonthDays\n            ])\n\n            // fillDayData([\n            //     ...prevMonthDays,\n            //     ...monthDaysWithBookings,\n            //     ...nextMonthDays\n            // ], response.calendar)\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        refetch()\n    }, [month])\n\n\n    return (\n        <div>\n            {showBookingDetails && <UserbookingDetailsModal cancelUserBooking={handleCancelUserBooking} refetchCalendar={refetch} calendarId={calendar} userBooking={selectedUserBooking} close={() => setShowBookingDetails(false)} />}\n            {showUserBooking && <UserBookingModal refetchWeekCalendar={refetchWeekCalendar} createUserBooking={createUserBooking} refetchCalendar={refetch} calendar={response?.calendar} day={selectedDay} close={() => setShowUserBooking(false)} />}\n            <Container>\n                <TableHead>\n                    <HeaderBlock>{\" \"}</HeaderBlock>\n                    {calendarDays.slice(weekIndex * 7, (weekIndex * 7) + 7).map(({ dayNumber, isDisable, isPrevDay, isNextDay }, idx) => (\n                        <HeaderBlock isDisabled={isDisable} key={idx}>\n                            {isPrevDay ? (\n                                <React.Fragment>\n                                    <p>{dayNames[new Date(year, month - 1, prevLastDay - (dayNumber)).getDay()]}</p>\n                                    <p>{prevLastDay - (dayNumber - 1)}</p>\n                                </React.Fragment>\n                            ) : isNextDay ? (\n                                <React.Fragment>\n                                    <p>{dayNames[new Date(year, month + 1, dayNumber - 1).getDay()]}</p>\n                                    <p>{dayNumber} </p>\n                                </React.Fragment>\n                            ) : (\n                                <React.Fragment>\n                                    <p>{dayNames[new Date(year, month, dayNumber - 1).getDay()]}</p>\n                                    <p>{dayNumber} </p>\n                                </React.Fragment>\n                            )}\n                        </HeaderBlock>\n                    ))}\n                </TableHead>\n\n                <HourGrid>\n                    <HourBlock>\n                        {timeline && timeline.map((time, idx) => (\n                            <HourBlockContainer key={idx} style={response?.calendar?.interval === 60 ? ({ height: \"10rem\" }) : ({ height: \"5rem\" })}>\n                                <HourTime >\n                                    <p>{changeSlash(time) ?? \"\"}</p>\n                                </HourTime>\n                            </HourBlockContainer>\n\n                        ))}\n                    </HourBlock>\n                    {calendarDays.length > 0 && calendarDays.slice(weekIndex * 7, (weekIndex * 7) + 7).map((dayData, idx) => {\n                        const day = getDayData(dayData?.dayNumber, idx, response.calendar)\n                        return (\n                            < HourBlock key={idx} >\n                                { day && day.map((interval, idx) => {\n                                    if (interval?.empty) return (\n                                        <EmptyHourBlock style={response?.calendar?.interval === 60 ? ({ height: \"10rem\" }) : ({ height: \"5rem\" })} />\n                                    )\n                                    return (\n                                        <HourBlockContainer style={response?.calendar?.interval === 60 ? ({ height: \"10rem\" }) : ({ height: \"5rem\" })} key={idx}>\n                                            {interval?.userBookings && <CalendarBookedDay\n                                                dayData={dayData}\n                                                calendarId={calendar}\n                                                time={interval.time}\n                                                userBookings={interval.userBookings}\n                                                open={() => handleOpenDetailsModal(interval)}\n                                            />}\n                                            <EmptyContainer onClick={dayData.isDisable ? () => { } : () => handleOpenUserBookingModal({\n                                                ...dayData, time: interval.time, year,\n                                                month,\n                                            })} />\n                                        </HourBlockContainer>\n                                    )\n                                })}\n                            </HourBlock >\n                        )\n                    })}\n                </HourGrid>\n            </Container>\n        </div>\n    )\n}\n\nexport default WeekDays\n","/app/src/sections/order/steps/3-select-lenses/select-lenses.component.jsx",["847"],"import React, { useState, useEffect, useContext } from 'react'\nimport { OrderContext } from '../../../../context/order/order.context'\n\nimport { useFetchByQuery } from '../../../../hooks/useFetch'\n\nimport BackButton from '../../../../components/custom-back-button/custom-back-button.component'\nimport CartLensesRow from '../../../../components/order-cart-lenses-row/order-cart-lenses-row.component'\nimport CustomInput from '../../../../components/custom-input/custom-input.component'\n\nimport {\n    LensesTableContainer,\n    LensesTableHead,\n    LensesTableRow,\n    LensesImg,\n    SelectLensesContainer,\n    CartContainer,\n    CartParagraph,\n    CartTable,\n    CartTableHead,\n    NextButton,\n    TableCol,\n    ButtonOptions,\n    HeaderContainer,\n    SearchButton,\n    SearchContainer,\n    HeadingContainer,\n    UnselectButton\n} from './select-lenses.styles'\n\nconst SelectLensesComponent = ({ back, next }) => {\n    const {\n        cart,\n        addLenses,\n        createCombinedProducts,\n        selectedProduct,\n        selectProduct\n    } = useContext(OrderContext)\n\n    const [searchQuery, setSearchQuery] = useState(\"\")\n\n    const [lensesItems, setLensesItems] = useState([])\n    const [query, setQuery] = useState({\n        limit: 9,\n        skip: 0\n    })\n    const { response, isLoading, refetch } = useFetchByQuery(\"api/admin/lenses/filter\", query)\n\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        setQuery({\n            ...query,\n            query: searchQuery\n        })\n        refetch()\n    }\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== \"\") {\n            if (e.key === 'Enter') {\n                setQuery({\n                    ...query,\n                    query: searchQuery\n                })\n                refetch()\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        setLensesItems(response.lenses)\n    }, [isLoading])\n\n    return (\n        <div>\n            <BackButton onClick={back} />\n            <HeaderContainer>\n                <SearchContainer>\n                    <h3>Vyhľadať šošovky</h3>\n                    <div>\n                        <CustomInput\n                            label='Vyhľadať šošovky'\n                            value={searchQuery}\n                            handleChange={(e) => setSearchQuery(e.target.value)}\n                            onKeyPress={handleSearchOnEnter}\n                        />\n                    </div>\n                    <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n                </SearchContainer>\n                <CartContainer>\n                    <HeadingContainer>\n                        <h3>Vybrané položky</h3>\n                        {selectedProduct !== null && <UnselectButton onClick={() => selectProduct(null)}>Odznačiť</UnselectButton>}\n                    </HeadingContainer>\n                    <CartTable>\n\n                        <CartTableHead>\n                            <TableCol>#</TableCol>\n                            <TableCol>Produkt</TableCol>\n                            <TableCol>šošovky</TableCol>\n                            <TableCol>Cena</TableCol>\n                            <TableCol>Ks</TableCol>\n                            <TableCol>Zľava v %</TableCol>\n                            {/* <TableCol>Možnosti</TableCol> */}\n                        </CartTableHead>\n                        {cart.map((item, idx) => {\n                            if (item.product.type === 3 || item.product.type === 4 || item.product.type === 5 || item.product.type === 6) return false\n                            return (\n                                <CartLensesRow\n                                    key={idx}\n                                    idx={idx}\n                                    item={item}\n                                />\n                            )\n                        })}\n\n                        {cart.length === 0 && <CartParagraph>Nie sú vybrané žiadné produkty</CartParagraph>}\n                    </CartTable>\n                    <ButtonOptions>\n                        <NextButton onClick={createCombinedProducts}>\n                            Dokončiť objednávku\n                        </NextButton>\n                    </ButtonOptions>\n                </CartContainer>\n            </HeaderContainer>\n\n            <SelectLensesContainer>\n                <LensesTableContainer>\n                    <LensesTableHead>\n                        <TableCol>eanKód</TableCol>\n                        <TableCol>Obrázok</TableCol>\n                        <TableCol>Názov</TableCol>\n                        <TableCol>Dioptrie</TableCol>\n                        <TableCol>Cylinder</TableCol>\n                        <TableCol>Cena</TableCol>\n                    </LensesTableHead>\n\n                    {lensesItems.map((lenses, idx) => (\n                        <LensesTableRow key={idx} onClick={() => addLenses(lenses)}>\n                            <TableCol>{lenses.eanCode}</TableCol>\n                            <TableCol>\n                                <LensesImg>\n                                    {/* <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${lenses.image.imagePath}`} alt={lenses.image.alt} /> */}\n                                </LensesImg>\n                            </TableCol>\n                            <TableCol>{lenses.name}</TableCol>\n                            <TableCol>\n                                {lenses.dioptersRange && <p>{`od ${lenses.dioptersRange[0]} do ${lenses.dioptersRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>\n                                {lenses.cylinderRange && <p>{`od ${lenses.cylinderRange[0]} do ${lenses.cylinderRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>{(lenses.price / 100).toFixed(2)}€</TableCol>\n                        </LensesTableRow>\n                    ))}\n                    <LensesTableRow onClick={() => addLenses(null)}>\n                        <TableCol>-</TableCol>\n                        <TableCol>\n                            <LensesImg>\n                                {/* <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${lenses.image.imagePath}`} alt={lenses.image.alt} /> */}\n                            </LensesImg>\n                        </TableCol>\n                        <TableCol>Žiadné sklá</TableCol>\n                        <TableCol>-</TableCol>\n                        <TableCol>-</TableCol>\n                        <TableCol>0€</TableCol>\n                    </LensesTableRow>\n                </LensesTableContainer>\n            </SelectLensesContainer>\n        </div >\n    )\n}\n\nexport default SelectLensesComponent\n","/app/src/sections/order/steps/4-summary/summary.component.jsx",[],"/app/src/sections/order/steps/2-select-product/select-product.component.jsx",["848"],"import React, { useState, useEffect, useContext } from 'react'\nimport { OrderContext } from '../../../../context/order/order.context'\n\nimport CartDiscountRow from '../../../../components/order-cart-row/order-cart-row.component'\nimport CustomInput from '../../../../components/custom-input/custom-input.component'\nimport BackButton from '../../../../components/custom-back-button/custom-back-button.component'\n\nimport {\n    formatAvailable,\n    isAvailable\n} from '../../../../utils/orders.utils'\n\nimport { useFetchByQuery } from '../../../../hooks/useFetch'\n\nimport {\n    SearchContainer,\n    SearchButton,\n    TableContainer,\n    ProductTableHead,\n    ProductTableRow,\n    TableCol,\n    HeaderContainer,\n    CartContainer,\n    CartTable,\n    CartTableHead,\n    CartParagraph,\n    NextButton,\n    ButtonOptions,\n    NextLensesButton,\n} from './select-product.styles'\n\nconst SelectProductComponent = ({ back, next, showErrorMessage }) => {\n    const {\n        addProduct,\n        cart,\n        createCombinedProducts\n    } = useContext(OrderContext)\n\n    const [searchQuery, setSearchQuery] = useState(\"\")\n\n    const [productItems, setProductItems] = useState([])\n    const [query, setQuery] = useState({\n        limit: 10,\n        skip: 0,\n    })\n    const { response, isLoading, refetch } = useFetchByQuery(\"api/admin/products/filter\", query)\n\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        setQuery({\n            ...query,\n            query: searchQuery\n        })\n        refetch()\n    }\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== \"\") {\n            if (e.key === 'Enter') {\n                setQuery({\n                    ...query,\n                    query: searchQuery\n                })\n                refetch()\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        setProductItems(response.products)\n    }, [isLoading])\n\n    return (\n        <div>\n            <BackButton onClick={back} />\n            <HeaderContainer>\n                <SearchContainer>\n                    <h3>Vyhľadať produkt</h3>\n                    <div>\n                        <CustomInput\n                            label='Názov produktu, eanCode alebo popis'\n                            value={searchQuery}\n                            handleChange={(e) => setSearchQuery(e.target.value)}\n                            onKeyPress={handleSearchOnEnter}\n                        />\n                    </div>\n                    <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n                </SearchContainer>\n                <CartContainer>\n                    <h3>Vybrané položky</h3>\n                    <CartTableHead>\n                        <TableCol>#</TableCol>\n                        <TableCol>Produkt</TableCol>\n\n                        <TableCol>Cena</TableCol>\n                        <TableCol>Zľava v %</TableCol>\n                        <TableCol>Viac</TableCol>\n                    </CartTableHead>\n                    <CartTable>\n                        {cart.map((item, idx) => (\n                            <CartDiscountRow\n                                key={idx}\n                                item={item}\n                                idx={idx}\n                            />\n                        ))}\n\n                        {cart.length === 0 && <CartParagraph>Nie sú vybrané žiadné produkty</CartParagraph>}\n                    </CartTable>\n                    <ButtonOptions>\n                        <NextLensesButton onClick={() => next(\"select-lenses\")}>\n                            Preisť na šošovky\n                        </NextLensesButton>\n                        <NextButton onClick={createCombinedProducts}>\n                            Dokončiť objednávku\n                        </NextButton>\n                    </ButtonOptions>\n                </CartContainer>\n            </HeaderContainer>\n\n            <TableContainer>\n                <ProductTableHead>\n                    <TableCol>eanKód</TableCol>\n                    <TableCol>Obrázok</TableCol>\n                    <TableCol>Názov</TableCol>\n                    <TableCol>Farba</TableCol>\n                    <TableCol>Veľkosť</TableCol>\n                    <TableCol>Značka</TableCol>\n                    <TableCol>Cena</TableCol>\n                    <TableCol>Na sklade</TableCol>\n                </ProductTableHead>\n                {productItems.map((product, idx) => (\n                    <ProductTableRow key={idx} onClick={() => isAvailable(product.available) ? addProduct(product) : product.type === 6 ? addProduct(product) : showErrorMessage(\"Produkt nieje na sklade.\")}>\n                        <TableCol>{product.eanCode}</TableCol>\n                        <TableCol>\n                            {product?.image && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${product.image.imagePath}`} alt={product.image.alt} />}\n                        </TableCol>\n                        <TableCol>{product.name}</TableCol>\n                        <TableCol>{product.specs.frameColor}</TableCol>\n                        <TableCol>{(product.type === 1 || product.type === 2 || product.type === 4) && `${product.specs.size[0]}-${product.specs.size[1]}-${product.specs.size[2]}-${product.specs.size[3]}`}</TableCol>\n                        <TableCol>{product.brand}</TableCol>\n                        <TableCol>{(product.price / 100).toFixed(2)}€</TableCol>\n                        <TableCol>{product.type === 6 ? 'Služba' : formatAvailable(product.available)}</TableCol>\n                    </ProductTableRow>\n                ))}\n            </TableContainer>\n        </div>\n    )\n}\n\nexport default SelectProductComponent\n","/app/src/sections/order/steps/1-select-user/select-user.component.jsx",["849","850"],"import React, { useState, useEffect, useContext } from 'react'\nimport { UserContext } from '../../../../context/user/user.context'\n\nimport CustomInput from '../../../../components/custom-input/custom-input.component'\n\nimport {\n    SearchContainer,\n    TableContainer,\n    UserTableHead,\n    UserTableRow,\n    TableCol,\n    SearchButton\n} from './select-user.styles'\n\nconst SelectUserComponent = ({ next, addToOrder }) => {\n    const [searchQuery, setSearchQuery] = useState('')\n    const [userItems, setUserItems] = useState([])\n\n    const {\n        users,\n        getFilteredUsers,\n        getUserByQuery\n    } = useContext(UserContext)\n\n    const handleClick = (user) => {\n        addToOrder({\n            name: \"user\",\n            value: user\n        })\n        next()\n    }\n\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== '') {\n            if (e.key === 'Enter') {\n                getUserByQuery({\n                    query: searchQuery,\n                    filters: {\n                        admin: 0\n                    }\n\n                })\n            }\n        }\n    }\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        getUserByQuery({\n            query: searchQuery,\n            filters: {\n                admin: 0\n            }\n\n        })\n    }\n\n    useEffect(() => {\n        if (!users) {\n            getFilteredUsers({\n                limit: 5,\n                filters: {\n                    admin: 0\n                }\n            })\n        }\n        if (users) {\n            setUserItems(users)\n        }\n    }, [users])\n\n    useEffect(() => {\n        if (users) {\n            if (searchQuery === '') {\n                getFilteredUsers({\n                    limit: 5,\n                    filters: {\n                        admin: 0\n                    }\n                })\n                setUserItems(users)\n            }\n        }\n    }, [searchQuery])\n\n    useEffect(() => {\n        return () => {\n            setSearchQuery('')\n            setUserItems([])\n        }\n    }, [])\n\n    return (\n        <div>\n            <SearchContainer>\n                <h3>Vyhľadať zákaznika</h3>\n                <div>\n                    <CustomInput\n                        label={\"Meno, priezvisko, email alebo tel. číslo\"}\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        onKeyPress={handleSearchOnEnter}\n                    />\n                </div>\n                <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n            </SearchContainer>\n\n            <TableContainer>\n                <UserTableHead>\n                    <TableCol>Meno a priezvisko</TableCol>\n                    <TableCol>Email</TableCol>\n                    <TableCol>Možnosti</TableCol>\n                </UserTableHead>\n                {userItems.map((user, idx) => (\n                    <UserTableRow key={idx} onClick={() => handleClick(user)}>\n                        <TableCol>{user.name}</TableCol>\n                        <TableCol>{user.email}</TableCol>\n                        <TableCol>{user.phone}</TableCol>\n                    </UserTableRow>\n                ))}\n            </TableContainer>\n\n        </div>\n    )\n}\n\nexport default SelectUserComponent\n","/app/src/components/booking-calendar-overview/booking-calendar-overview.component.jsx",[],"/app/src/components/product-service-form/product-service-form.component.jsx",["851","852"],"import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\n\nimport {\n    ServiceFormContainer,\n    ServiceContainer,\n    ImageContainer,\n    ProductImage\n} from './product-service-form.styles'\n\nconst ProductServiceForm = ({\n    product,\n    // isUpdating,\n    handleChange,\n    selectedImage,\n    setImageModal,\n}) => {\n    return (\n        <ServiceFormContainer>\n            <ServiceContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Názov služby*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                {/* <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer> */}\n            </ServiceContainer>\n        </ServiceFormContainer>\n    )\n}\n\nexport default ProductServiceForm\n","/app/src/components/product-contact-lenses-form/product-contact-lenses-form.component.jsx",["853","854"],"import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\n// import { lensesBrands } from '../../utils/warehouse.utils'\nimport {\n    AiOutlineCopy\n} from 'react-icons/ai'\n\nimport {\n    ContactLensesContainer,\n    ContactLensesFormContainer,\n    StockContainer,\n    ContactLensesParametersContainer,\n    IncreaseButton,\n    ImageContainer,\n    ProductImage,\n    CopyButton,\n    DeleteButton,\n    NewImageContainer,\n    NewImagesContainer\n} from './product-contact-lenses-form.styles'\n\nconst ProductContactLensesForm = ({\n    product,\n    handleChange,\n    setImageModal,\n    selectedImage,\n    checkParameter,\n    handleContactLensesChange,\n    handleAddNewParameter,\n    contactLensesParameters,\n    retailNames,\n    currentUser,\n    handleAvailableChange,\n    isUpdating,\n    filters,\n    productObj,\n    handleGetProductData\n}) => {\n    return (\n        <ContactLensesFormContainer>\n            <ContactLensesContainer>\n                <CopyButton onClick={() => handleGetProductData(true)}><AiOutlineCopy /></CopyButton>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov doplnku*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Značka\"\n                    type='text'\n                    name='brand'\n                    value={product.brand ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"brands\"\n                />\n                <datalist id=\"brands\">\n                    {filters?.brands && filters?.brands.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist>\n                {/* \n                <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n                />\n\n                <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {/* {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />} */}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n\n                <NewImagesContainer>\n                    {productObj?.bonusImages && productObj?.bonusImages.map((img) => (\n                        <NewImageContainer key={img._id}>\n                            {/* <DeleteButton >&#10005;</DeleteButton> */}\n                            <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n            </ContactLensesContainer>\n            <div>\n                <ContactLensesParametersContainer>\n                    <h3>Parametre</h3>\n                    <div>\n                        <h4>Zakrivenie</h4>\n                        {contactLensesParameters.allowedCurves.map((value, idx) => {\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={idx + 1}\n                                    type='text'\n                                    name={\"allowedCurves\"}\n                                    value={checkParameter(contactLensesParameters.allowedCurves, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                        <IncreaseButton onClick={() => handleAddNewParameter({\n                            target: {\n                                name: 'allowedCurves'\n                            }\n                        })}>Pridať</IncreaseButton>\n                    </div>\n                    <div>\n                        <h4>Priemery</h4>\n                        {contactLensesParameters.allowedDiameters.map((value, idx) => {\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={idx + 1}\n                                    type='text'\n                                    name={\"allowedDiameters\"}\n                                    value={checkParameter(contactLensesParameters.allowedDiameters, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                        <IncreaseButton onClick={() => handleAddNewParameter({\n                            target: {\n                                name: 'allowedDiameters'\n                            }\n                        })}>Pridať</IncreaseButton>\n                    </div>\n\n                    <div>\n                        <h4>Dioptrie</h4>\n                        {contactLensesParameters.dioptersRange.map((value, idx) => {\n                            const inputLabel = idx === 0 ? \"minimum\" : \"maximum\"\n\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={inputLabel}\n                                    type='text'\n                                    name={\"dioptersRange\"}\n                                    value={checkParameter(contactLensesParameters.dioptersRange, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </div>\n                </ContactLensesParametersContainer>\n\n                {currentUser.admin >= 2 ? (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        {product.available.map((value, idx) => {\n                            if (idx === 0) return\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[idx]}\n                                    type='number'\n                                    name={\"available\"}\n                                    value={checkParameter(product.available, idx)}\n                                    handleChange={e => handleAvailableChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </StockContainer>\n                ) : (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        <CustomInput\n                            label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                            type='number'\n                            name={\"available\"}\n                            value={checkParameter(product.available, currentUser.premises)}\n                            handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                        />\n                    </StockContainer>\n                )}\n            </div>\n        </ContactLensesFormContainer>\n    )\n}\n\nexport default ProductContactLensesForm\n","/app/src/components/product-glasses-form/product-glasses-form.component.jsx",["855","856","857","858","859"],"import React, { useState, useEffect } from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport { glassesColors, glassesMaterials, glassesShapes, brands } from '../../utils/warehouse.utils'\n\nimport { AiOutlineCopy } from 'react-icons/ai'\n\nimport {\n    ImageContainer,\n    ProductImage,\n    GlassesContainerForm,\n    GlassesContainer,\n    GlassesParameterContainer,\n    StockContainer,\n    CustomSelect,\n    BrandedCheckbox,\n    CopyButton,\n    UploadButton,\n    DeleteButton,\n    NewImageContainer,\n    NewImagesContainer\n} from './product-glasses-form.styles.jsx'\n\nconst ProductGlassesForm = ({\n    product,\n    handleChange,\n    selectedImage,\n    retailNames,\n    currentUser,\n    checkParameter,\n    handleAvailableChange,\n    handleGlassesParametersChange,\n    handleGlassesSpecsSizeChange,\n    handleSpecsChange,\n    glassesParameters,\n    setImageModal,\n    // isUpdating,\n    filters,\n    handleGetProductData,\n    productObj\n}) => {\n    const [isBranded, setIsBranded] = useState(true)\n\n    const [allBrands, setAllBrands] = useState([])\n\n    const handleIsBrandedClick = (isBrandedBool) => {\n        if (isBrandedBool) {\n            handleChange({\n                target: {\n                    name: \"brand\",\n                    value: \"Neznačkové\"\n                }\n            })\n            setIsBranded(false)\n        } else {\n            handleChange({\n                target: {\n                    name: \"brand\",\n                    value: \"\"\n                }\n            })\n\n            setIsBranded(true)\n\n        }\n    }\n\n    useEffect(() => {\n        if (product.brand === \"Neznačkové\") setIsBranded(false)\n    }, [isBranded])\n\n    useEffect(() => {\n        if (!filters?.brands) return\n        setAllBrands([ ...filters?.brands , ...brands])\n    }, [brands, filters?.brands])\n\n    return (\n        <GlassesContainerForm>\n            <GlassesContainer>\n                <CopyButton onClick={() => handleGetProductData(true)}><AiOutlineCopy /></CopyButton>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov produktu*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Kód\"\n                    type='text'\n                    name='subname'\n                    value={product.subname ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <BrandedCheckbox\n                    label={\"Značkové\"}\n                    isActive={isBranded}\n                    handleClick={() => handleIsBrandedClick(isBranded)}\n                />\n\n                {isBranded && (\n                    <React.Fragment>\n                        <CustomInput\n                            label=\"Značka\"\n                            type='text'\n                            name='brand'\n                            value={product.brand ?? \"\"}\n                            handleChange={(e) => handleChange(e)}\n                            list=\"brands\"\n                        />\n                        <datalist id=\"brands\">\n                            {allBrands.map((brand, idx) => (\n                                <option key={idx} value={brand} />\n                            ))}\n                        </datalist>\n                    </React.Fragment>\n                )}\n\n                {/* <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n\n                /> */}\n\n                {/* <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {/* <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                /> */}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n\n                <NewImagesContainer>\n                    {productObj?.bonusImages && productObj?.bonusImages.map((img, idx) => (\n                        <NewImageContainer key={idx}>\n                            {/* <DeleteButton >&#10005;</DeleteButton> */}\n                            <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n            </GlassesContainer>\n            <div>\n                <GlassesParameterContainer>\n                    <h3>Parametre</h3>\n                    <CustomInput\n                        label=\"Farebný kód\"\n                        type='text'\n                        name='colorCode'\n                        value={glassesParameters.colorCode ?? \"\"}\n                        handleChange={(e) => handleGlassesParametersChange(e)}\n                    />\n                    <div>\n                        <CustomInput\n                            label=\"Farba rámu\"\n                            type='text'\n                            name='frameColor'\n                            value={glassesParameters.specs.frameColor ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"colors\"\n\n                        />\n                        <datalist id=\"colors\">\n                            {glassesColors.map((color, idx) => (\n                                <option key={idx} value={color} />\n                            ))}\n                        </datalist>\n                        <CustomInput\n                            label=\"Materiál rámu\"\n                            type='text'\n                            name='frameMaterial'\n                            value={glassesParameters.specs.frameMaterial ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"materials\"\n\n                        />\n                        <datalist id=\"materials\">\n                            {glassesMaterials.map((material, idx) => (\n                                <option key={idx} value={material} />\n                            ))}\n                        </datalist>\n                        <CustomInput\n                            label=\"Tvar rámu\"\n                            type='text'\n                            name='frameStyle'\n                            value={glassesParameters.specs.frameStyle ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"shapes\"\n                        />\n                        <datalist id=\"shapes\">\n                            {glassesShapes.map((shape, idx) => (\n                                <option key={idx} value={shape} />\n                            ))}\n                        </datalist>\n                        {/* <CustomInput\n                            label=\"Farba šošovky\"\n                            type='text'\n                            name='lensColor'\n                            value={glassesParameters.specs.lensColor ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                        /> */}\n                        <CustomSelect\n                            label=\"Pohlavie\"\n                            type='text'\n                            name='sex'\n                            value={glassesParameters?.specs?.sex || \"\"}\n                            onChange={(e) => handleSpecsChange(e)}\n                        >\n                            <option value=''>-</option>\n                            <option value='M'>Pánske</option>\n                            <option value='W'>Dámske</option>\n                            <option value='CH'>Detské</option>\n                            <option value='U'>Nezáleží</option>\n                        </CustomSelect>\n                    </div>\n                    <div>\n                        <h4>Velkosť</h4>\n                        {glassesParameters.specs.size.map((value, idx) => (\n                            <CustomInput\n                                key={idx}\n                                label={idx === 0 ? \"Šírka očnice (mm)\" : idx === 1 ? \"Výška očnice (mm)\" : idx === 2 ? \"Veľkosť nosníka (mm)\" : \"Dĺžka stranice (mm)\"}\n                                type='text'\n                                name='size'\n                                value={checkParameter(glassesParameters.specs.size, idx)}\n                                handleChange={(e) => handleGlassesSpecsSizeChange(e, idx)}\n                            />\n                        ))}\n                    </div>\n                </GlassesParameterContainer>\n                {currentUser.admin >= 2 ? (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        {product.available.map((value, idx) => {\n                            if (idx === 0) return\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[idx]}\n                                    type='number'\n                                    name={\"available\"}\n                                    value={checkParameter(product.available, idx)}\n                                    handleChange={e => handleAvailableChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </StockContainer>\n                ) : (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        <CustomInput\n                            label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                            type='number'\n                            name={\"available\"}\n                            value={checkParameter(product.available, currentUser.premises)}\n                            handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                        />\n                    </StockContainer>\n                )}\n            </div>\n        </GlassesContainerForm>\n    )\n}\n\nexport default ProductGlassesForm\n","/app/src/components/product-lenses-form/product-lenses-form.component.jsx",[],"/app/src/components/product-accessories-form/product-accessories-form.component.jsx",["860","861"],"import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    AccessoriesFormContainer,\n    AccessoriesContainer,\n    StockContainer,\n    ImageContainer,\n    ProductImage,\n    DeleteButton,\n    NewImageContainer,\n    NewImagesContainer,\n} from './product-accessories-form.styles'\n\nconst ProductAccessoriesForm = ({\n    product,\n    handleChange,\n    selectedImage,\n    setImageModal,\n    handleAvailableChange,\n    checkParameter,\n    retailNames,\n    currentUser,\n    isUpdating,\n    filters,\n    productObj\n}) => {\n    return (\n        <AccessoriesFormContainer>\n            <AccessoriesContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov doplnku*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Značka\"\n                    type='text'\n                    name='brand'\n                    value={product.brand ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"brands\"\n                />\n\n                <datalist id=\"brands\">\n                    {filters?.brands && filters?.brands.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist>\n\n                {/* <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n\n                />\n\n                <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {/* {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />} */}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n\n                <NewImagesContainer>\n                    {productObj?.bonusImages && productObj?.bonusImages.map((img) => (\n                        <NewImageContainer key={img._id}>\n                            {/* <DeleteButton >&#10005;</DeleteButton> */}\n                            <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n            </AccessoriesContainer>\n            {currentUser.admin >= 2 ? (\n                <StockContainer>\n                    <h3>Skladové zásoby</h3>\n                    {product.available.map((value, idx) => {\n                        if (idx === 0) return\n                        return (\n                            <CustomInput\n                                key={idx}\n                                label={currentUser.admin === 1 ? retailNames[currentUser.premises - 1] : retailNames[idx]}\n                                type='number'\n                                name={\"available\"}\n                                value={checkParameter(product.available, idx)}\n                                handleChange={e => handleAvailableChange(e, idx)}\n                            />\n                        )\n                    })}\n                </StockContainer>\n            ) : (\n                <StockContainer>\n                    <h3>Skladové zásoby</h3>\n                    <CustomInput\n                        label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                        type='number'\n                        name={\"available\"}\n                        value={checkParameter(product.available, currentUser.premises)}\n                        handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                    />\n                </StockContainer>\n            )}\n        </AccessoriesFormContainer>\n    )\n}\n\nexport default ProductAccessoriesForm\n","/app/src/components/modal-get-lenses-data/modal-get-lenses-data.component.jsx",["862","863"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport { formatAvailable } from '../../utils/orders.utils'\n\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    SearchButton,\n    ProductTableHead,\n    ProductTableRow,\n    TableCol,\n    TableContainer\n} from './modal-get-lenses-data.styles'\n\nconst GetLensesDataModal = ({ close, getSingleLenses, productObj, setProductObj, fillProductData }) => {\n    const [searchQuery, setSearchQuery] = useState(\"\")\n\n    const [productItems, setProductItems] = useState([])\n\n    const [query, setQuery] = useState({\n        limit: 10,\n        skip: 0,\n    })\n\n    const { response, isLoading, refetch } = useFetchByQuery(\"api/admin/lenses/filter\", query)\n\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        setQuery({\n            ...query,\n            query: searchQuery\n        })\n        refetch()\n    }\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== \"\") {\n            if (e.key === 'Enter') {\n                setQuery({\n                    ...query,\n                    query: searchQuery\n                })\n                refetch()\n            }\n        }\n    }\n\n    const handleClick = (id) => {\n        getSingleLenses(id, (data) => {\n            const { lenses } = data\n\n            delete lenses['__v']\n            delete lenses['_id']\n            delete lenses['soldAmount']\n            delete lenses['dateCreated']\n\n            fillProductData({\n                ...lenses,\n                image: lenses.image._id,\n                lensType: lenses.type || \"číre\",\n                dioptric: lenses.dioptric || false,\n                type: 0,\n                price: (lenses.price / 100).toFixed(2),\n            })\n\n        })\n        close()\n\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        setProductItems(response.lenses)\n    }, [isLoading])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h2>Vyhľadať šošovky</h2>\n                <div>\n                    <CustomInput\n                        label='Názov šošoviek, eanCode alebo popis'\n                        value={searchQuery}\n                        handleChange={(e) => setSearchQuery(e.target.value)}\n                        onKeyPress={handleSearchOnEnter}\n                    />\n                </div>\n                <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n\n                <TableContainer>\n                    <ProductTableHead>\n                        <TableCol isHead>eanKód</TableCol>\n                        <TableCol isHead>Názov</TableCol>\n                        <TableCol isHead>Dioptrie</TableCol>\n                        <TableCol isHead>Cylinder</TableCol>\n                        <TableCol isHead>Cena</TableCol>\n                    </ProductTableHead>\n                    {productItems.map((product, idx) => (\n                        <ProductTableRow key={idx} onClick={() => handleClick(product._id)}>\n                            <TableCol>{product.eanCode}</TableCol>\n                            <TableCol>{product.name}</TableCol>\n                            <TableCol>\n                                {product.dioptersRange && <p>{`od ${product.dioptersRange[0]} do ${product.dioptersRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>\n                                {product.cylinderRange && <p>{`od ${product.cylinderRange[0]} do ${product.cylinderRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>{(product.price / 100).toFixed(2)}€</TableCol>\n                        </ProductTableRow>\n                    ))}\n                </TableContainer>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default GetLensesDataModal\n","/app/src/components/modal-get-product-data/modal-get-product-data.component.jsx",["864"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport { formatAvailable } from '../../utils/orders.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    SearchButton,\n    ProductTableHead,\n    ProductTableRow,\n    TableCol,\n    TableContainer\n} from './modal-get-product-data.styles'\n\nconst GetProductDataModal = ({ close, getSingleProduct, productObj, setProductObj }) => {\n    const [searchQuery, setSearchQuery] = useState(\"\")\n\n    const [productItems, setProductItems] = useState([])\n\n    const [query, setQuery] = useState({\n        limit: 10,\n        skip: 0,\n        filters: {\n            type: productObj.type\n        },\n        sortBy: {\n            date: -1\n        }\n    })\n    const { response, isLoading, refetch } = useFetchByQuery(\"api/admin/products/filter\", query)\n\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        setQuery({\n            ...query,\n            query: searchQuery\n        })\n        refetch()\n    }\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== \"\") {\n            if (e.key === 'Enter') {\n                setQuery({\n                    ...query,\n                    query: searchQuery,\n                })\n                refetch()\n            }\n        }\n    }\n\n    const handleClick = (id) => {\n        getSingleProduct(id, (data) => {\n            const { product } = data\n\n            if (product.type === 1 || product.type === 2 || product.type === 4) {\n                delete product['__v']\n                delete product['soldAmount']\n                delete product['ordered']\n                delete product['_id']\n                delete product['boughtTogether']\n                delete product['contactLenses']\n                delete product['date']\n\n                setProductObj({\n                    ...product,\n                    // id: product._id,\n                    ...(!product._id) && { _id: product._id },\n                    price: (product.price / 100).toFixed(2),\n                    eanCode: product.eanCode,\n                    image: product.image._id,\n                    specs: {\n                        ...product.specs,\n                        size: [...Array(4)].map((value, idx) => product.specs.size[idx] ? product.specs.size[idx] : 0)\n                    }\n                })\n            }\n            if (product.type === 3) {\n                delete product['__v']\n                delete product['soldAmount']\n                delete product['ordered']\n                delete product['_id']\n                delete product['boughtTogether']\n                delete product['specs']\n                delete product['date']\n\n                setProductObj({\n                    ...product,\n                    // id: product._id,\n                    ...(!product._id) && { _id: product._id },\n                    price: (product.price / 100).toFixed(2),\n                    // colorCode: product.colorCode ?? \"\",\n                    image: product.image._id,\n                    // specs: {\n                    //     ...product.specs,\n                    //     size: [...Array(4)].map((value, idx) => product.specs.size[idx] ? product.specs.size[idx] : 0)\n                    // }\n                })\n            }\n        })\n        close()\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        setProductItems(response.products)\n    }, [isLoading])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h2>Vyhľadať produkt</h2>\n                <div>\n                    <CustomInput\n                        label='Názov produktu, eanCode alebo popis'\n                        value={searchQuery}\n                        handleChange={(e) => setSearchQuery(e.target.value)}\n                        onKeyPress={handleSearchOnEnter}\n                    />\n                </div>\n                <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n\n                <TableContainer>\n                    <ProductTableHead>\n                        <TableCol isHead>eanKód</TableCol>\n                        <TableCol isHead>Obrázok</TableCol>\n                        <TableCol isHead>Názov</TableCol>\n                        <TableCol isHead>Značka</TableCol>\n                        <TableCol isHead>Cena</TableCol>\n                        <TableCol isHead>Na sklade</TableCol>\n                    </ProductTableHead>\n                    {productItems.map((product, idx) => (\n                        <ProductTableRow key={idx} onClick={() => handleClick(product._id)}>\n                            <TableCol>{product.eanCode}</TableCol>\n                            <TableCol>\n                                {product?.image && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${product.image.imagePath}`} alt={product.image.alt} />}\n                            </TableCol>\n                            <TableCol>{product.name}</TableCol>\n                            <TableCol>{product.brand}</TableCol>\n                            <TableCol>{(product.price / 100).toFixed(2)}€</TableCol>\n                            <TableCol>{product.type === 6 ? 'Služba' : formatAvailable(product.available)}</TableCol>\n                        </ProductTableRow>\n                    ))}\n                </TableContainer>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default GetProductDataModal\n","/app/src/components/modal-product-image-gallery/modal-product-image-gallery.component.jsx",["865","866","867","868","869","870","871","872","873"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomButton from '../custom-button/custom-button.component'\n\nimport ImageModal from '../modal-images/modal-images.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    UploadButton,\n    NewImageContainer,\n    DeleteButton,\n    NewImagesContainer,\n    SubmitButton,\n    UploadImageButton\n} from './modal-product-image-gallery.styles'\n\nconst ProductImageGalleryModal = ({ close, setImage }) => {\n    const tabs = [\n        'upload',\n        'select'\n    ]\n    const [tab, setTab] = useState(tabs[0])\n    const [images, setImages] = useState([])\n    const [files, setFiles] = useState([])\n\n    const [isModalVisible, setIsModalVisible] = useState(false)\n\n    const [selectedImages, setSelectedImages] = useState([])\n    const [primaryImage, setPrimaryImage] = useState(null)\n\n    const handleFileInputChange = (e) => {\n        const files = e.target.files;\n        var filesArr = Array.prototype.slice.call(files);\n        const filesArrWithUrl = filesArr.map((file) => ({\n            file: file,\n            url: URL.createObjectURL(file)\n        }))\n        setFiles(prevValue => ([...prevValue, ...filesArrWithUrl]))\n    }\n\n    const selectImage = (img) => {\n        setSelectedImages(prevValue => ([...prevValue, img]))\n    }\n\n    const removeSelectedImage = img => {\n        const arr = selectedImages.filter(image => image._id !== img._id)\n        setSelectedImages(arr)\n    }\n\n    const selectPrimaryImage = img => {\n        setPrimaryImage(img)\n    }\n\n    const handleSubmit = (primaryImg, otherImages) => {\n\n        // console.log(primaryImg._id)\n\n\n        if (primaryImg) {\n            const arr = otherImages.map(img => img._id)\n            const filteredArr = otherImages.filter(img => img._id !== primaryImg._id)\n            setImage(primaryImg._id, filteredArr, primaryImg)\n            close()\n        } else {\n            // const arr = otherImages.map(img => img._id)\n            // console.log(arr)\n            const firstIndex = otherImages[0]\n            const filteredArr = otherImages.filter(img => img._id !== firstIndex._id)\n            setImage(firstIndex._id, filteredArr, firstIndex)\n            close()\n        }\n\n\n    }\n\n    const { response, isLoading, refetch } = useFetchByQuery('api/images/filter', {\n        sortBy: {\n            dateCreated: -1\n        },\n        limit: 10,\n        skip: 0\n    })\n    useEffect(() => {\n        if (isLoading) return\n        if (!response) return\n        setImages(response.images)\n    }, [isLoading])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            {isModalVisible && <ImageModal close={() => setIsModalVisible(false)} setImage={refetch} />}\n\n            <CloseButton onClick={close} />\n            <Modal>\n                <UploadImageButton onClick={() => setIsModalVisible(true)}>Pridať</UploadImageButton>\n\n                <h2>1. Vybrať obrázky</h2>\n\n                <NewImagesContainer>\n                    {images?.length > 0 && images.map((img) => (\n                        <NewImageContainer key={img._id}>\n                            {/* <DeleteButton >&#10005;</DeleteButton> */}\n                            <img onClick={() => selectImage(img)} src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n\n                {selectedImages.length > 0 && <h2>2. Zvolené obrázky</h2>}\n                {selectedImages.length > 0 && <p>Vybrať hlavný obrázok</p>}\n\n                <NewImagesContainer>\n                    {selectedImages.length > 0 && selectedImages.map((img) => (\n                        <NewImageContainer key={img._id} isPrimary={img._id === primaryImage?._id}>\n                            <DeleteButton onClick={() => removeSelectedImage(img)} >&#10005;</DeleteButton>\n                            <img onClick={() => selectPrimaryImage(img)} src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n\n                <SubmitButton onClick={() => handleSubmit(primaryImage, selectedImages)}>Dokončiť</SubmitButton>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default ProductImageGalleryModal\n\n                // <h2>1. Vybrať obrázky</h2>\n\n                // <UploadButton htmlFor='image'>\n                //     <input\n                //         id='image'\n                //         type='file'\n                //         name='image'\n                //         multiple\n                //         accept=\"image/png, image/jpeg\"\n                //         onChange={handleFileInputChange}\n                //     />\n                //     Vybrať\n                // </UploadButton>\n\n                // {files.length > 0 && (\n                //     <div>\n                //         <h2>2. Vybrat hlavný obrázok</h2>\n                //     </div>\n                // )}\n\n                // <NewImagesContainer>\n                //     {files.length > 0 && files.map(({ url }, idx) => (\n                //         <NewImageContainer key={idx}>\n                //             <DeleteButton >&#10005;</DeleteButton>\n                //             <img src={url} alt={`new image ${idx}`} />\n                //         </NewImageContainer>\n                //     ))}\n                // </NewImagesContainer>\n","/app/src/components/section-navbar/section-navbar.styles.jsx",[],"/app/src/components/section-header/section-header.styles.jsx",[],"/app/src/components/list-arrows/list-arrows.styles.jsx",[],"/app/src/components/product-overview/product-overview.styles.jsx",[],"/app/src/components/modal-eshop-filter/modal-eshop-filter.styles.jsx",[],"/app/src/components/scroll-container/scroll-container.styles.jsx",[],"/app/src/components/order-overview/order-overview.styles.jsx",[],"/app/src/components/order-overview/order-overview.component.jsx",[],"/app/src/components/new-user-form/new-user-form.styles.jsx",[],"/app/src/components/user-form/user.form-styles.jsx",[],"/app/src/components/product-input-row/product-input-row.styles.jsx",[],"/app/src/components/custom-checkbox/custom-checkbox.styles.jsx",[],"/app/src/components/modal-images/modal-images.styles.jsx",[],"/app/src/components/custom-select/custom-select.styles.jsx",[],"/app/src/components/custom-textarea/custom-textarea.styles.jsx",[],"/app/src/utils/week-calendar.utils.jsx",[],"/app/src/components/booking-calendar-bookings/booking-calendar-bookings.styles.jsx",[],"/app/src/components/calendar/calendar.styles.jsx",[],"/app/src/components/calendar-weekdays/calendar-weekdays.styles.jsx",[],"/app/src/components/profile-order-overview/profile-order-overview.component.jsx",[],"/app/src/components/parameters-table/parameters-table.component.jsx",["874","875","876","877","878"],"/app/src/components/examinations-overview/examinations-overview.component.jsx",["879"],"import React, { useState, useEffect, useContext } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useFetchById } from '../../hooks/useFetch'\nimport { ExaminationContext } from '../../context/examination/examination.context'\n\nimport ExaminationUser from '../examination-user/examination-user.component'\nimport OptometristExaminationModal from '../modal-optometrist-examination/modal-optometrist-examination.component'\n\n// import {\n//     checkParameterValue\n// } from '../../utils/parameters.utils'\n\nimport {\n    ExaminationsOverviewContainer,\n    Header,\n    ExaminationContainer,\n    ExamHead,\n    // ExamTableContainer,\n    // HeadTableCol,\n    // TableCol,\n    ExaminationOptions,\n    AddButton,\n    UpdateButton,\n    DeleteButton\n} from './examinations-overview.styles'\n\nconst ExaminationsOverview = () => {\n    const params = useParams()\n    const examinationData = useFetchById(\"api/admin/exams/user\", params.id)\n    const { deleteExamination } = useContext(ExaminationContext)\n    const [showOptometristModal, setShowOptometristModal] = useState(false)\n    const [examinations, setExaminations] = useState([])\n    const [examinationToUpdate, setExaminationToUpdate] = useState(null)\n\n    const [isDisabled, setIsDisabled] = useState(false)\n\n\n    const handleUpdateClick = (e, id) => {\n        e.preventDefault()\n        setExaminationToUpdate(id)\n        setShowOptometristModal(true)\n    }\n\n    const handleDelete = (e, id) => {\n        e.preventDefault()\n        if (isDisabled) {\n            return;\n        }\n        setIsDisabled(true);\n        deleteExamination(id)\n\n        setTimeout(() => {\n            examinationData.refetch()\n            setIsDisabled(false);\n        }, 100)\n    }\n\n    const handleCloseModal = () => {\n        setShowOptometristModal(false)\n        setExaminationToUpdate(null)\n    }\n\n    useEffect(() => {\n        if (!examinationData.isLoading) {\n            if (examinationData.response) {\n                setExaminations(examinationData.response.exams)\n            }\n        }\n    }, [examinationData.isLoading])\n\n    return (\n        <ExaminationsOverviewContainer>\n            {showOptometristModal && <OptometristExaminationModal\n                userId={params.id}\n                examinationToUpdate={examinationToUpdate}\n                refetch={examinationData.refetch}\n                close={handleCloseModal}\n            />}\n            <Header>\n                <h2>Vyšetrenia</h2>\n                <div>\n                    <AddButton type='button' onClick={() => setShowOptometristModal(true)}>Pridať prehliadku</AddButton>\n                </div>\n            </Header>\n\n\n            <div>\n                {examinations && examinations.map((examination, idx) => (\n                    <ExaminationContainer key={idx}>\n                        <ExamHead>\n                            <h3>Dátum:</h3>\n                            <p>{new Date(examination?.date).toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric' })}</p>\n                        </ExamHead>\n                        <ExamHead>\n                            <h3>Typ vyšetrenia:</h3>\n                            <p>{examTypes[examination?.type - 1].name}</p>\n                        </ExamHead>\n\n                        <ExaminationOptions>\n                            <ExaminationUser userId={examination.doneBy} />\n                            <div>\n                                <UpdateButton onClick={e => handleUpdateClick(e, examination._id)}>Upraviť</UpdateButton>\n\n                                <DeleteButton disabled={isDisabled} onClick={e => handleDelete(e, examination._id)}>\n                                    {isDisabled ? 'Mažem...' : 'Vymazať'}\n                                </DeleteButton>\n                            </div>\n                        </ExaminationOptions>\n                    </ExaminationContainer>\n                ))}\n            </div>\n        </ExaminationsOverviewContainer>\n    )\n}\n\nexport default ExaminationsOverview\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"Anamnéza\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","/app/src/components/custom-form-switch/custom-form-switch.component.jsx",[],"/app/src/sections/order/steps/3-select-lenses/select-lenses.styles.jsx",[],"/app/src/sections/order/steps/4-summary/summary.styles.jsx",[],"/app/src/utils/orders.utils.jsx",[],"/app/src/sections/order/steps/2-select-product/select-product.styles.jsx",[],"/app/src/sections/order/steps/1-select-user/select-user.styles.jsx",[],"/app/src/components/modal-booking/modal-booking.component.jsx",["880"],"import React, { useState, useContext, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport { BookingContext } from '../../context/booking/booking.context'\n\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\nimport { useFetchById } from '../../hooks/useFetch'\nimport {\n    formatBookingObj\n} from '../../utils/calendar.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    SubmitButton,\n    InputContainer,\n    ModalHeader,\n    CustomSelect\n} from './modal-booking.styles'\n\nconst BookingModal = ({ close, calendarId, refetch, selectedBooking }) => {\n    const { createBooking, updateBooking } = useContext(BookingContext)\n    const { response, isLoading } = useFetchById(\"api/booking/bookings\", selectedBooking, !selectedBooking)\n\n    const [booking, setBooking] = useState({})\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const handleBookingChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete booking[name]\n            setBooking({\n                ...booking\n            })\n            return\n        }\n\n        setBooking(prevValue => ({\n            ...prevValue,\n            [name]: value\n        }))\n    }\n\n    const handleSubmit = () => {\n        if (!booking?.name) return\n\n        if (isUpdating) {\n            let bookingToUpdate = formatBookingObj(booking)\n            updateBooking(bookingToUpdate, booking._id)\n        } else {\n            let bookingToAdd = {\n                ...booking,\n                calendar: calendarId\n            }\n            createBooking(bookingToAdd)\n        }\n\n        refetch()\n        close()\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response?.booking) {\n            setIsUpdating(true)\n            setBooking(response?.booking)\n        }\n    }, [selectedBooking, isLoading])\n\n    useEffect(() => {\n        return () => {\n            setIsUpdating(false)\n            setBooking({})\n        }\n    }, [])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <ModalHeader>\n                    {!isUpdating && <h2>Nové vyšetrenie</h2>}\n                    {isUpdating && <h2>Upraviť vyšetrenie</h2>}\n                    <div>\n                        <CustomCheckbox\n                            label=\"Aktivné\"\n                            isActive={booking?.active || false}\n                            name='active'\n                            handleClick={() => handleBookingChange({\n                                target: {\n                                    name: 'active',\n                                    value: booking?.active ? !booking?.active : true\n                                }\n                            })}\n                        />\n                    </div>\n                </ModalHeader>\n                <InputContainer>\n                    <CustomInput\n                        label=\"Názov vyšetrenia*\"\n                        name=\"name\"\n                        value={booking?.name || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                <InputContainer>\n                    <CustomInput\n                        label=\"Cena\"\n                        name=\"price\"\n                        value={booking?.price || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                <InputContainer>\n                    <CustomInput\n                        label=\"Čas\"\n                        name=\"time\"\n                        value={booking?.time || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                <InputContainer>\n                    <CustomSelect\n                        label=\"Farba\"\n                        type='text'\n                        name='color'\n                        value={booking?.color || \"\"}\n                        onChange={handleBookingChange}\n                    >\n                        <option value='DD4C4C'>Červená</option>\n                        <option value='ebac01'>Žltá</option>\n                        <option value='32AA5F'>Zelená</option>\n                    </CustomSelect>\n                </InputContainer>\n                <InputContainer>\n                    <CustomTextarea\n                        label=\"Popis\"\n                        rows='5'\n                        name=\"description\"\n                        value={booking?.description || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                {!isUpdating && <SubmitButton onClick={handleSubmit}>Pridať</SubmitButton>}\n                {isUpdating && <SubmitButton onClick={handleSubmit}>Uložiť</SubmitButton>}\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById(\"portal\"))\n}\n\nexport default BookingModal\n","/app/src/components/modal-userbookings-details/modal-userbookings-details.component.jsx",["881"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Spinner from '../spinner/spinner.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\nimport { retailNames } from '../../utils/warehouse.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    GridContainer,\n    BlockContainer,\n    Header,\n    CancelButton,\n    Container\n} from './modal-userbookings-details.styles'\n\nconst UserbookingDetailsModal = ({ close, userBooking, calendarId, cancelUserBooking }) => {\n    const { response, isLoading } = useFetchByQuery(`api/booking/calendars/${calendarId}/dayInfo`, {\n        date: userBooking?.userBookings?.dueDate.split(\":\")[1]\n    }, !userBooking)\n\n    const [booking, setBooking] = useState(null)\n\n    useEffect(() => {\n        if (isLoading) return\n        if (!response) return\n\n        const newBooking = response.userBookings.find(booking => booking.dueTime === userBooking.userBookings.dueDate)\n        setBooking(newBooking)\n\n    }, [isLoading])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                {!booking && <Spinner />}\n                <h2>{booking?.booking?.name}</h2>\n\n                <Header>\n                    <h3>Informácie:</h3>\n                    <CancelButton onClick={() => cancelUserBooking(booking._id)}>Zrušiť rezerváciu</CancelButton>\n                </Header>\n                <GridContainer>\n                    <BlockContainer>\n                        <h3>Meno a priezvisko</h3>\n                        <p>{booking?.name}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>Prevadzka</h3>\n                        <p>{retailNames[booking?.booking?.premises]}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>Tel. číslo</h3>\n                        <p>{booking?.phone}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>E-mail</h3>\n                        <p>{booking?.email}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>Dátum</h3>\n                        <p>{booking?.dueTime}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>Zrušené</h3>\n                        <p>{booking?.cancelled ? \"Ano\" : \"Nie\"}</p>\n                    </BlockContainer>\n                </GridContainer>\n\n                <Container>\n                    <BlockContainer>\n                        <h3>Poznámka</h3>\n                        {booking?.note ? (\n                            <p>{booking?.note}</p>\n                        ) : (\n                                <p>Žiadná poznámka</p>\n                            )}\n                    </BlockContainer>\n\n                    <BlockContainer>\n                        <h3>Popis</h3>\n                        <p>{booking?.booking?.description}</p>\n                    </BlockContainer>\n\n                </Container>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default UserbookingDetailsModal\n","/app/src/components/modal-user-bookings/modal-user-booking.component.jsx",["882","883"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    formatDate,\n    formatCalendarStartTime,\n    formatCalendarEndTime\n} from '../../utils/calendar.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    SubmitButton,\n    Navbar,\n    UserTable,\n    TableHead,\n    Tablebody,\n    TableCol,\n    SearchTab,\n    CustomSelect,\n    DateContainer\n} from './modal-user-booking.styles'\n\nconst UserBookingModal = ({ refetchWeekCalendar, close, day, calendar, refetchCalendar, createUserBooking }) => {\n\n    const [query, setQuery] = useState(null)\n    const [activeTab, setActiveTab] = useState(0)\n    const [userBooking, setUserBooking] = useState({})\n    const [bookingDate, setBookingDate] = useState({\n        date: \"\",\n        hour: \"\",\n        min: 0\n    })\n\n    const [startTime, setStartTime] = useState(null)\n    const [endTime, setEndTime] = useState(null)\n\n\n\n    const { refetch, response } = useFetchByQuery('api/admin/users/filter', query, !query)\n\n    const handleSearch = () => {\n        if (!query) return\n        refetch()\n    }\n\n    const handleSearchOnEnter = (e) => {\n        if (query !== null) {\n            if (e.key === 'Enter') {\n                refetch()\n            }\n        }\n    }\n\n    const handleUserBookingChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete userBooking[name]\n            setUserBooking({ ...userBooking })\n            return\n        }\n\n        setUserBooking(prevValue => ({\n            ...prevValue,\n            [name]: value\n        }))\n    }\n\n    const selectUser = (userObj) => {\n        setUserBooking(prevValue => ({\n            ...prevValue,\n            ...userObj\n        }))\n        setActiveTab(0)\n        setQuery(null)\n    }\n\n    const handleChangeDate = e => {\n        const { name, value } = e.target\n\n        setBookingDate(prevValue => ({\n            ...prevValue,\n            [name]: value\n        }))\n    }\n\n    const handleSubmit = () => {\n        // if (!userBooking?.name) return\n        // if (!userBooking?.email) return\n        // if (!userBooking?.phone) return\n        // if (!userBooking?.booking) return\n\n        let bookingToAdd = {\n            ...userBooking,\n            dueTime: formatDate(bookingDate),\n            values: {}\n        }\n        createUserBooking(bookingToAdd, refetchCalendar, close, refetchWeekCalendar)\n        // refetchCalendar()\n        // close()\n    }\n\n    useEffect(() => {\n        if (day) {\n            const { time, dayNumber, month, year } = day\n            setStartTime(formatCalendarStartTime(calendar, day))\n            setEndTime(formatCalendarEndTime(calendar, day))\n            // const formatedDate = formatDate(`${dayNumber}-${month}-${year}`, time)\n            setBookingDate({\n                date: `${year}-${month < 9 ? `0${month + 1}` : (month + 1)}-${dayNumber < 10 ? `0${dayNumber}` : dayNumber}`,\n                hour: Number(time?.split(\"/\")[0]),\n                min: Number(time?.split(\"/\")[1])\n            })\n        }\n    }, [day])\n\n    useEffect(() => {\n        return () => {\n            setUserBooking({})\n            setQuery(null)\n            setActiveTab(0)\n        }\n    }, [])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h2>Objednať zákazníka</h2>\n\n                <Navbar\n                    items={optionTabs}\n                    activeIndex={activeTab}\n                    setActiveIndex={setActiveTab}\n                />\n\n                {activeTab === 1 ? (\n                    <SearchTab>\n                        <CustomInput\n                            label='Meno, priezvisko, e-mail alebo tel. číslo'\n                            name='query'\n                            value={query ? query?.query : \"\"}\n                            handleChange={e => setQuery({\n                                limit: 10,\n                                query: e.target.value\n                            })}\n                            onKeyPress={handleSearchOnEnter}\n                        />\n\n                        <SubmitButton onClick={handleSearch}>Hľadať</SubmitButton>\n\n\n                        <UserTable>\n                            <TableHead>\n                                <TableCol>Meno</TableCol>\n                                <TableCol>E-mail</TableCol>\n                                <TableCol>Tel. číslo</TableCol>\n                            </TableHead>\n                            {response?.users ? response?.users?.map(({ name, email, phone }, idx) => (\n                                <Tablebody key={idx} onClick={() => selectUser({ name, email, phone })}>\n                                    <TableCol>{name}</TableCol>\n                                    <TableCol>{email}</TableCol>\n                                    <TableCol>{phone}</TableCol>\n                                </Tablebody>\n                            )) : (\n                                <div>\n                                    <p>Žiaden výsledok</p>\n                                </div>\n                            )}\n                        </UserTable>\n                    </SearchTab>\n                ) : (\n                    <React.Fragment>\n                        <div>\n                            <h3>Dátum vyšetrenia</h3>\n                            <DateContainer>\n                                <CustomInput\n                                    label=''\n                                    type='date'\n                                    name='date'\n                                    handleChange={handleChangeDate}\n                                    value={bookingDate?.date}\n\n                                />\n                                <div>\n                                    <CustomInput\n                                        label='Čas'\n                                        type='number'\n                                        name='hour'\n                                        value={bookingDate?.hour?.toString()}\n                                        min={startTime?.split(\":\")[0]}\n                                        max={endTime?.split(\":\")[0]}\n                                        handleChange={handleChangeDate}\n                                        step=\"1\"\n                                    />\n                                </div>\n                                <p>:</p>\n                                <div>\n                                    <CustomSelect\n                                        name='min'\n                                        value={bookingDate?.min?.toString()}\n                                        onChange={handleChangeDate}\n                                    >\n                                        <option value={0}>00</option>\n                                        {calendar?.interval === 30 && <option value={30}>30</option>}\n                                    </CustomSelect>\n                                </div>\n                            </DateContainer>\n                        </div>\n                        <div>\n                            <CustomInput\n                                label='Meno*'\n                                name='name'\n                                value={userBooking?.name || \"\"}\n                                handleChange={handleUserBookingChange}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label='E-mail'\n                                name='email'\n                                value={userBooking?.email || \"\"}\n                                handleChange={handleUserBookingChange}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label='Tel. číslo*'\n                                name='phone'\n                                value={userBooking?.phone || \"\"}\n                                handleChange={handleUserBookingChange}\n                            />\n                        </div>\n\n                        <div>\n                            <CustomTextarea\n                                label='Poznámka'\n                                name='note'\n                                rows=\"5\"\n                                value={userBooking?.note || \"\"}\n                                handleChange={handleUserBookingChange}\n                            />\n                        </div>\n\n                        <div>\n                            <h3>Vyšetrenie</h3>\n                            <CustomSelect\n                                name='booking'\n                                value={userBooking?.booking || \"\"}\n                                onChange={handleUserBookingChange}\n                            >\n                                <option value={''}>Nezvolené</option>\n                                {calendar?.bookings.map((booking, idx) => {\n                                    if (booking.active === false) return\n                                    return (\n                                        <option key={idx} value={booking._id}>{booking.name}</option>\n                                    )\n                                })}\n                            </CustomSelect>\n                        </div>\n                    </React.Fragment>\n                )}\n\n                {activeTab === 0 && <SubmitButton onClick={handleSubmit}>Vytvoriť</SubmitButton>}\n            </Modal>\n        </ModalContainer >\n    ), document.getElementById('portal'))\n}\n\nexport default UserBookingModal\n\nconst optionTabs = [\n    {\n        id: 0,\n        name: \"Nový zákazník\",\n    },\n    {\n        id: 1,\n        name: \"Vyhľadať zákazníka\",\n    },\n]","/app/src/components/calendar-booked-day/calendar-booked-day.component.jsx",["884","885"],"import React, { useState, useEffect } from 'react'\nimport stringSimilarity from \"string-similarity\"\n\n\n// import Spinner from '../spinner/spinner.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    BookedDayContainer\n} from './calendar-booked-day.styles'\n\nconst CalendarBookedDay = ({ dayData, calendarId, time, userBookings, open }) => {\n    const [isHalfHour, setIsHalfHour] = useState(false)\n    const { response, isLoading, refetch } = useFetchByQuery(`api/booking/calendars/${calendarId}/dayInfo`, {\n        date: dayData.bookingDate\n    }, !dayData?.bookingDate)\n    const [appointment, setAppointment] = useState(null)\n    const [isValidDueTime, setIsValiDueTime] = useState(false)\n    // const [isBelongToAnother, setIsBelongToAnother] = useState(false)\n\n    useEffect(() => {\n        if (isLoading) return\n        const bookingsDueTime = response?.userBookings?.filter(booking => !booking?.cancelled).map(booking => booking?.dueTime)\n\n        if (bookingsDueTime?.length > 0) {\n            const matches = stringSimilarity.findBestMatch(userBookings?.dueDate, bookingsDueTime);\n\n            const exactBooking = response?.userBookings?.find(booking => booking?.dueTime === userBookings?.dueDate)\n            const todayBooking = response?.userBookings?.find(booking => booking?.dueTime === matches?.bestMatch?.target)\n\n            if (userBookings?.dueDate === exactBooking?.dueTime) {\n                setIsValiDueTime(true)\n            } else if (matches?.bestMatch?.target === todayBooking?.dueTime) {\n                // setIsBelongToAnother(true)\n            }\n\n            setAppointment(exactBooking)\n\n        }\n\n    }, [isLoading])\n\n    useEffect(() => {\n        if (!dayData?.bookingDate) return\n        refetch()\n    }, [dayData?.bookingDate])\n\n    useEffect(() => {\n        return () => {\n            setIsHalfHour(false)\n            setIsValiDueTime(false)\n        }\n    }, [])\n\n    return (\n        <React.Fragment>\n            <BookedDayContainer onClick={isValidDueTime ? open : () => { }} color={appointment?.booking?.color ? `#${appointment?.booking?.color}` : `var(--appointment-container-background-color)`} isHalfHour={isHalfHour}>\n                {/* <BookedDayContainer onClick={() => console.log(appointment)} color={appointment?.booking?.color ? `#${appointment?.booking?.color}` : `#${response?.userBookings[0]?.booking?.color}`} isHalfHour={isHalfHour}> */}\n                {isValidDueTime && <div>\n                    <h4>{appointment && appointment?.booking?.name}</h4>\n                    <h5>{time}</h5>\n                </div>}\n                {/* {(isBelongToAnother && !isValidDueTime) && <div>\n                    <h4>Test</h4>\n                </div>} */}\n\n            </BookedDayContainer>\n        </React.Fragment>\n    )\n}\n\nexport default CalendarBookedDay\n","/app/src/components/product-glasses-form/product-glasses-form.styles.jsx",[],"/app/src/components/custom-back-button/custom-back-button.component.jsx",[],"/app/src/components/order-cart-lenses-row/order-cart-lenses-row.component.jsx",[],"/app/src/components/order-summary-lenses-name/order-summary-lenses-name.component.jsx",[],"/app/src/components/modal-finish-order/modal-finish-order.component.jsx",["886"],"import React, { useState, useEffect } from 'react'\n\nimport {\n    formatPrice\n} from '../../utils/warehouse.utils'\n\nimport CustomInput from '../custom-input/custom-input.component'\n\nimport {\n    Modal,\n    AddButton,\n    CustomSelect,\n    OptionsCheckbox,\n    OverwriteAddressCheckbox,\n    DiscountCheckboxContainer,\n    CouponValueContainer\n} from './modal-finish-order.styles'\n\nconst FinishOrderModal = ({\n    order,\n    combinedProducts,\n    createOrder,\n    setHasChanged,\n    isUpdating,\n    updateOrder\n}) => {\n    const [orderDetail, setOrderDetails] = useState({\n        paymentType: \"cash\"\n    })\n    const [hasDeposit, setHasDeposit] = useState(false)\n    const [hasCoupon, setHasCoupon] = useState(false)\n    const [overwrite, setOverwrite] = useState(false)\n\n    const toggleDeposit = prevValue => {\n        if (prevValue) {\n            setHasDeposit(false)\n            if (orderDetail.paidAlready) {\n                delete orderDetail[\"paidAlready\"]\n                setOrderDetails({\n                    ...orderDetail\n                })\n            }\n        } else {\n            setHasDeposit(true)\n        }\n    }\n\n    const toggleCoupon = prevValue => {\n        if (prevValue) {\n            setHasCoupon(false)\n            if (orderDetail.couponValue) {\n                delete orderDetail[\"couponValue\"]\n                setOrderDetails({\n                    ...orderDetail\n                })\n            }\n        } else {\n            setHasCoupon(true)\n        }\n    }\n\n    const toggleOverwriteAddress = prevValue => {\n        if (prevValue) {\n            setOverwrite(false)\n            if (orderDetail.overwrite) {\n                delete orderDetail[\"overwrite\"]\n                setOrderDetails({\n                    ...orderDetail\n                })\n            }\n        } else {\n            setOverwrite(true)\n        }\n    }\n\n    const handleOrderDetailChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete orderDetail[name]\n            setOrderDetails({\n                ...orderDetail\n            })\n            return\n        }\n\n        setOrderDetails({\n            ...orderDetail,\n            [name]: value\n        })\n\n    }\n\n    const handleAddressOverwriteChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete orderDetail.overwrite[name]\n            setOrderDetails({\n                ...orderDetail\n            })\n            return\n        }\n\n        setOrderDetails({\n            ...orderDetail,\n            overwrite: {\n                ...orderDetail.overwrite,\n                [name]: value\n            }\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        if (isUpdating) {\n            let orderObj = {\n                ...orderDetail,\n            }\n\n            // console.log(orderObj)\n\n\n            delete orderObj['paymentType']\n            delete orderObj['shouldDeliver']\n\n            setHasChanged(false)\n            updateOrder(orderObj, order.order._id)\n\n        } else {\n            let orderObj = {\n                ...orderDetail,\n                user: order.user._id,\n                combinedProducts: combinedProducts.map(product => product._id),\n                status: hasDeposit ? \"half-paid\" : \"paid\"\n            }\n\n            if (orderDetail.couponValue) {\n\n                orderObj = {\n                    ...orderObj,\n                    couponValue: formatPrice(orderDetail.couponValue),\n                    // paidAlready: orderObj.paidAlready + orderDetail.couponValue\n                }\n            }\n            if (orderDetail.paidAlready) {\n                let price = 0\n                if (orderDetail.couponValue) {\n                    price = formatPrice(orderDetail.couponValue) + formatPrice(orderDetail.paidAlready)\n                } else {\n                    price = formatPrice(orderDetail.paidAlready)\n                }\n\n                orderObj = {\n                    ...orderObj,\n                    paidAlready: price\n                }\n            }\n\n            setHasChanged(false)\n            createOrder(orderObj)\n        }\n    }\n\n    useEffect(() => {\n        if (isUpdating) {\n            if (order?.order) {\n                handleOrderDetailChange({\n                    target: {\n                        name: 'shouldDeliver',\n                        value: order?.order?.shouldDeliver\n                    }\n                })\n                handleOrderDetailChange({\n                    target: {\n                        name: 'buyingAsCompany',\n                        value: order?.order?.buyingAsCompany\n                    }\n                })\n            }\n        }\n    }, [isUpdating, order])\n\n    useEffect(() => {\n        return () => {\n            setOrderDetails({\n                paymentType: \"cash\"\n            })\n            setHasDeposit(false)\n            setOverwrite(false)\n        }\n    }, [])\n\n    return (\n        <Modal>\n            <h2>{isUpdating ? \"Upraviť objednávku\" : 'Dokončiť objednávku'}</h2>\n\n            {!isUpdating && <div>\n                <h4>Spôsob platby</h4>\n\n                <CustomSelect\n                    name='paymentType'\n                    value={orderDetail?.paymentType ?? \"cash\"}\n                    onChange={(e) => handleOrderDetailChange(e)}\n                >\n                    <option value={\"cash\"}>Hotovosť</option>\n                    <option value={\"card\"}>Karta</option>\n                </CustomSelect>\n\n                <DiscountCheckboxContainer>\n                    <input id=\"hasCoupon\" name='hasCoupon' type='checkbox' value={hasCoupon} onChange={() => toggleCoupon(hasCoupon)} />\n                    <label htmlFor='hasCoupon'>Pridať kupón</label>\n                </DiscountCheckboxContainer>\n\n                {hasCoupon && (\n                    <CouponValueContainer>\n                        <CustomInput\n                            label=\"Hodnota kupónu\"\n                            name=\"couponValue\"\n                            type='text'\n                            value={orderDetail?.couponValue || \"\"}\n                            onChange={e => handleOrderDetailChange(e)}\n                        />\n                    </CouponValueContainer>\n                )}\n\n                <DiscountCheckboxContainer>\n                    <input id=\"hasDeposit\" name='hasDeposit' type='checkbox' value={hasDeposit} onChange={() => toggleDeposit(hasDeposit)} />\n                    <label htmlFor='hasDeposit'>Pridať zálohu</label>\n                </DiscountCheckboxContainer>\n\n                {hasDeposit && (\n                    <CustomInput\n                        label=\"Zaplatená záloha\"\n                        name=\"paidAlready\"\n                        type='text'\n                        value={orderDetail?.paidAlready ?? \"\"}\n                        onChange={e => handleOrderDetailChange(e)}\n                    />\n                )}\n            </div>\n            }\n            <div>\n                <h4>Informácie o doručení</h4>\n                {!isUpdating && <OptionsCheckbox\n                    label={\"Doručiť na adresu\"}\n                    isActive={orderDetail?.shouldDeliver}\n                    handleClick={() => handleOrderDetailChange({\n                        target: {\n                            name: 'shouldDeliver',\n                            value: orderDetail?.shouldDeliver ? !orderDetail?.shouldDeliver : true\n                        }\n                    })}\n                />}\n                <OptionsCheckbox\n                    label={\"Nákup na firmu\"}\n                    isActive={orderDetail?.buyingAsCompany}\n                    handleClick={() => handleOrderDetailChange({\n                        target: {\n                            name: 'buyingAsCompany',\n                            value: orderDetail?.buyingAsCompany ? !orderDetail?.buyingAsCompany : true\n                        }\n                    })}\n                />\n\n                {orderDetail?.shouldDeliver && (\n                    <div>\n                        <h4>Adresa</h4>\n                        <p>{order.user.psc}</p>\n                        <p>{order.user.address}</p>\n                        <p>{order.user.city}</p>\n                        <p>{order.user.country}</p>\n\n                        <div>\n                            <OverwriteAddressCheckbox>\n                                <input id=\"overwrite\" name='overwrite' type='checkbox' value={overwrite} onChange={() => toggleOverwriteAddress(overwrite)} />\n                                <label htmlFor='overwrite'>Iná adresa</label>\n                            </OverwriteAddressCheckbox>\n\n                            {overwrite && (\n                                <div>\n                                    <CustomInput\n                                        label=\"Adresa\"\n                                        name=\"address\"\n                                        type='text'\n                                        value={orderDetail?.overwrite?.address ?? \"\"}\n                                        onChange={e => handleAddressOverwriteChange(e)}\n                                    />\n                                    <CustomInput\n                                        label=\"PSČ\"\n                                        name=\"psc\"\n                                        type='text'\n                                        value={orderDetail?.overwrite?.psc ?? \"\"}\n                                        onChange={e => handleAddressOverwriteChange(e)}\n                                    />\n                                    <CustomInput\n                                        label=\"Mesto\"\n                                        name=\"city\"\n                                        type='text'\n                                        value={orderDetail?.overwrite?.city ?? \"\"}\n                                        onChange={e => handleAddressOverwriteChange(e)}\n                                    />\n                                    <CustomInput\n                                        label=\"Štát\"\n                                        name=\"country\"\n                                        type='text'\n                                        value={orderDetail?.overwrite?.country ?? \"\"}\n                                        onChange={e => handleAddressOverwriteChange(e)}\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {isUpdating && <AddButton onClick={handleSubmit}>Upraviť objednávku</AddButton>}\n            {!isUpdating && <AddButton onClick={handleSubmit}>Vytvoriť objednávku</AddButton>}\n        </Modal>\n    )\n}\n\nexport default FinishOrderModal\n","/app/src/components/modal-order-update-user/modal-order-update-user.component.jsx",["887","888"],"import React, { useContext, useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { UserContext } from '../../context/user/user.context'\n\nimport UserForm from '../user-form/user-form.component'\n\nimport {\n    CloseButton,\n    Modal,\n    ModalContainer,\n    UpdateButton\n} from './modal-order-update-user.styles'\n\nconst OrderUpdateUserModal = ({ close, userId, refetchUser, addUser }) => {\n    const { isAdmin, isOptometrist } = useContext(AuthContext)\n    const {\n        user,\n        isUpdating,\n        handleChange,\n        handleParameterChange,\n        handleCompanyChange,\n        getUser,\n        updateUser\n    } = useContext(UserContext)\n\n    const [userObj, setUserObj] = useState({})\n    // const [hasChanges, setHasChanges] = useState(false)\n\n    const handleUserChange = (e) => {\n        // setHasChanges(true)\n        const { name, value } = e.target\n\n        handleChange(e)\n\n\n        if (value === '') {\n            delete userObj[name]\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            [name]: value\n        })\n    }\n\n    const handleLensesParameterChange = (e, idx) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value\n\n\n        handleParameterChange(e, idx)\n        setUserObj({\n            ...userObj,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleCompanyAddressChange = (e) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        handleCompanyChange(e)\n\n        if (value === '') {\n            delete userObj.company[name]\n            if (Object.keys(userObj.company).length === 0) {\n                delete userObj[\"company\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            company: {\n                ...userObj.company,\n                [name]: value\n            }\n        })\n    }\n\n    const handleSubmit = (e, path) => {\n        e.preventDefault()\n        // setHasChanges(false)\n\n        console.log(userObj)\n\n        if (userObj.fName || userObj.lName) {\n            delete userObj[\"fName\"]\n            delete userObj[\"lName\"]\n        } else if (!userObj.fName || !userObj.lName) {\n            delete userObj[\"name\"]\n        }\n\n        let newUserObj = {\n            ...userObj,\n        }\n\n        if (userObj.company) {\n            newUserObj = {\n                ...userObj,\n                company: {\n                    ...user.company,\n                    ...userObj.company\n                }\n            }\n        }\n\n        updateUser(newUserObj, user._id, \"isOrder\", refetchUser, close, addUser)\n    }\n\n    useEffect(() => {\n        setUserObj({\n            ...userObj,\n            name: user.fName + \" \" + user.lName\n        })\n    }, [userObj.fName, userObj.lName])\n\n    useEffect(() => {\n        if (userId) {\n            getUser(userId)\n        }\n    }, [userId])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <UserForm\n                    user={user}\n                    isAdmin={isAdmin}\n                    isUpdating={isUpdating}\n                    isOptometrist={isOptometrist}\n                    handleChange={handleUserChange}\n                    handleParameterChange={handleLensesParameterChange}\n                    handleCompanyChange={handleCompanyAddressChange}\n                    isOrder={true}\n                    isCustomer={true}\n\n                />\n\n                <UpdateButton onClick={handleSubmit}>Uložiť</UpdateButton>\n            </Modal>\n        </ModalContainer >\n    ), document.getElementById('portal'))\n}\n\nexport default OrderUpdateUserModal\n","/app/src/components/order-summary-product-name/order-summary-product-name.component.jsx",[],"/app/src/components/order-cart-row/order-cart-row.component.jsx",["889"],"import React, { useState, useEffect, useContext } from 'react'\nimport { OrderContext } from '../../context/order/order.context'\n\nimport CustomInput from '../custom-input/custom-input.component'\n\nimport {\n    AiFillCaretDown\n} from 'react-icons/ai'\n\nimport {\n    CartTableRow,\n    TableCol,\n    IconContainer,\n    OptionsContainer,\n    ContactLensesParameterContainer,\n    CustomSelect,\n    EmptyTittle\n} from './order-cart-row.styles'\n\nconst CartRow = ({ item, idx }) => {\n    const { deleteProduct, addProductDiscount, addLensesParameters } = useContext(OrderContext)\n\n    const [showRow, setShowRow] = useState(false)\n    const [contactLenses, setContactLenses] = useState({})\n\n\n    const handleClick = () => {\n        setShowRow(prevValue => !prevValue)\n    }\n\n    const handleContactLensesParameterChange = (e, idx, originalArr) => {\n        const { name, value } = e.target\n        let arr = originalArr\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        setContactLenses({\n            ...contactLenses,\n            [name]: arr\n        })\n    }\n\n    useEffect(() => {\n        addLensesParameters(idx, contactLenses)\n    }, [contactLenses])\n\n    useEffect(() => {\n        if (item.product.type) {\n            if (item.product.type === 3) {\n                setContactLenses({\n                    curve: [item.product.contactLenses.allowedCurves[0], item.product.contactLenses.allowedCurves[0]],\n                    diameter: [item.product.contactLenses.allowedDiameters[0], item.product.contactLenses.allowedDiameters[0]],\n                    diopters: [0, 0]\n                })\n            }\n        }\n    }, [item.product])\n\n    return (\n        <CartTableRow >\n            <TableCol onClick={() => deleteProduct(idx)}>{idx + 1}</TableCol>\n            <TableCol>\n                {item?.product?.name ? item?.product?.name : \"Šošovky\"}\n            </TableCol>\n            <TableCol>\n                {item?.product?.price ? `${(item?.product?.price / 100).toFixed(2)}€` : \"\"}\n            </TableCol>\n            <TableCol>\n                <div>\n                    <input\n                        value={item?.discount?.product ? item?.discount.product.percent : ''}\n                        onChange={(e) => addProductDiscount(idx, e.target.value)}\n                    />\n                </div>\n            </TableCol>\n            <TableCol>\n                <IconContainer onClick={handleClick}>\n                    <AiFillCaretDown />\n                </IconContainer>\n            </TableCol>\n            {showRow && (\n                <OptionsContainer>\n                    {item.product.type !== 3 && (\n                        <div>\n                            <EmptyTittle>Žiadne možnosti</EmptyTittle>\n                        </div>\n                    )}\n                    {item.product.type === 3 && (\n                        <ContactLensesParameterContainer>\n                            <div>\n                                <h4>Ľave oko</h4>\n                                <CustomSelect\n                                    name='curve'\n                                    value={contactLenses.curve[0]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 0, contactLenses.curve)}\n                                >\n                                    {item.product.contactLenses.allowedCurves.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n                                <CustomSelect\n                                    name='diameter'\n                                    value={contactLenses.diameter[0]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 0, contactLenses.diameter)}\n                                >\n                                    {item.product.contactLenses.allowedDiameters.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n\n                                <CustomInput\n                                    name='diopters'\n\n                                    type='number'\n                                    value={contactLenses.diopters[0]}\n                                    min={item.product.contactLenses.dioptersRange[0]}\n                                    max={item.product.contactLenses.dioptersRange[1]}\n                                    step={.25}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 0, contactLenses.diopters)}\n                                />\n                            </div>\n                            <div>\n                                <h4>Pravé oko</h4>\n                                <CustomSelect\n                                    name='curve'\n                                    value={contactLenses.curve[1]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 1, contactLenses.curve)}\n                                >\n                                    {item.product.contactLenses.allowedCurves.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n                                <CustomSelect\n                                    name='diameter'\n                                    value={contactLenses.diameter[1]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 1, contactLenses.diameter)}\n                                >\n                                    {item.product.contactLenses.allowedDiameters.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n                                <CustomInput\n                                    type='number'\n                                    value={contactLenses.diopters[1]}\n                                    min={item.product.contactLenses.dioptersRange[0]}\n                                    max={item.product.contactLenses.dioptersRange[1]}\n                                    step={.25}\n                                    name='diopters'\n                                    onChange={(e) => handleContactLensesParameterChange(e, 1, contactLenses.diopters)}\n                                />\n                            </div>\n                        </ContactLensesParameterContainer>\n                    )}\n                </OptionsContainer>\n            )}\n        </CartTableRow>\n    )\n}\n\nexport default CartRow\n","/app/src/components/booking-calendar-overview/booking-calendar-overview.styles.jsx",[],"/app/src/components/product-lenses-form/product-lenses-form.styles.jsx",[],"/app/src/components/modal-get-lenses-data/modal-get-lenses-data.styles.jsx",[],"/app/src/components/product-service-form/product-service-form.styles.jsx",[],"/app/src/components/modal-get-product-data/modal-get-product-data.styles.jsx",[],"/app/src/components/product-accessories-form/product-accessories-form.styles.jsx",[],"/app/src/components/product-contact-lenses-form/product-contact-lenses-form.styles.jsx",[],"/app/src/components/modal-product-image-gallery/modal-product-image-gallery.styles.jsx",[],"/app/src/hooks/useOutsideAlerter.jsx",["890"],"import React, { useRef, useEffect } from \"react\";\n\nexport const useOutsideHandler = (ref, action) => {\n    useEffect(() => {\n        const handleClickOutside = e => {\n            if (ref.current && !ref.current.contains(e.target)) {\n                action()\n            }\n        }\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n\n    }, [ref])\n}\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\nfunction useOutsideAlerter(ref) {\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                alert(\"You clicked outside of me!\");\n            }\n        }\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref]);\n}\n\n/**\n * Component that alerts if you click outside of it\n */\nfunction OutsideAlerter(props) {\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef);\n\n    return <div ref={wrapperRef}>{props.children}</div>;\n}\n\nexport default OutsideAlerter;\n","/app/src/components/profile-order-overview/profile-order-overview.styles.jsx",[],"/app/src/components/modal-finish-deposited-order/modal-finish-deposited-order.component.jsx",[],"/app/src/components/order-deligate-modal/order-deligate-modal.component.jsx",["891"],"import React, { useState, useContext } from 'react'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport ReactDOM from 'react-dom'\n\nimport Popup from '../popup/pop-up.component'\n\nimport { retailNames } from '../../utils/warehouse.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    CustomSelect,\n    SubmitButton\n} from './order-deligate-modal.styles'\n\n\nconst OrderDeligateModal = ({ close, premise, id, refetch }) => {\n    const [value, setValue] = useState(premise)\n    const { token } = useContext(AuthContext)\n    const {\n        getMessage,\n        message,\n        isLoading,\n        setIsLoading,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    const handleClick = async () => {\n        setIsLoading(true)\n        const myHeaders = new Headers();\n        myHeaders.append(\"auth-token\", token);\n        myHeaders.append(\"Content-Type\", \"application/json\");\n\n        const raw = JSON.stringify({\n            premises: Number(value),\n        })\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${id}/delegate`, requestOptions)\n            // if (response.status === 400) {\n            //     getMessage(\"Faktúra musí byt zaplatená, aby mohla byť priradená prevádzke\")\n            // }\n            // if (response.status === 401) {\n            //     getMessage(\"Musíš byt vedúci, aby si mohol manipulovať s priradovanim\")\n            // }\n            const data = await response.json()\n\n            if (data.order) {\n                refetch()\n                setIsLoading(false)\n                close()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            setIsLoading(false)\n        }\n    }\n\n    if (isLoading || message) return <Popup loading={isLoading} title={message} close={closeModal} />\n\n    return ReactDOM.createPortal((\n        <ModalContainer >\n            <CloseButton onClick={close} />\n            <Modal>\n                <h3>Priradiť k prevádzke</h3>\n                <CustomSelect value={value} onChange={(e) => setValue(e.target.value)}>\n                    <option value={0}>Nezadané</option>\n                    {retailNames.map((name, idx) => {\n                        if (idx === 0) return\n                        return (\n                            <option key={idx} value={idx}>{name}</option>\n                        )\n                    })}\n                </CustomSelect>\n                <SubmitButton onClick={handleClick}>Priradiť</SubmitButton>\n            </Modal>\n        </ModalContainer >\n    ), document.getElementById('portal'))\n}\n\nexport default OrderDeligateModal\n","/app/src/components/parameters-table/parameters-table.styles.jsx",[],"/app/src/components/custom-form-switch/custom-form-switch.styles.jsx",[],"/app/src/components/examinations-overview/examinations-overview.styles.jsx",[],"/app/src/components/modal-userbookings-details/modal-userbookings-details.styles.jsx",[],"/app/src/components/modal-user-bookings/modal-user-booking.styles.jsx",[],"/app/src/components/modal-booking/modal-booking.styles.jsx",[],"/app/src/components/calendar-booked-day/calendar-booked-day.styles.jsx",[],"/app/src/components/examination-user/examination-user.component.jsx",[],"/app/src/components/modal-optometrist-examination/modal-optometrist-examination.component.jsx",["892","893"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport lodash from 'lodash'\nimport examSchema from '../../context/examination/exam.json'\nimport {removeEmpty} from '../../utils/object.utils'\n\nimport { useExaminationContext } from '../../context/examination/examination.context'\nimport { useFetchById } from '../../hooks/useFetch'\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    checkParameter,\n    checkParameterValue\n} from '../../utils/parameters.utils'\n\nimport {\n    CloseButton,\n    Modal,\n    ModalContainer,\n    SubmitButton,\n    Container,\n    ExamTypeCheckbox,\n    TwoColContainer,\n    InputContainer,\n    IsSuitableCheckbox,\n    Col,\n    Table,\n    TableTitleCol,\n    TableCol,\n    // TableBlock,\n    ObjectiveRefTable,\n    SubjectiveRefTable,\n    ExamTable,\n    RefractTable,\n    KerathTable,\n    SubjectiveRefATable,\n    ContactLensesTable,\n    ContactLensesTypeTable\n} from './modal-optometrist-examination.styles'\n\nconst OptometristExaminationModal = ({ close, refetch, userId, examinationToUpdate }) => {\n    const exam = useFetchById('api/admin/exams', examinationToUpdate, !examinationToUpdate)\n    const isUpdating = examinationToUpdate ? true : false\n\n    const {\n        createExamination,\n        updateExamination\n    } = useExaminationContext()\n\n    const [examObj, setExamObj] = useState(null)\n    \n    const handleChange = (e) => {\n        const {value, name} = e.target\n\n        const obj = lodash.set(examObj, name, value)\n\n        setExamObj({\n            ...obj\n        })\n    }\n\n    const handleSubmit = () => {\n        const formatedObj = {\n            ...removeEmpty(examObj),\n            doneTo: userId,\n            refrakcia: {\n                ...removeEmpty(examObj.refrakcia)\n            },\n            anamneza: {\n                ...removeEmpty(examObj.anamneza)\n            },\n            kontrola: {\n                ...removeEmpty(examObj.kontrola)\n            }\n        }\n\n        if(examObj.type === 1) {\n            delete formatedObj[\"anamneza\"]\n            delete formatedObj[\"kontrola\"]\n        }\n        if(examObj.type === 2) {\n            delete formatedObj[\"refrakcia\"]\n            delete formatedObj[\"kontrola\"]\n        }\n        if(examObj.type === 3) {\n            delete formatedObj[\"refrakcia\"]\n            delete formatedObj[\"anamneza\"]\n        }\n\n        if(isUpdating) {\n            delete formatedObj['date']\n            delete formatedObj['doneTo']\n            delete formatedObj['doneBy']\n            delete formatedObj['__v']\n            delete formatedObj['_id']\n\n            updateExamination(formatedObj, examinationToUpdate, () => {\n                refetch()\n                close()\n            })\n        } else {\n            createExamination(formatedObj, () => {\n                refetch()\n                close()\n            })\n        }\n\n    }\n\n    useEffect(() => {\n        // if(!examObj) return\n        if(!examinationToUpdate) return\n        if(exam.isLoading) return\n        if(!exam.response) return\n        setExamObj(prevValue => ({\n            ...prevValue,\n            ...exam.response.exam,\n            refrakcia: {\n                ...prevValue.refrakcia,\n                ...exam.response.exam.refrakcia,\n            },\n            anamneza: {\n                ...prevValue.anamneza,\n                ...exam.response.exam.anamneza,\n            },\n            kontrola: {\n                ...prevValue.kontrola,\n                ...exam.response.exam.kontrola,\n            }\n        }))\n\n    }, [exam.isLoading])\n\n    useEffect(() => {\n        // if(examinationToUpdate) return\n        if(!examSchema) return\n        setExamObj({\n            date: \"\",\n            doneBy: \"\",\n            doneTo: \"\",\n            type: 1,\n            refrakcia:{\n                nosi_od: \"\",\n                posledna_korekcia: \"\",\n                vyhovuje: false,\n                typ_sposob: \"\",\n                anamneza: \"\",\n                dopl_info: \"\",\n                vlastne_okuliare:{\n                    vnatur:[\"1001\",\"1001\"],\n                    sph:[\"1001\",\"1001\"],\n                    cyl:[\"1001\",\"1001\"],\n                    ax:[\"1001\",\"1001\"],\n                    add:[\"1001\",\"1001\"],\n                    visus:[\"1001\",\"1001\"],\n                    vbino: \"1001\"\n                },\n                objektivna_refrakcia:{\n                    sph:[\"1001\",\"1001\"],\n                    cyl:[\"1001\",\"1001\"],\n                    ax:[\"1001\",\"1001\"],\n                    se:[\"1001\",\"1001\"]\n                },\n                subjektivna_refrakcia:{\n                    sph:[\"1001\",\"1001\"],\n                    cyl:[\"1001\",\"1001\"],\n                    ax:[\"1001\",\"1001\"],\n                    add:[\"1001\",\"1001\"],\n                    visus:[\"1001\",\"1001\"],\n                    vbino: \"1001\",\n                    vbl:\"1001\",\n                    prizma:[\"1001\",\"1001\"],\n                    basis:[\"1001\",\"1001\"],\n                    os:[\"1001\",\"1001\"],\n                    domoko: \"0\"\n                }\n            },\n            anamneza:{\n                nosi_od: \"\",\n                posledna_korekcia:\"\",\n                vyhovuje:false,\n                typ_sposob:\"\",\n                stav_a_povolanie:\"\",\n                dopl_info:\"\",\n                obj_nalez:\"\",\n                vlastne_okuliare:{\n                    vnatur:[\"1001\",\"1001\"],\n                    sph:[\"1001\",\"1001\"],\n                    cyl:[\"1001\",\"1001\"],\n                    ax:[\"1001\",\"1001\"],\n                    add:[\"1001\",\"1001\"],\n                    visus:[\"1001\",\"1001\"],\n                    vbino: \"1001\"\n                },\n                refraktometer:{\n                    sph:[\"1001\",\"1001\"],\n                    cyl:[\"1001\",\"1001\"],\n                    ax:[\"1001\",\"1001\"],\n                    se:[\"1001\",\"1001\"]\n                },\n                keratometer:{\n                    hor:[\"1001\",\"1001\"],\n                    ver:[\"1001\",\"1001\"],\n                    ave:[\"1001\",\"1001\"]\n                },\n                subjektivna_refrakcia:{\n                    sph:[\"1001\",\"1001\"],\n                    cyl:[\"1001\",\"1001\"],\n                    ax:[\"1001\",\"1001\"],\n                    add:[\"1001\",\"1001\"],\n                    visus:[\"1001\",\"1001\"],\n                    bino:\"1001\"\n                },\n                kontaktne_sosovky:{\n                    sph:[\"1001\",\"1001\"],\n                    cyl:[\"1001\",\"1001\"],\n                    ax:[\"1001\",\"1001\"],\n                    add:[\"1001\",\"1001\"],\n                    visd:[\"1001\",\"1001\"],\n                    bino1:[\"1001\",\"1001\"],\n                    visb:[\"1001\",\"1001\"],\n                    bino2:[\"1001\",\"1001\"]\n                },\n                typ_kontaktnych_sosoviek:{\n                    prvy:[\"1001\",\"1001\"],\n                    druhy:[\"1001\",\"1001\"],\n                    lkontrola:\"1001\",\n                    dop_roztok:\"1001\"\n                }\n            },\n            kontrola:{\n                typ_kontaktnych_sosoviek: \"\",\n                tabulka:{\n                sph:[\"1001\",\"1001\"],\n                cyl:[\"1001\",\"1001\"],\n                ax:[\"1001\",\"1001\"],\n                add:[\"1001\",\"1001\"],\n                vis:[\"1001\",\"1001\"]\n                },\n                subj:\"\",\n                obj:\"\"\n            },\n            doporucenia: \"\",\n            vodic:false,\n            pc: false\n        })\n    }, [examSchema])\n\n    useEffect(() => {\n        return () => {\n            setExamObj(null)\n        }\n    }, [])\n\n    console.log(examObj)\n\n    if(!examObj) return <ModalContainer><Modal><p>Loading...</p></Modal></ModalContainer>\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h3>Vyšetrenie</h3>\n                {!examinationToUpdate && <Container>\n                    <h4>Typ prehliadky</h4>\n                    <div>\n                        {examTypes.map((type, idx) => (\n                            <ExamTypeCheckbox\n                                key={idx}\n                                label={type.name}\n                                isActive={examObj.type === type.value}\n                                handleClick={() => handleChange({\n                                    target: {\n                                        name: \"type\",\n                                        value: type.value\n                                    }\n                                })}\n                            />\n                        ))}\n                    </div>\n                </Container>}\n\n                {examObj.type === 1 && (\n                    <Container>\n                        <h4>Refrakcia</h4>\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.refrakcia.nosi_od}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"refrakcia.nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.refrakcia.posledna_korekcia}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"refrakcia.posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'Typ, spôsob'}\n                                    value={examObj.refrakcia.typ_sposob}\n                                    type=\"text\"\n                                    name=\"refrakcia.typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examObj?.refrakcia.vyhovuje}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"refrakcia.vyhovuje\",\n                                            value: examObj?.vyhovuje ? !examObj.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Anamnéza'\n                                name=\"refrakcia.anamneza\"\n                                value={examObj?.refrakcia.anamneza}\n                                rows=\"5\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={examObj.vodic}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vodic\",\n                                            value: examObj.vodic ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={examObj.pc}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"pc\",\n                                            value: examObj.pc ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </div>\n                        \n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"refrakcia.dopl_info\"\n                                value={examObj?.refrakcia.dopl_info || \"\"}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.vnatur[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare.vnatur, idx)}\n                                            onChange={handleChange}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.sph, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n                                            \n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='refrakcia.vlastne_okuliare.vbino'\n                                        type='text'\n                                        value={checkParameterValue(examObj.refrakcia.vlastne_okuliare?.vbino)}\n                                        // onChange={e => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vbino, vlastne_okuliare, setVlastne_okuliare)}\n                                        // onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: Number(e.target.value)\n                                        // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Objektivná refrakcia</h4>\n\n                        <ObjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n                                            // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.sph, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.cyl, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.ax, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.se[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.se, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.se, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ObjectiveRefTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col isActive={examObj.refrakcia.subjektivna_refrakcia?.domoko === \"1\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"refrakcia.subjektivna_refrakcia.domoko\",\n                                        value: examObj.refrakcia.subjektivna_refrakcia?.domoko === \"1\" ? \"0\" : \"1\"\n                                    }\n                                })}>P.</Col>\n                                <Col isActive={examObj.refrakcia.subjektivna_refrakcia?.domoko === \"2\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"refrakcia.subjektivna_refrakcia.domoko\",\n                                        value: examObj.refrakcia.subjektivna_refrakcia?.domoko === \"2\" ? \"0\" : \"2\"\n                                    }\n                                })}>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.sph, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.cyl, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.ax, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n                                            // \n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.add, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.visus, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='refrakcia.subjektivna_refrakcia.vbino'\n                                        type='text'\n                                        value={checkParameterValue(examObj.refrakcia.subjektivna_refrakcia?.vbino)}\n                                        // onChange={e => setSubjektivna_refrakcia(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.vbino, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n\n                                        // onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: Number(e.target.value)\n                                        // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>PRIZMA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.prizma[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.prizma, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.prizma, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BÁZA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.basis[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.basis, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.basis, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>OS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.os[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.os, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.os, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BL</Col>\n                                <Col>\n                                    <input\n                                        name={`refrakcia.subjektivna_refrakcia.vbl`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.refrakcia.subjektivna_refrakcia?.vbl)}\n                                        // onChange={e => setSubjektivna_refrakcia(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.vbino, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n\n                                        // onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: Number(e.target.value)\n                                        // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </SubjectiveRefTable>\n                    </Container>\n                )}\n\n                {examObj.type === 2 && (\n                    <Container>\n                        <h4>Anamnéza</h4>\n\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.anamneza.nosi_od}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"anamneza.nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.anamneza.posledna_korekcia}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"anamneza.posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'Typ, spôsob'}\n                                    value={examObj.anamneza.typ_sposob}\n                                    type=\"text\"\n                                    name=\"anamneza.typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examObj.anamneza.vyhovuje}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"anamneza.vyhovuje\",\n                                            value: examObj.anamneza.vyhovuje ? !examObj.anamneza.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Stav a povolanie'\n                                name=\"anamneza.stav_a_povolanie\"\n                                value={examObj.anamneza.stav_a_povolanie}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={examObj.vodic}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vodic\",\n                                            value: examObj.vodic ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={examObj.pc}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"pc\",\n                                            value: examObj.pc ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </div>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"anamneza.dopl_info\"\n                                value={examObj.anamneza.dopl_info}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Obj. nález'\n                                name=\"anamneza.obj_nalez\"\n                                value={examObj.anamneza.obj_nalez}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        \n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.vnatur[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare.vnatur, idx)}\n                                            onChange={handleChange}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.sph, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n                                            \n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='anamneza.vlastne_okuliare.vbino'\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.vlastne_okuliare?.vbino)}\n                                        // onChange={e => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vbino, vlastne_okuliare, setVlastne_okuliare)}\n                                        // onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: Number(e.target.value)\n                                        // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Refraktometer</h4>\n\n                        <RefractTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, refraktometer?.sph, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, refraktometer?.cyl, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                        onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, refraktometer?.ax, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.se[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.se, idx)}\n                                            onChange={handleChange}\n    \n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            // onBlur={(e) => formatParameters(e, refraktometer?.se, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </RefractTable>\n\n                        <h4>Keratometer</h4>\n\n                        <KerathTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>HOR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.keratometer.hor[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.keratometer?.hor, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, keratometer?.hor, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VER</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.keratometer.ver[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.keratometer?.ver, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, keratometer?.ver, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AVE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.keratometer.ave[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.keratometer?.ave, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, keratometer?.ave, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </KerathTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefATable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.sph, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.cyl, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.ax, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.add, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.visus, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO</Col>\n                                <Col>\n                                    <input\n                                        name={`anamneza.subjektivna_refrakcia.bino`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.subjektivna_refrakcia?.bino)}\n                                        // onChange={e => setSubjektivna_refrakciaA(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        // onBlur={(e) => setSubjektivna_refrakciaA(prevValue => ({\n                                        onChange={handleChange}\n\n                                        //     ...prevValue,\n                                        //     [e.target.name]: Number(e.target.value)\n                                        // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n\n                        </SubjectiveRefATable>\n\n                        <h4>Kontaktné šošovky</h4>\n\n                        <ContactLensesTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.sph, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        onChange={handleChange}\n\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.cyl, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        onChange={handleChange}\n\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.ax, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.ax, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.add, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.add, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.visd[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.visd, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visd, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO1</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.bino1[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.bino1, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino1, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISB</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.visb[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.visb, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visb, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO2</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.bino2[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.bino2, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino2, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ContactLensesTable>\n\n\n                        <h4>Typ Kontaktných šošoviek</h4>\n\n                        <ContactLensesTypeTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>PRVÝ</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.typ_kontaktnych_sosoviek.prvy[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.typ_kontaktnych_sosoviek?.prvy, idx)}\n                                            onChange={handleChange}\n\n                                            // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.prvy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>DRUHÝ</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            // name='druhy'\n                                            name={`anamneza.typ_kontaktnych_sosoviek.druhy[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.typ_kontaktnych_sosoviek?.druhy, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            onChange={handleChange}\n                                            // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.druhy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>L.KONTROLA</Col>\n                                <Col>\n                                    <input\n                                        // name='lkontrola'\n                                        name={`anamneza.typ_kontaktnych_sosoviek.lkontrola`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.typ_kontaktnych_sosoviek?.lkontrola)}\n                                        onChange={handleChange}\n                                        // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>DOP.ROZTOK</Col>\n                                <Col>\n                                    <input\n                                        // name='dop_roztok'\n                                        name={`anamneza.typ_kontaktnych_sosoviek.dop_roztok`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.typ_kontaktnych_sosoviek?.dop_roztok)}\n                                        onChange={handleChange}\n                                        // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </ContactLensesTypeTable>\n                    </Container>\n                )}\n\n                {examObj.type === 3 && (\n                    <Container>\n                        <h4>Kontrola</h4>\n                        <InputContainer>\n                            <CustomInput\n                                label={'Typ kontaktných šošoviek'}\n                                value={examObj.kontrola.typ_kontaktnych_sosoviek}\n                                type=\"text\"\n                                name=\"kontrola.typ_kontaktnych_sosoviek\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <ExamTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.sph, idx)}\n                                        onChange={handleChange}\n\n                                            // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.sph, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            // name='cyl'\n                                            name={`kontrola.tabulka.cyl[${idx}]`}\n\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onChange={handleChange}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.cyl, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.ax[${idx}]`}\n                                            // name='ax'\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.ax, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.ax, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.add[${idx}]`}\n                                            // name='add'\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.add, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.add, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VIS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.vis[${idx}]`}\n                                            // name='vis'\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.vis, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.vis, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ExamTable>\n\n                        <InputContainer>\n                            <CustomInput\n                                label={'Subj.'}\n                                value={examObj.kontrola.subj}\n                                type=\"text\"\n                                name=\"kontrola.subj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <InputContainer>\n                            <CustomInput\n                                label={'Obj.'}\n                                value={examObj.kontrola.obj}\n                                type=\"text\"\n                                name=\"kontrola.obj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={examObj.vodic}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vodic\",\n                                            value: examObj.vodic ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={examObj.pc}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"pc\",\n                                            value: examObj.pc ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </div>\n                    </Container>\n                )}\n\n                <InputContainer>\n                    <CustomTextarea\n                        label='Doporučenia'\n                        name=\"doporucenia\"\n                        value={examObj.doporucenia}\n                        rows=\"5\"\n                        handleChange={e => handleChange(e)}\n                    />\n                </InputContainer>\n                {/* doporucenia */}\n\n                <SubmitButton onClick={handleSubmit}>{examinationToUpdate ? \"Uložiť\" : \"Odoslať prehliadku\"}</SubmitButton>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default OptometristExaminationModal\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"apl. KŠ\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","/app/src/components/order-cart-lenses-row/order-cart-lenses-row.styles.jsx",[],"/app/src/components/custom-back-button/custom-back-button.styles.jsx",[],"/app/src/components/modal-order-update-user/modal-order-update-user.styles.jsx",[],"/app/src/components/modal-finish-order/modal-finish-order.styles.jsx",[],"/app/src/components/order-cart-row/order-cart-row.styles.jsx",[],"/app/src/components/modal-finish-deposited-order/modal-finish-deposited-order.styles.jsx",[],"/app/src/components/order-deligate-modal/order-deligate-modal.styles.jsx",[],"/app/src/components/examination-user/examination-user.styles.jsx",[],"/app/src/utils/parameters.utils.jsx",[],"/app/src/components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx",[],"/app/src/context/fetch-context/fetch.context.jsx",["894","895"],"import React, { createContext, useContext, useState, useEffect} from 'react'\n\nexport const FetchContext = createContext({\n    isLoading: false,\n    response: null,\n    error: null,\n    message: null,\n    fetchData: () => {},\n})\n\nexport const useFetchContext = () => useContext(FetchContext)\n\nconst FetchProvider = ({children}) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [message, setMessage] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n\n    const fetchData = async (path, data, callback, method = \"GET\", hasHeader = true) => {\n        setIsLoading(true)\n\n        console.log(\"FETCH_DATA\")\n        console.log({\n            hasHeader,\n            method,\n            path,\n            data,\n        })\n\n        const myHeaders = new Headers();\n        myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n        myHeaders.append(\"Content-Type\", \"application/json\");\n\n        const requestOptions = {\n            method: method,\n            ...(hasHeader) && {headers: myHeaders},\n            ...(data) && {body: JSON.stringify(data)},\n            redirect: 'follow'\n        };\n\n        try {\n            const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}${path}`, requestOptions)\n            const data = await res.json()\n\n            callback(data)\n            setIsLoading(false)\n        } catch (err) {\n            setError(err)\n            setIsLoading(false)\n            setMessage(\"Niečo sa pokazilo\")\n        }\n    } \n\n    return (\n        <FetchContext.Provider\n            value={{\n                isLoading,\n                response,\n                error,\n                message,\n                fetchData\n            }}\n        >\n            {children}\n        </FetchContext.Provider>\n    )\n}\n\nexport default FetchProvider","/app/src/utils/object.utils.jsx",[],{"ruleId":"896","replacedBy":"897"},{"ruleId":"898","replacedBy":"899"},{"ruleId":"900","severity":1,"message":"901","line":237,"column":8,"nodeType":"902","endLine":237,"endColumn":15,"suggestions":"903"},{"ruleId":"900","severity":1,"message":"904","line":156,"column":8,"nodeType":"902","endLine":156,"endColumn":34,"suggestions":"905"},{"ruleId":"906","severity":1,"message":"907","line":377,"column":13,"nodeType":"908","messageId":"909","endLine":377,"endColumn":22},{"ruleId":"900","severity":1,"message":"910","line":889,"column":8,"nodeType":"902","endLine":889,"endColumn":31,"suggestions":"911"},{"ruleId":"900","severity":1,"message":"912","line":917,"column":8,"nodeType":"902","endLine":917,"endColumn":22,"suggestions":"913"},{"ruleId":"906","severity":1,"message":"914","line":205,"column":19,"nodeType":"908","messageId":"909","endLine":205,"endColumn":23},{"ruleId":"906","severity":1,"message":"915","line":1,"column":44,"nodeType":"908","messageId":"909","endLine":1,"endColumn":52},{"ruleId":"906","severity":1,"message":"916","line":5,"column":8,"nodeType":"908","messageId":"909","endLine":5,"endColumn":14},{"ruleId":"900","severity":1,"message":"917","line":131,"column":8,"nodeType":"902","endLine":131,"endColumn":18,"suggestions":"918"},{"ruleId":"900","severity":1,"message":"919","line":144,"column":8,"nodeType":"902","endLine":144,"endColumn":21,"suggestions":"920"},{"ruleId":"906","severity":1,"message":"921","line":11,"column":10,"nodeType":"908","messageId":"909","endLine":11,"endColumn":25},{"ruleId":"900","severity":1,"message":"922","line":132,"column":8,"nodeType":"902","endLine":132,"endColumn":22,"suggestions":"923"},{"ruleId":"900","severity":1,"message":"922","line":140,"column":8,"nodeType":"902","endLine":140,"endColumn":21,"suggestions":"924"},{"ruleId":"900","severity":1,"message":"925","line":176,"column":8,"nodeType":"902","endLine":176,"endColumn":21,"suggestions":"926"},{"ruleId":"900","severity":1,"message":"927","line":189,"column":8,"nodeType":"902","endLine":189,"endColumn":43,"suggestions":"928"},{"ruleId":"906","severity":1,"message":"929","line":27,"column":5,"nodeType":"908","messageId":"909","endLine":27,"endColumn":17},{"ruleId":"900","severity":1,"message":"930","line":114,"column":8,"nodeType":"902","endLine":114,"endColumn":19,"suggestions":"931"},{"ruleId":"900","severity":1,"message":"932","line":130,"column":8,"nodeType":"902","endLine":130,"endColumn":21,"suggestions":"933"},{"ruleId":"900","severity":1,"message":"934","line":173,"column":8,"nodeType":"902","endLine":173,"endColumn":38,"suggestions":"935"},{"ruleId":"900","severity":1,"message":"936","line":179,"column":8,"nodeType":"902","endLine":179,"endColumn":12,"suggestions":"937"},{"ruleId":"900","severity":1,"message":"938","line":200,"column":8,"nodeType":"902","endLine":200,"endColumn":10,"suggestions":"939"},{"ruleId":"900","severity":1,"message":"940","line":93,"column":8,"nodeType":"902","endLine":93,"endColumn":21,"suggestions":"941"},{"ruleId":"900","severity":1,"message":"940","line":115,"column":8,"nodeType":"902","endLine":115,"endColumn":21,"suggestions":"942"},{"ruleId":"900","severity":1,"message":"943","line":121,"column":8,"nodeType":"902","endLine":121,"endColumn":29,"suggestions":"944"},{"ruleId":"900","severity":1,"message":"927","line":136,"column":8,"nodeType":"902","endLine":136,"endColumn":10,"suggestions":"945"},{"ruleId":"906","severity":1,"message":"946","line":440,"column":12,"nodeType":"908","messageId":"909","endLine":440,"endColumn":19},{"ruleId":"900","severity":1,"message":"947","line":459,"column":8,"nodeType":"902","endLine":459,"endColumn":26,"suggestions":"948"},{"ruleId":"900","severity":1,"message":"949","line":471,"column":8,"nodeType":"902","endLine":471,"endColumn":25,"suggestions":"950"},{"ruleId":"900","severity":1,"message":"951","line":478,"column":8,"nodeType":"902","endLine":478,"endColumn":26,"suggestions":"952"},{"ruleId":"900","severity":1,"message":"953","line":495,"column":8,"nodeType":"902","endLine":495,"endColumn":72,"suggestions":"954"},{"ruleId":"900","severity":1,"message":"955","line":517,"column":8,"nodeType":"902","endLine":517,"endColumn":13,"suggestions":"956"},{"ruleId":"900","severity":1,"message":"957","line":526,"column":8,"nodeType":"902","endLine":526,"endColumn":22,"suggestions":"958"},{"ruleId":"900","severity":1,"message":"959","line":538,"column":8,"nodeType":"902","endLine":538,"endColumn":10,"suggestions":"960"},{"ruleId":"900","severity":1,"message":"961","line":181,"column":8,"nodeType":"902","endLine":181,"endColumn":19,"suggestions":"962"},{"ruleId":"900","severity":1,"message":"963","line":196,"column":8,"nodeType":"902","endLine":196,"endColumn":10,"suggestions":"964"},{"ruleId":"900","severity":1,"message":"965","line":78,"column":8,"nodeType":"902","endLine":78,"endColumn":12,"suggestions":"966"},{"ruleId":"900","severity":1,"message":"967","line":93,"column":8,"nodeType":"902","endLine":93,"endColumn":14,"suggestions":"968"},{"ruleId":"900","severity":1,"message":"969","line":107,"column":8,"nodeType":"902","endLine":107,"endColumn":10,"suggestions":"970"},{"ruleId":"906","severity":1,"message":"971","line":37,"column":5,"nodeType":"908","messageId":"909","endLine":37,"endColumn":25},{"ruleId":"906","severity":1,"message":"972","line":50,"column":45,"nodeType":"908","messageId":"909","endLine":50,"endColumn":59},{"ruleId":"900","severity":1,"message":"973","line":161,"column":8,"nodeType":"902","endLine":161,"endColumn":20,"suggestions":"974"},{"ruleId":"906","severity":1,"message":"975","line":12,"column":10,"nodeType":"908","messageId":"909","endLine":12,"endColumn":21},{"ruleId":"900","severity":1,"message":"976","line":45,"column":8,"nodeType":"902","endLine":45,"endColumn":17,"suggestions":"977"},{"ruleId":"900","severity":1,"message":"978","line":95,"column":8,"nodeType":"902","endLine":95,"endColumn":64,"suggestions":"979"},{"ruleId":"900","severity":1,"message":"980","line":101,"column":8,"nodeType":"902","endLine":101,"endColumn":28,"suggestions":"981"},{"ruleId":"900","severity":1,"message":"982","line":110,"column":8,"nodeType":"902","endLine":110,"endColumn":10,"suggestions":"983"},{"ruleId":"900","severity":1,"message":"984","line":46,"column":8,"nodeType":"902","endLine":46,"endColumn":18,"suggestions":"985"},{"ruleId":"900","severity":1,"message":"986","line":52,"column":8,"nodeType":"902","endLine":52,"endColumn":10,"suggestions":"987"},{"ruleId":"988","severity":1,"message":"989","line":15,"column":27,"nodeType":"990","messageId":"991","endLine":15,"endColumn":28,"suggestions":"992"},{"ruleId":"988","severity":1,"message":"989","line":16,"column":23,"nodeType":"990","messageId":"991","endLine":16,"endColumn":24,"suggestions":"993"},{"ruleId":"988","severity":1,"message":"989","line":16,"column":25,"nodeType":"990","messageId":"991","endLine":16,"endColumn":26,"suggestions":"994"},{"ruleId":"900","severity":1,"message":"995","line":25,"column":8,"nodeType":"902","endLine":25,"endColumn":16,"suggestions":"996"},{"ruleId":"900","severity":1,"message":"997","line":37,"column":8,"nodeType":"902","endLine":37,"endColumn":22,"suggestions":"998"},{"ruleId":"900","severity":1,"message":"999","line":79,"column":8,"nodeType":"902","endLine":79,"endColumn":28,"suggestions":"1000"},{"ruleId":"900","severity":1,"message":"999","line":118,"column":8,"nodeType":"902","endLine":118,"endColumn":32,"suggestions":"1001"},{"ruleId":"900","severity":1,"message":"1002","line":29,"column":8,"nodeType":"902","endLine":29,"endColumn":19,"suggestions":"1003"},{"ruleId":"900","severity":1,"message":"1002","line":42,"column":8,"nodeType":"902","endLine":42,"endColumn":25,"suggestions":"1004"},{"ruleId":"900","severity":1,"message":"947","line":75,"column":8,"nodeType":"902","endLine":75,"endColumn":31,"suggestions":"1005"},{"ruleId":"900","severity":1,"message":"951","line":82,"column":8,"nodeType":"902","endLine":82,"endColumn":19,"suggestions":"1006"},{"ruleId":"1007","severity":1,"message":"1008","line":62,"column":52,"nodeType":"1009","messageId":"1010","endLine":62,"endColumn":58},{"ruleId":"1007","severity":1,"message":"1008","line":279,"column":56,"nodeType":"1009","messageId":"1010","endLine":279,"endColumn":62},{"ruleId":"1007","severity":1,"message":"1008","line":10,"column":32,"nodeType":"1009","messageId":"1010","endLine":10,"endColumn":38},{"ruleId":"1007","severity":1,"message":"1008","line":37,"column":45,"nodeType":"1009","messageId":"1010","endLine":37,"endColumn":51},{"ruleId":"1007","severity":1,"message":"1008","line":41,"column":53,"nodeType":"1009","messageId":"1010","endLine":41,"endColumn":59},{"ruleId":"1007","severity":1,"message":"1008","line":42,"column":54,"nodeType":"1009","messageId":"1010","endLine":42,"endColumn":60},{"ruleId":"1007","severity":1,"message":"1008","line":43,"column":123,"nodeType":"1009","messageId":"1010","endLine":43,"endColumn":129},{"ruleId":"900","severity":1,"message":"1011","line":97,"column":8,"nodeType":"902","endLine":97,"endColumn":19,"suggestions":"1012"},{"ruleId":"900","severity":1,"message":"947","line":44,"column":8,"nodeType":"902","endLine":44,"endColumn":15,"suggestions":"1013"},{"ruleId":"900","severity":1,"message":"947","line":50,"column":8,"nodeType":"902","endLine":50,"endColumn":18,"suggestions":"1014"},{"ruleId":"900","severity":1,"message":"1015","line":65,"column":8,"nodeType":"902","endLine":65,"endColumn":19,"suggestions":"1016"},{"ruleId":"900","severity":1,"message":"1015","line":88,"column":8,"nodeType":"902","endLine":88,"endColumn":19,"suggestions":"1017"},{"ruleId":"900","severity":1,"message":"947","line":92,"column":8,"nodeType":"902","endLine":92,"endColumn":15,"suggestions":"1018"},{"ruleId":"900","severity":1,"message":"1019","line":72,"column":8,"nodeType":"902","endLine":72,"endColumn":19,"suggestions":"1020"},{"ruleId":"900","severity":1,"message":"1021","line":72,"column":8,"nodeType":"902","endLine":72,"endColumn":19,"suggestions":"1022"},{"ruleId":"900","severity":1,"message":"1023","line":69,"column":8,"nodeType":"902","endLine":69,"endColumn":15,"suggestions":"1024"},{"ruleId":"900","severity":1,"message":"1025","line":83,"column":8,"nodeType":"902","endLine":83,"endColumn":21,"suggestions":"1026"},{"ruleId":"906","severity":1,"message":"1027","line":10,"column":5,"nodeType":"908","messageId":"909","endLine":10,"endColumn":19},{"ruleId":"906","severity":1,"message":"1028","line":11,"column":5,"nodeType":"908","messageId":"909","endLine":11,"endColumn":17},{"ruleId":"906","severity":1,"message":"929","line":20,"column":5,"nodeType":"908","messageId":"909","endLine":20,"endColumn":17},{"ruleId":"1007","severity":1,"message":"1008","line":200,"column":44,"nodeType":"1009","messageId":"1010","endLine":200,"endColumn":50},{"ruleId":"906","severity":1,"message":"1029","line":20,"column":5,"nodeType":"908","messageId":"909","endLine":20,"endColumn":17},{"ruleId":"906","severity":1,"message":"929","line":21,"column":5,"nodeType":"908","messageId":"909","endLine":21,"endColumn":17},{"ruleId":"900","severity":1,"message":"1030","line":72,"column":8,"nodeType":"902","endLine":72,"endColumn":19,"suggestions":"1031"},{"ruleId":"900","severity":1,"message":"1032","line":77,"column":8,"nodeType":"902","endLine":77,"endColumn":33,"suggestions":"1033"},{"ruleId":"1007","severity":1,"message":"1008","line":279,"column":44,"nodeType":"1009","messageId":"1010","endLine":279,"endColumn":50},{"ruleId":"906","severity":1,"message":"929","line":12,"column":5,"nodeType":"908","messageId":"909","endLine":12,"endColumn":17},{"ruleId":"1007","severity":1,"message":"1008","line":126,"column":40,"nodeType":"1009","messageId":"1010","endLine":126,"endColumn":46},{"ruleId":"906","severity":1,"message":"1034","line":7,"column":10,"nodeType":"908","messageId":"909","endLine":7,"endColumn":25},{"ruleId":"900","severity":1,"message":"1019","line":80,"column":8,"nodeType":"902","endLine":80,"endColumn":19,"suggestions":"1035"},{"ruleId":"900","severity":1,"message":"1021","line":113,"column":8,"nodeType":"902","endLine":113,"endColumn":19,"suggestions":"1036"},{"ruleId":"906","severity":1,"message":"1037","line":4,"column":8,"nodeType":"908","messageId":"909","endLine":4,"endColumn":19},{"ruleId":"906","severity":1,"message":"1038","line":5,"column":8,"nodeType":"908","messageId":"909","endLine":5,"endColumn":20},{"ruleId":"906","severity":1,"message":"1029","line":15,"column":5,"nodeType":"908","messageId":"909","endLine":15,"endColumn":17},{"ruleId":"906","severity":1,"message":"1039","line":28,"column":12,"nodeType":"908","messageId":"909","endLine":28,"endColumn":15},{"ruleId":"906","severity":1,"message":"1040","line":28,"column":17,"nodeType":"908","messageId":"909","endLine":28,"endColumn":23},{"ruleId":"906","severity":1,"message":"1041","line":30,"column":12,"nodeType":"908","messageId":"909","endLine":30,"endColumn":17},{"ruleId":"906","severity":1,"message":"1042","line":37,"column":11,"nodeType":"908","messageId":"909","endLine":37,"endColumn":32},{"ruleId":"906","severity":1,"message":"1043","line":66,"column":19,"nodeType":"908","messageId":"909","endLine":66,"endColumn":22},{"ruleId":"900","severity":1,"message":"1044","line":93,"column":8,"nodeType":"902","endLine":93,"endColumn":19,"suggestions":"1045"},{"ruleId":"900","severity":1,"message":"1046","line":98,"column":8,"nodeType":"902","endLine":98,"endColumn":104,"suggestions":"1047"},{"ruleId":"900","severity":1,"message":"1048","line":98,"column":9,"nodeType":"1049","endLine":98,"endColumn":31},{"ruleId":"900","severity":1,"message":"1048","line":98,"column":33,"nodeType":"1049","endLine":98,"endColumn":55},{"ruleId":"900","severity":1,"message":"1048","line":98,"column":57,"nodeType":"1049","endLine":98,"endColumn":79},{"ruleId":"900","severity":1,"message":"1048","line":98,"column":81,"nodeType":"1049","endLine":98,"endColumn":103},{"ruleId":"900","severity":1,"message":"1050","line":69,"column":8,"nodeType":"902","endLine":69,"endColumn":35,"suggestions":"1051"},{"ruleId":"900","severity":1,"message":"1052","line":73,"column":8,"nodeType":"902","endLine":73,"endColumn":36,"suggestions":"1053"},{"ruleId":"900","severity":1,"message":"1054","line":34,"column":8,"nodeType":"902","endLine":34,"endColumn":19,"suggestions":"1055"},{"ruleId":"900","severity":1,"message":"1056","line":122,"column":8,"nodeType":"902","endLine":122,"endColumn":13,"suggestions":"1057"},{"ruleId":"1007","severity":1,"message":"1008","line":261,"column":67,"nodeType":"1009","messageId":"1010","endLine":261,"endColumn":73},{"ruleId":"900","severity":1,"message":"1058","line":42,"column":8,"nodeType":"902","endLine":42,"endColumn":19,"suggestions":"1059"},{"ruleId":"900","severity":1,"message":"947","line":47,"column":8,"nodeType":"902","endLine":47,"endColumn":30,"suggestions":"1060"},{"ruleId":"900","severity":1,"message":"1061","line":183,"column":8,"nodeType":"902","endLine":183,"endColumn":27,"suggestions":"1062"},{"ruleId":"900","severity":1,"message":"934","line":127,"column":8,"nodeType":"902","endLine":127,"endColumn":38,"suggestions":"1063"},{"ruleId":"900","severity":1,"message":"936","line":133,"column":8,"nodeType":"902","endLine":133,"endColumn":16,"suggestions":"1064"},{"ruleId":"900","severity":1,"message":"1065","line":44,"column":8,"nodeType":"902","endLine":44,"endColumn":23,"suggestions":"1066"},{"ruleId":"900","severity":1,"message":"1067","line":15,"column":8,"nodeType":"902","endLine":15,"endColumn":13,"suggestions":"1068"},{"ruleId":"1007","severity":1,"message":"1008","line":82,"column":40,"nodeType":"1009","messageId":"1010","endLine":82,"endColumn":46},{"ruleId":"900","severity":1,"message":"1069","line":134,"column":8,"nodeType":"902","endLine":134,"endColumn":24,"suggestions":"1070"},{"ruleId":"900","severity":1,"message":"1071","line":249,"column":8,"nodeType":"902","endLine":249,"endColumn":20,"suggestions":"1072"},{"ruleId":"906","severity":1,"message":"1073","line":1,"column":54,"nodeType":"908","messageId":"909","endLine":1,"endColumn":63},{"ruleId":"906","severity":1,"message":"1074","line":14,"column":22,"nodeType":"908","messageId":"909","endLine":14,"endColumn":33},"no-native-reassign",["1075"],"no-negated-in-lhs",["1076"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.","ArrayExpression",["1077"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array. You can also do a functional update 'setUser(u => ...)' if you only need 'user' in the 'setUser' call.",["1078"],"no-unused-vars","'linkSize1' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getLenses', 'getProductsByQuery', and 'products'. Either include them or remove the dependency array.",["1079"],"React Hook useEffect has a missing dependency: 'product'. Either include it or remove the dependency array. You can also do a functional update 'setProduct(p => ...)' if you only need 'product' in the 'setProduct' call.",["1080"],"'data' is assigned a value but never used.","'useState' is defined but never used.","'lodash' is defined but never used.","React Hook useEffect has a missing dependency: 'getProductsByQuery'. Either include it or remove the dependency array.",["1081"],"React Hook useEffect has missing dependencies: 'activeCategoryTypeTab', 'getProductsByQuery', and 'products'. Either include them or remove the dependency array.",["1082"],"'retailNamesTabs' is defined but never used.","React Hook useEffect has a missing dependency: 'getAnalytics'. Either include it or remove the dependency array.",["1083"],["1084"],"React Hook useEffect has missing dependencies: 'activeIndex' and 'handleRefetch'. Either include them or remove the dependency array.",["1085"],"React Hook useEffect has a missing dependency: 'closeModal'. Either include it or remove the dependency array.",["1086"],"'DeleteButton' is defined but never used.","React Hook useEffect has missing dependencies: 'closeModal' and 'response'. Either include them or remove the dependency array.",["1087"],"React Hook useEffect has missing dependencies: 'activeIndex' and 'refetch'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilterQuery' needs the current value of 'activeIndex'.",["1088"],"React Hook useEffect has missing dependencies: 'user.fName', 'user.lName', and 'userObj'. Either include them or remove the dependency array. You can also do a functional update 'setUserObj(u => ...)' if you only need 'userObj' in the 'setUserObj' call.",["1089"],"React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["1090"],"React Hook useEffect has missing dependencies: 'handleChange' and 'resetUser'. Either include them or remove the dependency array.",["1091"],"React Hook useEffect has a missing dependency: 'blogsData'. Either include it or remove the dependency array.",["1092"],["1093"],"React Hook useEffect has a missing dependency: 'blogsData.response?.blogs'. Either include it or remove the dependency array.",["1094"],["1095"],"'lensObj' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",["1096"],"React Hook useEffect has missing dependencies: 'handleChange', 'productObj.lensType', and 'productObj.type'. Either include them or remove the dependency array.",["1097"],"React Hook useEffect has a missing dependency: 'response?.filters'. Either include it or remove the dependency array.",["1098"],"React Hook useEffect has missing dependencies: 'getEanCode' and 'handleChange'. Either include them or remove the dependency array.",["1099"],"React Hook useEffect has missing dependencies: 'getSingleProduct', 'handleChangeType', 'handleSelectImage', 'product.type', and 'productObj.type'. Either include them or remove the dependency array.",["1100"],"React Hook useEffect has a missing dependency: 'setSelectedImage'. Either include it or remove the dependency array.",["1101"],"React Hook useEffect has missing dependencies: 'resetContactLenses', 'resetGlassesParameters', 'resetLenses', 'resetProduct', and 'setSelectedImage'. Either include them or remove the dependency array.",["1102"],"React Hook useEffect has missing dependencies: 'closeModal', 'currentUser.premises', 'handleShowCalendarClick', 'isAdmin', 'response', and 'setShowModal'. Either include them or remove the dependency array.",["1103"],"React Hook useEffect has missing dependencies: 'closeModal' and 'setShowModal'. Either include them or remove the dependency array.",["1104"],"React Hook useEffect has missing dependencies: 'getPost' and 'setSelectedImage'. Either include them or remove the dependency array.",["1105"],"React Hook useEffect has missing dependencies: 'id' and 'setSelectedImage'. Either include them or remove the dependency array.",["1106"],"React Hook useEffect has missing dependencies: 'closeModal' and 'resetBlog'. Either include them or remove the dependency array.",["1107"],"'DeleteCalendarButton' is defined but never used.","'deleteCalendar' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'closeModal' and 'response.calendar'. Either include them or remove the dependency array.",["1108"],"'formatPrice' is defined but never used.","React Hook useEffect has a missing dependency: 'getCoupons'. Either include it or remove the dependency array.",["1109"],"React Hook useEffect has missing dependencies: 'addUser', 'changeStep', 'order', and 'setOrder'. Either include them or remove the dependency array.",["1110"],"React Hook useEffect has missing dependencies: 'addUser' and 'userData.response.user'. Either include them or remove the dependency array.",["1111"],"React Hook useEffect has missing dependencies: 'changeStep' and 'resetOrder'. Either include them or remove the dependency array.",["1112"],"React Hook useEffect has a missing dependency: 'getCoupon'. Either include it or remove the dependency array.",["1113"],"React Hook useEffect has a missing dependency: 'resetCoupons'. Either include it or remove the dependency array.",["1114"],"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["1115","1116"],["1117","1118"],["1119","1120"],"React Hook useEffect has a missing dependency: 'getSlug'. Either include it or remove the dependency array.",["1121"],"React Hook useEffect has missing dependencies: 'path', 'requestOptions', and 'skip'. Either include them or remove the dependency array.",["1122"],"React Hook useEffect has missing dependencies: 'requestOptions' and 'skip'. Either include them or remove the dependency array.",["1123"],["1124"],"React Hook useEffect has a missing dependency: 'currentPage'. Either include it or remove the dependency array.",["1125"],["1126"],["1127"],["1128"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","React Hook useEffect has missing dependencies: 'response.calendar.endTimes', 'response.calendar.interval', and 'response.calendar.startTimes'. Either include them or remove the dependency array.",["1129"],["1130"],["1131"],"React Hook useEffect has missing dependencies: 'firstDayIndex', 'lastDay', 'month', 'nextDays', 'response.calendar', and 'year'. Either include them or remove the dependency array.",["1132"],["1133"],["1134"],"React Hook useEffect has a missing dependency: 'response.lenses'. Either include it or remove the dependency array.",["1135"],"React Hook useEffect has a missing dependency: 'response.products'. Either include it or remove the dependency array.",["1136"],"React Hook useEffect has a missing dependency: 'getFilteredUsers'. Either include it or remove the dependency array.",["1137"],"React Hook useEffect has missing dependencies: 'getFilteredUsers' and 'users'. Either include them or remove the dependency array.",["1138"],"'ImageContainer' is defined but never used.","'ProductImage' is defined but never used.","'UploadButton' is defined but never used.","React Hook useEffect has a missing dependency: 'product.brand'. Either include it or remove the dependency array.",["1139"],"React Hook useEffect has an unnecessary dependency: 'brands'. Either exclude it or remove the dependency array. Outer scope values like 'brands' aren't valid dependencies because mutating them doesn't re-render the component.",["1140"],"'formatAvailable' is defined but never used.",["1141"],["1142"],"'CustomInput' is defined but never used.","'CustomButton' is defined but never used.","'tab' is assigned a value but never used.","'setTab' is assigned a value but never used.","'files' is assigned a value but never used.","'handleFileInputChange' is assigned a value but never used.","'arr' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'response'. Either include it or remove the dependency array.",["1143"],"React Hook useEffect has missing dependencies: 'handleChange', 'parameters.addition', and 'parameters.diopters'. Either include them or remove the dependency array. If 'handleChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1144"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has a missing dependency: 'examinationData.response'. Either include it or remove the dependency array.",["1145"],"React Hook useEffect has a missing dependency: 'response?.booking'. Either include it or remove the dependency array.",["1146"],"React Hook useEffect has missing dependencies: 'response' and 'userBooking.userBookings.dueDate'. Either include them or remove the dependency array.",["1147"],"React Hook useEffect has a missing dependency: 'calendar'. Either include it or remove the dependency array. If 'setStartTime' needs the current value of 'calendar', you can also switch to useReducer instead of useState and read 'calendar' in the reducer.",["1148"],"React Hook useEffect has missing dependencies: 'response?.userBookings' and 'userBookings?.dueDate'. Either include them or remove the dependency array.",["1149"],["1150"],"React Hook useEffect has a missing dependency: 'handleOrderDetailChange'. Either include it or remove the dependency array.",["1151"],["1152"],["1153"],"React Hook useEffect has missing dependencies: 'addLensesParameters' and 'idx'. Either include them or remove the dependency array.",["1154"],"React Hook useEffect has a missing dependency: 'action'. Either include it or remove the dependency array. If 'action' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1155"],"React Hook useEffect has missing dependencies: 'exam.response' and 'examinationToUpdate'. Either include them or remove the dependency array.",["1156"],"React Hook useEffect has an unnecessary dependency: 'examSchema'. Either exclude it or remove the dependency array. Outer scope values like 'examSchema' aren't valid dependencies because mutating them doesn't re-render the component.",["1157"],"'useEffect' is defined but never used.","'setResponse' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"1158","fix":"1159"},{"desc":"1160","fix":"1161"},{"desc":"1162","fix":"1163"},{"desc":"1164","fix":"1165"},{"desc":"1166","fix":"1167"},{"desc":"1168","fix":"1169"},{"desc":"1170","fix":"1171"},{"desc":"1172","fix":"1173"},{"desc":"1174","fix":"1175"},{"desc":"1176","fix":"1177"},{"desc":"1178","fix":"1179"},{"desc":"1180","fix":"1181"},{"desc":"1182","fix":"1183"},{"desc":"1184","fix":"1185"},{"desc":"1186","fix":"1187"},{"desc":"1188","fix":"1189"},{"desc":"1190","fix":"1191"},{"desc":"1192","fix":"1193"},{"desc":"1194","fix":"1195"},{"desc":"1196","fix":"1197"},{"desc":"1198","fix":"1199"},{"desc":"1200","fix":"1201"},{"desc":"1202","fix":"1203"},{"desc":"1204","fix":"1205"},{"desc":"1206","fix":"1207"},{"desc":"1208","fix":"1209"},{"desc":"1210","fix":"1211"},{"desc":"1212","fix":"1213"},{"desc":"1214","fix":"1215"},{"desc":"1216","fix":"1217"},{"desc":"1218","fix":"1219"},{"desc":"1220","fix":"1221"},{"desc":"1222","fix":"1223"},{"desc":"1224","fix":"1225"},{"desc":"1226","fix":"1227"},{"desc":"1228","fix":"1229"},{"desc":"1230","fix":"1231"},{"desc":"1232","fix":"1233"},{"messageId":"1234","fix":"1235","desc":"1236"},{"messageId":"1237","fix":"1238","desc":"1239"},{"messageId":"1234","fix":"1240","desc":"1236"},{"messageId":"1237","fix":"1241","desc":"1239"},{"messageId":"1234","fix":"1242","desc":"1236"},{"messageId":"1237","fix":"1243","desc":"1239"},{"desc":"1244","fix":"1245"},{"desc":"1246","fix":"1247"},{"desc":"1248","fix":"1249"},{"desc":"1250","fix":"1251"},{"desc":"1252","fix":"1253"},{"desc":"1254","fix":"1255"},{"desc":"1256","fix":"1257"},{"desc":"1258","fix":"1259"},{"desc":"1260","fix":"1261"},{"desc":"1262","fix":"1263"},{"desc":"1264","fix":"1265"},{"desc":"1266","fix":"1267"},{"desc":"1266","fix":"1268"},{"desc":"1262","fix":"1269"},{"desc":"1270","fix":"1271"},{"desc":"1272","fix":"1273"},{"desc":"1274","fix":"1275"},{"desc":"1276","fix":"1277"},{"desc":"1278","fix":"1279"},{"desc":"1280","fix":"1281"},{"desc":"1270","fix":"1282"},{"desc":"1272","fix":"1283"},{"desc":"1284","fix":"1285"},{"desc":"1286","fix":"1287"},{"desc":"1288","fix":"1289"},{"desc":"1290","fix":"1291"},{"desc":"1292","fix":"1293"},{"desc":"1294","fix":"1295"},{"desc":"1296","fix":"1297"},{"desc":"1298","fix":"1299"},{"desc":"1300","fix":"1301"},{"desc":"1182","fix":"1302"},{"desc":"1303","fix":"1304"},{"desc":"1305","fix":"1306"},{"desc":"1307","fix":"1308"},{"desc":"1309","fix":"1310"},{"desc":"1311","fix":"1312"},"Update the dependencies array to be: [getStats, token]",{"range":"1313","text":"1314"},"Update the dependencies array to be: [user, user?.fName, user?.lName]",{"range":"1315","text":"1316"},"Update the dependencies array to be: [activeCategoryTypeTab, getLenses, getProductsByQuery, products]",{"range":"1317","text":"1318"},"Update the dependencies array to be: [product, product.name]",{"range":"1319","text":"1320"},"Update the dependencies array to be: [getProductsByQuery, products]",{"range":"1321","text":"1322"},"Update the dependencies array to be: [activeCategoryTypeTab, getProductsByQuery, products, searchQuery]",{"range":"1323","text":"1324"},"Update the dependencies array to be: [fitlterQuery, getAnalytics]",{"range":"1325","text":"1326"},"Update the dependencies array to be: [activeIndex, getAnalytics]",{"range":"1327","text":"1328"},"Update the dependencies array to be: [activeIndex, handleRefetch, searchQuery]",{"range":"1329","text":"1330"},"Update the dependencies array to be: [isFetching, response, activeIndex, closeModal]",{"range":"1331","text":"1332"},"Update the dependencies array to be: [closeModal, isLoading, response]",{"range":"1333","text":"1334"},"Update the dependencies array to be: [activeIndex, refetch, searchQuery]",{"range":"1335","text":"1336"},"Update the dependencies array to be: [user.fName, user.lName, userObj, userObj.fName, userObj.lName]",{"range":"1337","text":"1338"},"Update the dependencies array to be: [getUser, id]",{"range":"1339","text":"1340"},"Update the dependencies array to be: [handleChange, resetUser]",{"range":"1341","text":"1342"},"Update the dependencies array to be: [blogsData, searchQuery]",{"range":"1343","text":"1344"},"Update the dependencies array to be: [activeIndex, blogsData]",{"range":"1345","text":"1346"},"Update the dependencies array to be: [blogsData.isLoading, blogsData.response?.blogs]",{"range":"1347","text":"1348"},"Update the dependencies array to be: [closeModal]",{"range":"1349","text":"1350"},"Update the dependencies array to be: [productObj?.type, refetch]",{"range":"1351","text":"1352"},"Update the dependencies array to be: [handleChange, lenses?.lensType, productObj.lensType, productObj.type]",{"range":"1353","text":"1354"},"Update the dependencies array to be: [isLoadingFilters, response?.filters]",{"range":"1355","text":"1356"},"Update the dependencies array to be: [id, eanCode, productObj.type, productObj.eanCode, product.type, getEanCode, handleChange]",{"range":"1357","text":"1358"},"Update the dependencies array to be: [getSingleProduct, handleChangeType, handleSelectImage, id, product.type, productObj.type]",{"range":"1359","text":"1360"},"Update the dependencies array to be: [lenses.image, setSelectedImage]",{"range":"1361","text":"1362"},"Update the dependencies array to be: [resetContactLenses, resetGlassesParameters, resetLenses, resetProduct, setSelectedImage]",{"range":"1363","text":"1364"},"Update the dependencies array to be: [closeModal, currentUser.premises, handleShowCalendarClick, isAdmin, isLoading, response, setShowModal]",{"range":"1365","text":"1366"},"Update the dependencies array to be: [closeModal, setShowModal]",{"range":"1367","text":"1368"},"Update the dependencies array to be: [getPost, id, setSelectedImage]",{"range":"1369","text":"1370"},"Update the dependencies array to be: [id, post, setSelectedImage]",{"range":"1371","text":"1372"},"Update the dependencies array to be: [closeModal, resetBlog]",{"range":"1373","text":"1374"},"Update the dependencies array to be: [closeModal, isFetching, response.calendar]",{"range":"1375","text":"1376"},"Update the dependencies array to be: [coupons, getCoupons]",{"range":"1377","text":"1378"},"Update the dependencies array to be: [userId, orderId, userData.response, orderData.response, changeStep, addUser, setOrder, order]",{"range":"1379","text":"1380"},"Update the dependencies array to be: [addUser, userData.isLoading, userData.response.user]",{"range":"1381","text":"1382"},"Update the dependencies array to be: [changeStep, resetOrder]",{"range":"1383","text":"1384"},"Update the dependencies array to be: [couponId, getCoupon]",{"range":"1385","text":"1386"},"Update the dependencies array to be: [resetCoupons]",{"range":"1387","text":"1388"},"removeEscape",{"range":"1389","text":"1390"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1391","text":"1392"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1393","text":"1390"},{"range":"1394","text":"1392"},{"range":"1395","text":"1390"},{"range":"1396","text":"1392"},"Update the dependencies array to be: [getSlug, string]",{"range":"1397","text":"1398"},"Update the dependencies array to be: [path, refetchIndex, requestOptions, skip]",{"range":"1399","text":"1400"},"Update the dependencies array to be: [refetchIndex, path, skip, requestOptions]",{"range":"1401","text":"1402"},"Update the dependencies array to be: [refetchIndex, path, id, skip, requestOptions]",{"range":"1403","text":"1404"},"Update the dependencies array to be: [currentPage, listItems]",{"range":"1405","text":"1406"},"Update the dependencies array to be: [currentPage, handleClickPrev]",{"range":"1407","text":"1408"},"Update the dependencies array to be: [filter?.filters?.type, refetch]",{"range":"1409","text":"1410"},"Update the dependencies array to be: [isLoading, response?.filters]",{"range":"1411","text":"1412"},"Update the dependencies array to be: [isLoading, response.calendar.endTimes, response.calendar.interval, response.calendar.startTimes]",{"range":"1413","text":"1414"},"Update the dependencies array to be: [month, refetch]",{"range":"1415","text":"1416"},"Update the dependencies array to be: [calendar, refetch]",{"range":"1417","text":"1418"},"Update the dependencies array to be: [firstDayIndex, isLoading, lastDay, month, nextDays, response.calendar, year]",{"range":"1419","text":"1420"},{"range":"1421","text":"1420"},{"range":"1422","text":"1416"},"Update the dependencies array to be: [isLoading, response.lenses]",{"range":"1423","text":"1424"},"Update the dependencies array to be: [isLoading, response.products]",{"range":"1425","text":"1426"},"Update the dependencies array to be: [getFilteredUsers, users]",{"range":"1427","text":"1428"},"Update the dependencies array to be: [getFilteredUsers, searchQuery, users]",{"range":"1429","text":"1430"},"Update the dependencies array to be: [isBranded, product.brand]",{"range":"1431","text":"1432"},"Update the dependencies array to be: [filters?.brands]",{"range":"1433","text":"1434"},{"range":"1435","text":"1424"},{"range":"1436","text":"1426"},"Update the dependencies array to be: [isLoading, response]",{"range":"1437","text":"1438"},"Update the dependencies array to be: [handleChange, parameters.addition, parameters.diopters]",{"range":"1439","text":"1440"},"Update the dependencies array to be: [examinationData.isLoading, examinationData.response]",{"range":"1441","text":"1442"},"Update the dependencies array to be: [selectedBooking, isLoading, response?.booking]",{"range":"1443","text":"1444"},"Update the dependencies array to be: [isLoading, response, userBooking.userBookings.dueDate]",{"range":"1445","text":"1446"},"Update the dependencies array to be: [calendar, day]",{"range":"1447","text":"1448"},"Update the dependencies array to be: [isLoading, response?.userBookings, userBookings?.dueDate]",{"range":"1449","text":"1450"},"Update the dependencies array to be: [dayData?.bookingDate, refetch]",{"range":"1451","text":"1452"},"Update the dependencies array to be: [handleOrderDetailChange, isUpdating, order]",{"range":"1453","text":"1454"},{"range":"1455","text":"1338"},"Update the dependencies array to be: [getUser, userId]",{"range":"1456","text":"1457"},"Update the dependencies array to be: [addLensesParameters, contactLenses, idx]",{"range":"1458","text":"1459"},"Update the dependencies array to be: [action, ref]",{"range":"1460","text":"1461"},"Update the dependencies array to be: [exam.isLoading, exam.response, examinationToUpdate]",{"range":"1462","text":"1463"},"Update the dependencies array to be: []",{"range":"1464","text":"1465"},[6506,6513],"[getStats, token]",[3537,3563],"[user, user?.fName, user?.lName]",[27088,27111],"[activeCategoryTypeTab, getLenses, getProductsByQuery, products]",[27855,27869],"[product, product.name]",[3697,3707],"[getProductsByQuery, products]",[4022,4035],"[activeCategoryTypeTab, getProductsByQuery, products, searchQuery]",[4133,4147],"[fitlterQuery, getAnalytics]",[4342,4355],"[activeIndex, getAnalytics]",[4718,4731],"[activeIndex, handleRefetch, searchQuery]",[5051,5086],"[isFetching, response, activeIndex, closeModal]",[2982,2993],"[closeModal, isLoading, response]",[3345,3358],"[activeIndex, refetch, searchQuery]",[4400,4430],"[user.fName, user.lName, userObj, userObj.fName, userObj.lName]",[4534,4538],"[getUser, id]",[5233,5235],"[handleChange, resetUser]",[2392,2405],"[blogsData, searchQuery]",[2908,2921],"[activeIndex, blogsData]",[3047,3068],"[blogsData.isLoading, blogsData.response?.blogs]",[3389,3391],"[closeModal]",[14184,14202],"[productObj?.type, refetch]",[14493,14510],"[handleChange, lenses?.lensType, productObj.lensType, productObj.type]",[14664,14682],"[isLoadingFilters, response?.filters]",[15153,15217],"[id, eanCode, productObj.type, productObj.eanCode, product.type, getEanCode, handleChange]",[15879,15884],"[getSingleProduct, handleChangeType, handleSelectImage, id, product.type, productObj.type]",[16089,16103],"[lenses.image, setSelectedImage]",[16389,16391],"[resetContactLenses, resetGlassesParameters, resetLenses, resetProduct, setSelectedImage]",[6642,6653],"[closeModal, currentUser.premises, handleShowCalendarClick, isAdmin, isLoading, response, setShowModal]",[7096,7098],"[closeModal, setShowModal]",[2426,2430],"[getPost, id, setSelectedImage]",[2858,2864],"[id, post, setSelectedImage]",[3183,3185],"[closeModal, resetBlog]",[4700,4712],"[closeModal, isFetching, response.calendar]",[1242,1251],"[coupons, getCoupons]",[2926,2982],"[userId, orderId, userData.response, orderData.response, changeStep, addUser, setOrder, order]",[3094,3114],"[addUser, userData.isLoading, userData.response.user]",[3310,3312],"[changeStep, resetOrder]",[1255,1265],"[couponId, getCoupon]",[1357,1359],"[resetCoupons]",[684,685],"",[684,684],"\\",[752,753],[752,752],[754,755],[754,754],[1012,1020],"[getSlug, string]",[1192,1206],"[path, refetchIndex, requestOptions, skip]",[2507,2527],"[refetchIndex, path, skip, requestOptions]",[3754,3778],"[refetchIndex, path, id, skip, requestOptions]",[694,705],"[currentPage, listItems]",[1003,1020],"[currentPage, handleClickPrev]",[1921,1944],"[filter?.filters?.type, refetch]",[2091,2102],"[isLoading, response?.filters]",[3996,4007],"[isLoading, response.calendar.endTimes, response.calendar.interval, response.calendar.startTimes]",[1086,1093],"[month, refetch]",[1181,1191],"[calendar, refetch]",[1722,1733],"[firstDayIndex, isLoading, lastDay, month, nextDays, response.calendar, year]",[2959,2970],[3020,3027],[1919,1930],"[isLoading, response.lenses]",[1911,1922],"[isLoading, response.products]",[1580,1587],"[getFilteredUsers, users]",[1908,1921],"[getFilteredUsers, searchQuery, users]",[1738,1749],"[isBranded, product.brand]",[1874,1899],"[filters?.brands]",[2013,2024],[3539,3550],[2686,2697],"[isLoading, response]",[3031,3127],"[handleChange, parameters.addition, parameters.diopters]",[2044,2071],"[examinationData.isLoading, examinationData.response]",[1978,2006],"[selectedBooking, isLoading, response?.booking]",[1007,1018],"[isLoading, response, userBooking.userBookings.dueDate]",[3254,3259],"[calendar, day]",[1662,1673],"[isLoading, response?.userBookings, userBookings?.dueDate]",[1765,1787],"[dayData?.bookingDate, refetch]",[4699,4718],"[handleOrderDetailChange, isUpdating, order]",[3022,3052],[3144,3152],"[getUser, userId]",[1141,1156],"[addLensesParameters, contactLenses, idx]",[467,472],"[action, ref]",[3611,3627],"[exam.isLoading, exam.response, examinationToUpdate]",[7463,7475],"[]"]