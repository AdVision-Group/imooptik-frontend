[{"/app/src/index.js":"1","/app/src/reportWebVitals.js":"2","/app/src/App.jsx":"3","/app/src/context/auth/auth.context.jsx":"4","/app/src/context/fetch-context/fetch.context.jsx":"5","/app/src/context/loading-modal/loading-modal.contenxt.jsx":"6","/app/src/global.styles.jsx":"7","/app/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.jsx":"8","/app/src/components/popup/pop-up.component.jsx":"9","/app/src/pages/reset-password/reset-password.jsx":"10","/app/src/context/auth/auth.queries.jsx":"11","/app/src/pages/dashboard/dashboard.jsx":"12","/app/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.styles.jsx":"13","/app/src/pages/reset-password/reset.password.styles.jsx":"14","/app/src/components/popup/pop.up.styles.jsx":"15","/app/src/pages/dashboard/dashboard.styles.jsx":"16","/app/src/components/sign-in/sign-in.component.jsx":"17","/app/src/components/forgot-password/forgot-password.component.jsx":"18","/app/src/components/custom-button/custom-button.component.jsx":"19","/app/src/components/spinner/spinner.component.jsx":"20","/app/src/components/custom-input/custom-input.component.jsx":"21","/app/src/components/sidenav/sidenav.component.jsx":"22","/app/src/context/blog/blog.context.jsx":"23","/app/src/context/user/user.context.jsx":"24","/app/src/context/image/image.context.jsx":"25","/app/src/context/booking/booking.context.jsx":"26","/app/src/context/orders/orders.context.jsx":"27","/app/src/context/coupons/coupons.context.jsx":"28","/app/src/context/warehouse/warehouse.context.jsx":"29","/app/src/context/analytics/analytics.context.jsx":"30","/app/src/context/examination/examination.context.jsx":"31","/app/src/context/order/order.context.jsx":"32","/app/src/sections/e-shop/e-shop.section.jsx":"33","/app/src/sections/customers/customers.section.jsx":"34","/app/src/sections/customer-profile/customer-profile.section.jsx":"35","/app/src/sections/blog-posts/blog-posts.section.jsx":"36","/app/src/sections/product/product.section.jsx":"37","/app/src/sections/post/post.section.jsx":"38","/app/src/sections/analytics/analytics.section.jsx":"39","/app/src/sections/order/order.section.jsx":"40","/app/src/sections/orders/orders.section.jsx":"41","/app/src/sections/coupons/coupons.section.jsx":"42","/app/src/sections/calendar/calendar.section.jsx":"43","/app/src/sections/booking/booking.section.jsx":"44","/app/src/sections/coupon/coupon.section.jsx":"45","/app/src/sections/no-permission/no-permission.section.jsx":"46","/app/src/components/sign-in/sign-in.styles.jsx":"47","/app/src/components/forgot-password/forgot-password.styles.jsx":"48","/app/src/components/custom-button/custom-button.styles.jsx":"49","/app/src/components/custom-input/custom-input.styles.jsx":"50","/app/src/components/sidenav/sidenav.styles.jsx":"51","/app/src/components/spinner/spinner.styles.jsx":"52","/app/src/context/blog/blog.queries.jsx":"53","/app/src/context/user/user.utils.jsx":"54","/app/src/context/user/user.queries.jsx":"55","/app/src/context/image/image.queries.jsx":"56","/app/src/context/warehouse/warehouse.utils.jsx":"57","/app/src/utils/warehouse.utils.jsx":"58","/app/src/hooks/slug.jsx":"59","/app/src/sections/e-shop/e-shop.styles.jsx":"60","/app/src/hooks/useFetch.jsx":"61","/app/src/utils/user.utils.jsx":"62","/app/src/sections/customers/customers.styles.jsx":"63","/app/src/sections/customer-profile/customer-profile.styles.jsx":"64","/app/src/sections/product/product.styles.jsx":"65","/app/src/sections/blog-posts/blog-posts.styles.jsx":"66","/app/src/sections/post/post.styles.jsx":"67","/app/src/sections/no-permission/no-permission.styles.jsx":"68","/app/src/sections/coupon/coupon.styles.jsx":"69","/app/src/utils/calendar.utils.jsx":"70","/app/src/sections/booking/booking.styles.jsx":"71","/app/src/sections/coupons/coupons.styles.jsx":"72","/app/src/sections/orders/orders.styles.jsx":"73","/app/src/context/orders/orders.utils.jsx":"74","/app/src/sections/calendar/calendar.styles.jsx":"75","/app/src/components/section-header/section-header.component.jsx":"76","/app/src/components/scroll-container/scroll-container.component.jsx":"77","/app/src/components/modal-eshop-filter/modal-eshop-filter.component.jsx":"78","/app/src/components/product-overview/product-overview.component.jsx":"79","/app/src/components/section-navbar/section-navbar.component.jsx":"80","/app/src/components/list-arrows/list-arrows.component.jsx":"81","/app/src/components/user-form/user-form.component.jsx":"82","/app/src/components/modal-product-image-gallery/modal-product-image-gallery.component.jsx":"83","/app/src/components/modal-get-lenses-data/modal-get-lenses-data.component.jsx":"84","/app/src/components/modal-images/modal-images.component.jsx":"85","/app/src/components/modal-get-product-data/modal-get-product-data.component.jsx":"86","/app/src/components/product-lenses-form/product-lenses-form.component.jsx":"87","/app/src/components/product-glasses-form/product-glasses-form.component.jsx":"88","/app/src/components/new-user-form/new-user-form.component.jsx":"89","/app/src/components/product-contact-lenses-form/product-contact-lenses-form.component.jsx":"90","/app/src/components/product-accessories-form/product-accessories-form.component.jsx":"91","/app/src/components/product-service-form/product-service-form.component.jsx":"92","/app/src/components/product-input-row/product-input-row.component.jsx":"93","/app/src/components/booking-calendar-bookings/booking-calendar-bookings.component.jsx":"94","/app/src/components/calendar/calendar.component.jsx":"95","/app/src/context/week-calendar/week-calendar.context.jsx":"96","/app/src/components/calendar-weekdays/calendar-weekdays.component.jsx":"97","/app/src/components/booking-calendar-overview/booking-calendar-overview.component.jsx":"98","/app/src/components/custom-select/custom-select.component.jsx":"99","/app/src/components/product-glasses-form/product-glasses-form.styles.jsx":"100","/app/src/sections/order/order.styles.jsx":"101","/app/src/sections/analytics/analytics.styles.jsx":"102","/app/src/utils/analytics.utils.jsx":"103","/app/src/components/modal-update-registry/modal-update-registry.component.jsx":"104","/app/src/components/custom-checkbox/custom-checkbox.component.jsx":"105","/app/src/components/custom-textarea/custom-textarea.component.jsx":"106","/app/src/sections/order/steps/4-summary/summary.component.jsx":"107","/app/src/sections/order/steps/3-select-lenses/select-lenses.component.jsx":"108","/app/src/sections/order/steps/2-select-product/select-product.component.jsx":"109","/app/src/sections/order/steps/1-select-user/select-user.component.jsx":"110","/app/src/components/section-header/section-header.styles.jsx":"111","/app/src/components/scroll-container/scroll-container.styles.jsx":"112","/app/src/components/product-overview/product-overview.styles.jsx":"113","/app/src/components/modal-eshop-filter/modal-eshop-filter.styles.jsx":"114","/app/src/components/section-navbar/section-navbar.styles.jsx":"115","/app/src/components/list-arrows/list-arrows.styles.jsx":"116","/app/src/components/user-form/user.form-styles.jsx":"117","/app/src/components/modal-product-image-gallery/modal-product-image-gallery.styles.jsx":"118","/app/src/components/product-service-form/product-service-form.styles.jsx":"119","/app/src/components/product-accessories-form/product-accessories-form.styles.jsx":"120","/app/src/components/new-user-form/new-user-form.styles.jsx":"121","/app/src/components/product-contact-lenses-form/product-contact-lenses-form.styles.jsx":"122","/app/src/components/product-input-row/product-input-row.styles.jsx":"123","/app/src/components/calendar/calendar.styles.jsx":"124","/app/src/components/booking-calendar-bookings/booking-calendar-bookings.styles.jsx":"125","/app/src/components/product-lenses-form/product-lenses-form.styles.jsx":"126","/app/src/utils/week-calendar.utils.jsx":"127","/app/src/components/booking-calendar-overview/booking-calendar-overview.styles.jsx":"128","/app/src/components/modal-get-product-data/modal-get-product-data.styles.jsx":"129","/app/src/components/calendar-weekdays/calendar-weekdays.styles.jsx":"130","/app/src/components/custom-select/custom-select.styles.jsx":"131","/app/src/components/order-overview/order-overview.styles.jsx":"132","/app/src/components/order-overview/order-overview.component.jsx":"133","/app/src/components/examinations-overview/examinations-overview.component.jsx":"134","/app/src/components/parameters-table/parameters-table.component.jsx":"135","/app/src/components/profile-order-overview/profile-order-overview.component.jsx":"136","/app/src/utils/orders.utils.jsx":"137","/app/src/components/modal-get-lenses-data/modal-get-lenses-data.styles.jsx":"138","/app/src/components/modal-images/modal-images.styles.jsx":"139","/app/src/components/custom-form-switch/custom-form-switch.component.jsx":"140","/app/src/components/modal-booking/modal-booking.component.jsx":"141","/app/src/components/calendar-booked-day/calendar-booked-day.component.jsx":"142","/app/src/components/modal-user-bookings/modal-user-booking.component.jsx":"143","/app/src/components/modal-userbookings-details/modal-userbookings-details.component.jsx":"144","/app/src/components/modal-update-registry/modal-update-registry.styles.jsx":"145","/app/src/components/custom-checkbox/custom-checkbox.styles.jsx":"146","/app/src/components/custom-textarea/custom-textarea.styles.jsx":"147","/app/src/sections/order/steps/4-summary/summary.styles.jsx":"148","/app/src/sections/order/steps/3-select-lenses/select-lenses.styles.jsx":"149","/app/src/sections/order/steps/2-select-product/select-product.styles.jsx":"150","/app/src/sections/order/steps/1-select-user/select-user.styles.jsx":"151","/app/src/components/order-summary-lenses-name/order-summary-lenses-name.component.jsx":"152","/app/src/components/modal-finish-order/modal-finish-order.component.jsx":"153","/app/src/components/modal-order-update-user/modal-order-update-user.component.jsx":"154","/app/src/components/order-summary-product-name/order-summary-product-name.component.jsx":"155","/app/src/components/order-cart-lenses-row/order-cart-lenses-row.component.jsx":"156","/app/src/components/custom-back-button/custom-back-button.component.jsx":"157","/app/src/components/order-cart-row/order-cart-row.component.jsx":"158","/app/src/hooks/useOutsideAlerter.jsx":"159","/app/src/components/examinations-overview/examinations-overview.styles.jsx":"160","/app/src/components/parameters-table/parameters-table.styles.jsx":"161","/app/src/components/profile-order-overview/profile-order-overview.styles.jsx":"162","/app/src/components/modal-booking/modal-booking.styles.jsx":"163","/app/src/components/calendar-booked-day/calendar-booked-day.styles.jsx":"164","/app/src/components/custom-form-switch/custom-form-switch.styles.jsx":"165","/app/src/components/order-deligate-modal/order-deligate-modal.component.jsx":"166","/app/src/components/modal-user-bookings/modal-user-booking.styles.jsx":"167","/app/src/components/modal-finish-deposited-order/modal-finish-deposited-order.component.jsx":"168","/app/src/components/modal-userbookings-details/modal-userbookings-details.styles.jsx":"169","/app/src/components/examination-user/examination-user.component.jsx":"170","/app/src/components/modal-optometrist-examination/modal-optometrist-examination.component.jsx":"171","/app/src/components/modal-finish-order/modal-finish-order.styles.jsx":"172","/app/src/components/modal-order-update-user/modal-order-update-user.styles.jsx":"173","/app/src/components/order-cart-lenses-row/order-cart-lenses-row.styles.jsx":"174","/app/src/components/custom-back-button/custom-back-button.styles.jsx":"175","/app/src/components/order-cart-row/order-cart-row.styles.jsx":"176","/app/src/components/order-deligate-modal/order-deligate-modal.styles.jsx":"177","/app/src/components/modal-finish-deposited-order/modal-finish-deposited-order.styles.jsx":"178","/app/src/components/examination-user/examination-user.styles.jsx":"179","/app/src/utils/parameters.utils.jsx":"180","/app/src/utils/object.utils.jsx":"181","/app/src/components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx":"182","/app/src/utils/errors.jsx":"183"},{"size":834,"mtime":1617873965462,"results":"184","hashOfConfig":"185"},{"size":362,"mtime":1617279821919,"results":"186","hashOfConfig":"185"},{"size":1799,"mtime":1617279821899,"results":"187","hashOfConfig":"185"},{"size":7107,"mtime":1619351877472,"results":"188","hashOfConfig":"185"},{"size":1952,"mtime":1619354187182,"results":"189","hashOfConfig":"185"},{"size":1076,"mtime":1617279821919,"results":"190","hashOfConfig":"185"},{"size":4820,"mtime":1617279821919,"results":"191","hashOfConfig":"185"},{"size":840,"mtime":1617279821919,"results":"192","hashOfConfig":"185"},{"size":714,"mtime":1617279821919,"results":"193","hashOfConfig":"185"},{"size":1667,"mtime":1617279821919,"results":"194","hashOfConfig":"185"},{"size":2292,"mtime":1617279821919,"results":"195","hashOfConfig":"185"},{"size":9175,"mtime":1617279821919,"results":"196","hashOfConfig":"185"},{"size":545,"mtime":1617279821919,"results":"197","hashOfConfig":"185"},{"size":772,"mtime":1617279821919,"results":"198","hashOfConfig":"185"},{"size":721,"mtime":1617279821919,"results":"199","hashOfConfig":"185"},{"size":658,"mtime":1617279821919,"results":"200","hashOfConfig":"185"},{"size":1925,"mtime":1617279821919,"results":"201","hashOfConfig":"185"},{"size":1466,"mtime":1617279821909,"results":"202","hashOfConfig":"185"},{"size":283,"mtime":1617279821909,"results":"203","hashOfConfig":"185"},{"size":178,"mtime":1617279821919,"results":"204","hashOfConfig":"185"},{"size":639,"mtime":1617279821909,"results":"205","hashOfConfig":"185"},{"size":2543,"mtime":1617279821919,"results":"206","hashOfConfig":"185"},{"size":4952,"mtime":1618253984620,"results":"207","hashOfConfig":"185"},{"size":13139,"mtime":1617708933319,"results":"208","hashOfConfig":"185"},{"size":4391,"mtime":1617279821919,"results":"209","hashOfConfig":"185"},{"size":8549,"mtime":1619356245702,"results":"210","hashOfConfig":"185"},{"size":7256,"mtime":1618440283310,"results":"211","hashOfConfig":"185"},{"size":6964,"mtime":1617279821919,"results":"212","hashOfConfig":"185"},{"size":30616,"mtime":1619352005722,"results":"213","hashOfConfig":"185"},{"size":3689,"mtime":1618248579140,"results":"214","hashOfConfig":"185"},{"size":3284,"mtime":1619351993102,"results":"215","hashOfConfig":"185"},{"size":11606,"mtime":1619357144192,"results":"216","hashOfConfig":"185"},{"size":8015,"mtime":1618256686680,"results":"217","hashOfConfig":"185"},{"size":5837,"mtime":1617708928929,"results":"218","hashOfConfig":"185"},{"size":7992,"mtime":1619352079962,"results":"219","hashOfConfig":"185"},{"size":5376,"mtime":1617279821919,"results":"220","hashOfConfig":"185"},{"size":23870,"mtime":1619176127590,"results":"221","hashOfConfig":"185"},{"size":10483,"mtime":1619352094642,"results":"222","hashOfConfig":"185"},{"size":15728,"mtime":1619352029102,"results":"223","hashOfConfig":"185"},{"size":8811,"mtime":1619359233832,"results":"224","hashOfConfig":"185"},{"size":8077,"mtime":1617279821929,"results":"225","hashOfConfig":"185"},{"size":3073,"mtime":1617279821929,"results":"226","hashOfConfig":"185"},{"size":19959,"mtime":1619366338102,"results":"227","hashOfConfig":"185"},{"size":15206,"mtime":1619352043012,"results":"228","hashOfConfig":"185"},{"size":5610,"mtime":1617279821929,"results":"229","hashOfConfig":"185"},{"size":810,"mtime":1617279821929,"results":"230","hashOfConfig":"185"},{"size":975,"mtime":1617279821919,"results":"231","hashOfConfig":"185"},{"size":898,"mtime":1617279821909,"results":"232","hashOfConfig":"185"},{"size":440,"mtime":1617279821909,"results":"233","hashOfConfig":"185"},{"size":1331,"mtime":1617279821909,"results":"234","hashOfConfig":"185"},{"size":5222,"mtime":1617279821919,"results":"235","hashOfConfig":"185"},{"size":377,"mtime":1617279821919,"results":"236","hashOfConfig":"185"},{"size":1793,"mtime":1617279821919,"results":"237","hashOfConfig":"185"},{"size":936,"mtime":1618487420915,"results":"238","hashOfConfig":"185"},{"size":3508,"mtime":1617279821919,"results":"239","hashOfConfig":"185"},{"size":1560,"mtime":1617279821919,"results":"240","hashOfConfig":"185"},{"size":6871,"mtime":1618318052039,"results":"241","hashOfConfig":"185"},{"size":3109,"mtime":1617279821929,"results":"242","hashOfConfig":"185"},{"size":1132,"mtime":1617353319644,"results":"243","hashOfConfig":"185"},{"size":709,"mtime":1617279821929,"results":"244","hashOfConfig":"185"},{"size":3835,"mtime":1617279821919,"results":"245","hashOfConfig":"185"},{"size":431,"mtime":1617279821929,"results":"246","hashOfConfig":"185"},{"size":1734,"mtime":1617279821929,"results":"247","hashOfConfig":"185"},{"size":632,"mtime":1617279821929,"results":"248","hashOfConfig":"185"},{"size":952,"mtime":1617279821929,"results":"249","hashOfConfig":"185"},{"size":1728,"mtime":1617279821919,"results":"250","hashOfConfig":"185"},{"size":1888,"mtime":1617279821929,"results":"251","hashOfConfig":"185"},{"size":728,"mtime":1617279821929,"results":"252","hashOfConfig":"185"},{"size":1170,"mtime":1617279821929,"results":"253","hashOfConfig":"185"},{"size":15819,"mtime":1619363415072,"results":"254","hashOfConfig":"185"},{"size":2199,"mtime":1617279821919,"results":"255","hashOfConfig":"185"},{"size":1785,"mtime":1617279821929,"results":"256","hashOfConfig":"185"},{"size":2261,"mtime":1617279821929,"results":"257","hashOfConfig":"185"},{"size":889,"mtime":1617279821919,"results":"258","hashOfConfig":"185"},{"size":3487,"mtime":1618891238632,"results":"259","hashOfConfig":"185"},{"size":1521,"mtime":1617279821919,"results":"260","hashOfConfig":"185"},{"size":320,"mtime":1617279821919,"results":"261","hashOfConfig":"185"},{"size":8077,"mtime":1617279821909,"results":"262","hashOfConfig":"185"},{"size":2507,"mtime":1617279821919,"results":"263","hashOfConfig":"185"},{"size":655,"mtime":1617279821919,"results":"264","hashOfConfig":"185"},{"size":1810,"mtime":1617279821909,"results":"265","hashOfConfig":"185"},{"size":13007,"mtime":1618913037440,"results":"266","hashOfConfig":"185"},{"size":5695,"mtime":1617279821909,"results":"267","hashOfConfig":"185"},{"size":4055,"mtime":1617279821909,"results":"268","hashOfConfig":"185"},{"size":8267,"mtime":1617279821909,"results":"269","hashOfConfig":"185"},{"size":5647,"mtime":1617279821909,"results":"270","hashOfConfig":"185"},{"size":7799,"mtime":1619351975332,"results":"271","hashOfConfig":"185"},{"size":12091,"mtime":1617689716889,"results":"272","hashOfConfig":"185"},{"size":14834,"mtime":1617688383059,"results":"273","hashOfConfig":"185"},{"size":9290,"mtime":1617689718839,"results":"274","hashOfConfig":"185"},{"size":5696,"mtime":1617696640589,"results":"275","hashOfConfig":"185"},{"size":2211,"mtime":1617689732709,"results":"276","hashOfConfig":"185"},{"size":425,"mtime":1617279821919,"results":"277","hashOfConfig":"185"},{"size":3418,"mtime":1618413851546,"results":"278","hashOfConfig":"185"},{"size":3274,"mtime":1617279821909,"results":"279","hashOfConfig":"185"},{"size":13631,"mtime":1619366296282,"results":"280","hashOfConfig":"185"},{"size":7572,"mtime":1619354323552,"results":"281","hashOfConfig":"185"},{"size":999,"mtime":1617279821909,"results":"282","hashOfConfig":"185"},{"size":689,"mtime":1617279821909,"results":"283","hashOfConfig":"185"},{"size":2969,"mtime":1617279821919,"results":"284","hashOfConfig":"185"},{"size":2358,"mtime":1619359384632,"results":"285","hashOfConfig":"185"},{"size":4053,"mtime":1618323147359,"results":"286","hashOfConfig":"185"},{"size":404,"mtime":1617279821929,"results":"287","hashOfConfig":"185"},{"size":2803,"mtime":1619351976612,"results":"288","hashOfConfig":"185"},{"size":354,"mtime":1617279821909,"results":"289","hashOfConfig":"185"},{"size":651,"mtime":1617279821909,"results":"290","hashOfConfig":"185"},{"size":12385,"mtime":1619352084352,"results":"291","hashOfConfig":"185"},{"size":6808,"mtime":1617279821929,"results":"292","hashOfConfig":"185"},{"size":5753,"mtime":1618257960250,"results":"293","hashOfConfig":"185"},{"size":3313,"mtime":1617279821929,"results":"294","hashOfConfig":"185"},{"size":1186,"mtime":1617279821919,"results":"295","hashOfConfig":"185"},{"size":1039,"mtime":1617279821919,"results":"296","hashOfConfig":"185"},{"size":2448,"mtime":1617279821919,"results":"297","hashOfConfig":"185"},{"size":1934,"mtime":1617279821909,"results":"298","hashOfConfig":"185"},{"size":854,"mtime":1617279821919,"results":"299","hashOfConfig":"185"},{"size":624,"mtime":1617279821909,"results":"300","hashOfConfig":"185"},{"size":2294,"mtime":1617279821919,"results":"301","hashOfConfig":"185"},{"size":3279,"mtime":1617279821909,"results":"302","hashOfConfig":"185"},{"size":946,"mtime":1617279821919,"results":"303","hashOfConfig":"185"},{"size":2056,"mtime":1617279821919,"results":"304","hashOfConfig":"185"},{"size":1096,"mtime":1617279821909,"results":"305","hashOfConfig":"185"},{"size":2684,"mtime":1617279821919,"results":"306","hashOfConfig":"185"},{"size":447,"mtime":1617279821919,"results":"307","hashOfConfig":"185"},{"size":1274,"mtime":1617279821909,"results":"308","hashOfConfig":"185"},{"size":1867,"mtime":1617279821899,"results":"309","hashOfConfig":"185"},{"size":2186,"mtime":1617279821919,"results":"310","hashOfConfig":"185"},{"size":3555,"mtime":1618931841433,"results":"311","hashOfConfig":"185"},{"size":1060,"mtime":1617279821909,"results":"312","hashOfConfig":"185"},{"size":3044,"mtime":1617279821909,"results":"313","hashOfConfig":"185"},{"size":2985,"mtime":1617279821909,"results":"314","hashOfConfig":"185"},{"size":364,"mtime":1617279821909,"results":"315","hashOfConfig":"185"},{"size":2933,"mtime":1617279821919,"results":"316","hashOfConfig":"185"},{"size":5736,"mtime":1618488224955,"results":"317","hashOfConfig":"185"},{"size":4445,"mtime":1618913101910,"results":"318","hashOfConfig":"185"},{"size":9261,"mtime":1619351975982,"results":"319","hashOfConfig":"185"},{"size":1533,"mtime":1617279821919,"results":"320","hashOfConfig":"185"},{"size":1195,"mtime":1617279821929,"results":"321","hashOfConfig":"185"},{"size":3044,"mtime":1617279821909,"results":"322","hashOfConfig":"185"},{"size":4564,"mtime":1617279821909,"results":"323","hashOfConfig":"185"},{"size":681,"mtime":1617279821909,"results":"324","hashOfConfig":"185"},{"size":5335,"mtime":1618486832185,"results":"325","hashOfConfig":"185"},{"size":2827,"mtime":1617279821909,"results":"326","hashOfConfig":"185"},{"size":10401,"mtime":1619355339502,"results":"327","hashOfConfig":"185"},{"size":7477,"mtime":1619355946002,"results":"328","hashOfConfig":"185"},{"size":1874,"mtime":1618244198460,"results":"329","hashOfConfig":"185"},{"size":698,"mtime":1617279821909,"results":"330","hashOfConfig":"185"},{"size":1124,"mtime":1617279821909,"results":"331","hashOfConfig":"185"},{"size":4284,"mtime":1618940925750,"results":"332","hashOfConfig":"185"},{"size":4952,"mtime":1618407997526,"results":"333","hashOfConfig":"185"},{"size":3409,"mtime":1617279821929,"results":"334","hashOfConfig":"185"},{"size":1458,"mtime":1617279821929,"results":"335","hashOfConfig":"185"},{"size":1305,"mtime":1619359111192,"results":"336","hashOfConfig":"185"},{"size":11004,"mtime":1618941884970,"results":"337","hashOfConfig":"185"},{"size":3962,"mtime":1617701635859,"results":"338","hashOfConfig":"185"},{"size":1859,"mtime":1619357726652,"results":"339","hashOfConfig":"185"},{"size":5564,"mtime":1618482806805,"results":"340","hashOfConfig":"185"},{"size":341,"mtime":1617279821909,"results":"341","hashOfConfig":"185"},{"size":10716,"mtime":1618408462696,"results":"342","hashOfConfig":"185"},{"size":1400,"mtime":1617279821919,"results":"343","hashOfConfig":"185"},{"size":2161,"mtime":1618858044322,"results":"344","hashOfConfig":"185"},{"size":2163,"mtime":1618487458115,"results":"345","hashOfConfig":"185"},{"size":1414,"mtime":1617279821919,"results":"346","hashOfConfig":"185"},{"size":2041,"mtime":1617279821909,"results":"347","hashOfConfig":"185"},{"size":668,"mtime":1617279821909,"results":"348","hashOfConfig":"185"},{"size":486,"mtime":1617279821909,"results":"349","hashOfConfig":"185"},{"size":3006,"mtime":1617279821919,"results":"350","hashOfConfig":"185"},{"size":3058,"mtime":1617279821909,"results":"351","hashOfConfig":"185"},{"size":5424,"mtime":1617279821909,"results":"352","hashOfConfig":"185"},{"size":2890,"mtime":1619353185902,"results":"353","hashOfConfig":"185"},{"size":492,"mtime":1617279821909,"results":"354","hashOfConfig":"185"},{"size":94434,"mtime":1618439837260,"results":"355","hashOfConfig":"185"},{"size":1719,"mtime":1617279821909,"results":"356","hashOfConfig":"185"},{"size":1679,"mtime":1617279821909,"results":"357","hashOfConfig":"185"},{"size":3990,"mtime":1618407965336,"results":"358","hashOfConfig":"185"},{"size":349,"mtime":1617279821909,"results":"359","hashOfConfig":"185"},{"size":3161,"mtime":1618257842970,"results":"360","hashOfConfig":"185"},{"size":1432,"mtime":1617279821919,"results":"361","hashOfConfig":"185"},{"size":2826,"mtime":1617279821909,"results":"362","hashOfConfig":"185"},{"size":162,"mtime":1617279821909,"results":"363","hashOfConfig":"185"},{"size":906,"mtime":1617885761652,"results":"364","hashOfConfig":"185"},{"size":125,"mtime":1617883588912,"results":"365","hashOfConfig":"185"},{"size":4140,"mtime":1617979046006,"results":"366","hashOfConfig":"185"},{"size":156,"mtime":1619353855062,"results":"367","hashOfConfig":"185"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},"iuro77",{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"377","messages":"378","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"370"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"370"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"435","messages":"436","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"370"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"370"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"443","messages":"444","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"370"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"370"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"451","messages":"452","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"453","messages":"454","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"455","messages":"456","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"370"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"370"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"463","messages":"464","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"465","messages":"466","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"370"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"370"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"370"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"370"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"370"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"370"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"370"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"370"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"370"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"560","messages":"561","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"562","usedDeprecatedRules":"370"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565","usedDeprecatedRules":"370"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568","usedDeprecatedRules":"370"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571","usedDeprecatedRules":"370"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"370"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"370"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"584","messages":"585","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"370"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"595","messages":"596","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"601","messages":"602","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"607","messages":"608","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"370"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"370"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"370"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"370"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"370"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668","usedDeprecatedRules":"370"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681","usedDeprecatedRules":"370"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"370"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"687","messages":"688","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"689","messages":"690","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"705","messages":"706","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"370"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"370"},{"filePath":"711","messages":"712","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"713","messages":"714","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"370"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720","usedDeprecatedRules":"370"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"370"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"370"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"741","messages":"742","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749","usedDeprecatedRules":"370"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"766","messages":"767","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"772","messages":"773","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/index.js",[],["774","775"],"/app/src/reportWebVitals.js",[],"/app/src/App.jsx",[],"/app/src/context/auth/auth.context.jsx",["776"],"/app/src/context/fetch-context/fetch.context.jsx",["777","778"],"/app/src/context/loading-modal/loading-modal.contenxt.jsx",[],"/app/src/global.styles.jsx",[],"/app/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.jsx",[],"/app/src/components/popup/pop-up.component.jsx",[],"/app/src/pages/reset-password/reset-password.jsx",[],"/app/src/context/auth/auth.queries.jsx",[],"/app/src/pages/dashboard/dashboard.jsx",[],"/app/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.styles.jsx",[],"/app/src/pages/reset-password/reset.password.styles.jsx",[],"/app/src/components/popup/pop.up.styles.jsx",[],"/app/src/pages/dashboard/dashboard.styles.jsx",[],"/app/src/components/sign-in/sign-in.component.jsx",[],"/app/src/components/forgot-password/forgot-password.component.jsx",[],"/app/src/components/custom-button/custom-button.component.jsx",[],"/app/src/components/spinner/spinner.component.jsx",[],"/app/src/components/custom-input/custom-input.component.jsx",[],"/app/src/components/sidenav/sidenav.component.jsx",[],"/app/src/context/blog/blog.context.jsx",[],"/app/src/context/user/user.context.jsx",["779"],"import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n// import { OrderContext } from '../order/order.context'\n\nimport {\n    // fetchUsers,\n    fetchUser,\n    patchUser,\n    postAdmin,\n    postUser,\n} from './user.queries'\n\nimport {\n    initUserObj\n} from './user.utils'\n\nexport const UserContext = createContext({\n    isUpdating: false,\n    activeIndex: 0,\n    handleChangeFilterItem: () => { },\n    filterItems: [],\n    totalCount: 0,\n    users: null,\n    user: null,\n    // getUsers: () => { },\n    getUser: () => { },\n    handleChange: () => { },\n    handleParameterChange: () => { },\n    handleCompanyChange: () => { },\n    updateUser: () => { },\n    resetUser: () => { },\n    formToShow: 0,\n    switchFormButtons: [],\n    toggleUserForm: () => { },\n    createUser: () => { },\n    getFilteredUsers: () => { },\n    getUserByQuery: () => { },\n    deleteUser: () => { },\n})\n\nconst UserProvider = ({ children }) => {\n    const { push } = useHistory()\n    const { token } = useContext(AuthContext)\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n    // ------------------------\n\n    const [user, setUser] = useState(initUserObj)\n    const [users, setUsers] = useState(null)\n    const [totalCount] = useState(0)\n\n    // ------------------------\n\n    console.count(\"USERCONTEXT\")\n    console.log(user)\n\n    const [isUpdating, setIsUpdating] = useState(false)\n    const [activeIndex, setActiveIndex] = useState(0)\n    const filterItems = [\n        {\n            id: 0,\n            name: \"Zákazníci\",\n            filter: 0,\n        },\n        {\n            id: 1,\n            name: \"Zamestnanci\",\n            filter: 1,\n        },\n        {\n            id: 2,\n            name: \"Vedúci\",\n            filter: 2,\n        },\n        // {\n        //     id: 3,\n        //     name: \"Velký brat\",\n        //     filter: 3,\n        // },\n        // {\n        //     id: 4,\n        //     name: \"Odstránené\",\n        //     filter: 3\n        // }\n    ]\n\n    // ------------------------\n\n    const [formToShow, setFormToShow] = useState(0)\n    const switchFormButtons = [\n        {\n            name: \"Zákazník\"\n        },\n        {\n            name: \"Zamestnanec\"\n        }\n    ]\n\n    const toggleUserForm = (e, idx) => {\n        e.preventDefault()\n        setFormToShow(idx)\n    }\n\n    // ------------------------\n\n\n    const handleChangeFilterItem = (itemIndex) => {\n        setActiveIndex(itemIndex)\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n\n        setUser({\n            ...user,\n            [name]: value\n        })\n    }\n\n    const handleParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value === '' ? 1001 : value\n        setUser({\n            ...user,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleCompanyChange = (e) => {\n        const { name, value } = e.target\n        setUser({\n            ...user,\n            company: {\n                ...user.company,\n                [name]: value\n            }\n        })\n    }\n\n    useEffect(() => {\n        setUser({\n            ...user,\n            name: user?.fName + \" \" + user?.lName\n        })\n    }, [user?.fName, user?.lName])\n\n    const resetUser = () => {\n        setUser(initUserObj)\n        setIsUpdating(false)\n        setFormToShow(0)\n    }\n\n    // ------------------------\n    // USER ACTIONS\n    // ------------------------\n\n    // Get all users\n    // const getUsers = async () => {\n    //     setIsLoading(true)\n    //     setShowModal(true)\n\n    //     try {\n    //         const response = await fetchUsers(token)\n    //         const data = await response.json()\n\n    //         console.log(data)\n    //         if (data.users) {\n    //             setUsers(data.users)\n    //             setTotalCount(data.count)\n    //             setIsLoading(false)\n    //             closeModal()\n\n    //         } else {\n    //             getMessage(data.message)\n    //             setIsLoading(false)\n    //         }\n    //     } catch (err) {\n    //         console.log(err)\n    //         getMessage(\"Nieco sa pokazilo\")\n    //         setIsLoading(false)\n    //     }\n    // }\n\n    // Get single user\n    const getUser = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n        setIsUpdating(true)\n\n        try {\n            const response = await fetchUser(token, id)\n            const data = await response.json()\n\n            if (data.user) {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                setIsLoading(false)\n                closeModal()\n\n            } else {\n                getMessage(data.message)\n                setIsLoading(false)\n            }\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // Update user\n    const updateUser = async (user, id, path, refetchUser, close, addUser) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await patchUser(token, user, id)\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.messageSK)\n                setIsLoading(false)\n                return\n            }\n\n\n            setIsLoading(false)\n            closeModal()\n\n            if (path === 'order') {\n                push(`/dashboard/objednavky/${id}`)\n            } else if (path === 'profile') {\n                push(`/dashboard/zakaznici/${id}`)\n            } else if (path === 'isOrder') {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n\n                addUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // refetchUser()\n                close()\n            } else {\n                push(\"/dashboard/zakaznici\")\n            }\n\n            getFilteredUsers({\n                filters: {\n                    admin: activeIndex\n                }\n            })\n            // http://localhost:1000/#/dashboard/zakaznici\n\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createUser = async (user, path) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            if (formToShow === 0) {\n                let data = {}\n                if (!user._id) {\n                    const response = await postUser(token, user)\n                    data = await response.json()\n\n                    if (data.error) {\n                        getMessage(data.message)\n\n                        if (data.type === 'email') {\n                            getMessage(\"Email existuje\")\n                        }\n                        if (data.error === 'format' && data.message.includes('email')) {\n                            getMessage(\"Email musi byt platny email\")\n                        }\n                        setIsLoading(false)\n                        return\n                    }\n\n                    setUser({\n                        ...data.user,\n                        _id: data.user._id\n                    })\n                }\n\n                const userId = data.user ? data.user._id : user._id\n\n                updateUser({\n                    ...user\n                }, userId, path)\n\n                // setIsLoading(false)\n                // getUsers()\n                // push('/dashboard/zakaznici')\n                // closeModal()\n\n            } else {\n                if (user.password !== user.confirmPassword) {\n                    getMessage(\"Heslá sa nezhodujú\")\n                    setIsLoading(false)\n                    return\n                }\n\n                const response = await postAdmin(token, user)\n                const data = await response.json()\n\n                if (data.error) {\n                    getMessage(data.message)\n                    setIsLoading(false)\n                    return\n                }\n\n                setIsLoading(false)\n                getFilteredUsers({\n                    filters: {\n                        admin: activeIndex\n                    }\n                })\n\n                push(\"/dashboard/zakaznici\")\n                closeModal()\n            }\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n\n\n    // ----------------------------------------------\n    // ----------------------------------------------\n    // ----------------------------------------------\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const deleteUser = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            // body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.user) {\n\n                push(\"/dashboard/zakaznici\")\n                setIsLoading(false)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getFilteredUsers = async (filter) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(filter)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getUserByQuery = async (query) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(query)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <UserContext.Provider\n            value={{\n                isUpdating,\n                activeIndex,\n                handleChangeFilterItem,\n                filterItems,\n                users,\n                user,\n                totalCount,\n                // getUsers,\n                getUser,\n                handleChange,\n                handleParameterChange,\n                handleCompanyChange,\n                updateUser,\n                resetUser,\n                formToShow,\n                switchFormButtons,\n                toggleUserForm,\n                createUser,\n                getFilteredUsers,\n                getUserByQuery,\n                deleteUser\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    )\n}\n\nexport default UserProvider","/app/src/context/image/image.context.jsx",[],"/app/src/context/booking/booking.context.jsx",[],"/app/src/context/orders/orders.context.jsx",[],"/app/src/context/coupons/coupons.context.jsx",["780"],"import React, { createContext, useContext, useState } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\nimport { useHistory } from 'react-router-dom'\nimport { formatPrice } from '../../utils/warehouse.utils'\n\nexport const CouponsContext = createContext({\n    coupon: null,\n    coupons: null,\n    handleChange: () => { },\n    getCoupon: () => { },\n    getCoupons: () => { },\n    createCoupon: () => { },\n    // updateCoupon: () => { },\n    deleteCoupon: () => { },\n    isUpdating: false,\n    resetCoupons: () => { }\n})\n\nconst initCouponObj = {\n    code: '',\n    type: 'percentage', // flat\n    value: 0,\n    maxUses: 0,\n    minValue: 0,\n    maxUsesTotal: 0\n}\n\n\nconst CouponsProvider = ({ children }) => {\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n    const { token } = useContext(AuthContext)\n    const { push } = useHistory()\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const [coupon, setCoupon] = useState(initCouponObj)\n    const [coupons, setCoupons] = useState(null)\n\n    const [isUpdating, setIsupdating] = useState(false)\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n\n        setCoupon({\n            ...coupon,\n            [name]: value\n        })\n    }\n\n    const getCoupon = async (id) => {\n        setIsupdating(true)\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.coupon) {\n                setCoupon({\n                    ...coupon,\n                    ...data.coupon\n                })\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n\n    }\n\n    const getCoupons = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons`, requestOptions)\n            const data = await response.json()\n\n            if (data.coupons) {\n                setCoupons(data.coupons)\n            }\n            setIsLoading(false)\n            closeModal()\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createCoupon = async (couponToCreate) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        console.log(couponToCreate.value)\n\n        const raw = JSON.stringify({\n            code: couponToCreate.code,\n            type: couponToCreate.type, // flat\n            ...(couponToCreate.value) && { value: couponToCreate.type === \"flat\" ? formatPrice(couponToCreate.value) : Number(couponToCreate.value) },\n            // value: couponToCreate.value === '' || couponToCreate.value === '0' ? undefined : Number(couponToCreate.value),\n            maxUses: couponToCreate.maxUses === '' || couponToCreate.maxUses === '0' ? undefined : Number(couponToCreate.maxUses),\n            ...(couponToCreate.minValue) && { minValue: formatPrice(couponToCreate.minValue) },\n            maxUsesTotal: couponToCreate.maxUsesTotal === '' || couponToCreate.maxUsesTotal === '0' ? undefined : Number(couponToCreate.maxUsesTotal)\n        })\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/create`, requestOptions)\n            const data = await response.json()\n\n            if (data.error === \"format\") {\n                getMessage(\"Kód kupónu je povinný\")\n            }\n            if (data.error === 'exists') {\n                getMessage(\"Kupón už existuje\")\n            }\n\n            if (response.ok) {\n                getCoupons()\n                push('/dashboard/kupony')\n            }\n\n            // getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n\n    }\n\n    // const updateCoupon = async () => {\n    //     console.log(\"Update coupon\")\n\n    //     setIsLoading(true)\n    //     setShowModal(true)\n\n    //     const requestOptions = {\n    //         method: 'GET',\n    //         headers: myHeaders,\n    //         redirect: 'follow'\n    //     };\n\n    //     try {\n    //         const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/${id}`, requestOptions)\n    //         const data = await response.json()\n\n    //         getMessage(data.message)\n    //         setIsLoading(false)\n    //     } catch (err) {\n    //         console.log(err)\n    //         getMessage(\"Niečo sa pokazilo\")\n    //         setIsLoading(false)\n    //     }\n\n    // }\n\n    const deleteCoupon = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (response.ok) {\n                getCoupons()\n                push('/dashboard/kupony')\n            }\n            // getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const resetCoupons = async () => {\n        setIsupdating(false)\n        setCoupon(initCouponObj)\n    }\n\n    return (\n        <CouponsContext.Provider\n            value={{\n                coupon,\n                coupons,\n                handleChange,\n                getCoupon,\n                getCoupons,\n                createCoupon,\n                // updateCoupon,\n                deleteCoupon,\n                isUpdating,\n                resetCoupons\n            }}\n        >\n            {children}\n        </CouponsContext.Provider>\n    )\n}\n\nexport default CouponsProvider","/app/src/context/warehouse/warehouse.context.jsx",["781","782","783"],"/app/src/context/analytics/analytics.context.jsx",[],"/app/src/context/examination/examination.context.jsx",["784","785","786"],"/app/src/context/order/order.context.jsx",[],"/app/src/sections/e-shop/e-shop.section.jsx",["787","788"],"import React, { useState, useContext, useEffect } from 'react'\n// import { AuthContext } from '../..//context/auth/auth.context'\nimport { WarehouseContext } from '../../context/warehouse/warehouse.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useHistory } from 'react-router-dom'\n\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport ProductOverview from '../../components/product-overview/product-overview.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport EshopFilterModal from '../../components/modal-eshop-filter/modal-eshop-filter.component'\n\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    Filterbutton,\n    ResetButton,\n    PublicButton,\n} from './e-shop.styles'\n\nconst EshopSection = () => {\n    const { push } = useHistory()\n    const { closeModal, showModal, isLoading, message } = useContext(LoadingModalContext)\n    const [searchQuery, setSearchQuery] = useState('')\n    const [productItems, setProductItems] = useState([])\n    const [queryFilter, setQueryFilter] = useState({\n        limit: 10,\n        skip: 0,\n        sortBy: {\n            date: -1\n        }\n    })\n\n    const [showFilterModal, setShowFilterModal] = useState(false)\n    const [hasFilter, setHasFilter] = useState(false)\n\n    const [selectedProducts, setSelectedProducts] = useState([])\n\n    const selectProduct = (productID) => {\n        setSelectedProducts(prevValue => ([\n            ...prevValue,\n            productID\n        ]))\n    }\n\n\n\n    const deselectProduct = (selectedProductsArr, productID) => {\n        const newArr = selectedProductsArr.filter(product => product !== productID)\n\n        setSelectedProducts(newArr)\n    }\n\n    const {\n        activePremisesTab,\n        products,\n        retailPremisesTabs,\n        getProductsByQuery,\n        handleChangePremisesTab,\n        productCategoryTypeTabs,\n        activeCategoryTypeTab,\n        handleChangeCategoryTypeTab,\n        deleteProduct,\n        deleteLenses,\n        deactivateMany,\n        getFilteredLenses,\n        getLenses,\n    } = useContext(WarehouseContext)\n\n    const handleDeactivateMany = (productIDs, boolean) => {\n        const dataObj = {\n            products: productIDs,\n            activate: boolean\n        }\n        deactivateMany(dataObj)\n        setSelectedProducts([])\n    }\n\n    const applyFilter = filter => {\n        getProductsByQuery(filter)\n        setShowFilterModal(false)\n        setHasFilter(true)\n    }\n\n    const resetFilter = () => {\n        getProductsByQuery({\n            limit: 10,\n            skip: 0,\n            sortBy: {\n                date: -1\n            }\n        })\n        setShowFilterModal(false)\n        setHasFilter(false)\n    }\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            if (activeCategoryTypeTab === 0) {\n                getProductsByQuery({\n                    query: searchQuery,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n            }\n            if (activeCategoryTypeTab === 1) {\n                getFilteredLenses({\n                    query: searchQuery,\n                    // sortBy: {\n                    //     date: -1\n                    // }\n                })\n            }\n        }\n    }\n\n    const handleDeleteProduct = (id) => {\n        deleteProduct(id)\n    }\n\n    useEffect(() => {\n        if (!products) {\n            getProductsByQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                }\n            })\n        }\n        if (products) {\n            setProductItems(products)\n        }\n    }, [products])\n\n    useEffect(() => {\n        if (!searchQuery && products) {\n            if (activeCategoryTypeTab === 0) {\n                getProductsByQuery({\n                    limit: 10,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n            }\n            if (activeCategoryTypeTab === 1) {\n                getLenses({\n                    sortBy: {\n                        dateCreated: -1\n                    }\n                })\n            }\n        }\n    }, [searchQuery])\n\n\n    const getNextPage = () => {\n        if (productItems.length < 10) return\n        getProductsByQuery({\n            ...queryFilter,\n            skip: queryFilter.skip + 10\n        })\n        setQueryFilter({\n            ...queryFilter,\n            skip: queryFilter.skip + 10\n        })\n    }\n\n    const getPrevPage = () => {\n        if (queryFilter.skip === 0) return\n        getProductsByQuery({\n            ...queryFilter,\n            skip: queryFilter.skip - 10\n        })\n        setQueryFilter({\n            ...queryFilter,\n            skip: queryFilter.skip - 10\n        })\n    }\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            {showFilterModal && <EshopFilterModal applyFilter={applyFilter} resetFilter={resetFilter} close={() => setShowFilterModal(false)} />}\n\n            <SectionHeader\n                title=\"Sklad\"\n                searchQuery={searchQuery}\n                handleSearch={handleSearch}\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push('sklad/novy-produkt')}\n\n            />\n\n            <FlexContainer>\n                <FixedContainer>\n\n                    <SectionNavbar\n                        items={retailPremisesTabs}\n                        activeIndex={activePremisesTab}\n                        setActiveIndex={handleChangePremisesTab}\n                    />\n                </FixedContainer>\n            </FlexContainer>\n\n\n            <FlexContainer>\n                <FixedContainer>\n                    <SectionNavbar\n                        items={productCategoryTypeTabs}\n                        activeIndex={activeCategoryTypeTab}\n                        setActiveIndex={handleChangeCategoryTypeTab}\n                    />\n                    {selectedProducts.length > 0 && <div>\n                        <PublicButton onClick={() => handleDeactivateMany(selectedProducts, false)}>Neverejné</PublicButton>\n                        <PublicButton onClick={() => handleDeactivateMany(selectedProducts, true)}>Verejné</PublicButton>\n                    </div>}\n                    {activeCategoryTypeTab === 0 && <div>\n                        {hasFilter && <ResetButton onClick={resetFilter}>reset</ResetButton>}\n                        <Filterbutton onClick={() => setShowFilterModal(true)}>Filter</Filterbutton>\n                    </div>}\n                </FixedContainer>\n            </FlexContainer>\n\n            <ScrollContainer>\n                {productItems.map((product, idx) => (\n                    <ProductOverview\n                        key={idx}\n                        product={product}\n                        activePremisesTab={activePremisesTab}\n                        handleUpdateButton={() => push(`sklad/${product._id}`)}\n                        handleDeleteButton={activeCategoryTypeTab === 0 ? () => handleDeleteProduct(product._id) : () => deleteLenses((product._id))}\n                        selectProduct={selectProduct}\n                        deselectProduct={deselectProduct}\n                        selectedProducts={selectedProducts}\n                    />\n                ))}\n\n                <ListArrows\n                    listItems={productItems}\n                    handleClickPrev={getPrevPage}\n                    handleClickNext={getNextPage}\n                />\n            </ScrollContainer>\n        </section >\n    )\n}\n\nexport default EshopSection\n","/app/src/sections/customers/customers.section.jsx",["789","790","791"],"import React, { useState, useContext, useEffect } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from \"../../components/section-navbar/section-navbar.component\"\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\nimport { userTabs } from '../../utils/user.utils'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    TableCol,\n    TableContainer,\n    TableHead,\n    TableRow,\n    UpdateButton,\n    Container,\n    DeleteButton\n} from './customers.styles'\n\nconst CustomersSection = () => {\n    const [searchQuery, setSearchQuery] = useState('')\n    const { push } = useHistory()\n    const { isAdmin } = useContext(AuthContext)\n    const [userItems, setUserItems] = useState([])\n    const [activeIndex, setActiveIndex] = useState(0)\n    const [filterQuery, setFilterQuery] = useState({\n        limit: 10,\n        skip: 0,\n        filters: {\n            admin: activeIndex\n        },\n        sortBy: {\n            date: -1\n        }\n    })\n\n    const { response, isLoading, refetch } = useFetchByQuery('api/admin/users/filter', filterQuery)\n\n    const {\n        // isLoading,\n        showModal,\n        message,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            setFilterQuery({\n                limit: 10,\n                skip: 0,\n                query: searchQuery,\n                filters: {\n                    admin: activeIndex\n                },\n                sortBy: {\n                    date: -1\n                }\n            })\n            refetch()\n        }\n    }\n\n    const handleActiveIndexChange = (index) => {\n        setActiveIndex(index)\n        setFilterQuery({\n            limit: 10,\n            skip: 0,\n            filters: {\n                admin: index\n            },\n            sortBy: {\n                date: -1\n            }\n        })\n        refetch()\n    }\n\n    const getNextPage = () => {\n        if (userItems.length < 10) return\n        setFilterQuery({\n            ...filterQuery,\n            skip: filterQuery.skip + 10\n        })\n        refetch()\n\n    }\n\n    const getPrevPage = () => {\n        if (filterQuery.skip === 0) return\n        setFilterQuery({\n            ...filterQuery,\n            skip: filterQuery.skip - 10\n        })\n        refetch()\n\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response) {\n            setUserItems(response.users)\n            closeModal()\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            setFilterQuery({\n                limit: 10,\n                skip: 0,\n                filters: {\n                    admin: activeIndex\n                },\n                sortBy: {\n                    date: -1\n                }\n            })\n            refetch()\n        }\n    }, [searchQuery])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <SectionHeader\n                searchQuery={searchQuery}\n                handleSearch={handleSearch}\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push('zakaznici/novy-zakaznik')}\n                title=\"Zákazníci\"\n            />\n\n            <FlexContainer>\n                <FixedContainer>\n                    <SectionNavbar\n                        items={isAdmin ? userTabs : [\n                            {\n                                id: 0,\n                                name: \"Zákazníci\",\n                                filter: 0,\n                            },]}\n                        activeIndex={activeIndex}\n                        setActiveIndex={handleActiveIndexChange}\n                    />\n\n                </FixedContainer>\n            </FlexContainer>\n\n            <ScrollContainer>\n                <Container>\n                    <TableContainer>\n                        <TableHead>\n                            <TableCol>Meno a priezvisko</TableCol>\n                            <TableCol>Email</TableCol>\n                            <TableCol>Tel. číslo</TableCol>\n                            <TableCol>Možnosti</TableCol>\n                        </TableHead>\n                        {userItems && userItems.map((user, idx) => (\n                            <TableRow key={idx}>\n                                <TableCol>{user.name}</TableCol>\n                                <TableCol>{user.email}</TableCol>\n                                <TableCol>{user.phone}</TableCol>\n                                <TableCol>\n                                    <UpdateButton onClick={() => push(`zakaznici/${user._id}`)}>Upraviť</UpdateButton>\n                                    {/* <DeleteButton onClick={() => alert(\"Pekný pokus! Tu velím zatiaľ ja :)\")}>Odstrániť</DeleteButton> */}\n                                </TableCol>\n                            </TableRow>\n                        ))}\n                    </TableContainer>\n                </Container>\n\n                <ListArrows\n                    listItems={userItems}\n                    handleClickPrev={getPrevPage}\n                    handleClickNext={getNextPage}\n                />\n            </ScrollContainer>\n\n        </section>\n    )\n}\n\nexport default CustomersSection\n","/app/src/sections/customer-profile/customer-profile.section.jsx",["792","793","794"],"/app/src/sections/blog-posts/blog-posts.section.jsx",["795","796","797","798"],"import React, { useState, useEffect, useContext } from 'react'\nimport { BlogContext } from '../../context/blog/blog.context'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from \"../../components/scroll-container/scroll-container.component\"\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    PostContainer,\n    PostImage,\n    PostContent,\n    Options,\n    UpdateButton,\n    DeleteButton\n} from './blog-posts.styles'\n\nconst BlogPosts = () => {\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n    const { postsCount, handlePostDelete } = useContext(BlogContext)\n    const { push } = useHistory()\n\n    const [posts, setPosts] = useState([])\n\n    const [filterQuery, setFilterQuery] = useState({\n        limit: 10,\n        sortBy: {\n            date: -1\n        },\n        // query: \"\"\n    })\n    const [searchQuery, setSearchQuery] = useState('')\n\n\n\n    const [activeIndex, setActiveIndex] = useState(0)\n    const items = [\n        {\n            id: 0,\n            name: \"Zostupne\"\n        },\n        {\n            id: 1,\n            name: \"Vzostupne\"\n        },\n    ]\n\n    const blogsData = useFetchByQuery('api/blogs/filter', filterQuery)\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n                query: searchQuery\n            })\n            blogsData.refetch()\n        }\n    }\n\n    const handlePostDeleteClick = (postID) => {\n        handlePostDelete(postID)\n        blogsData.refetch()\n    }\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n            })\n            blogsData.refetch()\n        }\n    }, [searchQuery])\n\n    useEffect(() => {\n        if (activeIndex === 0) {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n                // query: \"\"\n            })\n            blogsData.refetch()\n        } else {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: 1\n                },\n                // query: \"\"\n            })\n            blogsData.refetch()\n        }\n    }, [activeIndex])\n\n    useEffect(() => {\n        if (!blogsData.isLoading) {\n            setPosts(blogsData.response?.blogs)\n        }\n    }, [blogsData.isLoading])\n\n    useEffect(() => {\n        return () => {\n            closeModal()\n            setSearchQuery('')\n            setActiveIndex(0)\n            setPosts([])\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n            })\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n\n            <SectionHeader\n                searchQuery={searchQuery}\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleSearch={handleSearch}\n                handleAddButton={() => push('blog/novy-prispevok')}\n                count={postsCount}\n                title=\"Blog\"\n            />\n            <FlexContainer>\n                <FixedContainer>\n\n                    <SectionNavbar\n                        items={items}\n                        activeIndex={activeIndex}\n                        setActiveIndex={setActiveIndex}\n                    />\n\n                </FixedContainer>\n\n            </FlexContainer>\n\n            <ScrollContainer>\n                {posts && posts.length ? posts.map(post => (\n                    <PostContainer key={post._id}>\n                        <PostImage>\n                            {post.image && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${post.image.imagePath}`} alt={post.image.alt} />}\n                        </PostImage>\n                        <PostContent>\n                            <h2>{post.name}</h2>\n                            <p>{post.description}</p>\n                        </PostContent>\n                        <Options>\n                            <UpdateButton onClick={() => push(`blog/${post._id}`)}>Upraviť</UpdateButton>\n                            <DeleteButton onClick={() => handlePostDeleteClick(post._id)}>Vymazať</DeleteButton>\n                        </Options>\n                    </PostContainer>\n                )) : (\n                        <div>\n                            Žiadne príspevky\n                        </div>\n                    )}\n\n                <ListArrows\n                    listItems={posts}\n                />\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default BlogPosts\n","/app/src/sections/product/product.section.jsx",["799","800","801","802","803","804","805","806"],"import React, { useState, useContext, useEffect } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { WarehouseContext } from '../../context/warehouse/warehouse.context'\nimport { ImageContext } from '../../context/image/image.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams, Prompt } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport ModalImage from '../../components/modal-product-image-gallery/modal-product-image-gallery.component'\nimport OldModalImage from '../../components/modal-images/modal-images.component'\nimport GetProductDataModal from '../../components/modal-get-product-data/modal-get-product-data.component'\nimport GetLensesDataModal from '../../components/modal-get-lenses-data/modal-get-lenses-data.component'\nimport Popup from '../../components/popup/pop-up.component'\n\nimport ProductGlassesForm from '../../components/product-glasses-form/product-glasses-form.component'\nimport ProductLensesForm from '../../components/product-lenses-form/product-lenses-form.component'\nimport ProductAccessoriesForm from '../../components/product-accessories-form/product-accessories-form.component'\nimport ProductContactLensesForm from '../../components/product-contact-lenses-form/product-contact-lenses-form.component'\nimport ProductServiceForm from '../../components/product-service-form/product-service-form.component'\n\nimport { productCategories, checkParameter, formatLink } from '../../context/warehouse/warehouse.utils'\nimport { retailNames } from '../../utils/warehouse.utils'\nimport { useFetch } from '../../hooks/useFetch'\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    CategoryContainer,\n    CategoryCheckbox,\n    SubmitButton,\n    IsPublicCheckbox,\n\n} from './product.styles'\n\nconst ProductSection = () => {\n    const { id } = useParams()\n    const { currentUser } = useContext(AuthContext)\n    const { closeModal, message, isLoading, showModal, getMessage, setShowModal } = useContext(LoadingModalContext)\n    const { selectedImage, setSelectedImage } = useContext(ImageContext)\n    const [showImageModal, setImageModal] = useState(false)\n    const [showOldImageModal, setOldImageModal] = useState(false)\n    const [isGetProductDataModalVisible, setIsGetProductDataModalVisible] = useState(false)\n    const [isGetLensesDataModalVisible, setIsGetLensesDataModalVisible] = useState(false)\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const {\n        eanCode,\n        product,\n        lenses,\n        contactLensesParameters,\n        glassesParameters,\n        handleLensesChange,\n        handleLensesParameterChange,\n        createProduct,\n        updateProduct,\n        resetProduct,\n        resetLenses,\n        resetContactLenses,\n        resetGlassesParameters,\n        createLenses,\n        updateLenses,\n        handleProductChange,\n        handleProductAvailableChange,\n        getEanCode,\n        handleAddNewParameter,\n        handleContactLensesParameterChange,\n        handleGlassesParameterChange,\n        handleGlassesParameterSpecsChange,\n        handleGlassesSizeChange,\n        getSingleProduct,\n        getSingleLenses\n    } = useContext(WarehouseContext)\n\n    const [hasChanged, setHasChanged] = useState(false)\n    const [productObj, setProductObj] = useState({})\n\n\n    const { response, isLoading: isLoadingFilters, refetch } = useFetch(`api/store/products/${productObj?.type}/filters`, !productObj?.type, \"GET\")\n    const [filters, setFilters] = useState(null)\n\n    const handleGetProductData = (boolean) => {\n        setIsGetProductDataModalVisible(boolean)\n    }\n\n    const handleGetLensesData = (boolean) => {\n        setIsGetLensesDataModalVisible(boolean)\n    }\n\n    const handleChangeType = e => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        if (!isUpdating) {\n            if (productObj.type === 0) {\n                if (Object.keys(productObj).length > 2) {\n                    const confirm = window.confirm(\"Rozpisane polia budú vymazane\")\n                    if (confirm) {\n                        resetLenses()\n                        setSelectedImage('')\n                    } else {\n                        return\n                    }\n                }\n            } else {\n                if (Object.keys(productObj).length > 2) {\n                    const confirm = window.confirm(\"Rozpisane polia budú vymazane\")\n                    if (confirm) {\n                        resetProduct()\n                        resetContactLenses()\n                        resetGlassesParameters()\n                        setSelectedImage('')\n                    } else {\n                        return\n                    }\n                }\n            }\n        }\n        setProductObj({\n            [name]: value\n        })\n\n    }\n    // console.count(\"PRODUCT OBJ\")\n    // console.log(productObj)\n    // console.count(\"PRODUCT OBJ\")\n\n    const handleChange = (e) => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        if (productObj.type === 0) {\n            handleLensesChange(e)\n        }\n\n        if (productObj.type === 6) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 5) {\n            handleProductChange(e)\n        }\n\n        if (productObj.type === 4) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 3) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 2) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 1) {\n            handleProductChange(e)\n        }\n\n\n\n        if (value === '') {\n            delete productObj[name]\n            return\n        }\n\n        if (isUpdating) {\n            if (name === 'name') {\n                setProductObj({\n                    ...productObj,\n                    [name]: value,\n                    link: formatLink(value)\n                })\n                return\n            }\n        }\n\n        setProductObj({\n            ...productObj,\n            [name]: value\n        })\n    }\n\n    const handleGlassesParametersChange = e => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        handleGlassesParameterChange(e)\n\n        if (value === '') {\n            delete productObj[name]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            [name]: value\n        })\n    }\n\n    const handleSpecsChange = (e) => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        handleGlassesParameterSpecsChange(e)\n\n        if (value === '') {\n            if(!productObj.specs) return\n            delete productObj.specs[name]\n\n            if (Object.keys(productObj.specs).length === 0) {\n                delete productObj[\"specs\"]\n            }\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            specs: {\n                ...productObj.specs,\n                [name]: value\n            }\n        })\n    }\n\n    const handleGlassesSpecsSizeChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = glassesParameters.specs[name]\n        arr[idx] = value === '' ? 1001 : value\n\n        handleGlassesSizeChange(e, idx)\n\n        if (value === '') {\n            if (productObj.specs[name].length > 1) {\n                arr[idx] = 1001\n\n                const firstIndex = arr[0]\n                const canDeleteSpecs = arr.map(value => {\n                    if (firstIndex !== value) {\n                        return false\n                    } else {\n                        return true\n                    }\n                })\n\n                const verdict = canDeleteSpecs.find(value => value === false)\n\n                if (verdict === false) {\n                    setProductObj({\n                        ...productObj,\n                        specs: {\n                            ...productObj.specs,\n                            [name]: arr\n                        }\n                    })\n                } else {\n                    delete productObj.specs[name]\n                }\n\n            }\n            if (Object.keys(productObj.specs).length === 0) {\n                delete productObj[\"specs\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            specs: {\n                ...productObj.specs,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleAvailableChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = product[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        handleProductAvailableChange(e, idx)\n        setProductObj({\n            ...productObj,\n            [name]: arr\n        })\n    }\n\n    const handleContactLensesChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = contactLensesParameters[name]\n        arr[idx] = value === '' ? 1001 : value\n\n        handleContactLensesParameterChange(e, idx)\n\n        if (value === '') {\n            if (productObj.contactLenses[name].length > 1) {\n                arr.splice(idx, 1)\n                setProductObj({\n                    ...productObj,\n                    contactLenses: {\n                        ...productObj.contactLenses,\n                        [name]: arr\n                    }\n                })\n            } else {\n                delete productObj.contactLenses[name]\n            }\n            if (Object.keys(productObj.contactLenses).length === 0) {\n                delete productObj[\"contactLenses\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            contactLenses: {\n                ...productObj.contactLenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = lenses[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        handleLensesParameterChange(e, idx)\n        setProductObj({\n            ...productObj,\n            [name]: arr\n        })\n    }\n\n    const handleSelectImage = (imgId = '', bonusImages, img) => {\n        setHasChanged(true)\n        setSelectedImage(img)\n        setProductObj({\n            ...productObj,\n            image: imgId,\n            ...(bonusImages) && { bonusImages }\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        let newProductObj = {\n            ...productObj,\n            ...(productObj.type === 0) && { lensType: lenses.lensType },\n            ...(productObj.type === 0) && { dioptric: lenses.dioptric }\n        }\n\n        // console.log(\"PRODUCT OBJECT\")\n        // console.log(lensObj)\n        // console.log(productObj)\n\n\n\n        if (currentUser.admin < 2) {\n            if (newProductObj.available) {\n                newProductObj = {\n                    ...productObj,\n                    available: productObj.available[currentUser.premises]\n                }\n            }\n        } else {\n            if (newProductObj.available) {\n                newProductObj = {\n                    ...productObj,\n                    available: newProductObj.available ? newProductObj.available.map(value => value === 1001 ? 0 : value) : [0, 0, 0, 0, 0, 0]\n                }\n            }\n        }\n\n        if (isUpdating) {\n            if(newProductObj.image === '') delete newProductObj[\"image\"]\n            if(newProductObj.image === '') delete newProductObj[\"image\"]\n            if(newProductObj?.specs?.size?.length < 1) delete newProductObj?.specs[\"size\"]\n\n            if (newProductObj.type === 0) {\n                setHasChanged(false)\n                delete newProductObj['link']\n                delete newProductObj['type']\n                const updatedObj = {\n                    ...newProductObj,\n                    // type: newProductObj.lensType,\n                    eanCode: lenses.eanCode\n                }\n                // delete updatedObj['lensType']\n                updateLenses(updatedObj, id)\n                return\n            } else if (newProductObj.type === 3) {\n                setHasChanged(false)\n                delete newProductObj['type']\n                updateProduct({ ...newProductObj, contactLenses: {} })\n                return\n            } else if (newProductObj.type === 6) {\n                setHasChanged(false)\n                delete newProductObj['type']\n                delete newProductObj['image']\n                delete newProductObj['bonusImages']\n                updateProduct({ ...newProductObj })\n                return\n            } else {\n                setHasChanged(false)\n                delete newProductObj['type']\n\n                const obj = {\n                    ...newProductObj,\n                    ...(newProductObj.bonusImages) && { bonusImages: newProductObj.bonusImages.map(img => img._id) }\n                }\n\n                updateProduct(obj)\n                return\n            }\n        } else {\n            if (productObj.type === 0) {\n                setHasChanged(false)\n                delete newProductObj['type']\n                const updatedObj = {\n                    ...newProductObj,\n                    ...(!lenses.dioptric) && { \n                        dioptersRange: [0, 0],\n                        cylinderRange: [0, 0],\n                    }\n                    // type: newProductObj.lensType\n                }\n                // delete updatedObg['lensType']\n\n                createLenses(updatedObj)\n            }\n            if (newProductObj.type === 6 || newProductObj.type === 5 || newProductObj.type === 4 || newProductObj.type === 3 || newProductObj.type === 2 || newProductObj.type === 1) {\n                if (!newProductObj.name || !newProductObj.price) {\n                    setShowModal(true)\n                    getMessage(\"Povinné údaje sú prázdne\")\n                    return\n                } else {\n                    setHasChanged(false)\n                    delete newProductObj['_id']\n\n                    const obj = {\n                        ...newProductObj,\n                        ...(newProductObj.bonusImages) && { bonusImages: newProductObj.bonusImages.map(img => img._id) }\n                    }\n\n\n                    createProduct(obj)\n                }\n            }\n        }\n\n\n    }\n\n    const [lensObj, setLensObj] = useState(null)\n\n    const fillProductData = (productData) => {\n\n        setLensObj({\n            ...productObj,\n            ...productData\n        })\n\n        setProductObj({\n            ...productObj,\n            ...productData\n        })\n    }\n\n    useEffect(() => {\n        if (!productObj?.type) return\n        setFilters(null)\n        refetch()\n    }, [productObj?.type])\n\n    useEffect(() => {\n        if (productObj.type === 0) {\n            if (productObj.lensType) return\n            handleChange({\n                target: {\n                    name: \"lensType\",\n                    value: lenses?.lensType\n                }\n            })\n        }\n    }, [lenses.lensType])\n\n    useEffect(() => {\n        if (isLoadingFilters) return\n        if (response?.filters) {\n            setFilters(response?.filters)\n        }\n    }, [isLoadingFilters])\n\n    useEffect(() => {\n        if (id === \"novy-produkt\") {\n            if (!eanCode) {\n                getEanCode()\n            } else {\n                if (productObj.type !== undefined && !productObj.eanCode) {\n                    handleChange({\n                        target: {\n                            name: \"eanCode\",\n                            value: eanCode\n                        }\n                    })\n                }\n            }\n        }\n    }, [id, eanCode, productObj.type, productObj.eanCode, product.type])\n\n    useEffect(() => {\n        if (id !== 'novy-produkt') {\n            getSingleProduct(id, (data) => {\n                handleSelectImage(data?.product?.image?._id, data.product.bonusImages, data.product.image)\n                setProductObj(prevValue => ({\n                    ...prevValue,\n                    type: data.product.type,\n                }))\n            })\n            setIsUpdating(true)\n            if (!productObj.type) {\n                handleChangeType({\n                    target: {\n                        name: \"type\",\n                        value: product.type\n                    }\n                })\n\n            }\n        }\n    }, [id,])\n\n    useEffect(() => {\n        // if (product.image) {\n        //     setSelectedImage(product.image)\n        // }\n        if (lenses.image) {\n            setSelectedImage(lenses.image)\n        }\n    }, [lenses.image])\n\n    useEffect(() => {\n        return () => {\n            resetProduct()\n            resetLenses()\n            resetContactLenses()\n            resetGlassesParameters()\n            setProductObj({})\n            setSelectedImage(null)\n            setIsUpdating(false)\n        }\n    }, [])\n\n    return (\n        <section>\n            <Prompt\n                when={hasChanged}\n                message=\"Chcete opustiť formulár?\"\n            />\n\n            {isGetLensesDataModalVisible && <GetLensesDataModal close={() => handleGetLensesData(false)} getSingleProduct={getSingleProduct} productObj={productObj} setProductObj={setProductObj} getSingleLenses={getSingleLenses} fillProductData={fillProductData} />}\n            {isGetProductDataModalVisible && <GetProductDataModal close={() => setIsGetProductDataModalVisible(false)} getSingleProduct={getSingleProduct} productObj={productObj} setProductObj={setProductObj} />}\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            {showImageModal && <ModalImage close={() => setImageModal(false)} setImage={handleSelectImage} />}\n            {showOldImageModal && <OldModalImage close={() => setOldImageModal(false)} setImage={handleSelectImage} />}\n            <Header>\n                <FixedContainer>\n\n                    <div>\n                        <h1>{isUpdating ? \"Upraviť produkt\" : \"Nový produkt\"}</h1>\n                    </div>\n                    <div>\n                        <IsPublicCheckbox\n                            label=\"Verejné\"\n                            // value={product.ehop}\n                            name='eshop'\n                            isActive={productObj.type === 0 ? lenses.eshop : product.eshop}\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"eshop\",\n                                    value: productObj.type === 0 ? !lenses.eshop : !product.eshop\n                                }\n                            })}\n                        />\n                        <SubmitButton onClick={handleSubmit}>{isUpdating ? \"Upraviť\" : \"Vytvoriť\"}</SubmitButton>\n                    </div>\n                </FixedContainer>\n            </Header>\n\n            <ScrollContainer>\n                {!isUpdating && <CategoryContainer>\n                    <h3>Aký produkt chcete pridať?</h3>\n                    {productCategories.map((category, idx) => (\n                        <CategoryCheckbox\n                            key={idx}\n                            label={category.name}\n                            value={category.value}\n                            name='type'\n                            isActive={category.value === productObj.type}\n                            handleClick={() => handleChangeType({\n                                target: {\n                                    name: \"type\",\n                                    value: category.value\n                                }\n                            })}\n                        />\n                    ))}\n                </CategoryContainer>}\n\n                {productObj.type === 0 && (\n                    <ProductLensesForm\n                        lenses={lenses}\n                        selectedImage={selectedImage}\n                        setImageModal={setOldImageModal}\n                        handleChange={handleChange}\n                        handleParameterChange={handleParameterChange}\n                        checkParameter={checkParameter}\n                        filters={filters}\n                        handleGetProductData={handleGetLensesData}\n                    />\n                )}\n\n                {productObj.type === 6 && (\n                    <ProductServiceForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        handleChange={handleChange}\n                        selectedImage={selectedImage}\n                        setImageModal={setImageModal}\n                        filters={filters}\n                    />\n                )}\n\n                {productObj.type === 5 && (\n                    <ProductAccessoriesForm\n                        product={product}\n                        productObj={productObj}\n                        isUpdating={isUpdating}\n                        currentUser={currentUser}\n                        retailNames={retailNames}\n                        selectedImage={selectedImage}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleAvailableChange={handleAvailableChange}\n                        filters={filters}\n                    />\n                )}\n\n                {productObj.type === 3 && (\n                    <ProductContactLensesForm\n                        product={product}\n                        productObj={productObj}\n\n                        isUpdating={isUpdating}\n                        retailNames={retailNames}\n                        currentUser={currentUser}\n                        selectedImage={selectedImage}\n                        contactLensesParameters={contactLensesParameters}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleAddNewParameter={handleAddNewParameter}\n                        handleAvailableChange={handleAvailableChange}\n                        handleContactLensesChange={handleContactLensesChange}\n                        filters={filters}\n                        handleGetProductData={handleGetProductData}\n                    />\n                )}\n\n                {(productObj.type === 1 || productObj.type === 2 || productObj.type === 4) && (\n                    <ProductGlassesForm\n                        product={product}\n                        productObj={productObj}\n                        isUpdating={isUpdating}\n                        retailNames={retailNames}\n                        currentUser={currentUser}\n                        selectedImage={selectedImage}\n                        glassesParameters={glassesParameters}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleSpecsChange={handleSpecsChange}\n                        handleAvailableChange={handleAvailableChange}\n                        handleGlassesSpecsSizeChange={handleGlassesSpecsSizeChange}\n                        handleGlassesParametersChange={handleGlassesParametersChange}\n                        filters={filters}\n                        handleGetProductData={handleGetProductData}\n                    />\n                )}\n\n            </ScrollContainer>\n\n        </section >\n    )\n}\n\nexport default ProductSection\n","/app/src/sections/post/post.section.jsx",["807","808","809"],"/app/src/sections/analytics/analytics.section.jsx",["810","811","812"],"/app/src/sections/order/order.section.jsx",["813","814","815"],"/app/src/sections/orders/orders.section.jsx",["816","817"],"import React, { useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\n// import OrderDeligateModal from '../../components/order-deligate-modal/order-deligate-modal.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport {\n    GoArrowSmallDown,\n    GoArrowSmallUp\n} from 'react-icons/go'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    tabItems\n} from '../../context/orders/orders.utils'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    TableHead,\n    OrdersTable,\n    TableCol,\n    IconContainer,\n    OrderOverviewRow\n} from './orders.styles'\n\nconst OrdersSection = () => {\n    const { push } = useHistory()\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n\n    const [searchQuery, setSearchQuery] = useState('')\n    const [activeIndex, setActiveIndex] = useState(1)\n    const [orders, setOrders] = useState([])\n    const [fetchQueryObj, setFetchQueryObj] = useState({\n        limit: 10,\n        skip: 0,\n        sortBy: {\n            date: -1\n        },\n        filters: {\n            finished: false\n        }\n    })\n\n    const { isLoading: isFetching, response, refetch } = useFetchByQuery('api/admin/orders/filter', fetchQueryObj)\n\n    const handleRefetch = () => {\n        refetch()\n    }\n\n    const handleIndexChange = (idx) => {\n        setActiveIndex(idx)\n        if (idx === 1) {\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    finished: false\n                }\n            })\n        } else if (idx === 2) {\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    finished: true\n                }\n            })\n        } else if (idx === 3) {\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    status: \"cancelled\"\n                }\n            })\n        }\n        handleRefetch()\n    }\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            setFetchQueryObj(prevValue => ({\n                // ...prevValue,\n                // sortBy: {\n                //     date: -1\n                // },\n                filters: {\n                    customId: Number(searchQuery)\n                },\n            }))\n        }\n        refetch()\n    }\n\n    const getNextPage = () => {\n        if (orders.length < 10) return\n        setFetchQueryObj(prevValue => ({\n            ...prevValue,\n            skip: prevValue.skip + 10,\n        }))\n        refetch()\n    }\n\n    const getPrevPage = () => {\n        if (fetchQueryObj.skip === 0) return\n        setFetchQueryObj(prevValue => ({\n            ...prevValue,\n            skip: prevValue.skip - 10,\n        }))\n        refetch()\n    }\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            if (activeIndex === 1) {\n                setFetchQueryObj({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    },\n                    filters: {\n                        finished: false\n                    }\n                })\n            } else if (activeIndex === 2) {\n                setFetchQueryObj({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    },\n                    filters: {\n                        finished: true\n                    }\n                })\n            } else if (activeIndex === 3) {\n                setFetchQueryObj({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    },\n                    filters: {\n                        status: \"cancelled\"\n                    }\n                })\n            }\n            handleRefetch()\n        }\n    }, [searchQuery])\n\n    useEffect(() => {\n        if (!isFetching) {\n            if (response) {\n                if (activeIndex === 1) {\n                    setOrders(response?.orders)\n                } else {\n                    setOrders(response?.orders)\n                }\n                closeModal()\n            }\n        }\n    }, [isFetching, response, activeIndex])\n\n\n    useEffect(() => {\n        return () => {\n            setActiveIndex(1)\n            setSearchQuery('')\n            setOrders([])\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    finished: false\n                }\n            })\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <SectionHeader\n                searchQuery={searchQuery}\n                handleSearch={handleSearch}\n\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push(\"/dashboard/objednavky/nova-objednavka\")}\n                title=\"Zákazky\"\n            />\n\n            <FlexContainer>\n                <FixedContainer>\n\n                    <SectionNavbar\n                        items={tabItems}\n                        activeIndex={activeIndex}\n                        setActiveIndex={handleIndexChange}\n                    />\n                </FixedContainer>\n\n            </FlexContainer>\n\n            <ScrollContainer>\n                <OrdersTable>\n                    <TableHead>\n                        <TableCol>ID</TableCol>\n                        <TableCol clickable onClick={() => {\n                            setFetchQueryObj((prevObj) => ({\n                                ...fetchQueryObj,\n                                sortBy: {\n                                    date: prevObj?.sortBy?.date === 1 ? -1 : 1\n                                }\n                            }))\n                            handleRefetch()\n                        }}>\n                            <p>\n                                Dátum {fetchQueryObj?.sortBy?.date === 1 ? <IconContainer>\n                                    <GoArrowSmallDown />\n                                </IconContainer> : <IconContainer>\n                                    <GoArrowSmallUp />\n                                </IconContainer>\n                                }\n                            </p>\n                        </TableCol>\n                        <TableCol>Prevádzka</TableCol>\n                        <TableCol>Meno</TableCol>\n                        <TableCol>Tel. číslo</TableCol>\n                        <TableCol>Status</TableCol>\n                        <TableCol>Možnosti</TableCol>\n                    </TableHead>\n                    {orders?.map((order, idx) => (\n                        <OrderOverviewRow key={idx} order={order} refetch={handleRefetch} />\n                    ))}\n                </OrdersTable>\n\n                <ListArrows\n                    listItems={orders}\n                    handleClickNext={getNextPage}\n                    handleClickPrev={getPrevPage}\n                />\n            </ScrollContainer>\n        </section>\n    )\n}\n\n\n\nexport default OrdersSection\n","/app/src/sections/coupons/coupons.section.jsx",["818","819"],"import React, { useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { CouponsContext } from '../../context/coupons/coupons.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\n\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport { formatPrice } from '../../utils/warehouse.utils'\n\nimport {\n    // CouponOverviewContainer,\n    DeleteButton,\n    OpenButton,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TableCol\n} from './coupons.styles'\n\nconst CouponsSection = () => {\n    // const [searchQuery, setSearchQuery] = useState('')\n    const { push } = useHistory()\n\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n\n    const {\n        coupons,\n        getCoupons,\n        deleteCoupon\n    } = useContext(CouponsContext)\n\n    useEffect(() => {\n        if (!coupons) {\n            getCoupons()\n        }\n    }, [coupons])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n\n            <SectionHeader\n                title='Kupóny'\n                // searchQuery={searchQuery}\n                // handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push('kupony/novy-kupon')}\n            />\n            <ScrollContainer>\n\n                <TableContainer>\n                    <TableHead>\n                        <TableCol>#</TableCol>\n                        <TableCol>Kód</TableCol>\n                        <TableCol>Typ</TableCol>\n                        <TableCol>Hodnota</TableCol>\n                        <TableCol>Možnosti</TableCol>\n                    </TableHead>\n                    {coupons && coupons.map((coupon, idx) => (\n                        <TableRow key={idx}>\n                            <TableCol>{idx + 1}</TableCol>\n                            <TableCol>{coupon.code}</TableCol>\n                            <TableCol>{coupon.type === \"percentage\" ? \"Percentá\" : \"Fixná suma\"}</TableCol>\n                            <TableCol>{coupon.type === \"percentage\" ? `${coupon.value}%` : `${(coupon.value / 100).toFixed(2)}€`}</TableCol>\n                            <TableCol>\n                                <OpenButton onClick={() => push(`kupony/${coupon._id}`)}>Zobraziť</OpenButton>\n                                <DeleteButton onClick={() => deleteCoupon(coupon._id)}>Ostrániť</DeleteButton>\n                            </TableCol>\n                        </TableRow>\n                    ))}\n                </TableContainer>\n                <ListArrows\n                    listItems={coupons}\n                />\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default CouponsSection\n","/app/src/sections/calendar/calendar.section.jsx",["820","821","822","823"],"/app/src/sections/booking/booking.section.jsx",["824","825","826","827"],"/app/src/sections/coupon/coupon.section.jsx",["828","829"],"import React, { useContext, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { CouponsContext } from '../../context/coupons/coupons.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport InputRow from '../../components/product-input-row/product-input-row.component'\nimport CustomInput from '../../components/custom-input/custom-input.component'\nimport Popup from \"../../components/popup/pop-up.component\"\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    CustomSelect,\n    SubmitButton,\n    DeleteButton,\n    GridRow,\n    GridCol\n} from './coupon.styles'\n\nconst CouponSection = () => {\n    const { couponId } = useParams()\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n    const {\n        coupon,\n        getCoupon,\n        handleChange,\n        createCoupon,\n        isUpdating,\n        deleteCoupon,\n        resetCoupons\n    } = useContext(CouponsContext)\n\n    useEffect(() => {\n        if (couponId !== 'novy-kupon') {\n            getCoupon(couponId)\n        }\n    }, [couponId])\n\n    useEffect(() => {\n        return () => {\n            resetCoupons()\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n\n            <Header>\n                <FixedContainer>\n                    <div>\n                        <h1>Nový kupón</h1>\n                    </div>\n\n                    <div>\n                        {isUpdating && <DeleteButton onClick={() => deleteCoupon(couponId)}>Odstrániť</DeleteButton>}\n                        {!isUpdating && <SubmitButton onClick={() => createCoupon(coupon)}>Vytvoriť</SubmitButton>}\n                    </div>\n\n                </FixedContainer>\n            </Header>\n            <ScrollContainer>\n                <GridRow>\n                    <GridCol>\n                        <h3>Základné informácie</h3>\n                        <InputRow\n                            label=\"Kód kupónu\"\n                            example=\"napr: 50off\"\n                        >\n                            <CustomInput\n                                label=\"Kód\"\n                                type='text'\n                                name='code'\n                                value={coupon.code}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                        <InputRow\n                            label=\"Typ kupónu\"\n                            example=\"\"\n                        >\n                            <CustomSelect name='type' value={coupon.type} onChange={(e) => handleChange(e)}>\n                                <option value={\"percentage\"}>Percentá</option>\n                                <option value={\"flat\"}>Fixná suma</option>\n                            </CustomSelect>\n                        </InputRow>\n                    </GridCol>\n                    <GridCol>\n                        <h3>Parametre</h3>\n\n                        <InputRow\n                            label=\"Hodnota\"\n                            example=\"\"\n                        >\n                            <CustomInput\n                                label=\"Suma\"\n                                type='number'\n                                name='value'\n                                value={coupon.value.toString()}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                        <InputRow\n                            label=\"Počet použití jedným používateľom\"\n                            example=\"\"\n                        >\n                            <CustomInput\n                                label=\"Suma\"\n                                type='number'\n                                name='maxUses'\n                                value={coupon.maxUses.toString()}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                        <InputRow\n                            label=\"Minimálna hodnota objednávky pre použitie kupónu\"\n                            example=\"\"\n                        >\n                            <CustomInput\n                                label=\"Suma\"\n                                type='number'\n                                name='minValue'\n                                value={coupon.minValue.toString()}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                        <InputRow\n                            label=\"Počet celkových použití kupónu\"\n                            example=\"\"\n                        >\n                            <CustomInput\n                                label=\"Suma\"\n                                type='number'\n                                name='maxUsesTotal'\n                                value={coupon.maxUsesTotal.toString()}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </InputRow>\n                    </GridCol>\n                </GridRow>\n\n\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default CouponSection\n","/app/src/sections/no-permission/no-permission.section.jsx",[],"/app/src/components/sign-in/sign-in.styles.jsx",[],"/app/src/components/forgot-password/forgot-password.styles.jsx",[],"/app/src/components/custom-button/custom-button.styles.jsx",[],"/app/src/components/custom-input/custom-input.styles.jsx",[],"/app/src/components/sidenav/sidenav.styles.jsx",[],"/app/src/components/spinner/spinner.styles.jsx",[],"/app/src/context/blog/blog.queries.jsx",[],"/app/src/context/user/user.utils.jsx",[],"/app/src/context/user/user.queries.jsx",[],"/app/src/context/image/image.queries.jsx",[],"/app/src/context/warehouse/warehouse.utils.jsx",[],"/app/src/utils/warehouse.utils.jsx",[],"/app/src/hooks/slug.jsx",["830","831","832","833"],"import { useState, useEffect } from 'react'\n\nexport const useSlug = (string = '') => {\n    const a = 'àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;'\n    const b = 'aaaaaaaaaacccddeeeeeeeegghiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------'\n    const p = new RegExp(a.split('').join('|'), 'g')\n\n    const [slug, setSlug] = useState('')\n\n    const getSlug = (string) => {\n        return string.toString().toLowerCase()\n            .replace(/\\s+/g, '-') // Replace spaces with -\n            .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n            .replace(/&/g, '-and-') // Replace & with 'and'\n            .replace(/[^\\w\\-]+/g, '') // Remove all non-word characters\n            .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n            .replace(/^-+/, '') // Trim - from start of text\n            .replace(/-+$/, '') // Trim - from end of text\n    }\n\n    useEffect(() => {\n        const s = getSlug(string)\n        setSlug(s)\n\n    }, [string])\n\n    return { slug, getSlug }\n}","/app/src/sections/e-shop/e-shop.styles.jsx",[],"/app/src/hooks/useFetch.jsx",["834","835","836"],"import { useEffect, useState } from 'react'\n\nexport const useFetch = (path, skip = false, method = \"GET\") => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [message, setMessage] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const requestOptions = {\n        method: method,\n        // headers: myHeaders,\n        // body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setMessage(data.message)\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n                setMessage(\"Niečo sa pokazilo\")\n            }\n        }\n        fetchData()\n    }, [refetchIndex])\n\n    return { response, isLoading, error, message, refetch }\n}\n\nexport const useFetchByQuery = (path, queryObj, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify(queryObj)\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path])\n\n    return { response, isLoading, error, refetch }\n}\n\nexport const useFetchById = (path, id, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}/${id}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path, id])\n\n    return { response, isLoading, error, refetch }\n}\n","/app/src/utils/user.utils.jsx",[],"/app/src/sections/customers/customers.styles.jsx",[],"/app/src/sections/customer-profile/customer-profile.styles.jsx",[],"/app/src/sections/product/product.styles.jsx",[],"/app/src/sections/blog-posts/blog-posts.styles.jsx",[],"/app/src/sections/post/post.styles.jsx",[],"/app/src/sections/no-permission/no-permission.styles.jsx",[],"/app/src/sections/coupon/coupon.styles.jsx",[],"/app/src/utils/calendar.utils.jsx",["837"],"/app/src/sections/booking/booking.styles.jsx",[],"/app/src/sections/coupons/coupons.styles.jsx",[],"/app/src/sections/orders/orders.styles.jsx",[],"/app/src/context/orders/orders.utils.jsx",[],"/app/src/sections/calendar/calendar.styles.jsx",[],"/app/src/components/section-header/section-header.component.jsx",[],"/app/src/components/scroll-container/scroll-container.component.jsx",[],"/app/src/components/modal-eshop-filter/modal-eshop-filter.component.jsx",["838","839"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\n// import { brands } from '../../utils/warehouse.utils'\nimport { useFetch } from '../../hooks/useFetch'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    Container,\n    ApplyButton,\n    ResetButton,\n    OptionsContainer\n} from './modal-eshop-filter.styles'\n\nconst EshopFilterModal = ({ close, applyFilter, resetFilter }) => {\n    const [filter, setFilter] = useState({})\n\n    const { response, isLoading, refetch } = useFetch(`api/store/products/${filter?.filters?.type}/filters`, !filter?.filters?.type, \"GET\")\n    const [filters, setFilters] = useState(null)\n\n    const handleChangeFilters = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            if (Object.keys(filter?.filters).length > 1) {\n                delete filter?.filters[name]\n                setFilter({\n                    ...filter\n                })\n            } else {\n                delete filter[\"filters\"]\n                setFilter({\n                    ...filter\n                })\n            }\n            return\n        }\n\n        setFilter(prevValue => ({\n            ...prevValue,\n            filters: {\n                ...prevValue?.filters,\n                [name]: value\n            }\n        }))\n    }\n\n    const handleChangeFilterQuery = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete filter[\"query\"]\n            setFilter({\n                ...filter\n            })\n            return\n        }\n\n        setFilter(prevValue => ({\n            ...prevValue,\n            [name]: value\n        }))\n    }\n\n\n    useEffect(() => {\n        if (!filter?.filters?.type) return\n        setFilters(null)\n        refetch()\n    }, [filter?.filters?.type])\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response?.filters) {\n            setFilters(response?.filters)\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        return () => {\n            setFilter({})\n        }\n    }, [])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h2>Vybrať filter</h2>\n                <Container>\n                    <div>\n                        <h4>Typ produktu</h4>\n                        <CustomCheckbox\n                            label=\"Dioptrické\"\n                            isActive={filter?.filters?.type === 1}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 1 ? '' : 1 : 1\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Slnečné\"\n                            isActive={filter?.filters?.type === 2}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 2 ? '' : 2 : 2\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Športové\"\n                            isActive={filter?.filters?.type === 4}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 4 ? '' : 4 : 4\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Kontaktné šošovky\"\n                            isActive={filter?.filters?.type === 3}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 3 ? '' : 3 : 3\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Doplnky\"\n                            isActive={filter?.filters?.type === 5}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 5 ? '' : 5 : 5\n                                }\n                            })}\n                        />\n                        <CustomCheckbox\n                            label=\"Služby\"\n                            isActive={filter?.filters?.type === 6}\n                            handleClick={() => handleChangeFilters({\n                                target: {\n                                    name: 'type',\n                                    value: filter?.filters?.type ? filter?.filters?.type === 6 ? '' : 6 : 6\n                                }\n                            })}\n                        />\n                    </div>\n                    <h3>Filtovat podla:</h3>\n                    <div>\n                        <CustomInput\n                            label='Meno produktu'\n                            name='query'\n                            value={filter?.query || \"\"}\n                            handleChange={handleChangeFilterQuery}\n                        />\n                    </div>\n                    <div>\n                        <CustomInput\n                            label='Značka produktu'\n                            name='brand'\n                            value={filter?.filters?.brand || \"\"}\n                            handleChange={handleChangeFilters}\n                            list=\"brands\"\n\n                        />\n                        <datalist id=\"brands\">\n                            {filters?.brands.length > 0 && filters.brands.map((brand, idx) => (\n                                <option key={idx} value={brand} />\n                            ))}\n                        </datalist>\n                    </div>\n                    {/* <div>\n                        <CustomInput\n                            label='Kategoria produktu'\n                            name='category'\n                            value={filter?.filters?.category || \"\"}\n                            handleChange={handleChangeFilters}\n                            list=\"categories\"\n\n                        />\n                        <datalist id=\"categories\">\n                            {filters?.categories.length > 0 && filters.categories.map((brand, idx) => (\n                                <option key={idx} value={brand} />\n                            ))}\n                        </datalist>\n\n                    </div> */}\n                    <div>\n                        <CustomInput\n                            label='Eankód produktu'\n                            name='eanCode'\n                            value={filter?.filters?.eanCode || \"\"}\n                            handleChange={handleChangeFilters}\n                        />\n                    </div>\n\n\n                </Container>\n\n                <OptionsContainer>\n                    <ResetButton onClick={() => resetFilter()}>Resetovať filter</ResetButton>\n                    <ApplyButton onClick={() => applyFilter(filter)}>Filtrovať</ApplyButton>\n                </OptionsContainer>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default EshopFilterModal\n","/app/src/components/product-overview/product-overview.component.jsx",[],"/app/src/components/section-navbar/section-navbar.component.jsx",[],"/app/src/components/list-arrows/list-arrows.component.jsx",["840","841"],"import React, { useState, useEffect } from 'react'\n\nimport {\n    AiFillLeftCircle,\n    AiFillRightCircle\n} from 'react-icons/ai'\n\nimport {\n    ArrowsContainer,\n    IconContainer\n} from './list-arrows.styles'\n\nconst ListArrows = ({\n    listItems = [],\n    handleClickPrev = () => { },\n    handleClickNext = () => { }\n}) => {\n    const [isDisablePrev, setIsDisablePrev] = useState(true)\n    const [isDisableNext, setIsDisableNext] = useState(true)\n    const [currentPage, setCurrentPage] = useState(0)\n\n    useEffect(() => {\n        if (currentPage === 0) {\n            setIsDisablePrev(true)\n        } else {\n            setIsDisablePrev(false)\n            // setCurrentPage(0)\n        }\n    }, [listItems])\n\n    useEffect(() => {\n        if (listItems?.length < 10) {\n            setIsDisableNext(true)\n        } else {\n            setIsDisableNext(false)\n        }\n    }, [listItems])\n\n    useEffect(() => {\n        if (currentPage === 0) return\n        setCurrentPage(prevValue => prevValue--)\n    }, [handleClickPrev])\n    useEffect(() => {\n        // if (currentPage === 0) return\n        setCurrentPage(prevValue => prevValue++)\n    }, [handleClickNext])\n\n    const handlePrev = () => {\n        handleClickPrev()\n        if (currentPage === 0) return\n        setCurrentPage(prevValue => prevValue - 1)\n    }\n    const handleNext = () => {\n        handleClickNext()\n        setCurrentPage(prevValue => prevValue + 1)\n    }\n\n    return (\n        <ArrowsContainer>\n            <IconContainer disabled={isDisablePrev} onClick={handlePrev}>\n                <AiFillLeftCircle />\n            </IconContainer>\n            <IconContainer disabled={isDisableNext} onClick={handleNext}>\n                <AiFillRightCircle />\n            </IconContainer>\n        </ArrowsContainer>\n    )\n}\n\nexport default ListArrows\n","/app/src/components/user-form/user-form.component.jsx",["842"],"import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\nimport ProfileOrderOverview from '../profile-order-overview/profile-order-overview.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\nimport ExaminationsOverview from '../examinations-overview/examinations-overview.component'\n\nimport {\n    retailNames\n} from '../../utils/warehouse.utils'\n\nimport {\n    Profile,\n    GridContainer,\n    GridRow,\n    Row,\n    // ThreeColRow,\n    ZeroMargin,\n    Title,\n    Container,\n    OrderHeader,\n    OrderButton,\n    CustomSelect,\n    AdminPanelContainer\n} from './user.form-styles'\n\nconst UserForm = ({\n    isAdmin,\n    isUpdating,\n    user,\n    handleChange,\n    handleParameterChange,\n    handleCompanyChange,\n    isOptometrist,\n    isOrder = false,\n    isCustomer\n}) => {\n    const { push } = useHistory()\n\n    const handleAddOrderButtonClick = e => {\n        e.preventDefault()\n        push(`/dashboard/objednavky/${user._id}`)\n    }\n\n\n    return (\n        <GridContainer>\n            <Profile>\n                {isAdmin && !isCustomer && <AdminPanelContainer>\n                    <h2>Admin panel</h2>\n                    <InputRow\n                        label=\"Predajňa na ktorej uživatel pracuje\"\n                        example=''\n                    >\n                        <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Nezadané</option>\n                            {\n                                retailNames.map((name, idx) => {\n                                    if (idx === 0) return\n                                    return (\n                                        <option key={idx} value={idx}>{name}</option>\n                                    )\n                                })\n                            }\n                        </CustomSelect>\n                    </InputRow>\n                    <InputRow\n                        label=\"Výška administrativných práv\"\n                        example=\"\"\n                    >\n                        <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Zákaznik</option>\n                            <option value={1}>Predavač</option>\n                            <option value={2}>Vedúci</option>\n                        </CustomSelect>\n                    </InputRow>\n\n                    <Container>\n                        <CustomCheckbox\n                            label='Optometrista'\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"optometrist\",\n                                    value: !user.optometrist\n                                }\n                            })}\n                            isActive={user.optometrist}\n                        />\n                    </Container>\n                </AdminPanelContainer>}\n                <div>\n                    <h2>Informácie</h2>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        {isCustomer && <div>\n                            <CustomInput\n                                // label=\"Priezvisko*\"\n                                type='date'\n                                name='birthDate'\n                                value={user.birthDate}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>}\n                    </GridRow>\n                </div>\n\n                <Container>\n                    <h2>Kontaktné údaje</h2>\n                    <Row>\n                        <div>\n                            <CustomInput\n                                label=\"E-mail*\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        {isCustomer && <div>\n                            <CustomInput\n                                label=\"Telefónne číslo\"\n                                type='text'\n                                name='phone'\n                                value={user.phone ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>}\n                    </Row>\n                </Container>\n\n                {isCustomer && <Container>\n                    <h2>Fakturačné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.address ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.psc ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.city ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.country ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>}\n                {isCustomer && <Container>\n                    <h2>Firemné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČO\"\n                                type='text'\n                                name='ico'\n                                value={user.company.ico ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"DIČ\"\n                                type='text'\n                                name='dic'\n                                value={user.company.dic ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČ DPH\"\n                                type='text'\n                                name='icdph'\n                                value={user.company.icdph ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            {/* <CustomInput\n                                label=\"IČ DPH\"\n                                type='text'\n                                name='icdph'\n                                value={user.company.icdph ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            /> */}\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.company.address ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.company.psc ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.company.city ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.company.country ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n\n\n                </Container>}\n\n                {isCustomer && <Container>\n                    <h2>Parametre</h2>\n\n                    <ParametersTable\n                        parameters={user.lenses}\n                        handleChange={handleParameterChange}\n                    />\n                </Container>}\n\n\n                {isCustomer && <div>\n                        <CustomTextarea\n                            label=\"Poznámka\"\n                            type='text'\n                            rows=\"5\"\n                            name='note'\n                            value={user.note ?? \"\"}\n                            handleChange={(e) => handleChange(e)}\n                        />\n                </div>}\n\n            </Profile>\n\n            {\n                isCustomer && !isOrder && isUpdating && <div>\n                    <OrderHeader>\n                        <Title>\n                            Objednávky\n                    </Title>\n                        <OrderButton onClick={e => handleAddOrderButtonClick(e)}>Pridať objednávku</OrderButton>\n                    </OrderHeader>\n                    <div>\n                        {user.orders.length > 0 ? user.orders.map((order, idx) => (\n                            <ProfileOrderOverview\n                                key={idx}\n                                id={order}\n                                handleUpdateClick={() => push(`/dashboard/objednavky/${user._id}/${order}`)}\n                            />\n                        )).reverse().slice(0, 5) : (\n                            <p>Žiadné objednávky</p>\n                        )}\n                    </div>\n                    {isOptometrist && <ExaminationsOverview />}\n                </div>\n            }\n        </GridContainer >\n    )\n}\n\nexport default UserForm\n","/app/src/components/modal-product-image-gallery/modal-product-image-gallery.component.jsx",["843","844","845","846","847","848","849","850","851"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomButton from '../custom-button/custom-button.component'\n\nimport ImageModal from '../modal-images/modal-images.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    UploadButton,\n    NewImageContainer,\n    DeleteButton,\n    NewImagesContainer,\n    SubmitButton,\n    UploadImageButton\n} from './modal-product-image-gallery.styles'\n\nconst ProductImageGalleryModal = ({ close, setImage }) => {\n    const tabs = [\n        'upload',\n        'select'\n    ]\n    const [tab, setTab] = useState(tabs[0])\n    const [images, setImages] = useState([])\n    const [files, setFiles] = useState([])\n\n    const [isModalVisible, setIsModalVisible] = useState(false)\n\n    const [selectedImages, setSelectedImages] = useState([])\n    const [primaryImage, setPrimaryImage] = useState(null)\n\n    const handleFileInputChange = (e) => {\n        const files = e.target.files;\n        var filesArr = Array.prototype.slice.call(files);\n        const filesArrWithUrl = filesArr.map((file) => ({\n            file: file,\n            url: URL.createObjectURL(file)\n        }))\n        setFiles(prevValue => ([...prevValue, ...filesArrWithUrl]))\n    }\n\n    const selectImage = (img) => {\n        setSelectedImages(prevValue => ([...prevValue, img]))\n    }\n\n    const removeSelectedImage = img => {\n        const arr = selectedImages.filter(image => image._id !== img._id)\n        setSelectedImages(arr)\n    }\n\n    const selectPrimaryImage = img => {\n        setPrimaryImage(img)\n    }\n\n    const handleSubmit = (primaryImg, otherImages) => {\n\n        // console.log(primaryImg._id)\n\n\n        if (primaryImg) {\n            const arr = otherImages.map(img => img._id)\n            const filteredArr = otherImages.filter(img => img._id !== primaryImg._id)\n            setImage(primaryImg._id, filteredArr, primaryImg)\n            close()\n        } else {\n            // const arr = otherImages.map(img => img._id)\n            // console.log(arr)\n            const firstIndex = otherImages[0]\n            const filteredArr = otherImages.filter(img => img._id !== firstIndex._id)\n            setImage(firstIndex._id, filteredArr, firstIndex)\n            close()\n        }\n\n\n    }\n\n    const { response, isLoading, refetch } = useFetchByQuery('api/images/filter', {\n        sortBy: {\n            dateCreated: -1\n        },\n        limit: 10,\n        skip: 0\n    })\n    useEffect(() => {\n        if (isLoading) return\n        if (!response) return\n        setImages(response.images)\n    }, [isLoading])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            {isModalVisible && <ImageModal close={() => setIsModalVisible(false)} setImage={refetch} />}\n\n            <CloseButton onClick={close} />\n            <Modal>\n                <UploadImageButton onClick={() => setIsModalVisible(true)}>Pridať</UploadImageButton>\n\n                <h2>1. Vybrať obrázky</h2>\n\n                <NewImagesContainer>\n                    {images?.length > 0 && images.map((img) => (\n                        <NewImageContainer key={img._id}>\n                            {/* <DeleteButton >&#10005;</DeleteButton> */}\n                            <img onClick={() => selectImage(img)} src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n\n                {selectedImages.length > 0 && <h2>2. Zvolené obrázky</h2>}\n                {selectedImages.length > 0 && <p>Vybrať hlavný obrázok</p>}\n\n                <NewImagesContainer>\n                    {selectedImages.length > 0 && selectedImages.map((img) => (\n                        <NewImageContainer key={img._id} isPrimary={img._id === primaryImage?._id}>\n                            <DeleteButton onClick={() => removeSelectedImage(img)} >&#10005;</DeleteButton>\n                            <img onClick={() => selectPrimaryImage(img)} src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n\n                <SubmitButton onClick={() => handleSubmit(primaryImage, selectedImages)}>Dokončiť</SubmitButton>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default ProductImageGalleryModal\n\n                // <h2>1. Vybrať obrázky</h2>\n\n                // <UploadButton htmlFor='image'>\n                //     <input\n                //         id='image'\n                //         type='file'\n                //         name='image'\n                //         multiple\n                //         accept=\"image/png, image/jpeg\"\n                //         onChange={handleFileInputChange}\n                //     />\n                //     Vybrať\n                // </UploadButton>\n\n                // {files.length > 0 && (\n                //     <div>\n                //         <h2>2. Vybrat hlavný obrázok</h2>\n                //     </div>\n                // )}\n\n                // <NewImagesContainer>\n                //     {files.length > 0 && files.map(({ url }, idx) => (\n                //         <NewImageContainer key={idx}>\n                //             <DeleteButton >&#10005;</DeleteButton>\n                //             <img src={url} alt={`new image ${idx}`} />\n                //         </NewImageContainer>\n                //     ))}\n                // </NewImagesContainer>\n","/app/src/components/modal-get-lenses-data/modal-get-lenses-data.component.jsx",["852","853"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport { formatAvailable } from '../../utils/orders.utils'\n\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    SearchButton,\n    ProductTableHead,\n    ProductTableRow,\n    TableCol,\n    TableContainer\n} from './modal-get-lenses-data.styles'\n\nconst GetLensesDataModal = ({ close, getSingleLenses, productObj, setProductObj, fillProductData }) => {\n    const [searchQuery, setSearchQuery] = useState(\"\")\n\n    const [productItems, setProductItems] = useState([])\n\n    const [query, setQuery] = useState({\n        limit: 10,\n        skip: 0,\n    })\n\n    const { response, isLoading, refetch } = useFetchByQuery(\"api/admin/lenses/filter\", query)\n\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        setQuery({\n            ...query,\n            query: searchQuery\n        })\n        refetch()\n    }\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== \"\") {\n            if (e.key === 'Enter') {\n                setQuery({\n                    ...query,\n                    query: searchQuery\n                })\n                refetch()\n            }\n        }\n    }\n\n    const handleClick = (id) => {\n        getSingleLenses(id, (data) => {\n            const { lenses } = data\n\n            delete lenses['__v']\n            delete lenses['_id']\n            delete lenses['soldAmount']\n            delete lenses['dateCreated']\n\n            fillProductData({\n                ...lenses,\n                image: lenses.image._id,\n                lensType: lenses.type || \"číre\",\n                dioptric: lenses.dioptric || false,\n                type: 0,\n                price: (lenses.price / 100).toFixed(2),\n            })\n\n        })\n        close()\n\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        setProductItems(response.lenses)\n    }, [isLoading])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h2>Vyhľadať šošovky</h2>\n                <div>\n                    <CustomInput\n                        label='Názov šošoviek, eanCode alebo popis'\n                        value={searchQuery}\n                        handleChange={(e) => setSearchQuery(e.target.value)}\n                        onKeyPress={handleSearchOnEnter}\n                    />\n                </div>\n                <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n\n                <TableContainer>\n                    <ProductTableHead>\n                        <TableCol isHead>eanKód</TableCol>\n                        <TableCol isHead>Názov</TableCol>\n                        <TableCol isHead>Dioptrie</TableCol>\n                        <TableCol isHead>Cylinder</TableCol>\n                        <TableCol isHead>Cena</TableCol>\n                    </ProductTableHead>\n                    {productItems.map((product, idx) => (\n                        <ProductTableRow key={idx} onClick={() => handleClick(product._id)}>\n                            <TableCol>{product.eanCode}</TableCol>\n                            <TableCol>{product.name}</TableCol>\n                            <TableCol>\n                                {product.dioptersRange && <p>{`od ${product.dioptersRange[0]} do ${product.dioptersRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>\n                                {product.cylinderRange && <p>{`od ${product.cylinderRange[0]} do ${product.cylinderRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>{(product.price / 100).toFixed(2)}€</TableCol>\n                        </ProductTableRow>\n                    ))}\n                </TableContainer>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default GetLensesDataModal\n","/app/src/components/modal-images/modal-images.component.jsx",[],"/app/src/components/modal-get-product-data/modal-get-product-data.component.jsx",["854"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport { formatAvailable } from '../../utils/orders.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    SearchButton,\n    ProductTableHead,\n    ProductTableRow,\n    TableCol,\n    TableContainer\n} from './modal-get-product-data.styles'\n\nconst GetProductDataModal = ({ close, getSingleProduct, productObj, setProductObj }) => {\n    const [searchQuery, setSearchQuery] = useState(\"\")\n\n    const [productItems, setProductItems] = useState([])\n\n    const [query, setQuery] = useState({\n        limit: 10,\n        skip: 0,\n        filters: {\n            type: productObj.type\n        },\n        sortBy: {\n            date: -1\n        }\n    })\n    const { response, isLoading, refetch } = useFetchByQuery(\"api/admin/products/filter\", query)\n\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        setQuery({\n            ...query,\n            query: searchQuery\n        })\n        refetch()\n    }\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== \"\") {\n            if (e.key === 'Enter') {\n                setQuery({\n                    ...query,\n                    query: searchQuery,\n                })\n                refetch()\n            }\n        }\n    }\n\n    const handleClick = (id) => {\n        getSingleProduct(id, (data) => {\n            const { product } = data\n\n            if (product.type === 1 || product.type === 2 || product.type === 4) {\n                delete product['__v']\n                delete product['soldAmount']\n                delete product['ordered']\n                delete product['_id']\n                delete product['boughtTogether']\n                delete product['contactLenses']\n                delete product['date']\n\n                setProductObj({\n                    ...product,\n                    // id: product._id,\n                    ...(!product._id) && { _id: product._id },\n                    price: (product.price / 100).toFixed(2),\n                    eanCode: product.eanCode,\n                    image: product.image._id,\n                    specs: {\n                        ...product.specs,\n                        size: [...Array(4)].map((value, idx) => product.specs.size[idx] ? product.specs.size[idx] : 0)\n                    }\n                })\n            }\n            if (product.type === 3) {\n                delete product['__v']\n                delete product['soldAmount']\n                delete product['ordered']\n                delete product['_id']\n                delete product['boughtTogether']\n                delete product['specs']\n                delete product['date']\n\n                setProductObj({\n                    ...product,\n                    // id: product._id,\n                    ...(!product._id) && { _id: product._id },\n                    price: (product.price / 100).toFixed(2),\n                    // colorCode: product.colorCode ?? \"\",\n                    image: product.image._id,\n                    // specs: {\n                    //     ...product.specs,\n                    //     size: [...Array(4)].map((value, idx) => product.specs.size[idx] ? product.specs.size[idx] : 0)\n                    // }\n                })\n            }\n        })\n        close()\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        setProductItems(response.products)\n    }, [isLoading])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h2>Vyhľadať produkt</h2>\n                <div>\n                    <CustomInput\n                        label='Názov produktu, eanCode alebo popis'\n                        value={searchQuery}\n                        handleChange={(e) => setSearchQuery(e.target.value)}\n                        onKeyPress={handleSearchOnEnter}\n                    />\n                </div>\n                <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n\n                <TableContainer>\n                    <ProductTableHead>\n                        <TableCol isHead>eanKód</TableCol>\n                        <TableCol isHead>Obrázok</TableCol>\n                        <TableCol isHead>Názov</TableCol>\n                        <TableCol isHead>Značka</TableCol>\n                        <TableCol isHead>Cena</TableCol>\n                        <TableCol isHead>Na sklade</TableCol>\n                    </ProductTableHead>\n                    {productItems.map((product, idx) => (\n                        <ProductTableRow key={idx} onClick={() => handleClick(product._id)}>\n                            <TableCol>{product.eanCode}</TableCol>\n                            <TableCol>\n                                {product?.image && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${product.image.imagePath}`} alt={product.image.alt} />}\n                            </TableCol>\n                            <TableCol>{product.name}</TableCol>\n                            <TableCol>{product.brand}</TableCol>\n                            <TableCol>{(product.price / 100).toFixed(2)}€</TableCol>\n                            <TableCol>{product.type === 6 ? 'Služba' : formatAvailable(product.available)}</TableCol>\n                        </ProductTableRow>\n                    ))}\n                </TableContainer>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default GetProductDataModal\n","/app/src/components/product-lenses-form/product-lenses-form.component.jsx",[],"/app/src/components/product-glasses-form/product-glasses-form.component.jsx",["855","856","857","858","859"],"import React, { useState, useEffect } from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport { glassesColors, glassesMaterials, glassesShapes, brands } from '../../utils/warehouse.utils'\n\nimport { AiOutlineCopy } from 'react-icons/ai'\n\nimport {\n    ImageContainer,\n    ProductImage,\n    GlassesContainerForm,\n    GlassesContainer,\n    GlassesParameterContainer,\n    StockContainer,\n    CustomSelect,\n    BrandedCheckbox,\n    CopyButton,\n    UploadButton,\n    DeleteButton,\n    NewImageContainer,\n    NewImagesContainer\n} from './product-glasses-form.styles.jsx'\n\nconst ProductGlassesForm = ({\n    product,\n    handleChange,\n    selectedImage,\n    retailNames,\n    currentUser,\n    checkParameter,\n    handleAvailableChange,\n    handleGlassesParametersChange,\n    handleGlassesSpecsSizeChange,\n    handleSpecsChange,\n    glassesParameters,\n    setImageModal,\n    // isUpdating,\n    filters,\n    handleGetProductData,\n    productObj\n}) => {\n    const [isBranded, setIsBranded] = useState(true)\n\n    const [allBrands, setAllBrands] = useState([])\n\n    const handleIsBrandedClick = (isBrandedBool) => {\n        if (isBrandedBool) {\n            handleChange({\n                target: {\n                    name: \"brand\",\n                    value: \"Neznačkové\"\n                }\n            })\n            setIsBranded(false)\n        } else {\n            handleChange({\n                target: {\n                    name: \"brand\",\n                    value: \"\"\n                }\n            })\n\n            setIsBranded(true)\n\n        }\n    }\n\n    useEffect(() => {\n        if (product.brand === \"Neznačkové\") setIsBranded(false)\n    }, [isBranded])\n\n    useEffect(() => {\n        if (!filters?.brands) return\n        setAllBrands([ ...filters?.brands , ...brands])\n    }, [brands, filters?.brands])\n\n    return (\n        <GlassesContainerForm>\n            <GlassesContainer>\n                <CopyButton onClick={() => handleGetProductData(true)}><AiOutlineCopy /></CopyButton>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov produktu*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Kód\"\n                    type='text'\n                    name='subname'\n                    value={product.subname ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <BrandedCheckbox\n                    label={\"Značkové\"}\n                    isActive={isBranded}\n                    handleClick={() => handleIsBrandedClick(isBranded)}\n                />\n\n                {isBranded && (\n                    <React.Fragment>\n                        <CustomInput\n                            label=\"Značka\"\n                            type='text'\n                            name='brand'\n                            value={product.brand ?? \"\"}\n                            handleChange={(e) => handleChange(e)}\n                            list=\"brands\"\n                        />\n                        <datalist id=\"brands\">\n                            {allBrands.map((brand, idx) => (\n                                <option key={idx} value={brand} />\n                            ))}\n                        </datalist>\n                    </React.Fragment>\n                )}\n\n                {/* <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n\n                /> */}\n\n                {/* <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {/* <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                /> */}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n\n                <NewImagesContainer>\n                    {productObj?.bonusImages && productObj?.bonusImages.map((img, idx) => (\n                        <NewImageContainer key={idx}>\n                            {/* <DeleteButton >&#10005;</DeleteButton> */}\n                            <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n            </GlassesContainer>\n            <div>\n                <GlassesParameterContainer>\n                    <h3>Parametre</h3>\n                    <CustomInput\n                        label=\"Farebný kód\"\n                        type='text'\n                        name='colorCode'\n                        value={glassesParameters.colorCode ?? \"\"}\n                        handleChange={(e) => handleGlassesParametersChange(e)}\n                    />\n                    <div>\n                        <CustomInput\n                            label=\"Farba rámu\"\n                            type='text'\n                            name='frameColor'\n                            value={glassesParameters.specs.frameColor ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"colors\"\n\n                        />\n                        <datalist id=\"colors\">\n                            {glassesColors.map((color, idx) => (\n                                <option key={idx} value={color} />\n                            ))}\n                        </datalist>\n                        <CustomInput\n                            label=\"Materiál rámu\"\n                            type='text'\n                            name='frameMaterial'\n                            value={glassesParameters.specs.frameMaterial ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"materials\"\n\n                        />\n                        <datalist id=\"materials\">\n                            {glassesMaterials.map((material, idx) => (\n                                <option key={idx} value={material} />\n                            ))}\n                        </datalist>\n                        <CustomInput\n                            label=\"Tvar rámu\"\n                            type='text'\n                            name='frameStyle'\n                            value={glassesParameters.specs.frameStyle ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"shapes\"\n                        />\n                        <datalist id=\"shapes\">\n                            {glassesShapes.map((shape, idx) => (\n                                <option key={idx} value={shape} />\n                            ))}\n                        </datalist>\n                        {/* <CustomInput\n                            label=\"Farba šošovky\"\n                            type='text'\n                            name='lensColor'\n                            value={glassesParameters.specs.lensColor ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                        /> */}\n                        <CustomSelect\n                            label=\"Pohlavie\"\n                            type='text'\n                            name='sex'\n                            value={glassesParameters?.specs?.sex || \"\"}\n                            onChange={(e) => handleSpecsChange(e)}\n                        >\n                            <option value=''>-</option>\n                            <option value='M'>Pánske</option>\n                            <option value='W'>Dámske</option>\n                            <option value='CH'>Detské</option>\n                            <option value='U'>Nezáleží</option>\n                        </CustomSelect>\n                    </div>\n                    <div>\n                        <h4>Velkosť</h4>\n                        {glassesParameters.specs.size.map((value, idx) => (\n                            <CustomInput\n                                key={idx}\n                                label={idx === 0 ? \"Šírka očnice (mm)\" : idx === 1 ? \"Výška očnice (mm)\" : idx === 2 ? \"Veľkosť nosníka (mm)\" : \"Dĺžka stranice (mm)\"}\n                                type='text'\n                                name='size'\n                                value={checkParameter(glassesParameters.specs.size, idx)}\n                                handleChange={(e) => handleGlassesSpecsSizeChange(e, idx)}\n                            />\n                        ))}\n                    </div>\n                </GlassesParameterContainer>\n                {currentUser.admin >= 2 ? (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        {product.available.map((value, idx) => {\n                            if (idx === 0) return\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[idx]}\n                                    type='number'\n                                    name={\"available\"}\n                                    value={checkParameter(product.available, idx)}\n                                    handleChange={e => handleAvailableChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </StockContainer>\n                ) : (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        <CustomInput\n                            label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                            type='number'\n                            name={\"available\"}\n                            value={checkParameter(product.available, currentUser.premises)}\n                            handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                        />\n                    </StockContainer>\n                )}\n            </div>\n        </GlassesContainerForm>\n    )\n}\n\nexport default ProductGlassesForm\n","/app/src/components/new-user-form/new-user-form.component.jsx",["860"],"import React from 'react'\n\nimport CustomFormSwitch from '../custom-form-switch/custom-form-switch.component'\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from \"../custom-checkbox/custom-checkbox.component\"\n\nimport {\n    retailNames\n} from '../../utils/warehouse.utils'\n\nimport {\n    CustomSelect,\n    Container,\n    GridRow,\n    ZeroMargin,\n    ColContainer,\n    CustomerForm,\n    SectionTitle\n} from './new-user-form.styles'\n\n\nconst NewUserForm = ({\n    formToShow,\n    switchFormButtons,\n    toggleUserForm,\n    user,\n    handleChange,\n    isAdmin,\n    handleParameterChange,\n    handleCompanyChange\n}) => {\n\n    return (\n        <div>\n            {/* Akého uživatela chcete vytvoriť? */}\n            {isAdmin && <CustomFormSwitch\n                items={switchFormButtons}\n                title=\"Akého uživatela chcete vytvoriť ?\"\n                activeIndex={formToShow}\n                handleClick={toggleUserForm}\n            />}\n\n            {\n                formToShow === 0 ? (\n                    <CustomerForm>\n                        <ColContainer>\n                            <h2>Informácie</h2>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"E-mail\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Telefónne číslo*\"\n                                type='text'\n                                name='phone'\n                                value={user.phone ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <InputRow\n                                label=\"Dátum narodenia\"\n                                example=''\n                            >\n                                <CustomInput\n                                    // label=\"Priezvisko*\"\n                                    type='date'\n                                    name='birthDate'\n                                    value={user.birthDate}\n                                    handleChange={(e) => handleChange(e)}\n                                />\n                            </InputRow>\n\n                            <Container>\n                                <h2>Parametre</h2>\n\n                                <ParametersTable\n                                    parameters={user.lenses}\n                                    handleChange={handleParameterChange}\n                                />\n                            </Container>\n                        </ColContainer>\n\n                        <ColContainer>\n                            <div>\n                                <h2>Fakturačné údaje</h2>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"Ulica a čislo domu\"\n                                            type='text'\n                                            name='address'\n                                            value={user.address ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"PSČ\"\n                                            type='text'\n                                            name='psc'\n                                            value={user.psc ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Mesto\"\n                                            type='text'\n                                            name='city'\n                                            value={user.city ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Krajina\"\n                                            type='text'\n                                            name='country'\n                                            value={user.country ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </div>\n\n                            <Container>\n                                <h2>Firemné údaje</h2>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"IČO\"\n                                            type='text'\n                                            name='ico'\n                                            value={user.company.ico ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"DIČ\"\n                                            type='text'\n                                            name='dic'\n                                            value={user.company.dic ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"IČ DPH\"\n                                            type='text'\n                                            name='icdph'\n                                            value={user.company.icdph ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        {/* <CustomInput\n                                            label=\"IČ DPH\"\n                                            type='text'\n                                            name='icdph'\n                                            value={user.company.icdph ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        /> */}\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"Ulica a čislo domu\"\n                                            type='text'\n                                            name='address'\n                                            value={user.company.address ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"PSČ\"\n                                            type='text'\n                                            name='psc'\n                                            value={user.company.psc ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Mesto\"\n                                            type='text'\n                                            name='city'\n                                            value={user.company.city ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Krajina\"\n                                            type='text'\n                                            name='country'\n                                            value={user.company.country ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </Container>\n                        </ColContainer>\n\n                    </CustomerForm>\n                ) : (\n                    <CustomerForm>\n\n                        <ColContainer>\n                            <h2>Informácie</h2>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"E-mail\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Heslo*\"\n                                type='password'\n                                name='password'\n                                value={user.password ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Potvrď heslo*\"\n                                type='password'\n                                name='confirmPassword'\n                                value={user.confirmPassword ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ColContainer>\n\n                        <ColContainer>\n                            <SectionTitle>Admin privilégiá</SectionTitle>\n                            <div>\n                                <h4>Predajňa na ktorej zamestnanec pracuje</h4>\n                                <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                                    <option value={0}>Nezadané</option>\n                                    {retailNames.map((name, idx) => {\n                                        if (idx === 0) return\n                                        return (\n                                            <option key={idx} value={idx}>{name}</option>\n\n                                        )\n                                    })}\n                                </CustomSelect>\n\n                            </div>\n                            <div>\n                                <h4>Výška administrativných práv</h4>\n                                <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                                    {/* <option value={0}>Zákaznik</option> */}\n                                    <option value={1}>Zamestnanec</option>\n                                    <option value={2}>Vedúci</option>\n                                </CustomSelect>\n\n                            </div>\n                            <Container>\n                                <CustomCheckbox\n                                    label='Optometrista'\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"optometrist\",\n                                            value: !user.optometrist\n                                        }\n                                    })}\n                                    isActive={user.optometrist}\n                                />\n                            </Container>\n                        </ColContainer>\n                    </CustomerForm>\n                )\n            }\n        </div>\n    )\n}\n\nexport default NewUserForm\n","/app/src/components/product-contact-lenses-form/product-contact-lenses-form.component.jsx",["861","862"],"import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\n// import { lensesBrands } from '../../utils/warehouse.utils'\nimport {\n    AiOutlineCopy\n} from 'react-icons/ai'\n\nimport {\n    ContactLensesContainer,\n    ContactLensesFormContainer,\n    StockContainer,\n    ContactLensesParametersContainer,\n    IncreaseButton,\n    ImageContainer,\n    ProductImage,\n    CopyButton,\n    DeleteButton,\n    NewImageContainer,\n    NewImagesContainer\n} from './product-contact-lenses-form.styles'\n\nconst ProductContactLensesForm = ({\n    product,\n    handleChange,\n    setImageModal,\n    selectedImage,\n    checkParameter,\n    handleContactLensesChange,\n    handleAddNewParameter,\n    contactLensesParameters,\n    retailNames,\n    currentUser,\n    handleAvailableChange,\n    isUpdating,\n    filters,\n    productObj,\n    handleGetProductData\n}) => {\n    return (\n        <ContactLensesFormContainer>\n            <ContactLensesContainer>\n                <CopyButton onClick={() => handleGetProductData(true)}><AiOutlineCopy /></CopyButton>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov doplnku*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Značka\"\n                    type='text'\n                    name='brand'\n                    value={product.brand ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"brands\"\n                />\n                <datalist id=\"brands\">\n                    {filters?.brands && filters?.brands.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist>\n                {/* \n                <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n                />\n\n                <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {/* {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />} */}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n\n                <NewImagesContainer>\n                    {productObj?.bonusImages && productObj?.bonusImages.map((img) => (\n                        <NewImageContainer key={img._id}>\n                            {/* <DeleteButton >&#10005;</DeleteButton> */}\n                            <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n            </ContactLensesContainer>\n            <div>\n                <ContactLensesParametersContainer>\n                    <h3>Parametre</h3>\n                    <div>\n                        <h4>Zakrivenie</h4>\n                        {contactLensesParameters.allowedCurves.map((value, idx) => {\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={idx + 1}\n                                    type='text'\n                                    name={\"allowedCurves\"}\n                                    value={checkParameter(contactLensesParameters.allowedCurves, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                        <IncreaseButton onClick={() => handleAddNewParameter({\n                            target: {\n                                name: 'allowedCurves'\n                            }\n                        })}>Pridať</IncreaseButton>\n                    </div>\n                    <div>\n                        <h4>Priemery</h4>\n                        {contactLensesParameters.allowedDiameters.map((value, idx) => {\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={idx + 1}\n                                    type='text'\n                                    name={\"allowedDiameters\"}\n                                    value={checkParameter(contactLensesParameters.allowedDiameters, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                        <IncreaseButton onClick={() => handleAddNewParameter({\n                            target: {\n                                name: 'allowedDiameters'\n                            }\n                        })}>Pridať</IncreaseButton>\n                    </div>\n\n                    <div>\n                        <h4>Dioptrie</h4>\n                        {contactLensesParameters.dioptersRange.map((value, idx) => {\n                            const inputLabel = idx === 0 ? \"minimum\" : \"maximum\"\n\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={inputLabel}\n                                    type='text'\n                                    name={\"dioptersRange\"}\n                                    value={checkParameter(contactLensesParameters.dioptersRange, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </div>\n                </ContactLensesParametersContainer>\n\n                {currentUser.admin >= 2 ? (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        {product.available.map((value, idx) => {\n                            if (idx === 0) return\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[idx]}\n                                    type='number'\n                                    name={\"available\"}\n                                    value={checkParameter(product.available, idx)}\n                                    handleChange={e => handleAvailableChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </StockContainer>\n                ) : (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        <CustomInput\n                            label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                            type='number'\n                            name={\"available\"}\n                            value={checkParameter(product.available, currentUser.premises)}\n                            handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                        />\n                    </StockContainer>\n                )}\n            </div>\n        </ContactLensesFormContainer>\n    )\n}\n\nexport default ProductContactLensesForm\n","/app/src/components/product-accessories-form/product-accessories-form.component.jsx",["863","864"],"import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    AccessoriesFormContainer,\n    AccessoriesContainer,\n    StockContainer,\n    ImageContainer,\n    ProductImage,\n    DeleteButton,\n    NewImageContainer,\n    NewImagesContainer,\n} from './product-accessories-form.styles'\n\nconst ProductAccessoriesForm = ({\n    product,\n    handleChange,\n    selectedImage,\n    setImageModal,\n    handleAvailableChange,\n    checkParameter,\n    retailNames,\n    currentUser,\n    isUpdating,\n    filters,\n    productObj\n}) => {\n    return (\n        <AccessoriesFormContainer>\n            <AccessoriesContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov doplnku*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Značka\"\n                    type='text'\n                    name='brand'\n                    value={product.brand ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"brands\"\n                />\n\n                <datalist id=\"brands\">\n                    {filters?.brands && filters?.brands.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist>\n\n                {/* <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n\n                />\n\n                <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {/* {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />} */}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n\n                <NewImagesContainer>\n                    {productObj?.bonusImages && productObj?.bonusImages.map((img) => (\n                        <NewImageContainer key={img._id}>\n                            {/* <DeleteButton >&#10005;</DeleteButton> */}\n                            <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${img.imagePath}`} alt={img.alt} />\n                        </NewImageContainer>\n                    ))}\n                </NewImagesContainer>\n            </AccessoriesContainer>\n            {currentUser.admin >= 2 ? (\n                <StockContainer>\n                    <h3>Skladové zásoby</h3>\n                    {product.available.map((value, idx) => {\n                        if (idx === 0) return\n                        return (\n                            <CustomInput\n                                key={idx}\n                                label={currentUser.admin === 1 ? retailNames[currentUser.premises - 1] : retailNames[idx]}\n                                type='number'\n                                name={\"available\"}\n                                value={checkParameter(product.available, idx)}\n                                handleChange={e => handleAvailableChange(e, idx)}\n                            />\n                        )\n                    })}\n                </StockContainer>\n            ) : (\n                <StockContainer>\n                    <h3>Skladové zásoby</h3>\n                    <CustomInput\n                        label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                        type='number'\n                        name={\"available\"}\n                        value={checkParameter(product.available, currentUser.premises)}\n                        handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                    />\n                </StockContainer>\n            )}\n        </AccessoriesFormContainer>\n    )\n}\n\nexport default ProductAccessoriesForm\n","/app/src/components/product-service-form/product-service-form.component.jsx",["865","866"],"import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\n\nimport {\n    ServiceFormContainer,\n    ServiceContainer,\n    ImageContainer,\n    ProductImage\n} from './product-service-form.styles'\n\nconst ProductServiceForm = ({\n    product,\n    // isUpdating,\n    handleChange,\n    selectedImage,\n    setImageModal,\n}) => {\n    return (\n        <ServiceFormContainer>\n            <ServiceContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Názov služby*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                {/* <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer> */}\n            </ServiceContainer>\n        </ServiceFormContainer>\n    )\n}\n\nexport default ProductServiceForm\n","/app/src/components/product-input-row/product-input-row.component.jsx",[],"/app/src/components/booking-calendar-bookings/booking-calendar-bookings.component.jsx",[],"/app/src/components/calendar/calendar.component.jsx",["867","868","869"],"import React, { useState, useEffect } from 'react'\n\nimport {\n    dayNames,\n    getPreviousMonthDays,\n    getNextMonthDays,\n    getCurrentMonthDays,\n    getBooking\n} from '../../utils/calendar.utils'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    Container,\n    HeaderBlock,\n    Dayblock,\n\n} from './calendar.styles'\n\nconst Calendar = ({\n    calendar,\n    month,\n    year,\n    handleCalendarBlockClick\n}) => {\n    const date = new Date()\n\n    date.setDate(1)\n    const lastDay = new Date(year, month + 1, 0).getDate()\n    const prevLastDay = new Date(year, month, 0).getDate()\n\n    const firstDayIndex = new Date(year, month, 0).getDay();\n    const lastDayIndex = new Date(year, month + 1, 0).getDay()\n\n    const nextDays = 7 - lastDayIndex\n\n    const { response, isLoading, refetch } = useFetchById('api/booking/calendars', calendar, !calendar)\n    const [prevDays, setPrevDays] = useState([])\n    const [currentMonthDays, setCurrentMonthDays] = useState([])\n    const [nextMonthDays, setMonthNextDays] = useState([])\n\n    useEffect(() => {\n        refetch()\n    }, [month])\n\n    useEffect(() => {\n        if (calendar) {\n            refetch()\n        }\n    }, [calendar])\n\n    useEffect(() => {\n        if (!isLoading) {\n            if (response?.calendar) {\n                const prevDaysArr = getPreviousMonthDays(firstDayIndex)\n                const arr = getCurrentMonthDays(lastDay)\n                const nextDaysArr = getNextMonthDays(nextDays)\n                const checkedArr = getBooking(arr, response.calendar, month, year)\n\n                setPrevDays(prevDaysArr)\n                setCurrentMonthDays(checkedArr)\n                setMonthNextDays(nextDaysArr)\n            }\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        return () => {\n            setPrevDays([])\n            setCurrentMonthDays([])\n            setMonthNextDays([])\n        }\n    }, [])\n\n    return (\n        <Container>\n\n            {dayNames.map((name, idx) => (\n                <HeaderBlock key={idx}>\n                    {name}\n                </HeaderBlock>\n            ))}\n\n            {prevDays.map((value, idx) => (\n                <Dayblock faded={true} key={idx}>\n                    <p>\n                    </p>\n                    <p>\n                        {prevLastDay - idx}\n                    </p>\n                </Dayblock>\n            ))}\n\n            {currentMonthDays.map((data, idx) => {\n                const { dayNumber, bookings } = data\n                return (\n                    <Dayblock key={idx} onClick={() => handleCalendarBlockClick(data)}>\n                        <p>\n                            {bookings && <span>\n                                {bookings.length}\n                            </span>}\n                        </p>\n                        <p>\n                            {dayNumber}\n                        </p>\n                    </Dayblock>\n                )\n            })}\n            {nextMonthDays.map((value, idx) => (\n                <Dayblock faded={true} key={idx}>\n                    <p>\n                    </p>\n                    <p>\n                        {idx + 1}\n                    </p>\n                </Dayblock>\n            ))}\n        </Container>\n    )\n}\n\nexport default Calendar\n","/app/src/context/week-calendar/week-calendar.context.jsx",["870","871","872","873","874","875","876","877"],"/app/src/components/calendar-weekdays/calendar-weekdays.component.jsx",["878","879"],"/app/src/components/booking-calendar-overview/booking-calendar-overview.component.jsx",[],"/app/src/components/custom-select/custom-select.component.jsx",["880"],"import React from 'react'\n\nimport { CustomSelectContainer } from './custom-select.styles'\n\nconst CustomRetailSelect = ({ name, value, handleChange, listItems, defaultOption = false, defaultValue, defaultLabel }) => {\n    return (\n        <CustomSelectContainer name={name} value={value} onChange={(e) => handleChange(e)}>\n            {defaultOption && <option value={defaultValue}>{defaultLabel}</option>}\n            {listItems.map((name, idx) => {\n                if (idx === 0) return\n                return (\n                    <option key={idx} value={idx}>{name}</option>\n                )\n            })}\n        </CustomSelectContainer>\n    )\n}\n\nexport default CustomRetailSelect\n","/app/src/components/product-glasses-form/product-glasses-form.styles.jsx",[],"/app/src/sections/order/order.styles.jsx",[],"/app/src/sections/analytics/analytics.styles.jsx",[],"/app/src/utils/analytics.utils.jsx",[],"/app/src/components/modal-update-registry/modal-update-registry.component.jsx",["881"],"/app/src/components/custom-checkbox/custom-checkbox.component.jsx",[],"/app/src/components/custom-textarea/custom-textarea.component.jsx",[],"/app/src/sections/order/steps/4-summary/summary.component.jsx",[],"/app/src/sections/order/steps/3-select-lenses/select-lenses.component.jsx",["882"],"import React, { useState, useEffect, useContext } from 'react'\nimport { OrderContext } from '../../../../context/order/order.context'\n\nimport { useFetchByQuery } from '../../../../hooks/useFetch'\n\nimport BackButton from '../../../../components/custom-back-button/custom-back-button.component'\nimport CartLensesRow from '../../../../components/order-cart-lenses-row/order-cart-lenses-row.component'\nimport CustomInput from '../../../../components/custom-input/custom-input.component'\n\nimport {\n    LensesTableContainer,\n    LensesTableHead,\n    LensesTableRow,\n    LensesImg,\n    SelectLensesContainer,\n    CartContainer,\n    CartParagraph,\n    CartTable,\n    CartTableHead,\n    NextButton,\n    TableCol,\n    ButtonOptions,\n    HeaderContainer,\n    SearchButton,\n    SearchContainer,\n    HeadingContainer,\n    UnselectButton\n} from './select-lenses.styles'\n\nconst SelectLensesComponent = ({ back, next }) => {\n    const {\n        cart,\n        addLenses,\n        createCombinedProducts,\n        selectedProduct,\n        selectProduct\n    } = useContext(OrderContext)\n\n    const [searchQuery, setSearchQuery] = useState(\"\")\n\n    const [lensesItems, setLensesItems] = useState([])\n    const [query, setQuery] = useState({\n        limit: 9,\n        skip: 0\n    })\n    const { response, isLoading, refetch } = useFetchByQuery(\"api/admin/lenses/filter\", query)\n\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        setQuery({\n            ...query,\n            query: searchQuery\n        })\n        refetch()\n    }\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== \"\") {\n            if (e.key === 'Enter') {\n                setQuery({\n                    ...query,\n                    query: searchQuery\n                })\n                refetch()\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        setLensesItems(response.lenses)\n    }, [isLoading])\n\n    return (\n        <div>\n            <BackButton onClick={back} />\n            <HeaderContainer>\n                <SearchContainer>\n                    <h3>Vyhľadať šošovky</h3>\n                    <div>\n                        <CustomInput\n                            label='Vyhľadať šošovky'\n                            value={searchQuery}\n                            handleChange={(e) => setSearchQuery(e.target.value)}\n                            onKeyPress={handleSearchOnEnter}\n                        />\n                    </div>\n                    <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n                </SearchContainer>\n                <CartContainer>\n                    <HeadingContainer>\n                        <h3>Vybrané položky</h3>\n                        {selectedProduct !== null && <UnselectButton onClick={() => selectProduct(null)}>Odznačiť</UnselectButton>}\n                    </HeadingContainer>\n                    <CartTable>\n\n                        <CartTableHead>\n                            <TableCol>#</TableCol>\n                            <TableCol>Produkt</TableCol>\n                            <TableCol>šošovky</TableCol>\n                            <TableCol>Cena</TableCol>\n                            <TableCol>Ks</TableCol>\n                            <TableCol>Zľava v %</TableCol>\n                            {/* <TableCol>Možnosti</TableCol> */}\n                        </CartTableHead>\n                        {cart.map((item, idx) => {\n                            if (item.product.type === 3 || item.product.type === 4 || item.product.type === 5 || item.product.type === 6) return false\n                            return (\n                                <CartLensesRow\n                                    key={idx}\n                                    idx={idx}\n                                    item={item}\n                                />\n                            )\n                        })}\n\n                        {cart.length === 0 && <CartParagraph>Nie sú vybrané žiadné produkty</CartParagraph>}\n                    </CartTable>\n                    <ButtonOptions>\n                        <NextButton onClick={createCombinedProducts}>\n                            Dokončiť objednávku\n                        </NextButton>\n                    </ButtonOptions>\n                </CartContainer>\n            </HeaderContainer>\n\n            <SelectLensesContainer>\n                <LensesTableContainer>\n                    <LensesTableHead>\n                        <TableCol>eanKód</TableCol>\n                        <TableCol>Obrázok</TableCol>\n                        <TableCol>Názov</TableCol>\n                        <TableCol>Dioptrie</TableCol>\n                        <TableCol>Cylinder</TableCol>\n                        <TableCol>Cena</TableCol>\n                    </LensesTableHead>\n\n                    {lensesItems.map((lenses, idx) => (\n                        <LensesTableRow key={idx} onClick={() => addLenses(lenses)}>\n                            <TableCol>{lenses.eanCode}</TableCol>\n                            <TableCol>\n                                <LensesImg>\n                                    {/* <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${lenses.image.imagePath}`} alt={lenses.image.alt} /> */}\n                                </LensesImg>\n                            </TableCol>\n                            <TableCol>{lenses.name}</TableCol>\n                            <TableCol>\n                                {lenses.dioptersRange && <p>{`od ${lenses.dioptersRange[0]} do ${lenses.dioptersRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>\n                                {lenses.cylinderRange && <p>{`od ${lenses.cylinderRange[0]} do ${lenses.cylinderRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>{(lenses.price / 100).toFixed(2)}€</TableCol>\n                        </LensesTableRow>\n                    ))}\n                    <LensesTableRow onClick={() => addLenses(null)}>\n                        <TableCol>-</TableCol>\n                        <TableCol>\n                            <LensesImg>\n                                {/* <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${lenses.image.imagePath}`} alt={lenses.image.alt} /> */}\n                            </LensesImg>\n                        </TableCol>\n                        <TableCol>Žiadné sklá</TableCol>\n                        <TableCol>-</TableCol>\n                        <TableCol>-</TableCol>\n                        <TableCol>0€</TableCol>\n                    </LensesTableRow>\n                </LensesTableContainer>\n            </SelectLensesContainer>\n        </div >\n    )\n}\n\nexport default SelectLensesComponent\n","/app/src/sections/order/steps/2-select-product/select-product.component.jsx",["883"],"import React, { useState, useEffect, useContext } from 'react'\nimport { OrderContext } from '../../../../context/order/order.context'\n\nimport CartDiscountRow from '../../../../components/order-cart-row/order-cart-row.component'\nimport CustomInput from '../../../../components/custom-input/custom-input.component'\nimport BackButton from '../../../../components/custom-back-button/custom-back-button.component'\n\nimport {\n    formatAvailable,\n    isAvailable\n} from '../../../../utils/orders.utils'\n\nimport { useFetchByQuery } from '../../../../hooks/useFetch'\n\nimport {\n    SearchContainer,\n    SearchButton,\n    TableContainer,\n    ProductTableHead,\n    ProductTableRow,\n    TableCol,\n    HeaderContainer,\n    CartContainer,\n    CartTable,\n    CartTableHead,\n    CartParagraph,\n    NextButton,\n    ButtonOptions,\n    NextLensesButton,\n} from './select-product.styles'\n\nconst SelectProductComponent = ({ back, next, showErrorMessage }) => {\n    const {\n        addProduct,\n        cart,\n        createCombinedProducts\n    } = useContext(OrderContext)\n\n    const [searchQuery, setSearchQuery] = useState(\"\")\n\n    const [productItems, setProductItems] = useState([])\n    const [query, setQuery] = useState({\n        limit: 10,\n        skip: 0,\n    })\n    const { response, isLoading, refetch } = useFetchByQuery(\"api/admin/products/filter\", query)\n\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        setQuery({\n            ...query,\n            query: searchQuery\n        })\n        refetch()\n    }\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== \"\") {\n            if (e.key === 'Enter') {\n                setQuery({\n                    ...query,\n                    query: searchQuery\n                })\n                refetch()\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        setProductItems(response.products)\n    }, [isLoading])\n\n    return (\n        <div>\n            <BackButton onClick={back} />\n            <HeaderContainer>\n                <SearchContainer>\n                    <h3>Vyhľadať produkt</h3>\n                    <div>\n                        <CustomInput\n                            label='Názov produktu, eanCode alebo popis'\n                            value={searchQuery}\n                            handleChange={(e) => setSearchQuery(e.target.value)}\n                            onKeyPress={handleSearchOnEnter}\n                        />\n                    </div>\n                    <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n                </SearchContainer>\n                <CartContainer>\n                    <h3>Vybrané položky</h3>\n                    <CartTableHead>\n                        <TableCol>#</TableCol>\n                        <TableCol>Produkt</TableCol>\n\n                        <TableCol>Cena</TableCol>\n                        <TableCol>Množstvo</TableCol>\n                        <TableCol>Viac</TableCol>\n                    </CartTableHead>\n                    <CartTable>\n                        {cart.map((item, idx) => (\n                            <CartDiscountRow\n                                key={idx}\n                                item={item}\n                                idx={idx}\n                            />\n                        ))}\n\n                        {cart.length === 0 && <CartParagraph>Nie sú vybrané žiadné produkty</CartParagraph>}\n                    </CartTable>\n                    <ButtonOptions>\n                        <NextLensesButton onClick={() => next(\"select-lenses\")}>\n                            Preisť na šošovky\n                        </NextLensesButton>\n                        <NextButton onClick={createCombinedProducts}>\n                            Dokončiť objednávku\n                        </NextButton>\n                    </ButtonOptions>\n                </CartContainer>\n            </HeaderContainer>\n\n            <TableContainer>\n                <ProductTableHead>\n                    <TableCol>eanKód</TableCol>\n                    <TableCol>Obrázok</TableCol>\n                    <TableCol>Názov</TableCol>\n                    <TableCol>Farba</TableCol>\n                    <TableCol>Veľkosť</TableCol>\n                    <TableCol>Značka</TableCol>\n                    <TableCol>Cena</TableCol>\n                    <TableCol>Na sklade</TableCol>\n                </ProductTableHead>\n                {productItems.map((product, idx) => (\n                    <ProductTableRow key={idx} onClick={() => isAvailable(product.available) ? addProduct(product) : product.type === 6 ? addProduct(product) : showErrorMessage(\"Produkt nieje na sklade.\")}>\n                        <TableCol>{product.eanCode}</TableCol>\n                        <TableCol>\n                            {product?.image && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${product.image.imagePath}`} alt={product.image.alt} />}\n                        </TableCol>\n                        <TableCol>{product.name}</TableCol>\n                        <TableCol>{product.specs.frameColor}</TableCol>\n                        <TableCol>{(product.type === 1 || product.type === 2 || product.type === 4) && `${product.specs.size[0]}-${product.specs.size[1]}-${product.specs.size[2]}-${product.specs.size[3]}`}</TableCol>\n                        <TableCol>{product.brand}</TableCol>\n                        <TableCol>{(product.price / 100).toFixed(2)}€</TableCol>\n                        <TableCol>{product.type === 6 ? 'Služba' : formatAvailable(product.available)}</TableCol>\n                    </ProductTableRow>\n                ))}\n            </TableContainer>\n        </div>\n    )\n}\n\nexport default SelectProductComponent\n","/app/src/sections/order/steps/1-select-user/select-user.component.jsx",["884","885"],"import React, { useState, useEffect, useContext } from 'react'\nimport { UserContext } from '../../../../context/user/user.context'\n\nimport CustomInput from '../../../../components/custom-input/custom-input.component'\n\nimport {\n    SearchContainer,\n    TableContainer,\n    UserTableHead,\n    UserTableRow,\n    TableCol,\n    SearchButton\n} from './select-user.styles'\n\nconst SelectUserComponent = ({ next, addToOrder }) => {\n    const [searchQuery, setSearchQuery] = useState('')\n    const [userItems, setUserItems] = useState([])\n\n    const {\n        users,\n        getFilteredUsers,\n        getUserByQuery\n    } = useContext(UserContext)\n\n    const handleClick = (user) => {\n        addToOrder({\n            name: \"user\",\n            value: user\n        })\n        next()\n    }\n\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== '') {\n            if (e.key === 'Enter') {\n                getUserByQuery({\n                    query: searchQuery,\n                    filters: {\n                        admin: 0\n                    }\n\n                })\n            }\n        }\n    }\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        getUserByQuery({\n            query: searchQuery,\n            filters: {\n                admin: 0\n            }\n\n        })\n    }\n\n    useEffect(() => {\n        if (!users) {\n            getFilteredUsers({\n                limit: 5,\n                filters: {\n                    admin: 0\n                }\n            })\n        }\n        if (users) {\n            setUserItems(users)\n        }\n    }, [users])\n\n    useEffect(() => {\n        if (users) {\n            if (searchQuery === '') {\n                getFilteredUsers({\n                    limit: 5,\n                    filters: {\n                        admin: 0\n                    }\n                })\n                setUserItems(users)\n            }\n        }\n    }, [searchQuery])\n\n    useEffect(() => {\n        return () => {\n            setSearchQuery('')\n            setUserItems([])\n        }\n    }, [])\n\n    return (\n        <div>\n            <SearchContainer>\n                <h3>Vyhľadať zákaznika</h3>\n                <div>\n                    <CustomInput\n                        label={\"Meno, priezvisko, email alebo tel. číslo\"}\n                        value={searchQuery}\n                        onChange={(e) => setSearchQuery(e.target.value)}\n                        onKeyPress={handleSearchOnEnter}\n                    />\n                </div>\n                <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n            </SearchContainer>\n\n            <TableContainer>\n                <UserTableHead>\n                    <TableCol>Meno a priezvisko</TableCol>\n                    <TableCol>Email</TableCol>\n                    <TableCol>Možnosti</TableCol>\n                </UserTableHead>\n                {userItems.map((user, idx) => (\n                    <UserTableRow key={idx} onClick={() => handleClick(user)}>\n                        <TableCol>{user.name}</TableCol>\n                        <TableCol>{user.email}</TableCol>\n                        <TableCol>{user.phone}</TableCol>\n                    </UserTableRow>\n                ))}\n            </TableContainer>\n\n        </div>\n    )\n}\n\nexport default SelectUserComponent\n","/app/src/components/section-header/section-header.styles.jsx",[],"/app/src/components/scroll-container/scroll-container.styles.jsx",[],"/app/src/components/product-overview/product-overview.styles.jsx",[],"/app/src/components/modal-eshop-filter/modal-eshop-filter.styles.jsx",[],"/app/src/components/section-navbar/section-navbar.styles.jsx",[],"/app/src/components/list-arrows/list-arrows.styles.jsx",[],"/app/src/components/user-form/user.form-styles.jsx",[],"/app/src/components/modal-product-image-gallery/modal-product-image-gallery.styles.jsx",[],"/app/src/components/product-service-form/product-service-form.styles.jsx",[],"/app/src/components/product-accessories-form/product-accessories-form.styles.jsx",[],"/app/src/components/new-user-form/new-user-form.styles.jsx",[],"/app/src/components/product-contact-lenses-form/product-contact-lenses-form.styles.jsx",[],"/app/src/components/product-input-row/product-input-row.styles.jsx",[],"/app/src/components/calendar/calendar.styles.jsx",[],"/app/src/components/booking-calendar-bookings/booking-calendar-bookings.styles.jsx",[],"/app/src/components/product-lenses-form/product-lenses-form.styles.jsx",[],"/app/src/utils/week-calendar.utils.jsx",["886"],"export const getTimefromIndex = (idx, isHalf) => {\n    if (isNaN(idx)) return\n    let time = \"\"\n    if (isHalf) {\n        time = idx < 10 ? `0${idx}:30` : `${idx}:30`\n    } else {\n        time = idx < 10 ? `0${idx}:00` : `${idx}:00`\n    }\n\n    return time;\n}\n\nexport const getHourTime = (idx, interval) => {\n    if (isNaN(idx)) return\n    const totalMinutes = idx * interval\n\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    const time = formatTime(hours, minutes)\n    return time\n}\n\nconst formatTime = (hour, min) => {\n    if (hour < 10 && min === 0) return `0${hour}/0${min}`\n    if (hour < 10) return `0${hour}/${min}`\n    if (min === 0) return `${hour}/0${min}`\n    return `${hour}/${min}`\n}\n\nexport const changeSlash = time => {\n    if (!time) return\n    return time.replace(\"/\", \":\")\n}\n\nexport const checkBookings = (calendarDataObj, idx, day, month, year) => {\n    if (!calendarDataObj?.booked) return null\n    const dates = Object.keys(calendarDataObj?.booked)\n\n    const bookedDate = dates.find(date => {\n        const splitedDate = date.split(\"/\").map(value => Number(value))        \n        if (splitedDate[0] === day && splitedDate[1] === month + 1 && splitedDate[2] === year) {\n            return date\n        }\n        return false\n    })\n\n    if (!bookedDate) return null\n\n    const time = getHourTime(idx, calendarDataObj.interval)\n    const bookingTime = calendarDataObj.booked[bookedDate].find(bookTime => bookTime === time)\n\n    return bookingTime ? ({\n        time: bookingTime,\n        date: calendarDataObj.booked[bookedDate],\n        dueDate: `${bookingTime}:${bookedDate}`\n    }) : null\n}\n\nexport const getTimeline = (startTimes, endTimes, interval) => {\n    const numberedStartTimes = startTimes.filter(number => number !== \"X\").map(time => (Number(time.split(\"/\")[0])))\n    const numberedEndTimes = endTimes.filter(number => number !== \"X\").map(time => (Number(time.split(\"/\")[0])))\n    const numberedEndMinutes = endTimes.filter(number => number !== \"X\").map(time => (Number(time.split(\"/\")[1])))\n    const startTime = Math.min(...numberedStartTimes)\n    const endTime = Math.max(...numberedEndTimes)\n    const endMinutes = Math.max(...numberedEndMinutes)\n\n    const timeline = [...Array(interval === 60 ? 24 : interval === 30 ? 48 : 96)].map((value, idx) => {\n        const time = getHourTime(idx, interval)\n        const splitedTime = time.split('/').map(value => Number(value))\n        if (startTime > splitedTime[0]) return null\n        if (endTime < splitedTime[0]) return null\n        if (endTime === splitedTime[0] && !(endMinutes === splitedTime[1]) && splitedTime[1] === 30) return null\n        if (endTime === splitedTime[0] && !(endMinutes === splitedTime[1]) && splitedTime[1] === 15) return null\n        if (endTime === splitedTime[0] && !(endMinutes === splitedTime[1]) && splitedTime[1] === 45) return null\n        return time\n    }).filter(time => time !== null)\n\n    return timeline\n}\n\nexport const handleExceptionDays = (calendarDataObj) => {\n    \n    // console.log(\"DATUMY\")\n    // console.log(dates)\n    // console.log(calendarDataObj.exceptDays)\n\n    const holidayDates = Object.keys(calendarDataObj?.exceptDays)\n\n    // console.log(\"holidayDates\")\n    // console.log(\"holidayDates\")\n    // console.log(holidayDates)\n\n    // let hasHoliday = false \n\n    // dates.forEach(date => {\n    //     holidayDates.forEach(hDate => {\n    //         if(date === hDate) return hasHoliday = true\n    //         return\n    //     })\n    // } )\n\n    // console.log(hasHoliday)\n}","/app/src/components/booking-calendar-overview/booking-calendar-overview.styles.jsx",[],"/app/src/components/modal-get-product-data/modal-get-product-data.styles.jsx",[],"/app/src/components/calendar-weekdays/calendar-weekdays.styles.jsx",[],"/app/src/components/custom-select/custom-select.styles.jsx",[],"/app/src/components/order-overview/order-overview.styles.jsx",[],"/app/src/components/order-overview/order-overview.component.jsx",[],"/app/src/components/examinations-overview/examinations-overview.component.jsx",["887"],"import React, { useState, useEffect, useContext } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useFetchById } from '../../hooks/useFetch'\nimport { ExaminationContext } from '../../context/examination/examination.context'\n\nimport ExaminationUser from '../examination-user/examination-user.component'\nimport OptometristExaminationModal from '../modal-optometrist-examination/modal-optometrist-examination.component'\n\n// import {\n//     checkParameterValue\n// } from '../../utils/parameters.utils'\n\nimport {\n    ExaminationsOverviewContainer,\n    Header,\n    ExaminationContainer,\n    ExamHead,\n    // ExamTableContainer,\n    // HeadTableCol,\n    // TableCol,\n    ExaminationOptions,\n    AddButton,\n    UpdateButton,\n    DeleteButton,\n    PdfButton\n} from './examinations-overview.styles'\n\nconst ExaminationsOverview = () => {\n    const params = useParams()\n    const examinationData = useFetchById(\"api/admin/exams/user\", params.id)\n    const { deleteExamination, getPDF } = useContext(ExaminationContext)\n    const [showOptometristModal, setShowOptometristModal] = useState(false)\n    const [examinations, setExaminations] = useState([])\n    const [examinationToUpdate, setExaminationToUpdate] = useState(null)\n\n    const [isDisabled, setIsDisabled] = useState(false)\n\n\n    const handleUpdateClick = (e, id) => {\n        e.preventDefault()\n        setExaminationToUpdate(id)\n        setShowOptometristModal(true)\n    }\n\n    const handleDelete = (e, id) => {\n        e.preventDefault()\n        if (isDisabled) {\n            return;\n        }\n        setIsDisabled(true);\n        deleteExamination(id)\n\n        setTimeout(() => {\n            examinationData.refetch()\n            setIsDisabled(false);\n        }, 100)\n    }\n\n    const handleCloseModal = () => {\n        setShowOptometristModal(false)\n        setExaminationToUpdate(null)\n    }\n\n    \n    const handleGetPDF = (e, examId) => {\n        e.preventDefault()\n\n        getPDF(examId)\n    }\n\n    useEffect(() => {\n        if (!examinationData.isLoading) {\n            if (examinationData.response) {\n                setExaminations(examinationData.response.exams)\n            }\n        }\n    }, [examinationData.isLoading])\n\n    return (\n        <ExaminationsOverviewContainer>\n            {showOptometristModal && <OptometristExaminationModal\n                userId={params.id}\n                examinationToUpdate={examinationToUpdate}\n                refetch={examinationData.refetch}\n                close={handleCloseModal}\n            />}\n            <Header>\n                <h2>Vyšetrenia</h2>\n                <div>\n                    <AddButton type='button' onClick={() => setShowOptometristModal(true)}>Pridať prehliadku</AddButton>\n                </div>\n            </Header>\n\n\n            <div>\n                {examinations && examinations.map((examination, idx) => (\n                    <ExaminationContainer key={idx}>\n                        <ExamHead>\n                            <h3>Dátum:</h3>\n                            <p>{new Date(examination?.date).toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric' })}</p>\n                        </ExamHead>\n                        <ExamHead>\n                            <h3>Typ vyšetrenia:</h3>\n                            <p>{examTypes[examination?.type - 1].name}</p>\n                        </ExamHead>\n\n                        <ExaminationOptions>\n                            <ExaminationUser userId={examination.doneBy} />\n                            <div>\n                                <PdfButton onClick={e => handleGetPDF(e, examination._id)}>PDF</PdfButton>\n                                <UpdateButton onClick={e => handleUpdateClick(e, examination._id)}>Upraviť</UpdateButton>\n\n                                <DeleteButton disabled={isDisabled} onClick={e => handleDelete(e, examination._id)}>\n                                    {isDisabled ? 'Mažem...' : 'Vymazať'}\n                                </DeleteButton>\n                            </div>\n                        </ExaminationOptions>\n                    </ExaminationContainer>\n                ))}\n            </div>\n        </ExaminationsOverviewContainer>\n    )\n}\n\nexport default ExaminationsOverview\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"Apl. KŠ\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","/app/src/components/parameters-table/parameters-table.component.jsx",["888","889","890","891","892"],"import React, { useEffect } from 'react'\n\nimport { formatfloatNumber } from '../../utils/warehouse.utils'\n\nimport {\n    TableContainer,\n    TitleCol,\n    Col,\n    OsContainer\n} from './parameters-table.styles'\n\nconst ParametersTable = ({ parameters, handleChange, disabledInputs = false }) => {\n    const checkParameters = (parameter, idx) => {\n        if (parameter.length === 0) {\n            return \"\"\n        }\n        if (parameter[idx] === 1001 || parameter[idx] === \"1001\") {\n            return \"\"\n        }\n\n        return parameter[idx]\n    }\n\n    const formatParameter = (e, idx) => {\n        if(e.target.value === \"\") return\n        const value = formatfloatNumber(e.target.value)\n        console.log(value)\n        handleChange({\n            target: {\n                value: value.includes(\"+\") ? `+${Number(value).toFixed(2)}` : Number(value).toFixed(2) < 0 ? Number(value).toFixed(2) : `+${Number(value).toFixed(2)}`,\n                name: e.target.name\n            }\n        }, idx)\n    }\n\n    const checkaAx = (parameter, idx) => {\n        if (parameter.length === 0) {\n            return \"\"\n        }\n        if (parameter[idx] === 1001 || parameter[idx] === '1001') {\n            return \"\"\n        }\n\n        return parameter[idx]\n    }\n\n    const formatAx = (e, idx) => {\n        if(e.target.value === \"\") return\n        const value = formatfloatNumber(e.target.value)\n        handleChange({\n            target: {\n                value: value,\n                name: e.target.name\n            }\n        }, idx)\n    }\n\n    useEffect(() => {\n        if (handleChange) {\n            if (parameters.addition[0] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))).toFixed(2)\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[0] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[1] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))).toFixed(2)\n                    }\n                }, 3)\n                return\n            }\n\n\n            if (parameters.addition[1] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 3)\n            }\n        }\n    }, [parameters.diopters[0], parameters.addition[0], parameters.diopters[1], parameters.addition[1]])\n\n    return (\n        <TableContainer>\n            <TitleCol>\n                <div>{\" \"}</div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n            </TitleCol>\n\n\n            <Col>\n                <div>sph</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.diopters, idx)}\n                                name=\"diopters\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>cyl</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.cylinder, idx)}\n                                name=\"cylinder\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>ax</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <OsContainer key={idx}>\n                            <input\n                                type='text'\n                                value={checkaAx(parameters.cylinderAxes, idx)}\n                                name=\"cylinderAxes\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatAx(e, idx)}\n\n\n                            />\n                        </OsContainer>\n                    )\n                })}\n            </Col>\n\n            \n            <Col>\n                <div>prizma</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.prism, idx)}\n                                name=\"prism\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>basis</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.basis, idx)}\n                                name=\"basis\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>addicia</div>\n\n                {[...Array(2)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.addition, idx)}\n                                name=\"addition\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>PD</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkaAx(parameters.distance, idx)}\n                                name=\"distance\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatAx(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>vys.</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkaAx(parameters.vys, idx)}\n                                name=\"vys\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatAx(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n        </TableContainer>\n    )\n}\n\nexport default ParametersTable\n","/app/src/components/profile-order-overview/profile-order-overview.component.jsx",[],"/app/src/utils/orders.utils.jsx",[],"/app/src/components/modal-get-lenses-data/modal-get-lenses-data.styles.jsx",[],"/app/src/components/modal-images/modal-images.styles.jsx",[],"/app/src/components/custom-form-switch/custom-form-switch.component.jsx",[],"/app/src/components/modal-booking/modal-booking.component.jsx",["893"],"import React, { useState, useContext, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport { BookingContext } from '../../context/booking/booking.context'\n\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\nimport { useFetchById } from '../../hooks/useFetch'\nimport {\n    formatBookingObj\n} from '../../utils/calendar.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    SubmitButton,\n    InputContainer,\n    ModalHeader,\n    CustomSelect\n} from './modal-booking.styles'\n\nconst BookingModal = ({ close, calendarId, refetch, selectedBooking }) => {\n    const { createBooking, updateBooking } = useContext(BookingContext)\n    const { response, isLoading } = useFetchById(\"api/booking/bookings\", selectedBooking, !selectedBooking)\n\n    const [booking, setBooking] = useState({})\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const handleBookingChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete booking[name]\n            setBooking({\n                ...booking\n            })\n            return\n        }\n\n        setBooking(prevValue => ({\n            ...prevValue,\n            [name]: value\n        }))\n    }\n\n    const handleSubmit = () => {\n        if (!booking?.name) return\n\n        if (isUpdating) {\n            let bookingToUpdate = formatBookingObj(booking)\n            updateBooking(bookingToUpdate, booking._id)\n        } else {\n            let bookingToAdd = {\n                ...booking,\n                calendar: calendarId\n            }\n            createBooking(bookingToAdd)\n        }\n\n        refetch()\n        close()\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response?.booking) {\n            setIsUpdating(true)\n            setBooking(response?.booking)\n        }\n    }, [selectedBooking, isLoading])\n\n    useEffect(() => {\n        return () => {\n            setIsUpdating(false)\n            setBooking({})\n        }\n    }, [])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <ModalHeader>\n                    {!isUpdating && <h2>Nové vyšetrenie</h2>}\n                    {isUpdating && <h2>Upraviť vyšetrenie</h2>}\n                    <div>\n                        <CustomCheckbox\n                            label=\"Aktívne\"\n                            isActive={booking?.active || false}\n                            name='active'\n                            handleClick={() => handleBookingChange({\n                                target: {\n                                    name: 'active',\n                                    value: booking?.active ? !booking?.active : true\n                                }\n                            })}\n                        />\n                    </div>\n                </ModalHeader>\n                <InputContainer>\n                    <CustomInput\n                        label=\"Názov vyšetrenia*\"\n                        name=\"name\"\n                        value={booking?.name || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                <InputContainer>\n                    <CustomInput\n                        label=\"Cena\"\n                        name=\"price\"\n                        value={booking?.price || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                <InputContainer>\n                    <CustomInput\n                        label=\"Čas\"\n                        name=\"time\"\n                        value={booking?.time || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                <InputContainer>\n                    <CustomSelect\n                        label=\"Farba\"\n                        type='text'\n                        name='color'\n                        value={booking?.color || \"\"}\n                        onChange={handleBookingChange}\n                    >\n                        <option value='DD4C4C'>Červená</option>\n                        <option value='ebac01'>Žltá</option>\n                        <option value='32AA5F'>Zelená</option>\n                        <option value='1e90ff'>Modrá</option>\n                        <option value='a4b0be'>Šedá</option>\n                    </CustomSelect>\n                </InputContainer>\n                <InputContainer>\n                    <CustomTextarea\n                        label=\"Popis\"\n                        rows='5'\n                        name=\"description\"\n                        value={booking?.description || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                {!isUpdating && <SubmitButton onClick={handleSubmit}>Pridať</SubmitButton>}\n                {isUpdating && <SubmitButton onClick={handleSubmit}>Uložiť</SubmitButton>}\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById(\"portal\"))\n}\n\nexport default BookingModal\n","/app/src/components/calendar-booked-day/calendar-booked-day.component.jsx",["894","895"],"import React, { useState, useEffect } from 'react'\nimport stringSimilarity from \"string-similarity\"\n\n\n// import Spinner from '../spinner/spinner.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    BookedDayContainer\n} from './calendar-booked-day.styles'\n\nconst CalendarBookedDay = ({ dayData, calendarId, time, userBookings, open }) => {\n    const [isHalfHour, setIsHalfHour] = useState(false)\n    const { response, isLoading, refetch } = useFetchByQuery(`api/booking/calendars/${calendarId}/dayInfo`, {\n        date: dayData.bookingDate\n    }, !dayData?.bookingDate)\n    const [appointment, setAppointment] = useState(null)\n    const [isValidDueTime, setIsValiDueTime] = useState(false)\n    // const [isBelongToAnother, setIsBelongToAnother] = useState(false)\n\n    useEffect(() => {\n        if (isLoading) return\n        const bookingsDueTime = response?.userBookings?.filter(booking => !booking?.cancelled).map(booking => booking?.dueTime)\n\n        if (bookingsDueTime?.length > 0) {\n            const matches = stringSimilarity.findBestMatch(userBookings?.dueDate, bookingsDueTime);\n\n            const exactBooking = response?.userBookings?.find(booking => booking?.dueTime === userBookings?.dueDate)\n            const todayBooking = response?.userBookings?.find(booking => booking?.dueTime === matches?.bestMatch?.target)\n\n            if (userBookings?.dueDate === exactBooking?.dueTime) {\n                setIsValiDueTime(true)\n            } else if (matches?.bestMatch?.target === todayBooking?.dueTime) {\n                // setIsBelongToAnother(true)\n            }\n\n            setAppointment(exactBooking)\n\n        }\n\n    }, [isLoading])\n\n    useEffect(() => {\n        if (!dayData?.bookingDate) return\n        refetch()\n    }, [dayData?.bookingDate])\n\n    useEffect(() => {\n        return () => {\n            setIsHalfHour(false)\n            setIsValiDueTime(false)\n        }\n    }, [])\n\n    return (\n        <React.Fragment>\n            <BookedDayContainer onClick={isValidDueTime ? open : () => { }} color={appointment?.booking?.color ? `#${appointment?.booking?.color}` : `var(--appointment-container-background-color)`} isHalfHour={isHalfHour}>\n                {/* <BookedDayContainer onClick={() => console.log(appointment)} color={appointment?.booking?.color ? `#${appointment?.booking?.color}` : `#${response?.userBookings[0]?.booking?.color}`} isHalfHour={isHalfHour}> */}\n                {isValidDueTime && <div>\n                    <h4>{appointment && appointment?.booking?.name}</h4>\n                    <h5>{time}</h5>\n                </div>}\n                {/* {(isBelongToAnother && !isValidDueTime) && <div>\n                    <h4>Test</h4>\n                </div>} */}\n\n            </BookedDayContainer>\n        </React.Fragment>\n    )\n}\n\nexport default CalendarBookedDay\n","/app/src/components/modal-user-bookings/modal-user-booking.component.jsx",["896","897"],"/app/src/components/modal-userbookings-details/modal-userbookings-details.component.jsx",["898","899"],"/app/src/components/modal-update-registry/modal-update-registry.styles.jsx",[],"/app/src/components/custom-checkbox/custom-checkbox.styles.jsx",[],"/app/src/components/custom-textarea/custom-textarea.styles.jsx",[],"/app/src/sections/order/steps/4-summary/summary.styles.jsx",[],"/app/src/sections/order/steps/3-select-lenses/select-lenses.styles.jsx",[],"/app/src/sections/order/steps/2-select-product/select-product.styles.jsx",[],"/app/src/sections/order/steps/1-select-user/select-user.styles.jsx",[],"/app/src/components/order-summary-lenses-name/order-summary-lenses-name.component.jsx",[],"/app/src/components/modal-finish-order/modal-finish-order.component.jsx",["900"],"import React, { useState, useEffect } from 'react'\n\nimport {\n    formatPrice\n} from '../../utils/warehouse.utils'\n\nimport CustomInput from '../custom-input/custom-input.component'\n\nimport {\n    Modal,\n    AddButton,\n    CustomSelect,\n    OptionsCheckbox,\n    OverwriteAddressCheckbox,\n    DiscountCheckboxContainer,\n    CouponValueContainer\n} from './modal-finish-order.styles'\n\nconst FinishOrderModal = ({\n    order,\n    combinedProducts,\n    createOrder,\n    setHasChanged,\n    isUpdating,\n    updateOrder,\n    note\n}) => {\n    const [orderDetail, setOrderDetails] = useState({\n        paymentType: \"cash\"\n    })\n    const [hasDeposit, setHasDeposit] = useState(false)\n    const [hasCoupon, setHasCoupon] = useState(false)\n    const [overwrite, setOverwrite] = useState(false)\n\n    const toggleDeposit = prevValue => {\n        if (prevValue) {\n            setHasDeposit(false)\n            if (orderDetail.paidAlready) {\n                delete orderDetail[\"paidAlready\"]\n                setOrderDetails({\n                    ...orderDetail\n                })\n            }\n        } else {\n            setHasDeposit(true)\n        }\n    }\n\n    const toggleCoupon = prevValue => {\n        if (prevValue) {\n            setHasCoupon(false)\n            if (orderDetail.couponValue) {\n                delete orderDetail[\"couponValue\"]\n                setOrderDetails({\n                    ...orderDetail\n                })\n            }\n        } else {\n            setHasCoupon(true)\n        }\n    }\n\n    const toggleOverwriteAddress = prevValue => {\n        if (prevValue) {\n            setOverwrite(false)\n            if (orderDetail.overwrite) {\n                delete orderDetail[\"overwrite\"]\n                setOrderDetails({\n                    ...orderDetail\n                })\n            }\n        } else {\n            setOverwrite(true)\n        }\n    }\n\n    const handleOrderDetailChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete orderDetail[name]\n            setOrderDetails({\n                ...orderDetail\n            })\n            return\n        }\n\n        setOrderDetails({\n            ...orderDetail,\n            [name]: value\n        })\n\n    }\n\n    const handleAddressOverwriteChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete orderDetail.overwrite[name]\n            setOrderDetails({\n                ...orderDetail\n            })\n            return\n        }\n\n        setOrderDetails({\n            ...orderDetail,\n            overwrite: {\n                ...orderDetail.overwrite,\n                [name]: value\n            }\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        if (isUpdating) {\n            let orderObj = {\n                ...orderDetail,\n                ...(note) && { note: note }\n\n            }\n\n            // console.log(orderObj)\n\n\n            delete orderObj['paymentType']\n            delete orderObj['shouldDeliver']\n\n            setHasChanged(false)\n            updateOrder(orderObj, order.order._id)\n\n        } else {\n            let orderObj = {\n                ...orderDetail,\n                user: order.user._id,\n                combinedProducts: combinedProducts.map(product => product._id),\n                status: hasDeposit ? \"half-paid\" : \"paid\",\n                note: note\n            }\n\n            console.log(\"note\")\n            console.log(note)\n\n            if (orderDetail.couponValue) {\n\n                orderObj = {\n                    ...orderObj,\n                    couponValue: formatPrice(orderDetail.couponValue),\n                    // paidAlready: orderObj.paidAlready + orderDetail.couponValue\n                }\n            }\n            if (orderDetail.paidAlready) {\n                let price = 0\n                if (orderDetail.couponValue) {\n                    price = formatPrice(orderDetail.couponValue) + formatPrice(orderDetail.paidAlready)\n                } else {\n                    price = formatPrice(orderDetail.paidAlready)\n                }\n\n                orderObj = {\n                    ...orderObj,\n                    paidAlready: price\n                }\n            }\n\n            setHasChanged(false)\n            createOrder(orderObj)\n        }\n    }\n\n    useEffect(() => {\n        if (isUpdating) {\n            if (order?.order) {\n                handleOrderDetailChange({\n                    target: {\n                        name: 'shouldDeliver',\n                        value: order?.order?.shouldDeliver\n                    }\n                })\n                handleOrderDetailChange({\n                    target: {\n                        name: 'buyingAsCompany',\n                        value: order?.order?.buyingAsCompany\n                    }\n                })\n            }\n        }\n    }, [isUpdating, order])\n\n    useEffect(() => {\n        return () => {\n            setOrderDetails({\n                paymentType: \"cash\"\n            })\n            setHasDeposit(false)\n            setOverwrite(false)\n        }\n    }, [])\n\n    return (\n        <Modal>\n            <h2>{isUpdating ? \"Upraviť objednávku\" : 'Dokončiť objednávku'}</h2>\n\n            {!isUpdating && <div>\n                <h4>Spôsob platby</h4>\n\n                <CustomSelect\n                    name='paymentType'\n                    value={orderDetail?.paymentType ?? \"cash\"}\n                    onChange={(e) => handleOrderDetailChange(e)}\n                >\n                    <option value={\"cash\"}>Hotovosť</option>\n                    <option value={\"card\"}>Karta</option>\n                </CustomSelect>\n\n                <DiscountCheckboxContainer>\n                    <input id=\"hasCoupon\" name='hasCoupon' type='checkbox' value={hasCoupon} onChange={() => toggleCoupon(hasCoupon)} />\n                    <label htmlFor='hasCoupon'>Pridať kupón</label>\n                </DiscountCheckboxContainer>\n\n                {hasCoupon && (\n                    <CouponValueContainer>\n                        <CustomInput\n                            label=\"Hodnota kupónu\"\n                            name=\"couponValue\"\n                            type='text'\n                            value={orderDetail?.couponValue || \"\"}\n                            onChange={e => handleOrderDetailChange(e)}\n                        />\n                    </CouponValueContainer>\n                )}\n\n                <DiscountCheckboxContainer>\n                    <input id=\"hasDeposit\" name='hasDeposit' type='checkbox' value={hasDeposit} onChange={() => toggleDeposit(hasDeposit)} />\n                    <label htmlFor='hasDeposit'>Pridať zálohu</label>\n                </DiscountCheckboxContainer>\n\n                {hasDeposit && (\n                    <CustomInput\n                        label=\"Zaplatená záloha\"\n                        name=\"paidAlready\"\n                        type='text'\n                        value={orderDetail?.paidAlready ?? \"\"}\n                        onChange={e => handleOrderDetailChange(e)}\n                    />\n                )}\n            </div>\n            }\n            <div>\n                <h4>Informácie o doručení</h4>\n                {!isUpdating && <OptionsCheckbox\n                    label={\"Doručiť na adresu\"}\n                    isActive={orderDetail?.shouldDeliver}\n                    handleClick={() => handleOrderDetailChange({\n                        target: {\n                            name: 'shouldDeliver',\n                            value: orderDetail?.shouldDeliver ? !orderDetail?.shouldDeliver : true\n                        }\n                    })}\n                />}\n                <OptionsCheckbox\n                    label={\"Nákup na firmu\"}\n                    isActive={orderDetail?.buyingAsCompany}\n                    handleClick={() => handleOrderDetailChange({\n                        target: {\n                            name: 'buyingAsCompany',\n                            value: orderDetail?.buyingAsCompany ? !orderDetail?.buyingAsCompany : true\n                        }\n                    })}\n                />\n\n                {orderDetail?.shouldDeliver && (\n                    <div>\n                        <h4>Adresa</h4>\n                        <p>{order.user.psc}</p>\n                        <p>{order.user.address}</p>\n                        <p>{order.user.city}</p>\n                        <p>{order.user.country}</p>\n\n                        <div>\n                            <OverwriteAddressCheckbox>\n                                <input id=\"overwrite\" name='overwrite' type='checkbox' value={overwrite} onChange={() => toggleOverwriteAddress(overwrite)} />\n                                <label htmlFor='overwrite'>Iná adresa</label>\n                            </OverwriteAddressCheckbox>\n\n                            {overwrite && (\n                                <div>\n                                    <CustomInput\n                                        label=\"Adresa\"\n                                        name=\"address\"\n                                        type='text'\n                                        value={orderDetail?.overwrite?.address ?? \"\"}\n                                        onChange={e => handleAddressOverwriteChange(e)}\n                                    />\n                                    <CustomInput\n                                        label=\"PSČ\"\n                                        name=\"psc\"\n                                        type='text'\n                                        value={orderDetail?.overwrite?.psc ?? \"\"}\n                                        onChange={e => handleAddressOverwriteChange(e)}\n                                    />\n                                    <CustomInput\n                                        label=\"Mesto\"\n                                        name=\"city\"\n                                        type='text'\n                                        value={orderDetail?.overwrite?.city ?? \"\"}\n                                        onChange={e => handleAddressOverwriteChange(e)}\n                                    />\n                                    <CustomInput\n                                        label=\"Štát\"\n                                        name=\"country\"\n                                        type='text'\n                                        value={orderDetail?.overwrite?.country ?? \"\"}\n                                        onChange={e => handleAddressOverwriteChange(e)}\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                )}\n            </div>\n\n            {isUpdating && <AddButton onClick={handleSubmit}>Upraviť objednávku</AddButton>}\n            {!isUpdating && <AddButton onClick={handleSubmit}>Vytvoriť objednávku</AddButton>}\n        </Modal>\n    )\n}\n\nexport default FinishOrderModal\n","/app/src/components/modal-order-update-user/modal-order-update-user.component.jsx",["901","902"],"import React, { useContext, useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { UserContext } from '../../context/user/user.context'\n\nimport UserForm from '../user-form/user-form.component'\n\nimport {\n    CloseButton,\n    Modal,\n    ModalContainer,\n    UpdateButton\n} from './modal-order-update-user.styles'\n\nconst OrderUpdateUserModal = ({ close, userId, refetchUser, addUser }) => {\n    const { isAdmin, isOptometrist } = useContext(AuthContext)\n    const {\n        user,\n        isUpdating,\n        handleChange,\n        handleParameterChange,\n        handleCompanyChange,\n        getUser,\n        updateUser\n    } = useContext(UserContext)\n\n    const [userObj, setUserObj] = useState({})\n    // const [hasChanges, setHasChanges] = useState(false)\n\n    const handleUserChange = (e) => {\n        // setHasChanges(true)\n        const { name, value } = e.target\n\n        handleChange(e)\n\n\n        if (value === '') {\n            delete userObj[name]\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            [name]: value\n        })\n    }\n\n    const handleLensesParameterChange = (e, idx) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value\n\n\n        handleParameterChange(e, idx)\n        setUserObj({\n            ...userObj,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleCompanyAddressChange = (e) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        handleCompanyChange(e)\n\n        if (value === '') {\n            delete userObj.company[name]\n            if (Object.keys(userObj.company).length === 0) {\n                delete userObj[\"company\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            company: {\n                ...userObj.company,\n                [name]: value\n            }\n        })\n    }\n\n    const handleSubmit = (e, path) => {\n        e.preventDefault()\n        // setHasChanges(false)\n\n        console.log(userObj)\n\n        if (userObj.fName || userObj.lName) {\n            delete userObj[\"fName\"]\n            delete userObj[\"lName\"]\n        } else if (!userObj.fName || !userObj.lName) {\n            delete userObj[\"name\"]\n        }\n\n        let newUserObj = {\n            ...userObj,\n        }\n\n        if (userObj.company) {\n            newUserObj = {\n                ...userObj,\n                company: {\n                    ...user.company,\n                    ...userObj.company\n                }\n            }\n        }\n\n        updateUser(newUserObj, user._id, \"isOrder\", refetchUser, close, addUser)\n    }\n\n    useEffect(() => {\n        setUserObj({\n            ...userObj,\n            name: user.fName + \" \" + user.lName\n        })\n    }, [userObj.fName, userObj.lName])\n\n    useEffect(() => {\n        if (userId) {\n            getUser(userId)\n        }\n    }, [userId])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <UserForm\n                    user={user}\n                    isAdmin={isAdmin}\n                    isUpdating={isUpdating}\n                    isOptometrist={isOptometrist}\n                    handleChange={handleUserChange}\n                    handleParameterChange={handleLensesParameterChange}\n                    handleCompanyChange={handleCompanyAddressChange}\n                    isOrder={true}\n                    isCustomer={true}\n\n                />\n\n                <UpdateButton onClick={handleSubmit}>Uložiť</UpdateButton>\n            </Modal>\n        </ModalContainer >\n    ), document.getElementById('portal'))\n}\n\nexport default OrderUpdateUserModal\n","/app/src/components/order-summary-product-name/order-summary-product-name.component.jsx",[],"/app/src/components/order-cart-lenses-row/order-cart-lenses-row.component.jsx",["903","904"],"import React, { useContext, useState } from 'react'\nimport { OrderContext } from '../../context/order/order.context'\nimport CustomInput from '../custom-input/custom-input.component'\n\nimport {\n    AiOutlineLeft,\n    AiOutlineRight\n} from 'react-icons/ai'\n\nimport {\n    AiFillCaretDown\n} from 'react-icons/ai'\n\nimport {\n    CartTableRow,\n    // DiscountCheckbox,\n    // DiscountContainer,\n    // IconContainer,\n    // OptionsContainer,\n    DiscountCheckbox,\n    DiscountCheckboxContainer,\n    DiscountContainer,\n    TableCol,\n    QuantityContainer,\n    IconContainer,\n    OptionsContainer\n} from './order-cart-lenses-row.styles'\n\nconst CartLensesRow = ({ idx, item }) => {\n    const {\n        selectProduct,\n        selectedProduct,\n        addLensesDiscount,\n        deleteProduct,\n        incrementQuantity,\n        decrementQuantity,\n    } = useContext(OrderContext)\n\n    \n    const [showRow, setShowRow] = useState(false)\n    const [discountType, setDiscountType] = useState(item?.discount?.lenses?.flat ? \"flat\" : \"percent\")\n    const [includeDiscount, setIncludeDiscount] = useState(true)\n\n    const handleChangeDiscount = (type, e) => {\n        e.stopPropagation()\n\n        // setProductDiscount({})\n        setDiscountType(type)\n        addLensesDiscount(idx, type, \"0\")\n\n    }\n\n    const handleClick = (e) => {\n        e.stopPropagation()\n        setShowRow(prevValue => !prevValue)\n    }\n\n\n\n    const handleSelectProduct = (itemIdx, e) => {\n        if (item.product.type === 3 || item.product.type === 4 || item.product.type === 5 || item.product.isPseudo) return\n        selectProduct(itemIdx, e)\n    }\n\n    const handleDeleteProduct = (item) => {\n\n        deleteProduct(item, handleSelectProduct)\n    }\n\n    return (\n        <CartTableRow isSelected={selectedProduct === idx} onClick={(e) => handleSelectProduct(idx, e)}>\n            <TableCol onClick={() => handleDeleteProduct(idx)} >{idx + 1}</TableCol>\n            <TableCol>{item?.product?.name}</TableCol>\n            <TableCol>{item?.lens?.name}</TableCol>\n            <TableCol>\n                {item?.lens?.price ? (\n                    `${(item?.lens?.price / 100).toFixed(2)}€`\n                ) : (\n                        \"\"\n                    )}\n                { }\n            </TableCol>\n            <TableCol>\n                {item?.lensesQuant && <QuantityContainer>\n                    <button onClick={(e) => decrementQuantity(item?.lensesQuant, idx, e)}><AiOutlineLeft /></button>\n                    <p>{item?.lensesQuant}</p>\n                    <button onClick={(e) => incrementQuantity(item?.lensesQuant, idx, e)}><AiOutlineRight /></button>\n                </QuantityContainer>}\n            </TableCol>\n            <TableCol>\n                {/* <input\n                    // placeholder='%'\n                    value={item?.discount?.lenses ? item?.discount.lenses.percent : ''}\n                    onChange={(e) => addLensesDiscount(idx, e.target.value)}\n                /> */}\n                {item?.lensesQuant && <IconContainer onClick={handleClick}>\n                    <AiFillCaretDown />\n                </IconContainer>}\n            </TableCol>\n            {showRow && (\n                <OptionsContainer>\n                \n                         <DiscountContainer>\n                            {/* <DiscountCheckboxContainer>\n                                <input id=\"discount\" name='discount' type='checkbox' value={includeDiscount} onChange={(e) => {\n                                    e.stopPropagation()\n                                    setIncludeDiscount(!includeDiscount)\n                                }} />\n                                <label htmlFor='discount'>Pridať zlavu pre šosovky</label>\n                            </DiscountCheckboxContainer> */}\n                            {includeDiscount && <div>\n                                <h4>Zlava pre šosovky</h4>\n                                <div>\n                                    <DiscountCheckbox\n                                        label={\"Fixná suma\"}\n                                        value={\"flat\"}\n                                        name='flat'\n                                        isActive={discountType === 'flat'}\n                                        handleClick={(e) => handleChangeDiscount('flat', e)}\n                                    />\n                                    <DiscountCheckbox\n                                        label={\"Percertá\"}\n                                        value={\"percent\"}\n                                        name='percent'\n                                        isActive={discountType === 'percent'}\n                                        handleClick={(e) => handleChangeDiscount('percent', e)}\n                                    />\n                                </div>\n                                <div>\n                                    <CustomInput\n                                        label='Hodnota'\n                                        value={item?.discount?.lenses ? item?.discount.lenses[discountType] : ''}\n                                        onChange={(e) => {\n                                            addLensesDiscount(idx, discountType, e.target.value)\n                                        }}\n                                    />\n                                </div>\n                            </div>}\n                        </DiscountContainer>\n                </OptionsContainer>\n            )}\n        </CartTableRow>\n    )\n}\n\nexport default CartLensesRow\n","/app/src/components/custom-back-button/custom-back-button.component.jsx",[],"/app/src/components/order-cart-row/order-cart-row.component.jsx",["905","906","907","908","909","910","911"],"import React, { useState, useEffect, useContext } from 'react'\nimport { OrderContext } from '../../context/order/order.context'\n\nimport CustomInput from '../custom-input/custom-input.component'\n\nimport {\n    AiOutlineLeft,\n    AiOutlineRight\n} from 'react-icons/ai'\n\nimport {\n    AiFillCaretDown\n} from 'react-icons/ai'\n\nimport { formatPrice } from '../../utils/warehouse.utils'\n\nimport {\n    CartTableRow,\n    TableCol,\n    IconContainer,\n    OptionsContainer,\n    ContactLensesParameterContainer,\n    CustomSelect,\n    EmptyTittle,\n    DiscountCheckbox,\n    DiscountCheckboxContainer,\n    DiscountContainer,\n    QuantityContainer\n} from './order-cart-row.styles'\n\nconst CartRow = ({ item, idx }) => {\n    const { deleteProduct, addProductDiscount, addLensesParameters, incrementProductQuantity, decrementProductQuantity } = useContext(OrderContext)\n\n    const [showRow, setShowRow] = useState(false)\n    const [contactLenses, setContactLenses] = useState({})\n\n    const [discountType, setDiscountType] = useState(item?.discount?.product?.flat === '' ? \"flat\" : \"percent\")\n    const [productDiscount, setProductDiscount] = useState({})\n    const [includeDiscount, setIncludeDiscount] = useState(true)\n\n\n    const handleChangeDiscount = (type) => {\n        // setProductDiscount({})\n        setDiscountType(type)\n        addProductDiscount(idx, type, \"0\")\n\n    }\n    // const handleChangeLensesDiscount = (type) => {\n    //     setLensesDiscount({})\n    //     setLensDiscountType(type)\n    // }\n\n    // const handleDiscountChange = (e) => {\n    //     const { name, value } = e.target\n\n\n    //     if (value === '') {\n    //         delete productDiscount[name]\n\n    //         setProductDiscount({\n    //             ...productDiscount,\n    //         })\n    //         return\n    //     }\n\n    //     setProductDiscount({\n    //         ...productDiscount,\n    //         [name]: value\n    //     })\n    // }\n\n\n    const handleClick = () => {\n        setShowRow(prevValue => !prevValue)\n    }\n\n    const handleContactLensesParameterChange = (e, idx, originalArr) => {\n        const { name, value } = e.target\n        let arr = originalArr\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        setContactLenses({\n            ...contactLenses,\n            [name]: arr\n        })\n    }\n\n    useEffect(() => {\n        addLensesParameters(idx, contactLenses)\n    }, [contactLenses])\n\n    useEffect(() => {\n        if (item.product.type) {\n            if (item.product.type === 3) {\n                setContactLenses({\n                    curve: [item.product.contactLenses.allowedCurves[0], item.product.contactLenses.allowedCurves[0]],\n                    diameter: [item.product.contactLenses.allowedDiameters[0], item.product.contactLenses.allowedDiameters[0]],\n                    diopters: [0, 0]\n                })\n            }\n        }\n    }, [item.product])\n\n    return (\n        <CartTableRow >\n            <TableCol onClick={() => deleteProduct(idx)}>{idx + 1}</TableCol>\n            <TableCol>\n                {item?.product?.name ? item?.product?.name : \"Šošovky\"}\n            </TableCol>\n            <TableCol>\n                {item?.product?.price ? `${(item?.product?.price / 100).toFixed(2)}€` : \"\"}\n            </TableCol>\n            <TableCol>\n                {/* <div>\n                    <input\n                        value={item?.discount?.product ? item?.discount.product.percent : ''}\n                        onChange={(e) => addProductDiscount(idx, e.target.value)}\n                    />\n                </div> */}\n                {(item.product.type === 5 || item.product.type === 6) && <QuantityContainer>\n                    <button onClick={(e) => decrementProductQuantity(item?.productQuant, idx, e)}><AiOutlineLeft /></button>\n                    <p>{item?.productQuant}</p>\n                    <button onClick={(e) => incrementProductQuantity(item?.productQuant, idx, e)}><AiOutlineRight /></button>\n                </QuantityContainer>}\n            </TableCol>\n            <TableCol>\n                <IconContainer onClick={handleClick}>\n                    <AiFillCaretDown />\n                </IconContainer>\n            </TableCol>\n            {showRow && (\n                <OptionsContainer>\n                \n                         <DiscountContainer>\n                            {/* <DiscountCheckboxContainer>\n                                <input id=\"discount\" name='discount' type='checkbox' value={includeDiscount} onChange={() => setIncludeDiscount(!includeDiscount)} />\n                                <label htmlFor='discount'>Pridať zlavu pre produkt</label>\n                            </DiscountCheckboxContainer> */}\n                            {includeDiscount && <div>\n                                <h4>Zlava pre produkt</h4>\n                                <div>\n                                    <DiscountCheckbox\n                                        label={\"Fixná suma\"}\n                                        value={\"flat\"}\n                                        name='flat'\n                                        isActive={discountType === 'flat'}\n                                        handleClick={() => handleChangeDiscount('flat')}\n                                    />\n                                    <DiscountCheckbox\n                                        label={\"Percertá\"}\n                                        value={\"percent\"}\n                                        name='percent'\n                                        isActive={discountType === 'percent'}\n                                        handleClick={() => handleChangeDiscount('percent')}\n                                    />\n                                </div>\n                                <div>\n                                    <CustomInput\n                                        label='Hodnota'\n                                        value={item?.discount?.product ? item?.discount.product[discountType] : ''}\n                                        onChange={(e) => {\n                                            addProductDiscount(idx, discountType, e.target.value)\n                                        }}\n                                    />\n                                </div>\n                            </div>}\n                        </DiscountContainer>\n                \n                    {/* {(item.product.type === 1 || item.product.type === 2) && (\n                        <div>\n                            <EmptyTittle>Žiadne možnosti</EmptyTittle>\n                        </div>\n                    )} */}\n                    {item.product.type === 3 && (\n                        <ContactLensesParameterContainer>\n                            <div>\n                                <h4>Ľave oko</h4>\n                                <CustomSelect\n                                    name='curve'\n                                    value={contactLenses.curve[0]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 0, contactLenses.curve)}\n                                >\n                                    {item.product.contactLenses.allowedCurves.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n                                <CustomSelect\n                                    name='diameter'\n                                    value={contactLenses.diameter[0]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 0, contactLenses.diameter)}\n                                >\n                                    {item.product.contactLenses.allowedDiameters.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n\n                                <CustomInput\n                                    name='diopters'\n\n                                    type='number'\n                                    value={contactLenses.diopters[0]}\n                                    min={item.product.contactLenses.dioptersRange[0]}\n                                    max={item.product.contactLenses.dioptersRange[1]}\n                                    step={.25}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 0, contactLenses.diopters)}\n                                />\n                            </div>\n                            <div>\n                                <h4>Pravé oko</h4>\n                                <CustomSelect\n                                    name='curve'\n                                    value={contactLenses.curve[1]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 1, contactLenses.curve)}\n                                >\n                                    {item.product.contactLenses.allowedCurves.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n                                <CustomSelect\n                                    name='diameter'\n                                    value={contactLenses.diameter[1]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 1, contactLenses.diameter)}\n                                >\n                                    {item.product.contactLenses.allowedDiameters.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n                                <CustomInput\n                                    type='number'\n                                    value={contactLenses.diopters[1]}\n                                    min={item.product.contactLenses.dioptersRange[0]}\n                                    max={item.product.contactLenses.dioptersRange[1]}\n                                    step={.25}\n                                    name='diopters'\n                                    onChange={(e) => handleContactLensesParameterChange(e, 1, contactLenses.diopters)}\n                                />\n                            </div>\n                        </ContactLensesParameterContainer>\n                    )}\n                </OptionsContainer>\n            )}\n        </CartTableRow>\n    )\n}\n\nexport default CartRow\n","/app/src/hooks/useOutsideAlerter.jsx",["912"],"import React, { useRef, useEffect } from \"react\";\n\nexport const useOutsideHandler = (ref, action) => {\n    useEffect(() => {\n        const handleClickOutside = e => {\n            if (ref.current && !ref.current.contains(e.target)) {\n                action()\n            }\n        }\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n\n    }, [ref])\n}\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\nfunction useOutsideAlerter(ref) {\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                alert(\"You clicked outside of me!\");\n            }\n        }\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref]);\n}\n\n/**\n * Component that alerts if you click outside of it\n */\nfunction OutsideAlerter(props) {\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef);\n\n    return <div ref={wrapperRef}>{props.children}</div>;\n}\n\nexport default OutsideAlerter;\n","/app/src/components/examinations-overview/examinations-overview.styles.jsx",[],"/app/src/components/parameters-table/parameters-table.styles.jsx",[],"/app/src/components/profile-order-overview/profile-order-overview.styles.jsx",[],"/app/src/components/modal-booking/modal-booking.styles.jsx",[],"/app/src/components/calendar-booked-day/calendar-booked-day.styles.jsx",[],"/app/src/components/custom-form-switch/custom-form-switch.styles.jsx",[],"/app/src/components/order-deligate-modal/order-deligate-modal.component.jsx",["913"],"import React, { useState, useContext } from 'react'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport ReactDOM from 'react-dom'\n\nimport Popup from '../popup/pop-up.component'\n\nimport { retailNames } from '../../utils/warehouse.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    CustomSelect,\n    SubmitButton\n} from './order-deligate-modal.styles'\n\n\nconst OrderDeligateModal = ({ close, premise, id, refetch }) => {\n    const [value, setValue] = useState(premise)\n    const { token } = useContext(AuthContext)\n    const {\n        getMessage,\n        message,\n        isLoading,\n        setIsLoading,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    const handleClick = async () => {\n        setIsLoading(true)\n        const myHeaders = new Headers();\n        myHeaders.append(\"auth-token\", token);\n        myHeaders.append(\"Content-Type\", \"application/json\");\n\n        const raw = JSON.stringify({\n            premises: Number(value),\n        })\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${id}/delegate`, requestOptions)\n            // if (response.status === 400) {\n            //     getMessage(\"Faktúra musí byt zaplatená, aby mohla byť priradená prevádzke\")\n            // }\n            // if (response.status === 401) {\n            //     getMessage(\"Musíš byt vedúci, aby si mohol manipulovať s priradovanim\")\n            // }\n            const data = await response.json()\n\n            if (data.order) {\n                refetch()\n                setIsLoading(false)\n                close()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            setIsLoading(false)\n        }\n    }\n\n    if (isLoading || message) return <Popup loading={isLoading} title={message} close={closeModal} />\n\n    return ReactDOM.createPortal((\n        <ModalContainer >\n            <CloseButton onClick={close} />\n            <Modal>\n                <h3>Priradiť k prevádzke</h3>\n                <CustomSelect value={value} onChange={(e) => setValue(e.target.value)}>\n                    <option value={0}>Nezadané</option>\n                    {retailNames.map((name, idx) => {\n                        if (idx === 0) return\n                        return (\n                            <option key={idx} value={idx}>{name}</option>\n                        )\n                    })}\n                </CustomSelect>\n                <SubmitButton onClick={handleClick}>Priradiť</SubmitButton>\n            </Modal>\n        </ModalContainer >\n    ), document.getElementById('portal'))\n}\n\nexport default OrderDeligateModal\n","/app/src/components/modal-user-bookings/modal-user-booking.styles.jsx",[],"/app/src/components/modal-finish-deposited-order/modal-finish-deposited-order.component.jsx",[],"/app/src/components/modal-userbookings-details/modal-userbookings-details.styles.jsx",[],"/app/src/components/examination-user/examination-user.component.jsx",[],"/app/src/components/modal-optometrist-examination/modal-optometrist-examination.component.jsx",["914","915"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport lodash from 'lodash'\nimport examSchema from '../../context/examination/exam.json'\nimport { removeEmpty } from '../../utils/object.utils'\n\nimport { useExaminationContext } from '../../context/examination/examination.context'\nimport { useFetchById } from '../../hooks/useFetch'\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    checkParameter,\n    checkParameterValue\n} from '../../utils/parameters.utils'\n\nimport {\n    CloseButton,\n    Modal,\n    ModalContainer,\n    SubmitButton,\n    Container,\n    ExamTypeCheckbox,\n    TwoColContainer,\n    InputContainer,\n    IsSuitableCheckbox,\n    Col,\n    Table,\n    TableTitleCol,\n    TableCol,\n    // TableBlock,\n    ObjectiveRefTable,\n    SubjectiveRefTable,\n    ExamTable,\n    RefractTable,\n    KerathTable,\n    SubjectiveRefATable,\n    ContactLensesTable,\n    ContactLensesTypeTable\n} from './modal-optometrist-examination.styles'\n\nconst OptometristExaminationModal = ({ close, refetch, userId, examinationToUpdate }) => {\n    const exam = useFetchById('api/admin/exams', examinationToUpdate, !examinationToUpdate)\n    const isUpdating = examinationToUpdate ? true : false\n\n    const {\n        createExamination,\n        updateExamination\n    } = useExaminationContext()\n\n    const [examObj, setExamObj] = useState(null)\n\n    const handleChange = (e) => {\n        const { value, name } = e.target\n\n        if(value === '') {\n            const obj = lodash.set(examObj, name, \"1001\")\n            setExamObj({\n                ...obj\n            })\n        } else {\n            const obj = lodash.set(examObj, name, value)\n            setExamObj({\n                ...obj\n            })\n        }\n    }\n\n    const handleSubmit = () => {\n        const formatedObj = {\n            ...removeEmpty(examObj),\n            doneTo: userId,\n            refrakcia: {\n                ...removeEmpty(examObj.refrakcia)\n            },\n            anamneza: {\n                ...removeEmpty(examObj.anamneza)\n            },\n            kontrola: {\n                ...removeEmpty(examObj.kontrola)\n            }\n        }\n\n        if (examObj.type === 1) {\n            delete formatedObj[\"anamneza\"]\n            delete formatedObj[\"kontrola\"]\n        }\n        if (examObj.type === 2) {\n            delete formatedObj[\"refrakcia\"]\n            delete formatedObj[\"kontrola\"]\n        }\n        if (examObj.type === 3) {\n            delete formatedObj[\"refrakcia\"]\n            delete formatedObj[\"anamneza\"]\n        }\n\n        if (isUpdating) {\n            delete formatedObj['date']\n            delete formatedObj['doneTo']\n            delete formatedObj['doneBy']\n            delete formatedObj['__v']\n            delete formatedObj['_id']\n\n            updateExamination(formatedObj, examinationToUpdate, () => {\n                refetch()\n                close()\n            })\n        } else {\n            createExamination(formatedObj, () => {\n                refetch()\n                close()\n            })\n        }\n\n    }\n\n    useEffect(() => {\n        // if(!examObj) return\n        if (!examinationToUpdate) return\n        if (exam.isLoading) return\n        if (!exam.response) return\n        setExamObj(prevValue => ({\n            ...prevValue,\n            ...exam.response.exam,\n            refrakcia: {\n                ...prevValue.refrakcia,\n                ...exam.response.exam.refrakcia,\n            },\n            anamneza: {\n                ...prevValue.anamneza,\n                ...exam.response.exam.anamneza,\n            },\n            kontrola: {\n                ...prevValue.kontrola,\n                ...exam.response.exam.kontrola,\n            }\n        }))\n\n    }, [exam.isLoading])\n\n    useEffect(() => {\n        // if(examinationToUpdate) return\n        if (!examSchema) return\n        setExamObj({\n            date: \"\",\n            doneBy: \"\",\n            doneTo: \"\",\n            type: 1,\n            refrakcia: {\n                nosi_od: \"\",\n                posledna_korekcia: \"\",\n                vyhovuje: false,\n                typ_sposob: \"\",\n                anamneza: \"\",\n                dopl_info: \"\",\n                vlastne_okuliare: {\n                    vnatur: [\"1001\", \"1001\"],\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visus: [\"1001\", \"1001\"],\n                    vbino: \"1001\"\n                },\n                objektivna_refrakcia: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    se: [\"1001\", \"1001\"],\n                    pd:[\"1001\",\"1001\"]\n\n                },\n                subjektivna_refrakcia: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visus: [\"1001\", \"1001\"],\n                    vbino: \"1001\",\n                    vbl: \"1001\",\n                    prizma: [\"1001\", \"1001\"],\n                    basis: [\"1001\", \"1001\"],\n                    os: [\"1001\", \"1001\"],\n                    domoko: \"0\"\n                }\n            },\n            anamneza: {\n                nosi_od: \"\",\n                posledna_korekcia: \"\",\n                vyhovuje: false,\n                typ_sposob: \"\",\n                stav_a_povolanie: \"\",\n                dopl_info: \"\",\n                obj_nalez: \"\",\n                vlastne_okuliare: {\n                    vnatur: [\"1001\", \"1001\"],\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visus: [\"1001\", \"1001\"],\n                    vbino: \"1001\"\n                },\n                refraktometer: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    se: [\"1001\", \"1001\"],\n                    pd:[\"1001\",\"1001\"]\n\n                },\n                keratometer: {\n                    hor: [\"1001\", \"1001\"],\n                    ver: [\"1001\", \"1001\"],\n                    ave: [\"1001\", \"1001\"]\n                },\n                subjektivna_refrakcia: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visus: [\"1001\", \"1001\"],\n                    bino: \"1001\",\n                    domoko: \"1001\"\n\n                },\n                kontaktne_sosovky: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visd: [\"1001\", \"1001\"],\n                    bino1: [\"1001\", \"1001\"],\n                    visb: [\"1001\", \"1001\"],\n                    bino2: [\"1001\", \"1001\"]\n                },\n                typ_kontaktnych_sosoviek: {\n                    prvy: [\"1001\", \"1001\"],\n                    druhy: [\"1001\", \"1001\"],\n                    lkontrola: \"1001\",\n                    dop_roztok: \"1001\"\n                }\n            },\n            kontrola: {\n                typ_kontaktnych_sosoviek: {\n                    prvy: [\"1001\", \"1001\"],\n                    druhy: [\"1001\", \"1001\"],\n                    lkontrola: \"1001\",\n                    dop_roztok: \"1001\"\n                },\n                tabulka: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    vis: [\"1001\", \"1001\"]\n                },\n                subj: \"\",\n                obj: \"\"\n            },\n            doporucenia: \"\",\n            vodic: false,\n            pc: false\n        })\n    }, [examSchema])\n\n    useEffect(() => {\n        return () => {\n            setExamObj(null)\n        }\n    }, [])\n\n    if (!examObj) return <ModalContainer><Modal><p>Loading...</p></Modal></ModalContainer>\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h3>Vyšetrenie</h3>\n                {!examinationToUpdate && <Container>\n                    <h4>Typ prehliadky</h4>\n                    <div>\n                        {examTypes.map((type, idx) => (\n                            <ExamTypeCheckbox\n                                key={idx}\n                                label={type.name}\n                                isActive={examObj.type === type.value}\n                                handleClick={() => handleChange({\n                                    target: {\n                                        name: \"type\",\n                                        value: type.value\n                                    }\n                                })}\n                            />\n                        ))}\n                    </div>\n                </Container>}\n\n                {examObj.type === 1 && (\n                    <Container>\n                        <h4>Refrakcia</h4>\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.refrakcia.nosi_od}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"refrakcia.nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.refrakcia.posledna_korekcia}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"refrakcia.posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'KŠ typ, spôsob nosenia'}\n                                    value={examObj.refrakcia.typ_sposob}\n                                    type=\"text\"\n                                    name=\"refrakcia.typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examObj?.refrakcia.vyhovuje}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"refrakcia.vyhovuje\",\n                                            value: examObj?.vyhovuje ? !examObj.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Anamnéza'\n                                name=\"refrakcia.anamneza\"\n                                value={examObj?.refrakcia.anamneza}\n                                rows=\"5\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={examObj.vodic}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vodic\",\n                                            value: examObj.vodic ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={examObj.pc}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"pc\",\n                                            value: examObj.pc ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </div>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"refrakcia.dopl_info\"\n                                value={examObj?.refrakcia.dopl_info || \"\"}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.vnatur[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare.vnatur, idx)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.sph, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='refrakcia.vlastne_okuliare.vbino'\n                                        type='text'\n                                        value={checkParameterValue(examObj.refrakcia.vlastne_okuliare?.vbino)}\n                                        // onChange={e => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                    // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vbino, vlastne_okuliare, setVlastne_okuliare)}\n                                    // onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Objektivná refrakcia</h4>\n\n                        <ObjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.sph, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.cyl, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.ax, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.se[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.se, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.se, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>PD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.pd[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.pd, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.se, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ObjectiveRefTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col isActive={examObj.refrakcia.subjektivna_refrakcia?.domoko === \"1\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"refrakcia.subjektivna_refrakcia.domoko\",\n                                        value: examObj.refrakcia.subjektivna_refrakcia?.domoko === \"1\" ? \"0\" : \"1\"\n                                    }\n                                })}>P.</Col>\n                                <Col isActive={examObj.refrakcia.subjektivna_refrakcia?.domoko === \"2\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"refrakcia.subjektivna_refrakcia.domoko\",\n                                        value: examObj.refrakcia.subjektivna_refrakcia?.domoko === \"2\" ? \"0\" : \"2\"\n                                    }\n                                })}>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.sph, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.cyl, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.ax, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n                                        // \n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.add, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.visus, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='refrakcia.subjektivna_refrakcia.vbino'\n                                        type='text'\n                                        value={checkParameterValue(examObj.refrakcia.subjektivna_refrakcia?.vbino)}\n                                        // onChange={e => setSubjektivna_refrakcia(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                    // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.vbino, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n\n                                    // onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>PRIZMA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.prizma[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.prizma, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.prizma, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BÁZA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.basis[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.basis, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.basis, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>OS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.os[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.os, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.os, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BL</Col>\n                                <Col>\n                                    <input\n                                        name={`refrakcia.subjektivna_refrakcia.vbl`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.refrakcia.subjektivna_refrakcia?.vbl)}\n                                        // onChange={e => setSubjektivna_refrakcia(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                    // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.vbino, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n\n                                    // onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </SubjectiveRefTable>\n                    </Container>\n                )}\n\n                {examObj.type === 2 && (\n                    <Container>\n                        <h4>Apl. KŠ</h4>\n\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.anamneza.nosi_od}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"anamneza.nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.anamneza.posledna_korekcia}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"anamneza.posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'KŠ typ, spôsob nosenia'}\n                                    value={examObj.anamneza.typ_sposob}\n                                    type=\"text\"\n                                    name=\"anamneza.typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examObj.anamneza.vyhovuje}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"anamneza.vyhovuje\",\n                                            value: examObj.anamneza.vyhovuje ? !examObj.anamneza.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Povolanie'\n                                name=\"anamneza.stav_a_povolanie\"\n                                value={examObj.anamneza.stav_a_povolanie}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={examObj.vodic}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vodic\",\n                                            value: examObj.vodic ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={examObj.pc}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"pc\",\n                                            value: examObj.pc ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </div>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Anamnéza'\n                                name=\"anamneza.dopl_info\"\n                                value={examObj.anamneza.dopl_info}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Obj. nález'\n                                name=\"anamneza.obj_nalez\"\n                                value={examObj.anamneza.obj_nalez}\n                                rows=\"3\"\n\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.vnatur[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare.vnatur, idx)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.sph, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='anamneza.vlastne_okuliare.vbino'\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.vlastne_okuliare?.vbino)}\n                                        // onChange={e => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                    // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vbino, vlastne_okuliare, setVlastne_okuliare)}\n                                    // onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Refraktometer</h4>\n\n                        <RefractTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.sph, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.cyl, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.ax, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.se[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.se, idx)}\n                                            onChange={handleChange}\n\n                                        // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.se, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>PD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.pd[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.pd, idx)}\n                                            onChange={handleChange}\n\n                                        // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.se, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </RefractTable>\n\n                        <h4>Keratometer</h4>\n\n                        <KerathTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>HOR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.keratometer.hor[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.keratometer?.hor, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, keratometer?.hor, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VER</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.keratometer.ver[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.keratometer?.ver, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, keratometer?.ver, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AVE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.keratometer.ave[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.keratometer?.ave, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, keratometer?.ave, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </KerathTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefATable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col isActive={examObj.anamneza.subjektivna_refrakcia?.domoko === \"1\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"anamneza.subjektivna_refrakcia.domoko\",\n                                        value: examObj.anamneza.subjektivna_refrakcia?.domoko === \"1\" ? \"0\" : \"1\"\n                                    }\n                                })}>P.</Col>\n                                <Col isActive={examObj.anamneza.subjektivna_refrakcia?.domoko === \"2\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"anamneza.subjektivna_refrakcia.domoko\",\n                                        value: examObj.anamneza.subjektivna_refrakcia?.domoko === \"2\" ? \"0\" : \"2\"\n                                    }\n                                })}>L.</Col>\n                            </TableTitleCol>\n\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.sph, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.cyl, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.ax, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.add, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.visus, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO</Col>\n                                <Col>\n                                    <input\n                                        name={`anamneza.subjektivna_refrakcia.bino`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.subjektivna_refrakcia?.bino)}\n                                        // onChange={e => setSubjektivna_refrakciaA(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        // onBlur={(e) => setSubjektivna_refrakciaA(prevValue => ({\n                                        onChange={handleChange}\n\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n\n                        </SubjectiveRefATable>\n\n                        <h4>Kontaktné šošovky</h4>\n\n                        <ContactLensesTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.sph, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onChange={handleChange}\n\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.cyl, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onChange={handleChange}\n\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.ax, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.ax, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.add, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.add, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.visd[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.visd, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visd, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO1</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.bino1[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.bino1, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino1, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BL</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.visb[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.visb, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visb, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            {/* <TableCol>\n                                <Col>BINO2</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.bino2[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.bino2, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino2, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol> */}\n                        </ContactLensesTable>\n\n\n                        <h4>Typ Kontaktných šošoviek</h4>\n\n                        <ContactLensesTypeTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>PRVÝ TYP</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.typ_kontaktnych_sosoviek.prvy[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.typ_kontaktnych_sosoviek?.prvy, idx)}\n                                            onChange={handleChange}\n\n                                        // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.prvy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>DRUHÝ TYP</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            // name='druhy'\n                                            name={`anamneza.typ_kontaktnych_sosoviek.druhy[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.typ_kontaktnych_sosoviek?.druhy, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.druhy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>DOP.KONTROLA</Col>\n                                <Col>\n                                    <input\n                                        // name='lkontrola'\n                                        name={`anamneza.typ_kontaktnych_sosoviek.lkontrola`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.typ_kontaktnych_sosoviek?.lkontrola)}\n                                        onChange={handleChange}\n                                    // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: e.target.value\n                                    // }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>DOP.ROZTOK</Col>\n                                <Col>\n                                    <input\n                                        // name='dop_roztok'\n                                        name={`anamneza.typ_kontaktnych_sosoviek.dop_roztok`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.typ_kontaktnych_sosoviek?.dop_roztok)}\n                                        onChange={handleChange}\n                                    // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: e.target.value\n                                    // }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </ContactLensesTypeTable>\n                    </Container>\n                )}\n\n                {examObj.type === 3 && (\n                    <Container>\n                        <h4>Kontrola</h4>\n\n                        {/* <h4>Typ Kontaktných šošoviek</h4> */}\n\n<ContactLensesTypeTable>\n    <TableTitleCol>\n        <Col>{\"-\"}</Col>\n        <Col>P.</Col>\n        <Col>L.</Col>\n    </TableTitleCol>\n\n    <TableCol>\n        <Col>PRVÝ TYP</Col>\n        {[...Array(2)].map((value, idx) => (\n            <Col key={idx}>\n                <input\n                    name={`kontrola.typ_kontaktnych_sosoviek.prvy[${idx}]`}\n                    type='text'\n                    value={checkParameter(examObj.kontrola.typ_kontaktnych_sosoviek?.prvy, idx)}\n                    onChange={handleChange}\n\n                // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.prvy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                />\n            </Col>\n        ))}\n    </TableCol>\n    <TableCol>\n        <Col>DRUHÝ TYP</Col>\n        {[...Array(2)].map((value, idx) => (\n            <Col key={idx}>\n                <input\n                    // name='druhy'\n                    name={`kontrola.typ_kontaktnych_sosoviek.druhy[${idx}]`}\n                    type='text'\n                    value={checkParameter(examObj.kontrola.typ_kontaktnych_sosoviek?.druhy, idx)}\n                    // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                    onChange={handleChange}\n                // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.druhy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                />\n            </Col>\n        ))}\n    </TableCol>\n    <TableCol>\n        <Col>DOP.KONTROLA</Col>\n        <Col>\n            <input\n                // name='lkontrola'\n                name={`kontrola.typ_kontaktnych_sosoviek.lkontrola`}\n                type='text'\n                value={checkParameterValue(examObj.kontrola.typ_kontaktnych_sosoviek?.lkontrola)}\n                onChange={handleChange}\n            // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n            //     ...prevValue,\n            //     [e.target.name]: e.target.value\n            // }))}\n            // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n            //     ...prevValue,\n            //     [e.target.name]: Number(e.target.value)\n            // }))}\n            />\n        </Col>\n    </TableCol>\n    <TableCol>\n        <Col>DOP.ROZTOK</Col>\n        <Col>\n            <input\n                // name='dop_roztok'\n                name={`kontrola.typ_kontaktnych_sosoviek.dop_roztok`}\n                type='text'\n                value={checkParameterValue(examObj.kontrola.typ_kontaktnych_sosoviek?.dop_roztok)}\n                onChange={handleChange}\n            // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n            //     ...prevValue,\n            //     [e.target.name]: e.target.value\n            // }))}\n            // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n            //     ...prevValue,\n            //     [e.target.name]: Number(e.target.value)\n            // }))}\n            />\n        </Col>\n    </TableCol>\n</ContactLensesTypeTable>\n\n                        <ExamTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.sph, idx)}\n                                            onChange={handleChange}\n\n                                        // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.sph, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            // name='cyl'\n                                            name={`kontrola.tabulka.cyl[${idx}]`}\n\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.cyl, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.ax[${idx}]`}\n                                            // name='ax'\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.ax, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.ax, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.add[${idx}]`}\n                                            // name='add'\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.add, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.add, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VIS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.vis[${idx}]`}\n                                            // name='vis'\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.vis, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.vis, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ExamTable>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label={'Subj.'}\n                                value={examObj.kontrola.subj}\n                                rows=\"3\"\n                                type=\"text\"\n                                name=\"kontrola.subj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label={'Obj.'}\n                                value={examObj.kontrola.obj}\n                                rows=\"3\"\n                                type=\"text\"\n                                name=\"kontrola.obj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={examObj.vodic}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vodic\",\n                                            value: examObj.vodic ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={examObj.pc}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"pc\",\n                                            value: examObj.pc ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </div>\n                    </Container>\n                )}\n\n                <InputContainer>\n                    <CustomTextarea\n                        label='Doporučenia'\n                        name=\"doporucenia\"\n                        value={examObj.doporucenia}\n                        rows=\"5\"\n                        handleChange={e => handleChange(e)}\n                    />\n                </InputContainer>\n\n                <SubmitButton onClick={handleSubmit}>{examinationToUpdate ? \"Uložiť\" : \"Odoslať prehliadku\"}</SubmitButton>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default OptometristExaminationModal\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"Apl. KŠ\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","/app/src/components/modal-finish-order/modal-finish-order.styles.jsx",[],"/app/src/components/modal-order-update-user/modal-order-update-user.styles.jsx",[],"/app/src/components/order-cart-lenses-row/order-cart-lenses-row.styles.jsx",[],"/app/src/components/custom-back-button/custom-back-button.styles.jsx",[],"/app/src/components/order-cart-row/order-cart-row.styles.jsx",[],"/app/src/components/order-deligate-modal/order-deligate-modal.styles.jsx",[],"/app/src/components/modal-finish-deposited-order/modal-finish-deposited-order.styles.jsx",[],"/app/src/components/examination-user/examination-user.styles.jsx",[],"/app/src/utils/parameters.utils.jsx",[],"/app/src/utils/object.utils.jsx",[],"/app/src/components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx",[],"/app/src/utils/errors.jsx",[],{"ruleId":"916","replacedBy":"917"},{"ruleId":"918","replacedBy":"919"},{"ruleId":"920","severity":1,"message":"921","line":239,"column":8,"nodeType":"922","endLine":239,"endColumn":15,"suggestions":"923"},{"ruleId":"924","severity":1,"message":"925","line":1,"column":54,"nodeType":"926","messageId":"927","endLine":1,"endColumn":63},{"ruleId":"924","severity":1,"message":"928","line":16,"column":22,"nodeType":"926","messageId":"927","endLine":16,"endColumn":33},{"ruleId":"920","severity":1,"message":"929","line":156,"column":8,"nodeType":"922","endLine":156,"endColumn":34,"suggestions":"930"},{"ruleId":"924","severity":1,"message":"931","line":205,"column":19,"nodeType":"926","messageId":"927","endLine":205,"endColumn":23},{"ruleId":"924","severity":1,"message":"932","line":411,"column":13,"nodeType":"926","messageId":"927","endLine":411,"endColumn":22},{"ruleId":"920","severity":1,"message":"933","line":925,"column":8,"nodeType":"922","endLine":925,"endColumn":31,"suggestions":"934"},{"ruleId":"920","severity":1,"message":"935","line":953,"column":8,"nodeType":"922","endLine":953,"endColumn":22,"suggestions":"936"},{"ruleId":"924","severity":1,"message":"937","line":1,"column":44,"nodeType":"926","messageId":"927","endLine":1,"endColumn":52},{"ruleId":"924","severity":1,"message":"938","line":4,"column":8,"nodeType":"926","messageId":"927","endLine":4,"endColumn":18},{"ruleId":"924","severity":1,"message":"939","line":5,"column":8,"nodeType":"926","messageId":"927","endLine":5,"endColumn":14},{"ruleId":"920","severity":1,"message":"940","line":141,"column":8,"nodeType":"922","endLine":141,"endColumn":18,"suggestions":"941"},{"ruleId":"920","severity":1,"message":"942","line":161,"column":8,"nodeType":"922","endLine":161,"endColumn":21,"suggestions":"943"},{"ruleId":"924","severity":1,"message":"944","line":27,"column":5,"nodeType":"926","messageId":"927","endLine":27,"endColumn":17},{"ruleId":"920","severity":1,"message":"945","line":114,"column":8,"nodeType":"922","endLine":114,"endColumn":19,"suggestions":"946"},{"ruleId":"920","severity":1,"message":"947","line":130,"column":8,"nodeType":"922","endLine":130,"endColumn":21,"suggestions":"948"},{"ruleId":"920","severity":1,"message":"949","line":173,"column":8,"nodeType":"922","endLine":173,"endColumn":38,"suggestions":"950"},{"ruleId":"920","severity":1,"message":"951","line":179,"column":8,"nodeType":"922","endLine":179,"endColumn":12,"suggestions":"952"},{"ruleId":"920","severity":1,"message":"953","line":201,"column":8,"nodeType":"922","endLine":201,"endColumn":10,"suggestions":"954"},{"ruleId":"920","severity":1,"message":"955","line":93,"column":8,"nodeType":"922","endLine":93,"endColumn":21,"suggestions":"956"},{"ruleId":"920","severity":1,"message":"955","line":115,"column":8,"nodeType":"922","endLine":115,"endColumn":21,"suggestions":"957"},{"ruleId":"920","severity":1,"message":"958","line":121,"column":8,"nodeType":"922","endLine":121,"endColumn":29,"suggestions":"959"},{"ruleId":"920","severity":1,"message":"960","line":136,"column":8,"nodeType":"922","endLine":136,"endColumn":10,"suggestions":"961"},{"ruleId":"924","severity":1,"message":"962","line":456,"column":12,"nodeType":"926","messageId":"927","endLine":456,"endColumn":19},{"ruleId":"920","severity":1,"message":"963","line":475,"column":8,"nodeType":"922","endLine":475,"endColumn":26,"suggestions":"964"},{"ruleId":"920","severity":1,"message":"965","line":487,"column":8,"nodeType":"922","endLine":487,"endColumn":25,"suggestions":"966"},{"ruleId":"920","severity":1,"message":"967","line":494,"column":8,"nodeType":"922","endLine":494,"endColumn":26,"suggestions":"968"},{"ruleId":"920","severity":1,"message":"969","line":511,"column":8,"nodeType":"922","endLine":511,"endColumn":72,"suggestions":"970"},{"ruleId":"920","severity":1,"message":"971","line":533,"column":8,"nodeType":"922","endLine":533,"endColumn":13,"suggestions":"972"},{"ruleId":"920","severity":1,"message":"973","line":542,"column":8,"nodeType":"922","endLine":542,"endColumn":22,"suggestions":"974"},{"ruleId":"920","severity":1,"message":"975","line":554,"column":8,"nodeType":"922","endLine":554,"endColumn":10,"suggestions":"976"},{"ruleId":"920","severity":1,"message":"977","line":95,"column":8,"nodeType":"922","endLine":95,"endColumn":12,"suggestions":"978"},{"ruleId":"920","severity":1,"message":"979","line":110,"column":8,"nodeType":"922","endLine":110,"endColumn":14,"suggestions":"980"},{"ruleId":"920","severity":1,"message":"981","line":124,"column":8,"nodeType":"922","endLine":124,"endColumn":10,"suggestions":"982"},{"ruleId":"924","severity":1,"message":"983","line":12,"column":10,"nodeType":"926","messageId":"927","endLine":12,"endColumn":25},{"ruleId":"920","severity":1,"message":"984","line":149,"column":8,"nodeType":"922","endLine":149,"endColumn":22,"suggestions":"985"},{"ruleId":"920","severity":1,"message":"984","line":157,"column":8,"nodeType":"922","endLine":157,"endColumn":35,"suggestions":"986"},{"ruleId":"920","severity":1,"message":"987","line":105,"column":8,"nodeType":"922","endLine":105,"endColumn":64,"suggestions":"988"},{"ruleId":"920","severity":1,"message":"989","line":111,"column":8,"nodeType":"922","endLine":111,"endColumn":28,"suggestions":"990"},{"ruleId":"920","severity":1,"message":"991","line":120,"column":8,"nodeType":"922","endLine":120,"endColumn":10,"suggestions":"992"},{"ruleId":"920","severity":1,"message":"993","line":176,"column":8,"nodeType":"922","endLine":176,"endColumn":21,"suggestions":"994"},{"ruleId":"920","severity":1,"message":"960","line":189,"column":8,"nodeType":"922","endLine":189,"endColumn":43,"suggestions":"995"},{"ruleId":"924","severity":1,"message":"996","line":12,"column":10,"nodeType":"926","messageId":"927","endLine":12,"endColumn":21},{"ruleId":"920","severity":1,"message":"997","line":45,"column":8,"nodeType":"922","endLine":45,"endColumn":17,"suggestions":"998"},{"ruleId":"924","severity":1,"message":"999","line":19,"column":5,"nodeType":"926","messageId":"927","endLine":19,"endColumn":18},{"ruleId":"924","severity":1,"message":"1000","line":43,"column":5,"nodeType":"926","messageId":"927","endLine":43,"endColumn":25},{"ruleId":"924","severity":1,"message":"1001","line":59,"column":45,"nodeType":"926","messageId":"927","endLine":59,"endColumn":59},{"ruleId":"920","severity":1,"message":"1002","line":245,"column":8,"nodeType":"922","endLine":245,"endColumn":20,"suggestions":"1003"},{"ruleId":"1004","severity":1,"message":"1005","line":136,"column":9,"nodeType":"1006","messageId":"1007","endLine":140,"endColumn":12},{"ruleId":"1004","severity":1,"message":"1005","line":157,"column":9,"nodeType":"1006","messageId":"1007","endLine":161,"endColumn":12},{"ruleId":"920","severity":1,"message":"1008","line":197,"column":8,"nodeType":"922","endLine":197,"endColumn":19,"suggestions":"1009"},{"ruleId":"920","severity":1,"message":"1010","line":212,"column":8,"nodeType":"922","endLine":212,"endColumn":10,"suggestions":"1011"},{"ruleId":"920","severity":1,"message":"1012","line":46,"column":8,"nodeType":"922","endLine":46,"endColumn":18,"suggestions":"1013"},{"ruleId":"920","severity":1,"message":"1014","line":52,"column":8,"nodeType":"922","endLine":52,"endColumn":10,"suggestions":"1015"},{"ruleId":"1016","severity":1,"message":"1017","line":15,"column":27,"nodeType":"1018","messageId":"1019","endLine":15,"endColumn":28,"suggestions":"1020"},{"ruleId":"1016","severity":1,"message":"1017","line":16,"column":23,"nodeType":"1018","messageId":"1019","endLine":16,"endColumn":24,"suggestions":"1021"},{"ruleId":"1016","severity":1,"message":"1017","line":16,"column":25,"nodeType":"1018","messageId":"1019","endLine":16,"endColumn":26,"suggestions":"1022"},{"ruleId":"920","severity":1,"message":"1023","line":25,"column":8,"nodeType":"922","endLine":25,"endColumn":16,"suggestions":"1024"},{"ruleId":"920","severity":1,"message":"1025","line":37,"column":8,"nodeType":"922","endLine":37,"endColumn":22,"suggestions":"1026"},{"ruleId":"920","severity":1,"message":"1027","line":79,"column":8,"nodeType":"922","endLine":79,"endColumn":28,"suggestions":"1028"},{"ruleId":"920","severity":1,"message":"1027","line":118,"column":8,"nodeType":"922","endLine":118,"endColumn":32,"suggestions":"1029"},{"ruleId":"924","severity":1,"message":"1030","line":798,"column":9,"nodeType":"926","messageId":"927","endLine":798,"endColumn":12},{"ruleId":"920","severity":1,"message":"963","line":75,"column":8,"nodeType":"922","endLine":75,"endColumn":31,"suggestions":"1031"},{"ruleId":"920","severity":1,"message":"967","line":82,"column":8,"nodeType":"922","endLine":82,"endColumn":19,"suggestions":"1032"},{"ruleId":"920","severity":1,"message":"1033","line":29,"column":8,"nodeType":"922","endLine":29,"endColumn":19,"suggestions":"1034"},{"ruleId":"920","severity":1,"message":"1033","line":42,"column":8,"nodeType":"922","endLine":42,"endColumn":25,"suggestions":"1035"},{"ruleId":"1036","severity":1,"message":"1037","line":63,"column":52,"nodeType":"1038","messageId":"1039","endLine":63,"endColumn":58},{"ruleId":"924","severity":1,"message":"1040","line":4,"column":8,"nodeType":"926","messageId":"927","endLine":4,"endColumn":19},{"ruleId":"924","severity":1,"message":"1041","line":5,"column":8,"nodeType":"926","messageId":"927","endLine":5,"endColumn":20},{"ruleId":"924","severity":1,"message":"1042","line":15,"column":5,"nodeType":"926","messageId":"927","endLine":15,"endColumn":17},{"ruleId":"924","severity":1,"message":"1043","line":28,"column":12,"nodeType":"926","messageId":"927","endLine":28,"endColumn":15},{"ruleId":"924","severity":1,"message":"1044","line":28,"column":17,"nodeType":"926","messageId":"927","endLine":28,"endColumn":23},{"ruleId":"924","severity":1,"message":"1045","line":30,"column":12,"nodeType":"926","messageId":"927","endLine":30,"endColumn":17},{"ruleId":"924","severity":1,"message":"1046","line":37,"column":11,"nodeType":"926","messageId":"927","endLine":37,"endColumn":32},{"ruleId":"924","severity":1,"message":"1047","line":66,"column":19,"nodeType":"926","messageId":"927","endLine":66,"endColumn":22},{"ruleId":"920","severity":1,"message":"1048","line":93,"column":8,"nodeType":"922","endLine":93,"endColumn":19,"suggestions":"1049"},{"ruleId":"924","severity":1,"message":"1050","line":7,"column":10,"nodeType":"926","messageId":"927","endLine":7,"endColumn":25},{"ruleId":"920","severity":1,"message":"1051","line":80,"column":8,"nodeType":"922","endLine":80,"endColumn":19,"suggestions":"1052"},{"ruleId":"920","severity":1,"message":"1053","line":113,"column":8,"nodeType":"922","endLine":113,"endColumn":19,"suggestions":"1054"},{"ruleId":"924","severity":1,"message":"1042","line":20,"column":5,"nodeType":"926","messageId":"927","endLine":20,"endColumn":17},{"ruleId":"924","severity":1,"message":"944","line":21,"column":5,"nodeType":"926","messageId":"927","endLine":21,"endColumn":17},{"ruleId":"920","severity":1,"message":"1055","line":72,"column":8,"nodeType":"922","endLine":72,"endColumn":19,"suggestions":"1056"},{"ruleId":"920","severity":1,"message":"1057","line":77,"column":8,"nodeType":"922","endLine":77,"endColumn":33,"suggestions":"1058"},{"ruleId":"1036","severity":1,"message":"1037","line":279,"column":44,"nodeType":"1038","messageId":"1039","endLine":279,"endColumn":50},{"ruleId":"1036","severity":1,"message":"1037","line":279,"column":56,"nodeType":"1038","messageId":"1039","endLine":279,"endColumn":62},{"ruleId":"924","severity":1,"message":"944","line":20,"column":5,"nodeType":"926","messageId":"927","endLine":20,"endColumn":17},{"ruleId":"1036","severity":1,"message":"1037","line":200,"column":44,"nodeType":"1038","messageId":"1039","endLine":200,"endColumn":50},{"ruleId":"924","severity":1,"message":"944","line":12,"column":5,"nodeType":"926","messageId":"927","endLine":12,"endColumn":17},{"ruleId":"1036","severity":1,"message":"1037","line":126,"column":40,"nodeType":"1038","messageId":"1039","endLine":126,"endColumn":46},{"ruleId":"924","severity":1,"message":"1059","line":10,"column":5,"nodeType":"926","messageId":"927","endLine":10,"endColumn":19},{"ruleId":"924","severity":1,"message":"1060","line":11,"column":5,"nodeType":"926","messageId":"927","endLine":11,"endColumn":17},{"ruleId":"920","severity":1,"message":"963","line":44,"column":8,"nodeType":"922","endLine":44,"endColumn":15,"suggestions":"1061"},{"ruleId":"920","severity":1,"message":"963","line":50,"column":8,"nodeType":"922","endLine":50,"endColumn":18,"suggestions":"1062"},{"ruleId":"920","severity":1,"message":"1063","line":65,"column":8,"nodeType":"922","endLine":65,"endColumn":19,"suggestions":"1064"},{"ruleId":"924","severity":1,"message":"1065","line":9,"column":5,"nodeType":"926","messageId":"927","endLine":9,"endColumn":24},{"ruleId":"1036","severity":1,"message":"1037","line":57,"column":45,"nodeType":"1038","messageId":"1039","endLine":57,"endColumn":51},{"ruleId":"1036","severity":1,"message":"1037","line":61,"column":53,"nodeType":"1038","messageId":"1039","endLine":61,"endColumn":59},{"ruleId":"1036","severity":1,"message":"1037","line":62,"column":54,"nodeType":"1038","messageId":"1039","endLine":62,"endColumn":60},{"ruleId":"1036","severity":1,"message":"1037","line":63,"column":123,"nodeType":"1038","messageId":"1039","endLine":63,"endColumn":129},{"ruleId":"1036","severity":1,"message":"1037","line":64,"column":123,"nodeType":"1038","messageId":"1039","endLine":64,"endColumn":129},{"ruleId":"1036","severity":1,"message":"1037","line":65,"column":123,"nodeType":"1038","messageId":"1039","endLine":65,"endColumn":129},{"ruleId":"920","severity":1,"message":"1066","line":266,"column":8,"nodeType":"922","endLine":266,"endColumn":19,"suggestions":"1067"},{"ruleId":"920","severity":1,"message":"1063","line":88,"column":8,"nodeType":"922","endLine":88,"endColumn":19,"suggestions":"1068"},{"ruleId":"920","severity":1,"message":"963","line":92,"column":8,"nodeType":"922","endLine":92,"endColumn":15,"suggestions":"1069"},{"ruleId":"1036","severity":1,"message":"1037","line":10,"column":32,"nodeType":"1038","messageId":"1039","endLine":10,"endColumn":38},{"ruleId":"924","severity":1,"message":"1070","line":16,"column":5,"nodeType":"926","messageId":"927","endLine":16,"endColumn":17},{"ruleId":"920","severity":1,"message":"1051","line":72,"column":8,"nodeType":"922","endLine":72,"endColumn":19,"suggestions":"1071"},{"ruleId":"920","severity":1,"message":"1053","line":72,"column":8,"nodeType":"922","endLine":72,"endColumn":19,"suggestions":"1072"},{"ruleId":"920","severity":1,"message":"1073","line":69,"column":8,"nodeType":"922","endLine":69,"endColumn":15,"suggestions":"1074"},{"ruleId":"920","severity":1,"message":"1075","line":83,"column":8,"nodeType":"922","endLine":83,"endColumn":21,"suggestions":"1076"},{"ruleId":"924","severity":1,"message":"1077","line":87,"column":11,"nodeType":"926","messageId":"927","endLine":87,"endColumn":23},{"ruleId":"920","severity":1,"message":"1078","line":77,"column":8,"nodeType":"922","endLine":77,"endColumn":35,"suggestions":"1079"},{"ruleId":"920","severity":1,"message":"1080","line":98,"column":8,"nodeType":"922","endLine":98,"endColumn":104,"suggestions":"1081"},{"ruleId":"920","severity":1,"message":"1082","line":98,"column":9,"nodeType":"1083","endLine":98,"endColumn":31},{"ruleId":"920","severity":1,"message":"1082","line":98,"column":33,"nodeType":"1083","endLine":98,"endColumn":55},{"ruleId":"920","severity":1,"message":"1082","line":98,"column":57,"nodeType":"1083","endLine":98,"endColumn":79},{"ruleId":"920","severity":1,"message":"1082","line":98,"column":81,"nodeType":"1083","endLine":98,"endColumn":103},{"ruleId":"920","severity":1,"message":"1084","line":73,"column":8,"nodeType":"922","endLine":73,"endColumn":36,"suggestions":"1085"},{"ruleId":"920","severity":1,"message":"1086","line":42,"column":8,"nodeType":"922","endLine":42,"endColumn":19,"suggestions":"1087"},{"ruleId":"920","severity":1,"message":"963","line":47,"column":8,"nodeType":"922","endLine":47,"endColumn":30,"suggestions":"1088"},{"ruleId":"920","severity":1,"message":"1089","line":125,"column":8,"nodeType":"922","endLine":125,"endColumn":13,"suggestions":"1090"},{"ruleId":"1036","severity":1,"message":"1037","line":266,"column":67,"nodeType":"1038","messageId":"1039","endLine":266,"endColumn":73},{"ruleId":"920","severity":1,"message":"1091","line":46,"column":8,"nodeType":"922","endLine":46,"endColumn":19,"suggestions":"1092"},{"ruleId":"920","severity":1,"message":"1089","line":100,"column":8,"nodeType":"922","endLine":100,"endColumn":13,"suggestions":"1093"},{"ruleId":"920","severity":1,"message":"1094","line":190,"column":8,"nodeType":"922","endLine":190,"endColumn":27,"suggestions":"1095"},{"ruleId":"920","severity":1,"message":"949","line":127,"column":8,"nodeType":"922","endLine":127,"endColumn":38,"suggestions":"1096"},{"ruleId":"920","severity":1,"message":"951","line":133,"column":8,"nodeType":"922","endLine":133,"endColumn":16,"suggestions":"1097"},{"ruleId":"924","severity":1,"message":"1098","line":21,"column":5,"nodeType":"926","messageId":"927","endLine":21,"endColumn":30},{"ruleId":"924","severity":1,"message":"1099","line":42,"column":29,"nodeType":"926","messageId":"927","endLine":42,"endColumn":47},{"ruleId":"924","severity":1,"message":"996","line":15,"column":10,"nodeType":"926","messageId":"927","endLine":15,"endColumn":21},{"ruleId":"924","severity":1,"message":"1100","line":24,"column":5,"nodeType":"926","messageId":"927","endLine":24,"endColumn":16},{"ruleId":"924","severity":1,"message":"1098","line":26,"column":5,"nodeType":"926","messageId":"927","endLine":26,"endColumn":30},{"ruleId":"924","severity":1,"message":"1101","line":38,"column":12,"nodeType":"926","messageId":"927","endLine":38,"endColumn":27},{"ruleId":"924","severity":1,"message":"1102","line":38,"column":29,"nodeType":"926","messageId":"927","endLine":38,"endColumn":47},{"ruleId":"924","severity":1,"message":"1099","line":39,"column":29,"nodeType":"926","messageId":"927","endLine":39,"endColumn":47},{"ruleId":"920","severity":1,"message":"1103","line":90,"column":8,"nodeType":"922","endLine":90,"endColumn":23,"suggestions":"1104"},{"ruleId":"920","severity":1,"message":"1105","line":15,"column":8,"nodeType":"922","endLine":15,"endColumn":13,"suggestions":"1106"},{"ruleId":"1036","severity":1,"message":"1037","line":82,"column":40,"nodeType":"1038","messageId":"1039","endLine":82,"endColumn":46},{"ruleId":"920","severity":1,"message":"1107","line":140,"column":8,"nodeType":"922","endLine":140,"endColumn":24,"suggestions":"1108"},{"ruleId":"920","severity":1,"message":"1109","line":266,"column":8,"nodeType":"922","endLine":266,"endColumn":20,"suggestions":"1110"},"no-native-reassign",["1111"],"no-negated-in-lhs",["1112"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.","ArrayExpression",["1113"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setResponse' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array. You can also do a functional update 'setUser(u => ...)' if you only need 'user' in the 'setUser' call.",["1114"],"'data' is assigned a value but never used.","'linkSize1' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getLenses', 'getProductsByQuery', and 'products'. Either include them or remove the dependency array.",["1115"],"React Hook useEffect has a missing dependency: 'product'. Either include it or remove the dependency array. You can also do a functional update 'setProduct(p => ...)' if you only need 'product' in the 'setProduct' call.",["1116"],"'useState' is defined but never used.","'examSchema' is defined but never used.","'lodash' is defined but never used.","React Hook useEffect has a missing dependency: 'getProductsByQuery'. Either include it or remove the dependency array.",["1117"],"React Hook useEffect has missing dependencies: 'activeCategoryTypeTab', 'getLenses', 'getProductsByQuery', and 'products'. Either include them or remove the dependency array.",["1118"],"'DeleteButton' is defined but never used.","React Hook useEffect has missing dependencies: 'closeModal' and 'response'. Either include them or remove the dependency array.",["1119"],"React Hook useEffect has missing dependencies: 'activeIndex' and 'refetch'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilterQuery' needs the current value of 'activeIndex'.",["1120"],"React Hook useEffect has missing dependencies: 'user.fName', 'user.lName', and 'userObj'. Either include them or remove the dependency array. You can also do a functional update 'setUserObj(u => ...)' if you only need 'userObj' in the 'setUserObj' call.",["1121"],"React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["1122"],"React Hook useEffect has missing dependencies: 'handleChange' and 'resetUser'. Either include them or remove the dependency array.",["1123"],"React Hook useEffect has a missing dependency: 'blogsData'. Either include it or remove the dependency array.",["1124"],["1125"],"React Hook useEffect has a missing dependency: 'blogsData.response?.blogs'. Either include it or remove the dependency array.",["1126"],"React Hook useEffect has a missing dependency: 'closeModal'. Either include it or remove the dependency array.",["1127"],"'lensObj' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",["1128"],"React Hook useEffect has missing dependencies: 'handleChange', 'productObj.lensType', and 'productObj.type'. Either include them or remove the dependency array.",["1129"],"React Hook useEffect has a missing dependency: 'response?.filters'. Either include it or remove the dependency array.",["1130"],"React Hook useEffect has missing dependencies: 'getEanCode' and 'handleChange'. Either include them or remove the dependency array.",["1131"],"React Hook useEffect has missing dependencies: 'getSingleProduct', 'handleChangeType', 'handleSelectImage', 'product.type', and 'productObj.type'. Either include them or remove the dependency array.",["1132"],"React Hook useEffect has a missing dependency: 'setSelectedImage'. Either include it or remove the dependency array.",["1133"],"React Hook useEffect has missing dependencies: 'resetContactLenses', 'resetGlassesParameters', 'resetLenses', 'resetProduct', and 'setSelectedImage'. Either include them or remove the dependency array.",["1134"],"React Hook useEffect has missing dependencies: 'getPost' and 'setSelectedImage'. Either include them or remove the dependency array.",["1135"],"React Hook useEffect has missing dependencies: 'id' and 'setSelectedImage'. Either include them or remove the dependency array.",["1136"],"React Hook useEffect has missing dependencies: 'closeModal' and 'resetBlog'. Either include them or remove the dependency array.",["1137"],"'retailNamesTabs' is defined but never used.","React Hook useEffect has a missing dependency: 'getAnalytics'. Either include it or remove the dependency array.",["1138"],["1139"],"React Hook useEffect has missing dependencies: 'addUser', 'changeStep', 'order', and 'setOrder'. Either include them or remove the dependency array.",["1140"],"React Hook useEffect has missing dependencies: 'addUser' and 'userData.response.user'. Either include them or remove the dependency array.",["1141"],"React Hook useEffect has missing dependencies: 'changeStep' and 'resetOrder'. Either include them or remove the dependency array.",["1142"],"React Hook useEffect has missing dependencies: 'activeIndex' and 'handleRefetch'. Either include them or remove the dependency array.",["1143"],["1144"],"'formatPrice' is defined but never used.","React Hook useEffect has a missing dependency: 'getCoupons'. Either include it or remove the dependency array.",["1145"],"'calendarTimes' is defined but never used.","'DeleteCalendarButton' is defined but never used.","'deleteCalendar' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'closeModal' and 'response.calendar'. Either include them or remove the dependency array.",["1146"],"no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","unexpected","React Hook useEffect has missing dependencies: 'closeModal', 'currentUser.premises', 'handleShowCalendarClick', 'isAdmin', 'response', and 'setShowModal'. Either include them or remove the dependency array.",["1147"],"React Hook useEffect has missing dependencies: 'closeModal' and 'setShowModal'. Either include them or remove the dependency array.",["1148"],"React Hook useEffect has a missing dependency: 'getCoupon'. Either include it or remove the dependency array.",["1149"],"React Hook useEffect has a missing dependency: 'resetCoupons'. Either include it or remove the dependency array.",["1150"],"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["1151","1152"],["1153","1154"],["1155","1156"],"React Hook useEffect has a missing dependency: 'getSlug'. Either include it or remove the dependency array.",["1157"],"React Hook useEffect has missing dependencies: 'path', 'requestOptions', and 'skip'. Either include them or remove the dependency array.",["1158"],"React Hook useEffect has missing dependencies: 'requestOptions' and 'skip'. Either include them or remove the dependency array.",["1159"],["1160"],"'obj' is assigned a value but never used.",["1161"],["1162"],"React Hook useEffect has a missing dependency: 'currentPage'. Either include it or remove the dependency array.",["1163"],["1164"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'CustomInput' is defined but never used.","'CustomButton' is defined but never used.","'UploadButton' is defined but never used.","'tab' is assigned a value but never used.","'setTab' is assigned a value but never used.","'files' is assigned a value but never used.","'handleFileInputChange' is assigned a value but never used.","'arr' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'response'. Either include it or remove the dependency array.",["1165"],"'formatAvailable' is defined but never used.","React Hook useEffect has a missing dependency: 'response.lenses'. Either include it or remove the dependency array.",["1166"],"React Hook useEffect has a missing dependency: 'response.products'. Either include it or remove the dependency array.",["1167"],"React Hook useEffect has a missing dependency: 'product.brand'. Either include it or remove the dependency array.",["1168"],"React Hook useEffect has an unnecessary dependency: 'brands'. Either exclude it or remove the dependency array. Outer scope values like 'brands' aren't valid dependencies because mutating them doesn't re-render the component.",["1169"],"'ImageContainer' is defined but never used.","'ProductImage' is defined but never used.",["1170"],["1171"],"React Hook useEffect has missing dependencies: 'firstDayIndex', 'lastDay', 'month', 'nextDays', 'response.calendar', and 'year'. Either include them or remove the dependency array.",["1172"],"'handleExceptionDays' is defined but never used.","React Hook useEffect has missing dependencies: 'response.calendar.endTimes', 'response.calendar.interval', and 'response.calendar.startTimes'. Either include them or remove the dependency array.",["1173"],["1174"],["1175"],"'CustomSelect' is defined but never used.",["1176"],["1177"],"React Hook useEffect has a missing dependency: 'getFilteredUsers'. Either include it or remove the dependency array.",["1178"],"React Hook useEffect has missing dependencies: 'getFilteredUsers' and 'users'. Either include them or remove the dependency array.",["1179"],"'holidayDates' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'examinationData.response'. Either include it or remove the dependency array.",["1180"],"React Hook useEffect has missing dependencies: 'handleChange', 'parameters.addition', and 'parameters.diopters'. Either include them or remove the dependency array. If 'handleChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1181"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has a missing dependency: 'response?.booking'. Either include it or remove the dependency array.",["1182"],"React Hook useEffect has missing dependencies: 'response?.userBookings' and 'userBookings?.dueDate'. Either include them or remove the dependency array.",["1183"],["1184"],"React Hook useEffect has a missing dependency: 'calendar'. Either include it or remove the dependency array. If 'setStartTime' needs the current value of 'calendar', you can also switch to useReducer instead of useState and read 'calendar' in the reducer.",["1185"],"React Hook useEffect has missing dependencies: 'response' and 'userBooking.userBookings.dueDate'. Either include them or remove the dependency array.",["1186"],["1187"],"React Hook useEffect has a missing dependency: 'handleOrderDetailChange'. Either include it or remove the dependency array.",["1188"],["1189"],["1190"],"'DiscountCheckboxContainer' is defined but never used.","'setIncludeDiscount' is assigned a value but never used.","'EmptyTittle' is defined but never used.","'productDiscount' is assigned a value but never used.","'setProductDiscount' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addLensesParameters' and 'idx'. Either include them or remove the dependency array.",["1191"],"React Hook useEffect has a missing dependency: 'action'. Either include it or remove the dependency array. If 'action' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1192"],"React Hook useEffect has missing dependencies: 'exam.response' and 'examinationToUpdate'. Either include them or remove the dependency array.",["1193"],"React Hook useEffect has an unnecessary dependency: 'examSchema'. Either exclude it or remove the dependency array. Outer scope values like 'examSchema' aren't valid dependencies because mutating them doesn't re-render the component.",["1194"],"no-global-assign","no-unsafe-negation",{"desc":"1195","fix":"1196"},{"desc":"1197","fix":"1198"},{"desc":"1199","fix":"1200"},{"desc":"1201","fix":"1202"},{"desc":"1203","fix":"1204"},{"desc":"1205","fix":"1206"},{"desc":"1207","fix":"1208"},{"desc":"1209","fix":"1210"},{"desc":"1211","fix":"1212"},{"desc":"1213","fix":"1214"},{"desc":"1215","fix":"1216"},{"desc":"1217","fix":"1218"},{"desc":"1219","fix":"1220"},{"desc":"1221","fix":"1222"},{"desc":"1223","fix":"1224"},{"desc":"1225","fix":"1226"},{"desc":"1227","fix":"1228"},{"desc":"1229","fix":"1230"},{"desc":"1231","fix":"1232"},{"desc":"1233","fix":"1234"},{"desc":"1235","fix":"1236"},{"desc":"1237","fix":"1238"},{"desc":"1239","fix":"1240"},{"desc":"1241","fix":"1242"},{"desc":"1243","fix":"1244"},{"desc":"1245","fix":"1246"},{"desc":"1247","fix":"1248"},{"desc":"1249","fix":"1250"},{"desc":"1251","fix":"1252"},{"desc":"1253","fix":"1254"},{"desc":"1255","fix":"1256"},{"desc":"1257","fix":"1258"},{"desc":"1259","fix":"1260"},{"desc":"1261","fix":"1262"},{"desc":"1263","fix":"1264"},{"desc":"1265","fix":"1266"},{"desc":"1267","fix":"1268"},{"desc":"1269","fix":"1270"},{"messageId":"1271","fix":"1272","desc":"1273"},{"messageId":"1274","fix":"1275","desc":"1276"},{"messageId":"1271","fix":"1277","desc":"1273"},{"messageId":"1274","fix":"1278","desc":"1276"},{"messageId":"1271","fix":"1279","desc":"1273"},{"messageId":"1274","fix":"1280","desc":"1276"},{"desc":"1281","fix":"1282"},{"desc":"1283","fix":"1284"},{"desc":"1285","fix":"1286"},{"desc":"1287","fix":"1288"},{"desc":"1289","fix":"1290"},{"desc":"1291","fix":"1292"},{"desc":"1293","fix":"1294"},{"desc":"1295","fix":"1296"},{"desc":"1297","fix":"1298"},{"desc":"1299","fix":"1300"},{"desc":"1301","fix":"1302"},{"desc":"1303","fix":"1304"},{"desc":"1305","fix":"1306"},{"desc":"1307","fix":"1308"},{"desc":"1309","fix":"1310"},{"desc":"1311","fix":"1312"},{"desc":"1313","fix":"1314"},{"desc":"1311","fix":"1315"},{"desc":"1307","fix":"1316"},{"desc":"1299","fix":"1317"},{"desc":"1301","fix":"1318"},{"desc":"1319","fix":"1320"},{"desc":"1321","fix":"1322"},{"desc":"1323","fix":"1324"},{"desc":"1325","fix":"1326"},{"desc":"1327","fix":"1328"},{"desc":"1329","fix":"1330"},{"desc":"1331","fix":"1332"},{"desc":"1333","fix":"1334"},{"desc":"1335","fix":"1336"},{"desc":"1333","fix":"1337"},{"desc":"1338","fix":"1339"},{"desc":"1211","fix":"1340"},{"desc":"1341","fix":"1342"},{"desc":"1343","fix":"1344"},{"desc":"1345","fix":"1346"},{"desc":"1347","fix":"1348"},{"desc":"1349","fix":"1350"},"Update the dependencies array to be: [getStats, token]",{"range":"1351","text":"1352"},"Update the dependencies array to be: [user, user?.fName, user?.lName]",{"range":"1353","text":"1354"},"Update the dependencies array to be: [activeCategoryTypeTab, getLenses, getProductsByQuery, products]",{"range":"1355","text":"1356"},"Update the dependencies array to be: [product, product.name]",{"range":"1357","text":"1358"},"Update the dependencies array to be: [getProductsByQuery, products]",{"range":"1359","text":"1360"},"Update the dependencies array to be: [activeCategoryTypeTab, getLenses, getProductsByQuery, products, searchQuery]",{"range":"1361","text":"1362"},"Update the dependencies array to be: [closeModal, isLoading, response]",{"range":"1363","text":"1364"},"Update the dependencies array to be: [activeIndex, refetch, searchQuery]",{"range":"1365","text":"1366"},"Update the dependencies array to be: [user.fName, user.lName, userObj, userObj.fName, userObj.lName]",{"range":"1367","text":"1368"},"Update the dependencies array to be: [getUser, id]",{"range":"1369","text":"1370"},"Update the dependencies array to be: [handleChange, resetUser]",{"range":"1371","text":"1372"},"Update the dependencies array to be: [blogsData, searchQuery]",{"range":"1373","text":"1374"},"Update the dependencies array to be: [activeIndex, blogsData]",{"range":"1375","text":"1376"},"Update the dependencies array to be: [blogsData.isLoading, blogsData.response?.blogs]",{"range":"1377","text":"1378"},"Update the dependencies array to be: [closeModal]",{"range":"1379","text":"1380"},"Update the dependencies array to be: [productObj?.type, refetch]",{"range":"1381","text":"1382"},"Update the dependencies array to be: [handleChange, lenses?.lensType, productObj.lensType, productObj.type]",{"range":"1383","text":"1384"},"Update the dependencies array to be: [isLoadingFilters, response?.filters]",{"range":"1385","text":"1386"},"Update the dependencies array to be: [id, eanCode, productObj.type, productObj.eanCode, product.type, getEanCode, handleChange]",{"range":"1387","text":"1388"},"Update the dependencies array to be: [getSingleProduct, handleChangeType, handleSelectImage, id, product.type, productObj.type]",{"range":"1389","text":"1390"},"Update the dependencies array to be: [lenses.image, setSelectedImage]",{"range":"1391","text":"1392"},"Update the dependencies array to be: [resetContactLenses, resetGlassesParameters, resetLenses, resetProduct, setSelectedImage]",{"range":"1393","text":"1394"},"Update the dependencies array to be: [getPost, id, setSelectedImage]",{"range":"1395","text":"1396"},"Update the dependencies array to be: [id, post, setSelectedImage]",{"range":"1397","text":"1398"},"Update the dependencies array to be: [closeModal, resetBlog]",{"range":"1399","text":"1400"},"Update the dependencies array to be: [fitlterQuery, getAnalytics]",{"range":"1401","text":"1402"},"Update the dependencies array to be: [activeIndex, getAnalytics, refetchIndex]",{"range":"1403","text":"1404"},"Update the dependencies array to be: [userId, orderId, userData.response, orderData.response, changeStep, addUser, setOrder, order]",{"range":"1405","text":"1406"},"Update the dependencies array to be: [addUser, userData.isLoading, userData.response.user]",{"range":"1407","text":"1408"},"Update the dependencies array to be: [changeStep, resetOrder]",{"range":"1409","text":"1410"},"Update the dependencies array to be: [activeIndex, handleRefetch, searchQuery]",{"range":"1411","text":"1412"},"Update the dependencies array to be: [isFetching, response, activeIndex, closeModal]",{"range":"1413","text":"1414"},"Update the dependencies array to be: [coupons, getCoupons]",{"range":"1415","text":"1416"},"Update the dependencies array to be: [closeModal, isFetching, response.calendar]",{"range":"1417","text":"1418"},"Update the dependencies array to be: [closeModal, currentUser.premises, handleShowCalendarClick, isAdmin, isLoading, response, setShowModal]",{"range":"1419","text":"1420"},"Update the dependencies array to be: [closeModal, setShowModal]",{"range":"1421","text":"1422"},"Update the dependencies array to be: [couponId, getCoupon]",{"range":"1423","text":"1424"},"Update the dependencies array to be: [resetCoupons]",{"range":"1425","text":"1426"},"removeEscape",{"range":"1427","text":"1428"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1429","text":"1430"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1431","text":"1428"},{"range":"1432","text":"1430"},{"range":"1433","text":"1428"},{"range":"1434","text":"1430"},"Update the dependencies array to be: [getSlug, string]",{"range":"1435","text":"1436"},"Update the dependencies array to be: [path, refetchIndex, requestOptions, skip]",{"range":"1437","text":"1438"},"Update the dependencies array to be: [refetchIndex, path, skip, requestOptions]",{"range":"1439","text":"1440"},"Update the dependencies array to be: [refetchIndex, path, id, skip, requestOptions]",{"range":"1441","text":"1442"},"Update the dependencies array to be: [filter?.filters?.type, refetch]",{"range":"1443","text":"1444"},"Update the dependencies array to be: [isLoading, response?.filters]",{"range":"1445","text":"1446"},"Update the dependencies array to be: [currentPage, listItems]",{"range":"1447","text":"1448"},"Update the dependencies array to be: [currentPage, handleClickPrev]",{"range":"1449","text":"1450"},"Update the dependencies array to be: [isLoading, response]",{"range":"1451","text":"1452"},"Update the dependencies array to be: [isLoading, response.lenses]",{"range":"1453","text":"1454"},"Update the dependencies array to be: [isLoading, response.products]",{"range":"1455","text":"1456"},"Update the dependencies array to be: [isBranded, product.brand]",{"range":"1457","text":"1458"},"Update the dependencies array to be: [filters?.brands]",{"range":"1459","text":"1460"},"Update the dependencies array to be: [month, refetch]",{"range":"1461","text":"1462"},"Update the dependencies array to be: [calendar, refetch]",{"range":"1463","text":"1464"},"Update the dependencies array to be: [firstDayIndex, isLoading, lastDay, month, nextDays, response.calendar, year]",{"range":"1465","text":"1466"},"Update the dependencies array to be: [isLoading, response.calendar.endTimes, response.calendar.interval, response.calendar.startTimes]",{"range":"1467","text":"1468"},{"range":"1469","text":"1466"},{"range":"1470","text":"1462"},{"range":"1471","text":"1454"},{"range":"1472","text":"1456"},"Update the dependencies array to be: [getFilteredUsers, users]",{"range":"1473","text":"1474"},"Update the dependencies array to be: [getFilteredUsers, searchQuery, users]",{"range":"1475","text":"1476"},"Update the dependencies array to be: [examinationData.isLoading, examinationData.response]",{"range":"1477","text":"1478"},"Update the dependencies array to be: [handleChange, parameters.addition, parameters.diopters]",{"range":"1479","text":"1480"},"Update the dependencies array to be: [selectedBooking, isLoading, response?.booking]",{"range":"1481","text":"1482"},"Update the dependencies array to be: [isLoading, response?.userBookings, userBookings?.dueDate]",{"range":"1483","text":"1484"},"Update the dependencies array to be: [dayData?.bookingDate, refetch]",{"range":"1485","text":"1486"},"Update the dependencies array to be: [calendar, day]",{"range":"1487","text":"1488"},"Update the dependencies array to be: [isLoading, response, userBooking.userBookings.dueDate]",{"range":"1489","text":"1490"},{"range":"1491","text":"1488"},"Update the dependencies array to be: [handleOrderDetailChange, isUpdating, order]",{"range":"1492","text":"1493"},{"range":"1494","text":"1368"},"Update the dependencies array to be: [getUser, userId]",{"range":"1495","text":"1496"},"Update the dependencies array to be: [addLensesParameters, contactLenses, idx]",{"range":"1497","text":"1498"},"Update the dependencies array to be: [action, ref]",{"range":"1499","text":"1500"},"Update the dependencies array to be: [exam.isLoading, exam.response, examinationToUpdate]",{"range":"1501","text":"1502"},"Update the dependencies array to be: []",{"range":"1503","text":"1504"},[6634,6641],"[getStats, token]",[3537,3563],"[user, user?.fName, user?.lName]",[28193,28216],"[activeCategoryTypeTab, getLenses, getProductsByQuery, products]",[28960,28974],"[product, product.name]",[3993,4003],"[getProductsByQuery, products]",[4518,4531],"[activeCategoryTypeTab, getLenses, getProductsByQuery, products, searchQuery]",[2982,2993],"[closeModal, isLoading, response]",[3345,3358],"[activeIndex, refetch, searchQuery]",[4403,4433],"[user.fName, user.lName, userObj, userObj.fName, userObj.lName]",[4537,4541],"[getUser, id]",[5291,5293],"[handleChange, resetUser]",[2392,2405],"[blogsData, searchQuery]",[2908,2921],"[activeIndex, blogsData]",[3047,3068],"[blogsData.isLoading, blogsData.response?.blogs]",[3389,3391],"[closeModal]",[14921,14939],"[productObj?.type, refetch]",[15230,15247],"[handleChange, lenses?.lensType, productObj.lensType, productObj.type]",[15401,15419],"[isLoadingFilters, response?.filters]",[15890,15954],"[id, eanCode, productObj.type, productObj.eanCode, product.type, getEanCode, handleChange]",[16616,16621],"[getSingleProduct, handleChangeType, handleSelectImage, id, product.type, productObj.type]",[16826,16840],"[lenses.image, setSelectedImage]",[17126,17128],"[resetContactLenses, resetGlassesParameters, resetLenses, resetProduct, setSelectedImage]",[2867,2871],"[getPost, id, setSelectedImage]",[3299,3305],"[id, post, setSelectedImage]",[3624,3626],"[closeModal, resetBlog]",[4775,4789],"[fitlterQuery, getAnalytics]",[4984,5011],"[activeIndex, getAnalytics, refetchIndex]",[3362,3418],"[userId, orderId, userData.response, orderData.response, changeStep, addUser, setOrder, order]",[3530,3550],"[addUser, userData.isLoading, userData.response.user]",[3746,3748],"[changeStep, resetOrder]",[4718,4731],"[activeIndex, handleRefetch, searchQuery]",[5051,5086],"[isFetching, response, activeIndex, closeModal]",[1242,1251],"[coupons, getCoupons]",[7609,7621],"[closeModal, isFetching, response.calendar]",[7397,7408],"[closeModal, currentUser.premises, handleShowCalendarClick, isAdmin, isLoading, response, setShowModal]",[7851,7853],"[closeModal, setShowModal]",[1255,1265],"[couponId, getCoupon]",[1357,1359],"[resetCoupons]",[684,685],"",[684,684],"\\",[752,753],[752,752],[754,755],[754,754],[1012,1020],"[getSlug, string]",[1192,1206],"[path, refetchIndex, requestOptions, skip]",[2507,2527],"[refetchIndex, path, skip, requestOptions]",[3754,3778],"[refetchIndex, path, id, skip, requestOptions]",[1921,1944],"[filter?.filters?.type, refetch]",[2091,2102],"[isLoading, response?.filters]",[694,705],"[currentPage, listItems]",[1003,1020],"[currentPage, handleClickPrev]",[2686,2697],"[isLoading, response]",[2013,2024],"[isLoading, response.lenses]",[3539,3550],"[isLoading, response.products]",[1738,1749],"[isBranded, product.brand]",[1874,1899],"[filters?.brands]",[1086,1093],"[month, refetch]",[1181,1191],"[calendar, refetch]",[1722,1733],"[firstDayIndex, isLoading, lastDay, month, nextDays, response.calendar, year]",[13246,13257],"[isLoading, response.calendar.endTimes, response.calendar.interval, response.calendar.startTimes]",[2978,2989],[3039,3046],[1919,1930],[1911,1922],[1580,1587],"[getFilteredUsers, users]",[1908,1921],"[getFilteredUsers, searchQuery, users]",[2172,2199],"[examinationData.isLoading, examinationData.response]",[3060,3156],"[handleChange, parameters.addition, parameters.diopters]",[1978,2006],"[selectedBooking, isLoading, response?.booking]",[1662,1673],"[isLoading, response?.userBookings, userBookings?.dueDate]",[1765,1787],"[dayData?.bookingDate, refetch]",[3298,3303],"[calendar, day]",[1300,1311],"[isLoading, response, userBooking.userBookings.dueDate]",[2981,2986],[4845,4864],"[handleOrderDetailChange, isUpdating, order]",[3022,3052],[3144,3152],"[getUser, userId]",[2374,2389],"[addLensesParameters, contactLenses, idx]",[467,472],"[action, ref]",[3808,3824],"[exam.isLoading, exam.response, examinationToUpdate]",[8112,8124],"[]"]