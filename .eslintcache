[{"/imooptik-frontend/src/index.js":"1","/imooptik-frontend/src/reportWebVitals.js":"2","/imooptik-frontend/src/App.jsx":"3","/imooptik-frontend/src/context/auth/auth.context.jsx":"4","/imooptik-frontend/src/context/loading-modal/loading-modal.contenxt.jsx":"5","/imooptik-frontend/src/global.styles.jsx":"6","/imooptik-frontend/src/components/popup/pop-up.component.jsx":"7","/imooptik-frontend/src/context/auth/auth.queries.jsx":"8","/imooptik-frontend/src/pages/dashboard/dashboard.jsx":"9","/imooptik-frontend/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.jsx":"10","/imooptik-frontend/src/pages/reset-password/reset-password.jsx":"11","/imooptik-frontend/src/components/popup/pop.up.styles.jsx":"12","/imooptik-frontend/src/pages/dashboard/dashboard.styles.jsx":"13","/imooptik-frontend/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.styles.jsx":"14","/imooptik-frontend/src/components/spinner/spinner.component.jsx":"15","/imooptik-frontend/src/components/custom-button/custom-button.component.jsx":"16","/imooptik-frontend/src/pages/reset-password/reset.password.styles.jsx":"17","/imooptik-frontend/src/components/sidenav/sidenav.component.jsx":"18","/imooptik-frontend/src/context/blog/blog.context.jsx":"19","/imooptik-frontend/src/context/user/user.context.jsx":"20","/imooptik-frontend/src/context/warehouse/warehouse.context.jsx":"21","/imooptik-frontend/src/context/image/image.context.jsx":"22","/imooptik-frontend/src/context/analytics/analytics.context.jsx":"23","/imooptik-frontend/src/context/orders/orders.context.jsx":"24","/imooptik-frontend/src/context/booking/booking.context.jsx":"25","/imooptik-frontend/src/context/examination/examination.context.jsx":"26","/imooptik-frontend/src/context/coupons/coupons.context.jsx":"27","/imooptik-frontend/src/context/order/order.context.jsx":"28","/imooptik-frontend/src/components/forgot-password/forgot-password.component.jsx":"29","/imooptik-frontend/src/components/sign-in/sign-in.component.jsx":"30","/imooptik-frontend/src/components/custom-input/custom-input.component.jsx":"31","/imooptik-frontend/src/sections/orders/orders.section.jsx":"32","/imooptik-frontend/src/sections/analytics/analytics.section.jsx":"33","/imooptik-frontend/src/sections/customers/customers.section.jsx":"34","/imooptik-frontend/src/sections/customer-profile/customer-profile.section.jsx":"35","/imooptik-frontend/src/sections/product/product.section.jsx":"36","/imooptik-frontend/src/sections/no-permission/no-permission.section.jsx":"37","/imooptik-frontend/src/sections/order/order.section.jsx":"38","/imooptik-frontend/src/sections/blog-posts/blog-posts.section.jsx":"39","/imooptik-frontend/src/sections/booking/booking.section.jsx":"40","/imooptik-frontend/src/sections/post/post.section.jsx":"41","/imooptik-frontend/src/sections/coupons/coupons.section.jsx":"42","/imooptik-frontend/src/sections/coupon/coupon.section.jsx":"43","/imooptik-frontend/src/sections/e-shop/e-shop.section.jsx":"44","/imooptik-frontend/src/sections/calendar/calendar.section.jsx":"45","/imooptik-frontend/src/components/spinner/spinner.styles.jsx":"46","/imooptik-frontend/src/components/custom-button/custom-button.styles.jsx":"47","/imooptik-frontend/src/components/sidenav/sidenav.styles.jsx":"48","/imooptik-frontend/src/context/blog/blog.queries.jsx":"49","/imooptik-frontend/src/context/user/user.utils.jsx":"50","/imooptik-frontend/src/context/user/user.queries.jsx":"51","/imooptik-frontend/src/context/warehouse/warehouse.utils.jsx":"52","/imooptik-frontend/src/context/image/image.queries.jsx":"53","/imooptik-frontend/src/components/forgot-password/forgot-password.styles.jsx":"54","/imooptik-frontend/src/components/sign-in/sign-in.styles.jsx":"55","/imooptik-frontend/src/utils/warehouse.utils.jsx":"56","/imooptik-frontend/src/context/orders/orders.utils.jsx":"57","/imooptik-frontend/src/sections/orders/orders.styles.jsx":"58","/imooptik-frontend/src/utils/analytics.utils.jsx":"59","/imooptik-frontend/src/sections/analytics/analytics.styles.jsx":"60","/imooptik-frontend/src/utils/user.utils.jsx":"61","/imooptik-frontend/src/sections/customers/customers.styles.jsx":"62","/imooptik-frontend/src/components/custom-input/custom-input.styles.jsx":"63","/imooptik-frontend/src/sections/no-permission/no-permission.styles.jsx":"64","/imooptik-frontend/src/sections/order/order.styles.jsx":"65","/imooptik-frontend/src/sections/customer-profile/customer-profile.styles.jsx":"66","/imooptik-frontend/src/utils/calendar.utils.jsx":"67","/imooptik-frontend/src/sections/product/product.styles.jsx":"68","/imooptik-frontend/src/sections/post/post.styles.jsx":"69","/imooptik-frontend/src/sections/calendar/calendar.styles.jsx":"70","/imooptik-frontend/src/sections/coupons/coupons.styles.jsx":"71","/imooptik-frontend/src/sections/booking/booking.styles.jsx":"72","/imooptik-frontend/src/sections/coupon/coupon.styles.jsx":"73","/imooptik-frontend/src/sections/e-shop/e-shop.styles.jsx":"74","/imooptik-frontend/src/components/section-navbar/section-navbar.component.jsx":"75","/imooptik-frontend/src/components/section-header/section-header.component.jsx":"76","/imooptik-frontend/src/components/scroll-container/scroll-container.component.jsx":"77","/imooptik-frontend/src/components/list-arrows/list-arrows.component.jsx":"78","/imooptik-frontend/src/hooks/useFetch.jsx":"79","/imooptik-frontend/src/components/user-form/user-form.component.jsx":"80","/imooptik-frontend/src/components/modal-get-product-data/modal-get-product-data.component.jsx":"81","/imooptik-frontend/src/components/new-user-form/new-user-form.component.jsx":"82","/imooptik-frontend/src/components/modal-images/modal-images.component.jsx":"83","/imooptik-frontend/src/components/modal-get-lenses-data/modal-get-lenses-data.component.jsx":"84","/imooptik-frontend/src/components/product-glasses-form/product-glasses-form.component.jsx":"85","/imooptik-frontend/src/components/product-lenses-form/product-lenses-form.component.jsx":"86","/imooptik-frontend/src/components/product-accessories-form/product-accessories-form.component.jsx":"87","/imooptik-frontend/src/components/product-contact-lenses-form/product-contact-lenses-form.component.jsx":"88","/imooptik-frontend/src/components/product-service-form/product-service-form.component.jsx":"89","/imooptik-frontend/src/components/custom-select/custom-select.component.jsx":"90","/imooptik-frontend/src/components/product-overview/product-overview.component.jsx":"91","/imooptik-frontend/src/components/modal-eshop-filter/modal-eshop-filter.component.jsx":"92","/imooptik-frontend/src/components/product-input-row/product-input-row.component.jsx":"93","/imooptik-frontend/src/components/custom-textarea/custom-textarea.component.jsx":"94","/imooptik-frontend/src/components/custom-checkbox/custom-checkbox.component.jsx":"95","/imooptik-frontend/src/components/booking-calendar-bookings/booking-calendar-bookings.component.jsx":"96","/imooptik-frontend/src/components/calendar-weekdays/calendar-weekdays.component.jsx":"97","/imooptik-frontend/src/components/product-glasses-form/product-glasses-form.styles.jsx":"98","/imooptik-frontend/src/sections/blog-posts/blog-posts.styles.jsx":"99","/imooptik-frontend/src/components/booking-calendar-overview/booking-calendar-overview.component.jsx":"100","/imooptik-frontend/src/components/calendar/calendar.component.jsx":"101","/imooptik-frontend/src/context/week-calendar/week-calendar.context.jsx":"102","/imooptik-frontend/src/sections/order/steps/4-summary/summary.component.jsx":"103","/imooptik-frontend/src/sections/order/steps/2-select-product/select-product.component.jsx":"104","/imooptik-frontend/src/sections/order/steps/1-select-user/select-user.component.jsx":"105","/imooptik-frontend/src/sections/order/steps/3-select-lenses/select-lenses.component.jsx":"106","/imooptik-frontend/src/components/section-navbar/section-navbar.styles.jsx":"107","/imooptik-frontend/src/components/section-header/section-header.styles.jsx":"108","/imooptik-frontend/src/components/scroll-container/scroll-container.styles.jsx":"109","/imooptik-frontend/src/components/list-arrows/list-arrows.styles.jsx":"110","/imooptik-frontend/src/components/order-overview/order-overview.styles.jsx":"111","/imooptik-frontend/src/components/order-overview/order-overview.component.jsx":"112","/imooptik-frontend/src/components/user-form/user.form-styles.jsx":"113","/imooptik-frontend/src/utils/orders.utils.jsx":"114","/imooptik-frontend/src/components/modal-get-product-data/modal-get-product-data.styles.jsx":"115","/imooptik-frontend/src/components/new-user-form/new-user-form.styles.jsx":"116","/imooptik-frontend/src/components/modal-images/modal-images.styles.jsx":"117","/imooptik-frontend/src/components/product-accessories-form/product-accessories-form.styles.jsx":"118","/imooptik-frontend/src/components/modal-get-lenses-data/modal-get-lenses-data.styles.jsx":"119","/imooptik-frontend/src/components/product-contact-lenses-form/product-contact-lenses-form.styles.jsx":"120","/imooptik-frontend/src/components/product-service-form/product-service-form.styles.jsx":"121","/imooptik-frontend/src/components/product-lenses-form/product-lenses-form.styles.jsx":"122","/imooptik-frontend/src/components/modal-eshop-filter/modal-eshop-filter.styles.jsx":"123","/imooptik-frontend/src/components/product-overview/product-overview.styles.jsx":"124","/imooptik-frontend/src/components/custom-select/custom-select.styles.jsx":"125","/imooptik-frontend/src/components/custom-textarea/custom-textarea.styles.jsx":"126","/imooptik-frontend/src/components/custom-checkbox/custom-checkbox.styles.jsx":"127","/imooptik-frontend/src/components/product-input-row/product-input-row.styles.jsx":"128","/imooptik-frontend/src/components/custom-form-switch/custom-form-switch.component.jsx":"129","/imooptik-frontend/src/components/examinations-overview/examinations-overview.component.jsx":"130","/imooptik-frontend/src/components/parameters-table/parameters-table.component.jsx":"131","/imooptik-frontend/src/components/profile-order-overview/profile-order-overview.component.jsx":"132","/imooptik-frontend/src/components/booking-calendar-bookings/booking-calendar-bookings.styles.jsx":"133","/imooptik-frontend/src/utils/week-calendar.utils.jsx":"134","/imooptik-frontend/src/components/calendar-weekdays/calendar-weekdays.styles.jsx":"135","/imooptik-frontend/src/components/modal-booking/modal-booking.component.jsx":"136","/imooptik-frontend/src/components/calendar-booked-day/calendar-booked-day.component.jsx":"137","/imooptik-frontend/src/components/modal-user-bookings/modal-user-booking.component.jsx":"138","/imooptik-frontend/src/components/modal-userbookings-details/modal-userbookings-details.component.jsx":"139","/imooptik-frontend/src/components/booking-calendar-overview/booking-calendar-overview.styles.jsx":"140","/imooptik-frontend/src/components/calendar/calendar.styles.jsx":"141","/imooptik-frontend/src/sections/order/steps/4-summary/summary.styles.jsx":"142","/imooptik-frontend/src/sections/order/steps/2-select-product/select-product.styles.jsx":"143","/imooptik-frontend/src/sections/order/steps/1-select-user/select-user.styles.jsx":"144","/imooptik-frontend/src/sections/order/steps/3-select-lenses/select-lenses.styles.jsx":"145","/imooptik-frontend/src/components/order-summary-lenses-name/order-summary-lenses-name.component.jsx":"146","/imooptik-frontend/src/components/order-summary-product-name/order-summary-product-name.component.jsx":"147","/imooptik-frontend/src/components/modal-order-update-user/modal-order-update-user.component.jsx":"148","/imooptik-frontend/src/components/custom-back-button/custom-back-button.component.jsx":"149","/imooptik-frontend/src/components/order-cart-row/order-cart-row.component.jsx":"150","/imooptik-frontend/src/components/modal-finish-order/modal-finish-order.component.jsx":"151","/imooptik-frontend/src/components/order-cart-lenses-row/order-cart-lenses-row.component.jsx":"152","/imooptik-frontend/src/hooks/useOutsideAlerter.jsx":"153","/imooptik-frontend/src/components/order-deligate-modal/order-deligate-modal.component.jsx":"154","/imooptik-frontend/src/components/modal-finish-deposited-order/modal-finish-deposited-order.component.jsx":"155","/imooptik-frontend/src/components/parameters-table/parameters-table.styles.jsx":"156","/imooptik-frontend/src/components/custom-form-switch/custom-form-switch.styles.jsx":"157","/imooptik-frontend/src/components/examinations-overview/examinations-overview.styles.jsx":"158","/imooptik-frontend/src/components/profile-order-overview/profile-order-overview.styles.jsx":"159","/imooptik-frontend/src/components/examination-user/examination-user.component.jsx":"160","/imooptik-frontend/src/components/modal-optometrist-examination/modal-optometrist-examination.component.jsx":"161","/imooptik-frontend/src/components/modal-booking/modal-booking.styles.jsx":"162","/imooptik-frontend/src/components/calendar-booked-day/calendar-booked-day.styles.jsx":"163","/imooptik-frontend/src/components/modal-user-bookings/modal-user-booking.styles.jsx":"164","/imooptik-frontend/src/components/modal-userbookings-details/modal-userbookings-details.styles.jsx":"165","/imooptik-frontend/src/components/modal-order-update-user/modal-order-update-user.styles.jsx":"166","/imooptik-frontend/src/components/custom-back-button/custom-back-button.styles.jsx":"167","/imooptik-frontend/src/components/order-cart-row/order-cart-row.styles.jsx":"168","/imooptik-frontend/src/components/modal-finish-order/modal-finish-order.styles.jsx":"169","/imooptik-frontend/src/components/order-cart-lenses-row/order-cart-lenses-row.styles.jsx":"170","/imooptik-frontend/src/components/modal-finish-deposited-order/modal-finish-deposited-order.styles.jsx":"171","/imooptik-frontend/src/components/order-deligate-modal/order-deligate-modal.styles.jsx":"172","/imooptik-frontend/src/components/examination-user/examination-user.styles.jsx":"173","/imooptik-frontend/src/utils/parameters.utils.jsx":"174","/imooptik-frontend/src/components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx":"175"},{"size":717,"mtime":1608670306490,"results":"176","hashOfConfig":"177"},{"size":362,"mtime":1608191294784,"results":"178","hashOfConfig":"177"},{"size":1799,"mtime":1614335619759,"results":"179","hashOfConfig":"177"},{"size":6979,"mtime":1615145205300,"results":"180","hashOfConfig":"177"},{"size":1076,"mtime":1610126635393,"results":"181","hashOfConfig":"177"},{"size":4820,"mtime":1614888552660,"results":"182","hashOfConfig":"177"},{"size":714,"mtime":1609965412857,"results":"183","hashOfConfig":"177"},{"size":2292,"mtime":1610635788267,"results":"184","hashOfConfig":"177"},{"size":9175,"mtime":1614598869716,"results":"185","hashOfConfig":"177"},{"size":840,"mtime":1609978179243,"results":"186","hashOfConfig":"177"},{"size":1667,"mtime":1608613259561,"results":"187","hashOfConfig":"177"},{"size":721,"mtime":1612808901067,"results":"188","hashOfConfig":"177"},{"size":658,"mtime":1616022204450,"results":"189","hashOfConfig":"177"},{"size":545,"mtime":1612808589467,"results":"190","hashOfConfig":"177"},{"size":178,"mtime":1608409397640,"results":"191","hashOfConfig":"177"},{"size":283,"mtime":1608325857586,"results":"192","hashOfConfig":"177"},{"size":772,"mtime":1610476886850,"results":"193","hashOfConfig":"177"},{"size":2543,"mtime":1614988936648,"results":"194","hashOfConfig":"177"},{"size":4016,"mtime":1614335025529,"results":"195","hashOfConfig":"177"},{"size":12185,"mtime":1616599831411,"results":"196","hashOfConfig":"177"},{"size":26578,"mtime":1616503954350,"results":"197","hashOfConfig":"177"},{"size":4391,"mtime":1614335020409,"results":"198","hashOfConfig":"177"},{"size":2796,"mtime":1614335027909,"results":"199","hashOfConfig":"177"},{"size":7198,"mtime":1615234022855,"results":"200","hashOfConfig":"177"},{"size":7143,"mtime":1614335024459,"results":"201","hashOfConfig":"177"},{"size":3402,"mtime":1614335021629,"results":"202","hashOfConfig":"177"},{"size":6964,"mtime":1615644590950,"results":"203","hashOfConfig":"177"},{"size":9583,"mtime":1614336734559,"results":"204","hashOfConfig":"177"},{"size":1466,"mtime":1609978281513,"results":"205","hashOfConfig":"177"},{"size":1925,"mtime":1609978226453,"results":"206","hashOfConfig":"177"},{"size":639,"mtime":1608689089980,"results":"207","hashOfConfig":"177"},{"size":8077,"mtime":1616179120290,"results":"208","hashOfConfig":"177"},{"size":13829,"mtime":1616611603111,"results":"209","hashOfConfig":"177"},{"size":5837,"mtime":1616178779140,"results":"210","hashOfConfig":"177"},{"size":7569,"mtime":1616601417601,"results":"211","hashOfConfig":"177"},{"size":22740,"mtime":1616504318910,"results":"212","hashOfConfig":"177"},{"size":810,"mtime":1610132345623,"results":"213","hashOfConfig":"177"},{"size":5356,"mtime":1614017510220,"results":"214","hashOfConfig":"177"},{"size":5376,"mtime":1614275577027,"results":"215","hashOfConfig":"177"},{"size":13855,"mtime":1614335007529,"results":"216","hashOfConfig":"177"},{"size":10042,"mtime":1614337519409,"results":"217","hashOfConfig":"177"},{"size":3073,"mtime":1615644856550,"results":"218","hashOfConfig":"177"},{"size":5610,"mtime":1616611025741,"results":"219","hashOfConfig":"177"},{"size":7519,"mtime":1616498678220,"results":"220","hashOfConfig":"177"},{"size":12193,"mtime":1616611310181,"results":"221","hashOfConfig":"177"},{"size":377,"mtime":1608409635720,"results":"222","hashOfConfig":"177"},{"size":440,"mtime":1609635534260,"results":"223","hashOfConfig":"177"},{"size":5222,"mtime":1614873801940,"results":"224","hashOfConfig":"177"},{"size":1793,"mtime":1608678905090,"results":"225","hashOfConfig":"177"},{"size":897,"mtime":1611960472114,"results":"226","hashOfConfig":"177"},{"size":3508,"mtime":1614335013909,"results":"227","hashOfConfig":"177"},{"size":6855,"mtime":1616610964681,"results":"228","hashOfConfig":"177"},{"size":1560,"mtime":1610106635382,"results":"229","hashOfConfig":"177"},{"size":898,"mtime":1609978275513,"results":"230","hashOfConfig":"177"},{"size":975,"mtime":1612808569627,"results":"231","hashOfConfig":"177"},{"size":3134,"mtime":1616090803610,"results":"232","hashOfConfig":"177"},{"size":889,"mtime":1614212868650,"results":"233","hashOfConfig":"177"},{"size":2261,"mtime":1615235417795,"results":"234","hashOfConfig":"177"},{"size":404,"mtime":1616611534621,"results":"235","hashOfConfig":"177"},{"size":3343,"mtime":1616500404270,"results":"236","hashOfConfig":"177"},{"size":431,"mtime":1616599829921,"results":"237","hashOfConfig":"177"},{"size":1734,"mtime":1616179017760,"results":"238","hashOfConfig":"177"},{"size":1331,"mtime":1612803190107,"results":"239","hashOfConfig":"177"},{"size":728,"mtime":1610132354653,"results":"240","hashOfConfig":"177"},{"size":454,"mtime":1612803607557,"results":"241","hashOfConfig":"177"},{"size":632,"mtime":1614275950637,"results":"242","hashOfConfig":"177"},{"size":8245,"mtime":1616611449131,"results":"243","hashOfConfig":"177"},{"size":952,"mtime":1614275887497,"results":"244","hashOfConfig":"177"},{"size":1888,"mtime":1614275708117,"results":"245","hashOfConfig":"177"},{"size":3151,"mtime":1614275760737,"results":"246","hashOfConfig":"177"},{"size":1785,"mtime":1614889858300,"results":"247","hashOfConfig":"177"},{"size":2199,"mtime":1614275485717,"results":"248","hashOfConfig":"177"},{"size":1170,"mtime":1614275830067,"results":"249","hashOfConfig":"177"},{"size":709,"mtime":1614352978139,"results":"250","hashOfConfig":"177"},{"size":655,"mtime":1613076713220,"results":"251","hashOfConfig":"177"},{"size":1521,"mtime":1614274612207,"results":"252","hashOfConfig":"177"},{"size":320,"mtime":1611163718930,"results":"253","hashOfConfig":"177"},{"size":1810,"mtime":1613830248251,"results":"254","hashOfConfig":"177"},{"size":3835,"mtime":1614269466837,"results":"255","hashOfConfig":"177"},{"size":12557,"mtime":1616607265141,"results":"256","hashOfConfig":"177"},{"size":5696,"mtime":1616611536131,"results":"257","hashOfConfig":"177"},{"size":13759,"mtime":1616600219331,"results":"258","hashOfConfig":"177"},{"size":8347,"mtime":1614335038309,"results":"259","hashOfConfig":"177"},{"size":4195,"mtime":1616114357420,"results":"260","hashOfConfig":"177"},{"size":11074,"mtime":1616549447778,"results":"261","hashOfConfig":"177"},{"size":7360,"mtime":1616550008568,"results":"262","hashOfConfig":"177"},{"size":5114,"mtime":1615300814521,"results":"263","hashOfConfig":"177"},{"size":8709,"mtime":1616109034470,"results":"264","hashOfConfig":"177"},{"size":2208,"mtime":1616083302660,"results":"265","hashOfConfig":"177"},{"size":693,"mtime":1612972806200,"results":"266","hashOfConfig":"177"},{"size":2188,"mtime":1614891396760,"results":"267","hashOfConfig":"177"},{"size":8077,"mtime":1616610965971,"results":"268","hashOfConfig":"177"},{"size":425,"mtime":1609365301650,"results":"269","hashOfConfig":"177"},{"size":651,"mtime":1608506295620,"results":"270","hashOfConfig":"177"},{"size":354,"mtime":1610748624680,"results":"271","hashOfConfig":"177"},{"size":3418,"mtime":1613610106850,"results":"272","hashOfConfig":"177"},{"size":7467,"mtime":1615648643500,"results":"273","hashOfConfig":"177"},{"size":2029,"mtime":1616100217530,"results":"274","hashOfConfig":"177"},{"size":1728,"mtime":1613609903180,"results":"275","hashOfConfig":"177"},{"size":999,"mtime":1612984003740,"results":"276","hashOfConfig":"177"},{"size":3274,"mtime":1614335044719,"results":"277","hashOfConfig":"177"},{"size":4381,"mtime":1616020836010,"results":"278","hashOfConfig":"177"},{"size":11219,"mtime":1616610843081,"results":"279","hashOfConfig":"177"},{"size":5364,"mtime":1616610966911,"results":"280","hashOfConfig":"177"},{"size":3313,"mtime":1616611537261,"results":"281","hashOfConfig":"177"},{"size":6771,"mtime":1616610967671,"results":"282","hashOfConfig":"177"},{"size":854,"mtime":1614275040427,"results":"283","hashOfConfig":"177"},{"size":1186,"mtime":1614274639547,"results":"284","hashOfConfig":"177"},{"size":1039,"mtime":1616082198410,"results":"285","hashOfConfig":"177"},{"size":624,"mtime":1613416674392,"results":"286","hashOfConfig":"177"},{"size":2933,"mtime":1614889391600,"results":"287","hashOfConfig":"177"},{"size":5574,"mtime":1616179300950,"results":"288","hashOfConfig":"177"},{"size":2294,"mtime":1614205641940,"results":"289","hashOfConfig":"177"},{"size":1195,"mtime":1615294536561,"results":"290","hashOfConfig":"177"},{"size":3044,"mtime":1616102014260,"results":"291","hashOfConfig":"177"},{"size":1096,"mtime":1613574911250,"results":"292","hashOfConfig":"177"},{"size":4564,"mtime":1613054876220,"results":"293","hashOfConfig":"177"},{"size":1115,"mtime":1612828420327,"results":"294","hashOfConfig":"177"},{"size":3044,"mtime":1616109948850,"results":"295","hashOfConfig":"177"},{"size":1743,"mtime":1616108713880,"results":"296","hashOfConfig":"177"},{"size":918,"mtime":1614176766280,"results":"297","hashOfConfig":"177"},{"size":2158,"mtime":1616109779180,"results":"298","hashOfConfig":"177"},{"size":1934,"mtime":1613059142660,"results":"299","hashOfConfig":"177"},{"size":2391,"mtime":1614891552200,"results":"300","hashOfConfig":"177"},{"size":364,"mtime":1612973498140,"results":"301","hashOfConfig":"177"},{"size":1124,"mtime":1612806552957,"results":"302","hashOfConfig":"177"},{"size":698,"mtime":1612898195179,"results":"303","hashOfConfig":"177"},{"size":447,"mtime":1609638204590,"results":"304","hashOfConfig":"177"},{"size":681,"mtime":1610146980773,"results":"305","hashOfConfig":"177"},{"size":3862,"mtime":1614333797349,"results":"306","hashOfConfig":"177"},{"size":7827,"mtime":1615293307121,"results":"307","hashOfConfig":"177"},{"size":1533,"mtime":1614334298159,"results":"308","hashOfConfig":"177"},{"size":1867,"mtime":1613151668320,"results":"309","hashOfConfig":"177"},{"size":2714,"mtime":1615646108690,"results":"310","hashOfConfig":"177"},{"size":2985,"mtime":1615648387580,"results":"311","hashOfConfig":"177"},{"size":5209,"mtime":1614335040719,"results":"312","hashOfConfig":"177"},{"size":2827,"mtime":1614335043069,"results":"313","hashOfConfig":"177"},{"size":10123,"mtime":1616605794261,"results":"314","hashOfConfig":"177"},{"size":3259,"mtime":1614335032869,"results":"315","hashOfConfig":"177"},{"size":1060,"mtime":1612969996230,"results":"316","hashOfConfig":"177"},{"size":1274,"mtime":1613074426100,"results":"317","hashOfConfig":"177"},{"size":4000,"mtime":1614021336030,"results":"318","hashOfConfig":"177"},{"size":3393,"mtime":1616090565700,"results":"319","hashOfConfig":"177"},{"size":1458,"mtime":1612888993149,"results":"320","hashOfConfig":"177"},{"size":4749,"mtime":1616603066271,"results":"321","hashOfConfig":"177"},{"size":776,"mtime":1614175139190,"results":"322","hashOfConfig":"177"},{"size":1274,"mtime":1614175269010,"results":"323","hashOfConfig":"177"},{"size":3595,"mtime":1614335035509,"results":"324","hashOfConfig":"177"},{"size":341,"mtime":1610810143010,"results":"325","hashOfConfig":"177"},{"size":6880,"mtime":1614255879827,"results":"326","hashOfConfig":"177"},{"size":10456,"mtime":1616607189821,"results":"327","hashOfConfig":"177"},{"size":2272,"mtime":1614336737929,"results":"328","hashOfConfig":"177"},{"size":1400,"mtime":1611365536654,"results":"329","hashOfConfig":"177"},{"size":3006,"mtime":1616158971740,"results":"330","hashOfConfig":"177"},{"size":4999,"mtime":1616610657571,"results":"331","hashOfConfig":"177"},{"size":2165,"mtime":1612803915567,"results":"332","hashOfConfig":"177"},{"size":486,"mtime":1610505703940,"results":"333","hashOfConfig":"177"},{"size":1997,"mtime":1614294905117,"results":"334","hashOfConfig":"177"},{"size":1414,"mtime":1614205611820,"results":"335","hashOfConfig":"177"},{"size":492,"mtime":1612389141090,"results":"336","hashOfConfig":"177"},{"size":77096,"mtime":1616096546860,"results":"337","hashOfConfig":"177"},{"size":2041,"mtime":1614111903193,"results":"338","hashOfConfig":"177"},{"size":668,"mtime":1614109851303,"results":"339","hashOfConfig":"177"},{"size":3058,"mtime":1613236507011,"results":"340","hashOfConfig":"177"},{"size":2236,"mtime":1613939348071,"results":"341","hashOfConfig":"177"},{"size":1679,"mtime":1613833041551,"results":"342","hashOfConfig":"177"},{"size":349,"mtime":1612803624657,"results":"343","hashOfConfig":"177"},{"size":2271,"mtime":1614334216279,"results":"344","hashOfConfig":"177"},{"size":1719,"mtime":1616501121140,"results":"345","hashOfConfig":"177"},{"size":3125,"mtime":1616605228961,"results":"346","hashOfConfig":"177"},{"size":2795,"mtime":1616608594341,"results":"347","hashOfConfig":"177"},{"size":1432,"mtime":1612827268487,"results":"348","hashOfConfig":"177"},{"size":162,"mtime":1612389165420,"results":"349","hashOfConfig":"177"},{"size":831,"mtime":1616095268850,"results":"350","hashOfConfig":"177"},{"size":4027,"mtime":1614985722558,"results":"351","hashOfConfig":"177"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},"1lk1amn",{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"354"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"394","messages":"395","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"354"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"354"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"354"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"354"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"428","messages":"429","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"354"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"354"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"354"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"354"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"354"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"354"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"450","messages":"451","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"354"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"354"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"354"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"527","messages":"528","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"529","messages":"530","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"354"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"354"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"354"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"354"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"354"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"354"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"354"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"354"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"354"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"584","messages":"585","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"586","messages":"587","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"588","messages":"589","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"354"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"354"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"354"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"653","usedDeprecatedRules":"354"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"656","messages":"657","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"354"},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"354"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"354"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"685","messages":"686","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"687","messages":"688","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"689","usedDeprecatedRules":"354"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"354"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"354"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},"/imooptik-frontend/src/index.js",[],["736","737"],"/imooptik-frontend/src/reportWebVitals.js",[],"/imooptik-frontend/src/App.jsx",[],"/imooptik-frontend/src/context/auth/auth.context.jsx",["738"],"import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { getUser, createNewUser, resetPassword, setNewPassword, fetchUser } from './auth.queries'\n\nexport const AuthContext = createContext({\n    currentUser: null,\n    isAdmin: false,\n    isOptometrist: false,\n    token: null,\n    stats: null,\n    logIn: () => { },\n    logOut: () => { },\n    register: () => { },\n    handleResetPassword: () => { },\n    handleCreatingNewPassword: () => { }\n})\n\nconst AuthProvider = ({ children }) => {\n    const { setShowModal, setIsLoading, getMessage, closeModal } = useContext(LoadingModalContext)\n    const [currentUser, setCurrentUser] = useState(null)\n    const [token, setToken] = useState(null)\n    const [isAdmin, setIsAdmin] = useState(false)\n    const [isOptometrist, setIsOptometrist] = useState(false)\n    const [stats, setStats] = useState(null)\n\n    const checkIfOptometrist = user => {\n        if (user.optometrist) {\n            setIsOptometrist(true)\n        } else {\n            setIsOptometrist(false)\n        }\n    }\n\n    const checkIfAdmin = (user) => {\n        if (user.admin > 1) {\n            setIsAdmin(true)\n        } else {\n            setIsAdmin(false)\n        }\n    }\n\n    const logIn = async (email, password) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!email) {\n            console.log(\"Ziadny e-mail\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        if (!password) {\n            console.log(\"Ziadne heslo\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await getUser({ email, password })\n            const user = await response.json()\n\n            getMessage(user.message)\n            setIsLoading(false)\n            if (user.user) {\n                setCurrentUser(user.user)\n                setToken(user.authToken)\n                localStorage.setItem(process.env.REACT_APP_ADMIN_TOKEN, user.authToken)\n                checkIfAdmin(user.user)\n\n                closeModal()\n            }\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const logOut = () => {\n        localStorage.removeItem(process.env.REACT_APP_ADMIN_TOKEN)\n        setCurrentUser(null)\n        setToken(null)\n    }\n\n    const register = async (name, email, password, confirmPassword) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!name) {\n            console.log(\"Ziadne meno\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        if (!email) {\n            console.log(\"Ziadny e-mail\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        if (!password) {\n            console.log(\"Ziadne heslo\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n\n        if (password !== confirmPassword) {\n            console.log(\"hesla sa nezhoduju\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await createNewUser({ name, email, password })\n            const data = await response.json()\n\n            setIsLoading(false)\n            getMessage(data.messageSK)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const handleResetPassword = async (email) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!email) {\n            console.log(\"Ziadny e-mail\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await resetPassword(email)\n            const user = await response.json()\n\n            getMessage(user.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const handleCreatingNewPassword = async (resetSecret, password) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!resetSecret) {\n            console.log(\"Ziadny reset token\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n        if (!password) {\n            console.log(\"Ziadne heslo\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await setNewPassword(resetSecret, password)\n            const user = await response.json()\n\n            getMessage(user.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const getStats = async () => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats/collectionCounts`, requestOptions)\n            const data = await response.json()\n\n            setStats(data)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        if (localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN)) {\n            setToken(localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN))\n        }\n    }, [])\n\n    useEffect(() => {\n        if (token) {\n            // console.log(\"GET USER\")\n            const getUserProfile = async () => {\n                const response = await fetchUser(token)\n                const data = await response.json()\n                // console.log(data)\n                if (data.user) {\n                    setCurrentUser(data.user)\n                    checkIfAdmin(data.user)\n                    checkIfOptometrist(data.user)\n                }\n            }\n            getUserProfile()\n            getStats()\n        }\n    }, [token])\n\n    return (\n        <AuthContext.Provider\n            value={{\n                token,\n                currentUser,\n                isAdmin,\n                isOptometrist,\n                stats,\n                logIn,\n                logOut,\n                register,\n                handleResetPassword,\n                handleCreatingNewPassword\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider","/imooptik-frontend/src/context/loading-modal/loading-modal.contenxt.jsx",[],"/imooptik-frontend/src/global.styles.jsx",[],"/imooptik-frontend/src/components/popup/pop-up.component.jsx",[],"/imooptik-frontend/src/context/auth/auth.queries.jsx",[],"/imooptik-frontend/src/pages/dashboard/dashboard.jsx",[],"/imooptik-frontend/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.jsx",[],"/imooptik-frontend/src/pages/reset-password/reset-password.jsx",[],"/imooptik-frontend/src/components/popup/pop.up.styles.jsx",[],"/imooptik-frontend/src/pages/dashboard/dashboard.styles.jsx",[],"/imooptik-frontend/src/pages/sign-in-and-sign-up/sign-in-and-sign-up.styles.jsx",[],"/imooptik-frontend/src/components/spinner/spinner.component.jsx",[],"/imooptik-frontend/src/components/custom-button/custom-button.component.jsx",[],"/imooptik-frontend/src/pages/reset-password/reset.password.styles.jsx",[],"/imooptik-frontend/src/components/sidenav/sidenav.component.jsx",[],"/imooptik-frontend/src/context/blog/blog.context.jsx",[],"/imooptik-frontend/src/context/user/user.context.jsx",["739"],"/imooptik-frontend/src/context/warehouse/warehouse.context.jsx",["740","741"],"import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\n\nimport {\n    // premisesTabs,\n    categoryTabs,\n    initLensesObj,\n    initProductObj,\n    formatPrice,\n    diaConvert,\n    initContactLensesObj,\n    initGlassesObj,\n    formatfloatNumber,\n    formatLink,\n} from './warehouse.utils'\n\nimport {\n    retailNamesTabs\n} from '../../utils/warehouse.utils'\n\nexport const WarehouseContext = createContext({\n    eanCode: null,\n    product: {},\n    lenses: {},\n    contactLensesParameters: {},\n    glassesParameters: {},\n    totalProducts: 0,\n    totalLenses: 0,\n    activePremisesTab: 0,\n    activeCategoryTypeTab: 0,\n    retailPremisesTabs: [],\n    productCategoryTypeTabs: [],\n    products: null,\n    lensesProducts: null,\n    handleChangeCategoryTypeTab: () => { },\n    handleChangePremisesTab: () => { },\n    getProductsByQuery: () => { },\n    handleProductChange: () => { },\n    handleProductAvailableChange: () => { },\n    getSingleProduct: () => { },\n    createProduct: () => { },\n    updateProduct: () => { },\n    deleteProduct: () => { },\n    getSingleLenses: () => { },\n    getLenses: () => { },\n    createLenses: () => { },\n    updateLenses: () => { },\n    deleteLenses: () => { },\n    handleLensesChange: () => { },\n    handleLensesParameterChange: () => { },\n    resetProduct: () => { },\n    resetLenses: () => { },\n    resetContactLenses: () => { },\n    resetGlassesParameters: () => { },\n    getEanCode: () => { },\n    handleAddNewParameter: () => { },\n    handleContactLensesParameterChange: () => { },\n    handleGlassesParameterChange: () => { },\n    handleGlassesParameterSpecsChange: () => { },\n    handleGlassesSizeChange: () => { },\n    deactivateMany: () => { },\n})\n\nconst WarehouseProvider = ({ children }) => {\n    const { push } = useHistory()\n    const { token, isAdmin, currentUser, stats } = useContext(AuthContext)\n    const { closeModal, setIsLoading, setShowModal, getMessage } = useContext(LoadingModalContext)\n\n    const [totalProducts, setTotalProducts] = useState(0)\n    const [totalLenses, setTotalLenses] = useState(0)\n    const [eanCode, setEanCode] = useState(null)\n\n    const [product, setProduct] = useState({ ...initProductObj })\n    const [lenses, setLenses] = useState({ ...initLensesObj })\n    const [contactLensesParameters, setContactLensesParameters] = useState({ ...initContactLensesObj })\n    const [glassesParameters, setGlassesParameters] = useState({ ...initGlassesObj })\n\n    const [products, setProducts] = useState(null)\n    const [lensesProducts, setLensesProducts] = useState(null)\n    const [activePremisesTab, setActivePremisesTab] = useState(0)\n    const [retailPremisesTabs, setRetailPremisesTabs] = useState([])\n\n    const [productCategoryTypeTabs] = useState(categoryTabs)\n    const [activeCategoryTypeTab, setActiveCategoryTypeTab] = useState(0)\n\n    const handleGlassesParameterChange = e => {\n        const { name, value } = e.target\n        setGlassesParameters({\n            ...glassesParameters,\n            [name]: value\n        })\n    }\n\n    const handleGlassesParameterSpecsChange = e => {\n        const { name, value } = e.target\n        setGlassesParameters({\n            ...glassesParameters,\n            specs: {\n                ...glassesParameters.specs,\n                [name]: value\n            }\n        })\n    }\n\n    const handleGlassesSizeChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = glassesParameters.specs[name]\n        arr[idx] = value === '' ? 1001 : value\n        setGlassesParameters({\n            ...glassesParameters,\n            specs: {\n                ...glassesParameters.specs,\n                [name]: arr\n            }\n        })\n\n    }\n\n    const handleAddNewParameter = e => {\n        const { name } = e.target\n        setContactLensesParameters({\n            ...contactLensesParameters,\n            [name]: [...contactLensesParameters[name], 1001]\n        })\n    }\n\n    const handleContactLensesParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = contactLensesParameters[name]\n        arr[idx] = value === '' ? 1001 : value\n        setContactLensesParameters({\n            ...contactLensesParameters,\n            [name]: arr\n        })\n    }\n\n    const handleProductChange = e => {\n        const { name, value } = e.target\n\n        setProduct({\n            ...product,\n            [name]: value\n        })\n    }\n\n    const handleProductAvailableChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = product[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n        setProduct({\n            ...product,\n            [name]: arr\n        })\n    }\n\n    const handleLensesChange = e => {\n        const { name, value } = e.target\n\n        setLenses({\n            ...lenses,\n            [name]: value\n        })\n    }\n\n    const handleLensesParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = lenses[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n        setLenses({\n            ...lenses,\n            [name]: arr\n        })\n    }\n\n    const resetProduct = () => {\n        setProduct({\n            ...initProductObj,\n            available: [0, 1001, 1001, 1001, 1001, 1001, 1001],\n        })\n        setEanCode(null)\n    }\n\n    const resetLenses = () => {\n        // setLenses({ ...initLensesObj })\n        setLenses({\n            ...initLensesObj,\n            dioptersRange: [1001, 1001],\n            cylinderRange: [1001, 1001],\n        })\n    }\n\n    const resetContactLenses = () => {\n        setContactLensesParameters({\n            ...initContactLensesObj,\n            allowedCurves: [1001],\n            allowedDiameters: [1001],\n            dioptersRange: [1001, 1001]\n        })\n    }\n\n    const resetGlassesParameters = () => {\n        setGlassesParameters({\n            ...initGlassesObj,\n            specs: {\n                ...initGlassesObj.specs,\n                size: [1001, 1001, 1001, 1001]\n            }\n        })\n    }\n\n    const handleChangePremisesTab = (idx) => {\n        setActivePremisesTab(idx)\n    }\n\n    const handleChangeCategoryTypeTab = (idx) => {\n        setActiveCategoryTypeTab(idx)\n    }\n\n\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const getEanCode = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/nextEanCode`, requestOptions)\n            const data = await response.json()\n\n            if (data.eanCode) {\n                setEanCode(data.eanCode)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getProductsByQuery = async (query) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(query)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.products) {\n                setProducts(data.products)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getLenses = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/lenses`, requestOptions)\n            const data = await response.json()\n\n            if (data.lenses) {\n                setProducts(data.lenses)\n                setLensesProducts(data.lenses)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getSingleProduct = async (id, callback) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/store/products/${id}`)\n            const data = await response.json()\n\n            if (data.error === 'not-found') {\n                getSingleLenses(id, () => { })\n            }\n\n            if (data.product) {\n                setProduct({\n                    ...data.product,\n                    price: (data.product.price / 100).toFixed(2)\n                })\n                if (data.product.type === 3) {\n                    setContactLensesParameters({\n                        ...data.product.contactLenses\n                    })\n                } else {\n                    setGlassesParameters({\n                        colorCode: data.product.colorCode ?? \"\",\n                        specs: {\n                            ...data.product.specs,\n                            size: [...Array(4)].map((value, idx) => data.product.specs.size[idx] ? data.product.specs.size[idx] : 0)\n                        }\n                    })\n                }\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createProduct = async (productToAdd) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const slug = diaConvert(productToAdd.name).replaceAll(\" \", \"-\").toLowerCase().trim()\n\n        let modifiedProduct = {\n            ...productToAdd,\n            price: formatPrice(productToAdd.price.toString()),\n            link: slug,\n        }\n\n        console.log(\"productToAdd\")\n        console.log(\"productToAdd\")\n        console.log(\"productToAdd\")\n        console.log(productToAdd)\n\n        if (productToAdd.specs) {\n            if (productToAdd.specs.size) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    specs: {\n                        ...modifiedProduct.specs,\n                        size: productToAdd.specs.size.map(value => value === 1001 ? 0 : formatfloatNumber(value))\n                    }\n                }\n            }\n        }\n\n        if (productToAdd.contactLenses) {\n            if (productToAdd.contactLenses.allowedCurves) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedCurves: productToAdd.contactLenses.allowedCurves.map(value => formatfloatNumber(value))\n                    }\n                }\n            }\n            if (productToAdd.contactLenses.allowedDiameters) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedDiameters: productToAdd.contactLenses.allowedDiameters.map(value => formatfloatNumber(value))\n                    }\n                }\n            }\n            if (productToAdd.contactLenses.dioptersRange) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        dioptersRange: productToAdd.contactLenses.dioptersRange.map(value => formatfloatNumber(value))\n                    }\n                }\n            }\n        }\n\n        const raw = JSON.stringify({\n            ...modifiedProduct,\n        })\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products`, requestOptions)\n            const data = await response.json()\n\n            if (data.product) {\n                push('/dashboard/obchod')\n                getProductsByQuery({\n                    limit: 10\n                })\n                setEanCode(null)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateProduct = async (productToUpdate) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        let modifiedProduct = {\n            ...productToUpdate,\n        }\n\n        if (modifiedProduct.price) {\n            modifiedProduct = {\n                ...modifiedProduct,\n                price: formatPrice(productToUpdate.price.toString()),\n            }\n        }\n\n        if (modifiedProduct.available) {\n            if (typeof modifiedProduct.available === \"number\") {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    available: productToUpdate.available\n                }\n            } else {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    available: productToUpdate.available ? productToUpdate.available.map(value => value === 1001 ? 0 : value) : [0, 0, 0, 0, 0, 0, 0]\n                }\n            }\n        }\n\n        if (productToUpdate.link) {\n            const slug = diaConvert(productToUpdate.link).replaceAll(\" \", \"-\").toLowerCase().trim()\n            modifiedProduct = {\n                ...modifiedProduct,\n                link: slug\n            }\n        }\n\n        if (productToUpdate.specs) {\n            if (productToUpdate.specs.size) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    specs: {\n                        ...modifiedProduct.specs,\n                        size: productToUpdate.specs.size.map(value => value === 1001 ? 0 : formatfloatNumber(value))\n                    }\n                }\n            }\n        }\n\n        if (productToUpdate.contactLenses) {\n            if (productToUpdate.contactLenses.allowedCurves) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedCurves: productToUpdate.contactLenses.allowedCurves.map(value => formatfloatNumber(value))\n                    }\n                }\n            } else {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedCurves: contactLensesParameters.allowedCurves\n                    }\n                }\n            }\n\n            if (productToUpdate.contactLenses.allowedDiameters) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedDiameters: productToUpdate.contactLenses.allowedDiameters.map(value => formatfloatNumber(value))\n                    }\n                }\n            } else {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        allowedDiameters: contactLensesParameters.allowedDiameters\n                    }\n                }\n            }\n            if (productToUpdate.contactLenses.dioptersRange) {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        dioptersRange: productToUpdate.contactLenses.dioptersRange.map(value => formatfloatNumber(value))\n                    }\n                }\n            } else {\n                modifiedProduct = {\n                    ...modifiedProduct,\n                    contactLenses: {\n                        ...modifiedProduct.contactLenses,\n                        dioptersRange: contactLensesParameters.dioptersRange\n                    }\n                }\n            }\n        }\n\n        const raw = JSON.stringify({\n            ...modifiedProduct,\n        })\n\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/${product._id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.messageSK)\n                setIsLoading(false)\n                return\n\n            }\n\n            if (data.product) {\n                push('/dashboard/obchod')\n                getProductsByQuery({\n                    limit: 10\n                })\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const deleteProduct = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.product) {\n                // push('/dashboard/obchod')\n                getProductsByQuery({\n                    limit: 10\n                })\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getSingleLenses = async (id, callback) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/store/lenses/${id}`)\n            const data = await response.json()\n\n            if (data.lenses) {\n                setLenses(data.lenses)\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createLenses = async (lensesToAdd) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify({\n            ...lensesToAdd,\n            price: formatPrice(lensesToAdd.price.toString())\n        });\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/lenses`, requestOptions)\n            const data = await response.json()\n\n            if (data.lenses) {\n                push('/dashboard/obchod')\n                getLenses()\n                closeModal()\n                return\n            }\n\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateLenses = async (lensesToUpdate, id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        let modifiedLenses = {\n            ...lensesToUpdate\n        }\n\n        if (modifiedLenses.price) {\n            modifiedLenses = {\n                ...modifiedLenses,\n                price: formatPrice(lensesToUpdate.price.toString()),\n            }\n        }\n\n        const raw = JSON.stringify({\n            ...modifiedLenses,\n        });\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/lenses/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.lenses) {\n                push('/dashboard/obchod')\n                getLenses()\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const deleteLenses = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/lenses/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.lenses) {\n                getLenses()\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const deactivateMany = async (databObj) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(databObj);\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/products/deactivateMany`, requestOptions)\n            const data = await response.json()\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        if (products) {\n            if (activeCategoryTypeTab === 0) {\n                getProductsByQuery({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n            } else if (activeCategoryTypeTab === 1) {\n                getLenses()\n            } else {\n                getProductsByQuery({\n                    limit: 10,\n                    filters: {\n                        type: 3\n                    }\n                })\n            }\n        }\n    }, [activeCategoryTypeTab])\n\n    useEffect(() => {\n        if (currentUser) {\n            if (isAdmin) {\n                setRetailPremisesTabs(retailNamesTabs)\n                setActivePremisesTab(0)\n            } else {\n                setRetailPremisesTabs(retailNamesTabs.filter(tab => tab.premises === currentUser.premises))\n                setActivePremisesTab(0)\n            }\n        }\n    }, [currentUser, isAdmin])\n\n    useEffect(() => {\n        if (stats) {\n            setTotalProducts(stats.products)\n            setTotalLenses(stats.lenses)\n        }\n    }, [stats])\n\n    useEffect(() => {\n        if (product.name !== '') {\n            setProduct({\n                ...product,\n                link: formatLink(product.name)\n            })\n        }\n    }, [product.name])\n\n    return (\n        <WarehouseContext.Provider\n            value={{\n                eanCode,\n                product,\n                lenses,\n                contactLensesParameters,\n                glassesParameters,\n                totalProducts,\n                totalLenses,\n                activePremisesTab,\n                activeCategoryTypeTab,\n                retailPremisesTabs,\n                productCategoryTypeTabs,\n                products,\n                lensesProducts,\n                handleChangeCategoryTypeTab,\n                handleChangePremisesTab,\n                getProductsByQuery,\n                handleProductChange,\n                handleProductAvailableChange,\n                getLenses,\n                getSingleProduct,\n                createProduct,\n                updateProduct,\n                deleteProduct,\n                getSingleLenses,\n                createLenses,\n                updateLenses,\n                deleteLenses,\n                handleLensesChange,\n                handleLensesParameterChange,\n                resetProduct,\n                resetLenses,\n                resetContactLenses,\n                resetGlassesParameters,\n                getEanCode,\n                handleAddNewParameter,\n                handleContactLensesParameterChange,\n                handleGlassesParameterChange,\n                handleGlassesParameterSpecsChange,\n                handleGlassesSizeChange,\n                deactivateMany\n            }}\n        >\n            {children}\n        </WarehouseContext.Provider>\n    )\n}\n\nexport default WarehouseProvider","/imooptik-frontend/src/context/image/image.context.jsx",[],"/imooptik-frontend/src/context/analytics/analytics.context.jsx",[],"/imooptik-frontend/src/context/orders/orders.context.jsx",[],"/imooptik-frontend/src/context/booking/booking.context.jsx",[],"/imooptik-frontend/src/context/examination/examination.context.jsx",[],"/imooptik-frontend/src/context/coupons/coupons.context.jsx",["742"],"import React, { createContext, useContext, useState } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\nimport { useHistory } from 'react-router-dom'\nimport { formatPrice } from '../../utils/warehouse.utils'\n\nexport const CouponsContext = createContext({\n    coupon: null,\n    coupons: null,\n    handleChange: () => { },\n    getCoupon: () => { },\n    getCoupons: () => { },\n    createCoupon: () => { },\n    // updateCoupon: () => { },\n    deleteCoupon: () => { },\n    isUpdating: false,\n    resetCoupons: () => { }\n})\n\nconst initCouponObj = {\n    code: '',\n    type: 'percentage', // flat\n    value: 0,\n    maxUses: 0,\n    minValue: 0,\n    maxUsesTotal: 0\n}\n\n\nconst CouponsProvider = ({ children }) => {\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n    const { token } = useContext(AuthContext)\n    const { push } = useHistory()\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const [coupon, setCoupon] = useState(initCouponObj)\n    const [coupons, setCoupons] = useState(null)\n\n    const [isUpdating, setIsupdating] = useState(false)\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n\n        setCoupon({\n            ...coupon,\n            [name]: value\n        })\n    }\n\n    const getCoupon = async (id) => {\n        setIsupdating(true)\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.coupon) {\n                setCoupon({\n                    ...coupon,\n                    ...data.coupon\n                })\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n\n    }\n\n    const getCoupons = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons`, requestOptions)\n            const data = await response.json()\n\n            if (data.coupons) {\n                setCoupons(data.coupons)\n            }\n            setIsLoading(false)\n            closeModal()\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createCoupon = async (couponToCreate) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        console.log(couponToCreate.value)\n\n        const raw = JSON.stringify({\n            code: couponToCreate.code,\n            type: couponToCreate.type, // flat\n            ...(couponToCreate.value) && { value: couponToCreate.type === \"flat\" ? formatPrice(couponToCreate.value) : Number(couponToCreate.value) },\n            // value: couponToCreate.value === '' || couponToCreate.value === '0' ? undefined : Number(couponToCreate.value),\n            maxUses: couponToCreate.maxUses === '' || couponToCreate.maxUses === '0' ? undefined : Number(couponToCreate.maxUses),\n            ...(couponToCreate.minValue) && { minValue: formatPrice(couponToCreate.minValue) },\n            maxUsesTotal: couponToCreate.maxUsesTotal === '' || couponToCreate.maxUsesTotal === '0' ? undefined : Number(couponToCreate.maxUsesTotal)\n        })\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/create`, requestOptions)\n            const data = await response.json()\n\n            if (data.error === \"format\") {\n                getMessage(\"Kód kupónu je povinný\")\n            }\n            if (data.error === 'exists') {\n                getMessage(\"Kupón už existuje\")\n            }\n\n            if (response.ok) {\n                getCoupons()\n                push('/dashboard/kupony')\n            }\n\n            // getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n\n    }\n\n    // const updateCoupon = async () => {\n    //     console.log(\"Update coupon\")\n\n    //     setIsLoading(true)\n    //     setShowModal(true)\n\n    //     const requestOptions = {\n    //         method: 'GET',\n    //         headers: myHeaders,\n    //         redirect: 'follow'\n    //     };\n\n    //     try {\n    //         const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/${id}`, requestOptions)\n    //         const data = await response.json()\n\n    //         getMessage(data.message)\n    //         setIsLoading(false)\n    //     } catch (err) {\n    //         console.log(err)\n    //         getMessage(\"Niečo sa pokazilo\")\n    //         setIsLoading(false)\n    //     }\n\n    // }\n\n    const deleteCoupon = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/coupons/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (response.ok) {\n                getCoupons()\n                push('/dashboard/kupony')\n            }\n            // getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const resetCoupons = async () => {\n        setIsupdating(false)\n        setCoupon(initCouponObj)\n    }\n\n    return (\n        <CouponsContext.Provider\n            value={{\n                coupon,\n                coupons,\n                handleChange,\n                getCoupon,\n                getCoupons,\n                createCoupon,\n                // updateCoupon,\n                deleteCoupon,\n                isUpdating,\n                resetCoupons\n            }}\n        >\n            {children}\n        </CouponsContext.Provider>\n    )\n}\n\nexport default CouponsProvider","/imooptik-frontend/src/context/order/order.context.jsx",[],"/imooptik-frontend/src/components/forgot-password/forgot-password.component.jsx",[],"/imooptik-frontend/src/components/sign-in/sign-in.component.jsx",[],"/imooptik-frontend/src/components/custom-input/custom-input.component.jsx",[],"/imooptik-frontend/src/sections/orders/orders.section.jsx",["743","744"],"import React, { useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\n// import OrderDeligateModal from '../../components/order-deligate-modal/order-deligate-modal.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport {\n    GoArrowSmallDown,\n    GoArrowSmallUp\n} from 'react-icons/go'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    tabItems\n} from '../../context/orders/orders.utils'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    TableHead,\n    OrdersTable,\n    TableCol,\n    IconContainer,\n    OrderOverviewRow\n} from './orders.styles'\n\nconst OrdersSection = () => {\n    const { push } = useHistory()\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n\n    const [searchQuery, setSearchQuery] = useState('')\n    const [activeIndex, setActiveIndex] = useState(1)\n    const [orders, setOrders] = useState([])\n    const [fetchQueryObj, setFetchQueryObj] = useState({\n        limit: 10,\n        skip: 0,\n        sortBy: {\n            date: -1\n        },\n        filters: {\n            finished: false\n        }\n    })\n\n    const { isLoading: isFetching, response, refetch } = useFetchByQuery('api/admin/orders/filter', fetchQueryObj)\n\n    const handleRefetch = () => {\n        refetch()\n    }\n\n    const handleIndexChange = (idx) => {\n        setActiveIndex(idx)\n        if (idx === 1) {\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    finished: false\n                }\n            })\n        } else if (idx === 2) {\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    finished: true\n                }\n            })\n        } else if (idx === 3) {\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    status: \"cancelled\"\n                }\n            })\n        }\n        handleRefetch()\n    }\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            setFetchQueryObj(prevValue => ({\n                // ...prevValue,\n                // sortBy: {\n                //     date: -1\n                // },\n                filters: {\n                    customId: Number(searchQuery)\n                },\n            }))\n        }\n        refetch()\n    }\n\n    const getNextPage = () => {\n        if (orders.length < 10) return\n        setFetchQueryObj(prevValue => ({\n            ...prevValue,\n            skip: prevValue.skip + 10,\n        }))\n        refetch()\n    }\n\n    const getPrevPage = () => {\n        if (fetchQueryObj.skip === 0) return\n        setFetchQueryObj(prevValue => ({\n            ...prevValue,\n            skip: prevValue.skip - 10,\n        }))\n        refetch()\n    }\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            if (activeIndex === 1) {\n                setFetchQueryObj({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    },\n                    filters: {\n                        finished: false\n                    }\n                })\n            } else if (activeIndex === 2) {\n                setFetchQueryObj({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    },\n                    filters: {\n                        finished: true\n                    }\n                })\n            } else if (activeIndex === 3) {\n                setFetchQueryObj({\n                    limit: 10,\n                    skip: 0,\n                    sortBy: {\n                        date: -1\n                    },\n                    filters: {\n                        status: \"cancelled\"\n                    }\n                })\n            }\n            handleRefetch()\n        }\n    }, [searchQuery])\n\n    useEffect(() => {\n        if (!isFetching) {\n            if (response) {\n                if (activeIndex === 1) {\n                    setOrders(response?.orders)\n                } else {\n                    setOrders(response?.orders)\n                }\n                closeModal()\n            }\n        }\n    }, [isFetching, response, activeIndex])\n\n\n    useEffect(() => {\n        return () => {\n            setActiveIndex(1)\n            setSearchQuery('')\n            setOrders([])\n            setFetchQueryObj({\n                limit: 10,\n                skip: 0,\n                sortBy: {\n                    date: -1\n                },\n                filters: {\n                    finished: false\n                }\n            })\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <SectionHeader\n                searchQuery={searchQuery}\n                handleSearch={handleSearch}\n\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push(\"/dashboard/objednavky/nova-objednavka\")}\n                title=\"Zákazky\"\n            />\n\n            <FlexContainer>\n                <FixedContainer>\n\n                    <SectionNavbar\n                        items={tabItems}\n                        activeIndex={activeIndex}\n                        setActiveIndex={handleIndexChange}\n                    />\n                </FixedContainer>\n\n            </FlexContainer>\n\n            <ScrollContainer>\n                <OrdersTable>\n                    <TableHead>\n                        <TableCol>ID</TableCol>\n                        <TableCol clickable onClick={() => {\n                            setFetchQueryObj((prevObj) => ({\n                                ...fetchQueryObj,\n                                sortBy: {\n                                    date: prevObj?.sortBy?.date === 1 ? -1 : 1\n                                }\n                            }))\n                            handleRefetch()\n                        }}>\n                            <p>\n                                Dátum {fetchQueryObj?.sortBy?.date === 1 ? <IconContainer>\n                                    <GoArrowSmallDown />\n                                </IconContainer> : <IconContainer>\n                                    <GoArrowSmallUp />\n                                </IconContainer>\n                                }\n                            </p>\n                        </TableCol>\n                        <TableCol>Prevádzka</TableCol>\n                        <TableCol>Meno</TableCol>\n                        <TableCol>Tel. číslo</TableCol>\n                        <TableCol>Status</TableCol>\n                        <TableCol>Možnosti</TableCol>\n                    </TableHead>\n                    {orders?.map((order, idx) => (\n                        <OrderOverviewRow key={idx} order={order} refetch={handleRefetch} />\n                    ))}\n                </OrdersTable>\n\n                <ListArrows\n                    listItems={orders}\n                    handleClickNext={getNextPage}\n                    handleClickPrev={getPrevPage}\n                />\n            </ScrollContainer>\n        </section>\n    )\n}\n\n\n\nexport default OrdersSection\n","/imooptik-frontend/src/sections/analytics/analytics.section.jsx",["745","746","747"],"/imooptik-frontend/src/sections/customers/customers.section.jsx",["748","749","750"],"import React, { useState, useContext, useEffect } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from \"../../components/section-navbar/section-navbar.component\"\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\nimport { userTabs } from '../../utils/user.utils'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    TableCol,\n    TableContainer,\n    TableHead,\n    TableRow,\n    UpdateButton,\n    Container,\n    DeleteButton\n} from './customers.styles'\n\nconst CustomersSection = () => {\n    const [searchQuery, setSearchQuery] = useState('')\n    const { push } = useHistory()\n    const { isAdmin } = useContext(AuthContext)\n    const [userItems, setUserItems] = useState([])\n    const [activeIndex, setActiveIndex] = useState(0)\n    const [filterQuery, setFilterQuery] = useState({\n        limit: 10,\n        skip: 0,\n        filters: {\n            admin: activeIndex\n        },\n        sortBy: {\n            date: -1\n        }\n    })\n\n    const { response, isLoading, refetch } = useFetchByQuery('api/admin/users/filter', filterQuery)\n\n    const {\n        // isLoading,\n        showModal,\n        message,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            setFilterQuery({\n                limit: 10,\n                skip: 0,\n                query: searchQuery,\n                filters: {\n                    admin: activeIndex\n                },\n                sortBy: {\n                    date: -1\n                }\n            })\n            refetch()\n        }\n    }\n\n    const handleActiveIndexChange = (index) => {\n        setActiveIndex(index)\n        setFilterQuery({\n            limit: 10,\n            skip: 0,\n            filters: {\n                admin: index\n            },\n            sortBy: {\n                date: -1\n            }\n        })\n        refetch()\n    }\n\n    const getNextPage = () => {\n        if (userItems.length < 10) return\n        setFilterQuery({\n            ...filterQuery,\n            skip: filterQuery.skip + 10\n        })\n        refetch()\n\n    }\n\n    const getPrevPage = () => {\n        if (filterQuery.skip === 0) return\n        setFilterQuery({\n            ...filterQuery,\n            skip: filterQuery.skip - 10\n        })\n        refetch()\n\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response) {\n            setUserItems(response.users)\n            closeModal()\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            setFilterQuery({\n                limit: 10,\n                skip: 0,\n                filters: {\n                    admin: activeIndex\n                },\n                sortBy: {\n                    date: -1\n                }\n            })\n            refetch()\n        }\n    }, [searchQuery])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <SectionHeader\n                searchQuery={searchQuery}\n                handleSearch={handleSearch}\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push('zakaznici/novy-zakaznik')}\n                title=\"Zákazníci\"\n            />\n\n            <FlexContainer>\n                <FixedContainer>\n                    <SectionNavbar\n                        items={isAdmin ? userTabs : [\n                            {\n                                id: 0,\n                                name: \"Zákazníci\",\n                                filter: 0,\n                            },]}\n                        activeIndex={activeIndex}\n                        setActiveIndex={handleActiveIndexChange}\n                    />\n\n                </FixedContainer>\n            </FlexContainer>\n\n            <ScrollContainer>\n                <Container>\n                    <TableContainer>\n                        <TableHead>\n                            <TableCol>Meno a priezvisko</TableCol>\n                            <TableCol>Email</TableCol>\n                            <TableCol>Tel. číslo</TableCol>\n                            <TableCol>Možnosti</TableCol>\n                        </TableHead>\n                        {userItems && userItems.map((user, idx) => (\n                            <TableRow key={idx}>\n                                <TableCol>{user.name}</TableCol>\n                                <TableCol>{user.email}</TableCol>\n                                <TableCol>{user.phone}</TableCol>\n                                <TableCol>\n                                    <UpdateButton onClick={() => push(`zakaznici/${user._id}`)}>Upraviť</UpdateButton>\n                                    {/* <DeleteButton onClick={() => alert(\"Pekný pokus! Tu velím zatiaľ ja :)\")}>Odstrániť</DeleteButton> */}\n                                </TableCol>\n                            </TableRow>\n                        ))}\n                    </TableContainer>\n                </Container>\n\n                <ListArrows\n                    listItems={userItems}\n                    handleClickPrev={getPrevPage}\n                    handleClickNext={getNextPage}\n                />\n            </ScrollContainer>\n\n        </section>\n    )\n}\n\nexport default CustomersSection\n","/imooptik-frontend/src/sections/customer-profile/customer-profile.section.jsx",["751","752","753"],"/imooptik-frontend/src/sections/product/product.section.jsx",["754","755","756","757","758","759","760","761"],"import React, { useState, useContext, useEffect } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { WarehouseContext } from '../../context/warehouse/warehouse.context'\nimport { ImageContext } from '../../context/image/image.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams, Prompt } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport ModalImage from '../../components/modal-images/modal-images.component'\nimport GetProductDataModal from '../../components/modal-get-product-data/modal-get-product-data.component'\nimport GetLensesDataModal from '../../components/modal-get-lenses-data/modal-get-lenses-data.component'\nimport Popup from '../../components/popup/pop-up.component'\n\nimport ProductGlassesForm from '../../components/product-glasses-form/product-glasses-form.component'\nimport ProductLensesForm from '../../components/product-lenses-form/product-lenses-form.component'\nimport ProductAccessoriesForm from '../../components/product-accessories-form/product-accessories-form.component'\nimport ProductContactLensesForm from '../../components/product-contact-lenses-form/product-contact-lenses-form.component'\nimport ProductServiceForm from '../../components/product-service-form/product-service-form.component'\n\nimport { productCategories, checkParameter, formatLink } from '../../context/warehouse/warehouse.utils'\nimport { retailNames } from '../../utils/warehouse.utils'\nimport { useFetch } from '../../hooks/useFetch'\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    CategoryContainer,\n    CategoryCheckbox,\n    SubmitButton,\n    IsPublicCheckbox,\n\n} from './product.styles'\n\nconst ProductSection = () => {\n    const { id } = useParams()\n    const { currentUser } = useContext(AuthContext)\n    const { closeModal, message, isLoading, showModal, getMessage, setShowModal } = useContext(LoadingModalContext)\n    const { selectedImage, setSelectedImage } = useContext(ImageContext)\n    const [showImageModal, setImageModal] = useState(false)\n    const [isGetProductDataModalVisible, setIsGetProductDataModalVisible] = useState(false)\n    const [isGetLensesDataModalVisible, setIsGetLensesDataModalVisible] = useState(false)\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const {\n        eanCode,\n        product,\n        lenses,\n        contactLensesParameters,\n        glassesParameters,\n        handleLensesChange,\n        handleLensesParameterChange,\n        createProduct,\n        updateProduct,\n        resetProduct,\n        resetLenses,\n        resetContactLenses,\n        resetGlassesParameters,\n        createLenses,\n        updateLenses,\n        handleProductChange,\n        handleProductAvailableChange,\n        getEanCode,\n        handleAddNewParameter,\n        handleContactLensesParameterChange,\n        handleGlassesParameterChange,\n        handleGlassesParameterSpecsChange,\n        handleGlassesSizeChange,\n        getSingleProduct,\n        getSingleLenses\n    } = useContext(WarehouseContext)\n\n    const [hasChanged, setHasChanged] = useState(false)\n    const [productObj, setProductObj] = useState({})\n\n\n    const { response, isLoading: isLoadingFilters, refetch } = useFetch(`api/store/products/${productObj?.type}/filters`, !productObj?.type, \"GET\")\n    const [filters, setFilters] = useState(null)\n\n    const handleGetProductData = (boolean) => {\n        setIsGetProductDataModalVisible(boolean)\n    }\n\n    const handleGetLensesData = (boolean) => {\n        setIsGetLensesDataModalVisible(boolean)\n    }\n\n    const handleChangeType = e => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        if (!isUpdating) {\n            if (productObj.type === 0) {\n                if (Object.keys(productObj).length > 2) {\n                    const confirm = window.confirm(\"Rozpisane polia budú vymazane\")\n                    if (confirm) {\n                        resetLenses()\n                        setSelectedImage('')\n                    } else {\n                        return\n                    }\n                }\n            } else {\n                if (Object.keys(productObj).length > 2) {\n                    const confirm = window.confirm(\"Rozpisane polia budú vymazane\")\n                    if (confirm) {\n                        resetProduct()\n                        resetContactLenses()\n                        resetGlassesParameters()\n                        setSelectedImage('')\n                    } else {\n                        return\n                    }\n                }\n            }\n        }\n        setProductObj({\n            [name]: value\n        })\n\n    }\n    // console.count(\"PRODUCT OBJ\")\n    // console.log(productObj)\n    // console.count(\"PRODUCT OBJ\")\n\n    const handleChange = (e) => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        if (productObj.type === 0) {\n            handleLensesChange(e)\n        }\n\n        if (productObj.type === 6) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 5) {\n            handleProductChange(e)\n        }\n\n        if (productObj.type === 4) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 3) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 2) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 1) {\n            handleProductChange(e)\n        }\n\n\n\n        if (value === '') {\n            delete productObj[name]\n            return\n        }\n\n        if (isUpdating) {\n            if (name === 'name') {\n                setProductObj({\n                    ...productObj,\n                    [name]: value,\n                    link: formatLink(value)\n                })\n                return\n            }\n        }\n\n        setProductObj({\n            ...productObj,\n            [name]: value\n        })\n    }\n\n    const handleGlassesParametersChange = e => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        handleGlassesParameterChange(e)\n\n        if (value === '') {\n            delete productObj[name]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            [name]: value\n        })\n    }\n\n    const handleSpecsChange = (e) => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        handleGlassesParameterSpecsChange(e)\n\n        if (value === '') {\n            delete productObj.specs[name]\n\n            if (Object.keys(productObj.specs).length === 0) {\n                delete productObj[\"specs\"]\n            }\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            specs: {\n                ...productObj.specs,\n                [name]: value\n            }\n        })\n    }\n\n    const handleGlassesSpecsSizeChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = glassesParameters.specs[name]\n        arr[idx] = value === '' ? 1001 : value\n\n        handleGlassesSizeChange(e, idx)\n\n        if (value === '') {\n            if (productObj.specs[name].length > 1) {\n                arr[idx] = 1001\n\n                const firstIndex = arr[0]\n                const canDeleteSpecs = arr.map(value => {\n                    if (firstIndex !== value) {\n                        return false\n                    } else {\n                        return true\n                    }\n                })\n\n                const verdict = canDeleteSpecs.find(value => value === false)\n\n                if (verdict === false) {\n                    setProductObj({\n                        ...productObj,\n                        specs: {\n                            ...productObj.specs,\n                            [name]: arr\n                        }\n                    })\n                } else {\n                    delete productObj.specs[name]\n                }\n\n            }\n            if (Object.keys(productObj.specs).length === 0) {\n                delete productObj[\"specs\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            specs: {\n                ...productObj.specs,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleAvailableChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = product[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        handleProductAvailableChange(e, idx)\n        setProductObj({\n            ...productObj,\n            [name]: arr\n        })\n    }\n\n    const handleContactLensesChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = contactLensesParameters[name]\n        arr[idx] = value === '' ? 1001 : value\n\n        handleContactLensesParameterChange(e, idx)\n\n        if (value === '') {\n            if (productObj.contactLenses[name].length > 1) {\n                arr.splice(idx, 1)\n                setProductObj({\n                    ...productObj,\n                    contactLenses: {\n                        ...productObj.contactLenses,\n                        [name]: arr\n                    }\n                })\n            } else {\n                delete productObj.contactLenses[name]\n            }\n            if (Object.keys(productObj.contactLenses).length === 0) {\n                delete productObj[\"contactLenses\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            contactLenses: {\n                ...productObj.contactLenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = lenses[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        handleLensesParameterChange(e, idx)\n        setProductObj({\n            ...productObj,\n            [name]: arr\n        })\n    }\n\n    const handleSelectImage = (imgId) => {\n        setHasChanged(true)\n        setProductObj({\n            ...productObj,\n            image: imgId\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        let newProductObj = {\n            ...productObj,\n            ...(productObj.type === 0) && { type: lenses.lensType },\n            ...(productObj.type === 0) && { dioptric: lenses.dioptric }\n        }\n\n        // console.log(\"PRODUCT OBJECT\")\n        // console.log(lensObj)\n        // console.log(productObj)\n\n\n\n        if (currentUser.admin < 2) {\n            if (newProductObj.available) {\n                newProductObj = {\n                    ...productObj,\n                    available: productObj.available[currentUser.premises]\n                }\n            }\n        } else {\n            if (newProductObj.available) {\n                newProductObj = {\n                    ...productObj,\n                    available: newProductObj.available ? newProductObj.available.map(value => value === 1001 ? 0 : value) : [0, 0, 0, 0, 0, 0]\n                }\n            }\n        }\n\n        if (isUpdating) {\n            console.log(newProductObj)\n            if (newProductObj.type === 0 || typeof newProductObj.type === 'string') {\n                setHasChanged(false)\n                delete newProductObj['link']\n                // delete newProductObj['type']\n                const updatedObj = {\n                    ...newProductObj,\n                    type: newProductObj.lensType,\n                    eanCode: lenses.eanCode\n                }\n                delete updatedObj['lensType']\n                console.log(id)\n                updateLenses(updatedObj, id)\n                return\n            } else if (newProductObj.type === 3) {\n                setHasChanged(false)\n                delete newProductObj['type']\n                updateProduct({ ...newProductObj, contactLenses: {} })\n                return\n            } else {\n                setHasChanged(false)\n                delete newProductObj['type']\n                updateProduct(newProductObj)\n                return\n            }\n        } else {\n            if (productObj.type === 0) {\n                console.log(\"NEW LENSES OBJ\")\n                console.log(newProductObj)\n                if (!newProductObj.name || !newProductObj.brand || !newProductObj.description || !newProductObj.price || !newProductObj.image || !newProductObj.dioptersRange || !newProductObj.cylinderRange) {\n                    setShowModal(true)\n                    getMessage(\"Povinné údaje sú prázdne\")\n                    return\n                } else {\n                    setHasChanged(false)\n                    // delete newProductObj['type']\n                    const updatedObg = {\n                        ...newProductObj,\n                        type: newProductObj.lensType\n                    }\n                    delete updatedObg['lensType']\n\n                    createLenses(updatedObg)\n                }\n            }\n            if (newProductObj.type === 6 || newProductObj.type === 5 || newProductObj.type === 4 || newProductObj.type === 3 || newProductObj.type === 2 || newProductObj.type === 1) {\n                if (!newProductObj.name || !newProductObj.price) {\n                    setShowModal(true)\n                    getMessage(\"Povinné údaje sú prázdne\")\n                    return\n                } else {\n                    setHasChanged(false)\n                    delete newProductObj['_id']\n\n                    createProduct(newProductObj)\n                }\n            }\n        }\n\n\n    }\n\n    const [lensObj, setLensObj] = useState(null)\n\n    const fillProductData = (productData) => {\n        console.log(\"productData\")\n        console.log(\"productData\")\n        console.log(productData)\n\n        setLensObj({\n            ...productObj,\n            ...productData\n        })\n\n        setProductObj({\n            ...productObj,\n            ...productData\n        })\n    }\n\n    useEffect(() => {\n        if (!productObj?.type) return\n        setFilters(null)\n        refetch()\n    }, [productObj?.type])\n\n    useEffect(() => {\n        if (productObj.type === 0) {\n            if (productObj.lensType) return\n            console.log(\"SET LENS TYPE\")\n            console.log(lenses)\n            handleChange({\n                target: {\n                    name: \"lensType\",\n                    value: lenses?.type\n                }\n            })\n        }\n    }, [lenses.lensType])\n\n    useEffect(() => {\n        if (isLoadingFilters) return\n        if (response?.filters) {\n            setFilters(response?.filters)\n        }\n    }, [isLoadingFilters])\n\n    useEffect(() => {\n        if (id === \"novy-produkt\") {\n            if (!eanCode) {\n                getEanCode()\n            } else {\n                if (productObj.type !== undefined && !productObj.eanCode) {\n                    console.log(\"SET EANCODE\")\n                    console.log(productObj)\n                    handleChange({\n                        target: {\n                            name: \"eanCode\",\n                            value: eanCode\n                        }\n                    })\n                }\n            }\n        }\n    }, [id, eanCode, productObj.type, productObj.eanCode, product.type])\n\n    useEffect(() => {\n        if (id !== 'novy-produkt') {\n            getSingleProduct(id, () => { })\n            setIsUpdating(true)\n            if (!productObj.type) {\n                handleChangeType({\n                    target: {\n                        name: \"type\",\n                        value: product.type\n                    }\n                })\n\n            }\n        }\n    }, [id, product.type])\n\n    // console.log(productObj)\n\n    useEffect(() => {\n        if (product.image) {\n            setSelectedImage(product.image)\n        }\n        if (lenses.image) {\n            setSelectedImage(lenses.image)\n        }\n    }, [product.image, lenses.image])\n\n    useEffect(() => {\n        return () => {\n            resetProduct()\n            resetLenses()\n            resetContactLenses()\n            resetGlassesParameters()\n            setProductObj({})\n            setSelectedImage(null)\n            setIsUpdating(false)\n        }\n    }, [])\n\n    return (\n        <section>\n            <Prompt\n                when={hasChanged}\n                message=\"Chcete opustiť formulár?\"\n            />\n\n            {isGetLensesDataModalVisible && <GetLensesDataModal close={() => handleGetLensesData(false)} getSingleProduct={getSingleProduct} productObj={productObj} setProductObj={setProductObj} getSingleLenses={getSingleLenses} fillProductData={fillProductData} />}\n            {isGetProductDataModalVisible && <GetProductDataModal close={() => setIsGetProductDataModalVisible(false)} getSingleProduct={getSingleProduct} productObj={productObj} setProductObj={setProductObj} />}\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            {showImageModal && <ModalImage close={() => setImageModal(false)} setImage={handleSelectImage} />}\n            <Header>\n                <FixedContainer>\n\n                    <div>\n                        <h1>{isUpdating ? \"Upraviť produkt\" : \"Nový produkt\"}</h1>\n                    </div>\n                    <div>\n                        <IsPublicCheckbox\n                            label=\"Verejné\"\n                            // value={product.ehop}\n                            name='eshop'\n                            isActive={product.eshop}\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"eshop\",\n                                    value: !product.eshop\n                                }\n                            })}\n                        />\n                        <SubmitButton onClick={handleSubmit}>{isUpdating ? \"Upraviť\" : \"Vytvoriť\"}</SubmitButton>\n                    </div>\n                </FixedContainer>\n            </Header>\n\n            <ScrollContainer>\n                {!isUpdating && <CategoryContainer>\n                    <h3>Aký produkt chcete pridať?</h3>\n                    {productCategories.map((category, idx) => (\n                        <CategoryCheckbox\n                            key={idx}\n                            label={category.name}\n                            value={category.value}\n                            name='type'\n                            isActive={category.value === productObj.type}\n                            handleClick={() => handleChangeType({\n                                target: {\n                                    name: \"type\",\n                                    value: category.value\n                                }\n                            })}\n                        />\n                    ))}\n                </CategoryContainer>}\n\n                {productObj.type === 0 && (\n                    <ProductLensesForm\n                        lenses={lenses}\n                        selectedImage={selectedImage}\n                        setImageModal={setImageModal}\n                        handleChange={handleChange}\n                        handleParameterChange={handleParameterChange}\n                        checkParameter={checkParameter}\n                        filters={filters}\n                        handleGetProductData={handleGetLensesData}\n                    />\n                )}\n\n                {productObj.type === 6 && (\n                    <ProductServiceForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        handleChange={handleChange}\n                        selectedImage={selectedImage}\n                        setImageModal={setImageModal}\n                        filters={filters}\n                    />\n                )}\n\n                {productObj.type === 5 && (\n                    <ProductAccessoriesForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        currentUser={currentUser}\n                        retailNames={retailNames}\n                        selectedImage={selectedImage}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleAvailableChange={handleAvailableChange}\n                        filters={filters}\n                    />\n                )}\n\n                {productObj.type === 3 && (\n                    <ProductContactLensesForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        retailNames={retailNames}\n                        currentUser={currentUser}\n                        selectedImage={selectedImage}\n                        contactLensesParameters={contactLensesParameters}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleAddNewParameter={handleAddNewParameter}\n                        handleAvailableChange={handleAvailableChange}\n                        handleContactLensesChange={handleContactLensesChange}\n                        filters={filters}\n                        handleGetProductData={handleGetProductData}\n                    />\n                )}\n\n                {(productObj.type === 1 || productObj.type === 2 || productObj.type === 4) && (\n                    <ProductGlassesForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        retailNames={retailNames}\n                        currentUser={currentUser}\n                        selectedImage={selectedImage}\n                        glassesParameters={glassesParameters}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleSpecsChange={handleSpecsChange}\n                        handleAvailableChange={handleAvailableChange}\n                        handleGlassesSpecsSizeChange={handleGlassesSpecsSizeChange}\n                        handleGlassesParametersChange={handleGlassesParametersChange}\n                        filters={filters}\n                        handleGetProductData={handleGetProductData}\n                    />\n                )}\n\n            </ScrollContainer>\n\n        </section >\n    )\n}\n\nexport default ProductSection\n","/imooptik-frontend/src/sections/no-permission/no-permission.section.jsx",[],"/imooptik-frontend/src/sections/order/order.section.jsx",["762","763","764"],"import React, { useContext, useState, useEffect } from 'react'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { OrderContext } from '../../context/order/order.context'\nimport { useParams, Prompt } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\n\nimport Popup from \"../../components/popup/pop-up.component\"\n\nimport SelectUserComponent from './steps/1-select-user/select-user.component'\nimport SelectProductComponent from \"./steps/2-select-product/select-product.component\"\nimport SelectLensesComponent from './steps/3-select-lenses/select-lenses.component'\nimport SummaryComponent from './steps/4-summary/summary.component'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    Header,\n} from './order.styles'\n\nconst OrderSection = () => {\n    const {\n        step,\n        order,\n        setOrder,\n        addUser,\n        resetOrder,\n        changeStep\n    } = useContext(OrderContext)\n\n    const { userId, orderId } = useParams()\n\n    const [hasChanged, setHasChanged] = useState(false)\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const handleOrderChange = valueToAdd => {\n        setHasChanged(true)\n        const { name, value } = valueToAdd\n        setOrder({\n            ...order,\n            [name]: value\n        })\n    }\n\n    const {\n        getMessage,\n        setShowModal,\n        closeModal,\n        isLoading,\n        showModal,\n        message\n    } = useContext(LoadingModalContext)\n\n    const showErrorMessage = (message) => {\n        getMessage(message)\n        setShowModal(true)\n    }\n\n    const userData = useFetchById(\"api/admin/users\", userId, !(userId !== 'nova-objednavka'))\n    const orderData = useFetchById(\"api/admin/orders\", orderId, !orderId)\n\n    const handleAddNextProduct = () => {\n        changeStep('findProduct')\n        if (order?.product) {\n            if (order?.lenses) {\n                delete order[\"lenses\"]\n                delete order[\"product\"]\n            } else {\n                delete order[\"product\"]\n            }\n            setOrder({ ...order })\n        }\n    }\n\n    useEffect(() => {\n        if (userId !== 'nova-objednavka' && orderId) {\n            setIsUpdating(true)\n            changeStep('summary')\n            if (orderData.response) {\n                addUser(orderData.response.order.orderedBy)\n                setOrder({\n                    ...order,\n                    order: orderData.response.order,\n                    user: orderData.response.order.orderedBy,\n                    combinedProducts: orderData.response.order.combinedProducts\n                })\n            }\n        } else if (userId !== 'nova-objednavka' && orderId === undefined) {\n            changeStep('select-product')\n            if (userData.response) {\n                addUser(userData.response.user)\n            }\n        }\n\n    }, [userId, orderId, userData.response, orderData.response])\n\n    useEffect(() => {\n        if (userData.isLoading) return\n        addUser(userData.response.user)\n\n    }, [userData.isLoading])\n\n    useEffect(() => {\n        return () => {\n            changeStep('select-user')\n            resetOrder({})\n            setHasChanged(false)\n            setIsUpdating(false)\n        }\n    }, [])\n\n    // console.log(\"ORDER OBJECT\")\n    // console.log(userData.isLoading)\n\n    return (\n\n        <section>\n            <Prompt\n                when={hasChanged}\n                message={\"Máte nedokončenú objednávku, skutočne chcete odísť?\"}\n            />\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <Header>\n                <div>\n                    <h1>{isUpdating ? `Objednavka číslo ${order?.order?.customId}` : \"Nová objednávka\"}</h1>\n                </div>\n            </Header>\n            <ScrollContainer>\n                <div>\n                    {step === 'select-user' && (\n                        <SelectUserComponent\n                            next={() => changeStep('select-product')}\n                            addToOrder={handleOrderChange}\n                        />\n                    )}\n                    {step === 'select-product' && (\n                        <SelectProductComponent\n                            back={() => changeStep(\"select-user\")}\n                            next={changeStep}\n                            showErrorMessage={showErrorMessage}\n                        />\n                    )}\n                    {step === 'select-lenses' && (\n                        <SelectLensesComponent\n                            back={() => changeStep(\"select-product\")}\n                            next={() => changeStep('summary')}\n                        />\n                    )}\n                    {step === 'summary' && (\n                        <SummaryComponent\n                            isUpdating={isUpdating}\n                            back={() => changeStep(\"select-lenses\")}\n                            addNextProduct={handleAddNextProduct}\n                            setHasChanged={setHasChanged}\n                            refetchUser={userData.refetch}\n                        />\n                    )}\n                </div>\n\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default OrderSection\n","/imooptik-frontend/src/sections/blog-posts/blog-posts.section.jsx",["765","766","767","768"],"import React, { useState, useEffect, useContext } from 'react'\nimport { BlogContext } from '../../context/blog/blog.context'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from \"../../components/scroll-container/scroll-container.component\"\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    PostContainer,\n    PostImage,\n    PostContent,\n    Options,\n    UpdateButton,\n    DeleteButton\n} from './blog-posts.styles'\n\nconst BlogPosts = () => {\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n    const { postsCount, handlePostDelete } = useContext(BlogContext)\n    const { push } = useHistory()\n\n    const [posts, setPosts] = useState([])\n\n    const [filterQuery, setFilterQuery] = useState({\n        limit: 10,\n        sortBy: {\n            date: -1\n        },\n        // query: \"\"\n    })\n    const [searchQuery, setSearchQuery] = useState('')\n\n\n\n    const [activeIndex, setActiveIndex] = useState(0)\n    const items = [\n        {\n            id: 0,\n            name: \"Zostupne\"\n        },\n        {\n            id: 1,\n            name: \"Vzostupne\"\n        },\n    ]\n\n    const blogsData = useFetchByQuery('api/blogs/filter', filterQuery)\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n                query: searchQuery\n            })\n            blogsData.refetch()\n        }\n    }\n\n    const handlePostDeleteClick = (postID) => {\n        handlePostDelete(postID)\n        blogsData.refetch()\n    }\n\n    useEffect(() => {\n        if (searchQuery === '') {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n            })\n            blogsData.refetch()\n        }\n    }, [searchQuery])\n\n    useEffect(() => {\n        if (activeIndex === 0) {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n                // query: \"\"\n            })\n            blogsData.refetch()\n        } else {\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: 1\n                },\n                // query: \"\"\n            })\n            blogsData.refetch()\n        }\n    }, [activeIndex])\n\n    useEffect(() => {\n        if (!blogsData.isLoading) {\n            setPosts(blogsData.response?.blogs)\n        }\n    }, [blogsData.isLoading])\n\n    useEffect(() => {\n        return () => {\n            closeModal()\n            setSearchQuery('')\n            setActiveIndex(0)\n            setPosts([])\n            setFilterQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                },\n            })\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n\n            <SectionHeader\n                searchQuery={searchQuery}\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleSearch={handleSearch}\n                handleAddButton={() => push('blog/novy-prispevok')}\n                count={postsCount}\n                title=\"Blog\"\n            />\n            <FlexContainer>\n                <FixedContainer>\n\n                    <SectionNavbar\n                        items={items}\n                        activeIndex={activeIndex}\n                        setActiveIndex={setActiveIndex}\n                    />\n\n                </FixedContainer>\n\n            </FlexContainer>\n\n            <ScrollContainer>\n                {posts && posts.length ? posts.map(post => (\n                    <PostContainer key={post._id}>\n                        <PostImage>\n                            {post.image && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${post.image.imagePath}`} alt={post.image.alt} />}\n                        </PostImage>\n                        <PostContent>\n                            <h2>{post.name}</h2>\n                            <p>{post.description}</p>\n                        </PostContent>\n                        <Options>\n                            <UpdateButton onClick={() => push(`blog/${post._id}`)}>Upraviť</UpdateButton>\n                            <DeleteButton onClick={() => handlePostDeleteClick(post._id)}>Vymazať</DeleteButton>\n                        </Options>\n                    </PostContainer>\n                )) : (\n                        <div>\n                            Žiadne príspevky\n                        </div>\n                    )}\n\n                <ListArrows\n                    listItems={posts}\n                />\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default BlogPosts\n","/imooptik-frontend/src/sections/booking/booking.section.jsx",["769","770"],"import React, { useState, useEffect, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../../context/auth/auth.context'\n\n// import SectionHeader from '../../components/section-header/section-header.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport BookingCalendarOverview from \"../../components/booking-calendar-overview/booking-calendar-overview.component\"\nimport WeekCalendarProvider from '../../context/week-calendar/week-calendar.context'\n\nimport Calendar from '../../components/calendar/calendar.component'\nimport WeekDays from '../../components/calendar-weekdays/calendar-weekdays.component'\n// import BookingAppoinments from '../../components/booking-appoinments/booking-appoinment.component'\nimport BookingCalendarBookings from '../../components/booking-calendar-bookings/booking-calendar-bookings.component'\n\nimport { useFetch } from '../../hooks/useFetch'\nimport { calendarFormat, months } from '../../utils/calendar.utils'\n\nimport {\n    AiOutlineLeft,\n    AiOutlineRight,\n    AiOutlineDownCircle,\n    AiOutlineUpCircle\n} from 'react-icons/ai'\n\nimport {\n    FixedContainer,\n} from '../../global.styles'\n\nimport {\n    Header,\n    Title,\n    GridRow,\n    CalendarGridContainer,\n    CalendarHeading,\n    CalendarHeader,\n    CalendarFormat,\n    CalendarMonthContainer,\n    IconContainer,\n    UpdateButton\n} from './booking.styles'\n\nconst BookingSection = () => {\n    const { isAdmin, currentUser, isOptometrist } = useContext(AuthContext)\n    const { showModal, setShowModal, message, closeModal } = useContext(LoadingModalContext)\n    const { push } = useHistory()\n    // const [showModal, setShowModal] = useState(true)\n    const [showPremisesSection, setShowPremisesSection] = useState(true)\n    const [activeCalendarFormat, setActiveCalendarFormat] = useState(1)\n    const [calendars, setCalendars] = useState([])\n    const [selectedCalendar, setSelectedCalendar] = useState(null)\n    const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth())\n    const [selectedYear, setSelectedYear] = useState(new Date().getFullYear())\n    const [calendarWeekIndex, setCalendarWeekIndex] = useState(0)\n    const [selectedDay, setSelectedDay] = useState(null)\n\n    const [showUserBooking, setShowUserBooking] = useState(false)\n\n\n    const handleOpenUserBookingModal = (dayData) => {\n        if (dayData !== null) {\n            setSelectedDay({\n                ...dayData,\n            })\n        }\n        setShowUserBooking(true)\n    }\n\n    const { isLoading, response } = useFetch('api/booking/calendars')\n\n    const handleShowCalendarClick = (calendarId) => {\n        if (!calendarId) return\n        setSelectedCalendar(calendarId)\n        setShowPremisesSection(false)\n        resetCalendarToDefault()\n    }\n\n    const getPrevWeek = () => {\n        if (calendarWeekIndex - 1 < 0) {\n            if (selectedMonth === 0) {\n                setSelectedYear(prevValue => prevValue - 1)\n                setSelectedMonth(11)\n                setCalendarWeekIndex(Math.ceil(new Date(selectedYear, selectedMonth, 0).getDate() / 7) - 1)\n\n            } else {\n                setSelectedMonth(prevValue => prevValue - 1)\n                setCalendarWeekIndex(Math.ceil(new Date(selectedYear, selectedMonth, 0).getDate() / 7) - 1)\n            }\n        } else {\n            setCalendarWeekIndex(prevValue => prevValue - 1)\n        }\n    }\n\n    const getNextWeek = () => {\n        const lastDayIndex = new Date(selectedYear, selectedMonth, 0).getDate()\n\n        if (((calendarWeekIndex) * 7) >= lastDayIndex - 7) {\n            setCalendarWeekIndex(0)\n            setSelectedMonth(prevValue => prevValue + 1)\n\n            if (selectedMonth === 11) {\n                setSelectedYear(prevValue => prevValue + 1)\n                setSelectedMonth(0)\n                setCalendarWeekIndex(0)\n\n            }\n        } else {\n            setCalendarWeekIndex(prevValue => prevValue + 1)\n        }\n    }\n\n    const getPrevMonth = () => {\n        if (selectedMonth === 0) {\n            setSelectedYear(prevValue => prevValue - 1)\n            setSelectedMonth(11)\n        } else {\n            setSelectedMonth(prevValue => prevValue - 1)\n        }\n    }\n\n    const getNextMonth = () => {\n        if (selectedMonth === 11) {\n            setSelectedYear(prevValue => prevValue + 1)\n            setSelectedMonth(0)\n        } else {\n            setSelectedMonth(prevValue => prevValue + 1)\n        }\n\n    }\n\n    const resetCalendarToDefault = () => {\n        setSelectedMonth(new Date().getMonth())\n        setSelectedYear(new Date().getFullYear())\n        setCalendarWeekIndex(Math.ceil(new Date().getDate() / 7) - 1)\n        // setSelectedDay(null)\n    }\n\n    const handleCalendarBlockClick = (dayData) => {\n        // if (!dayData.bookings) return\n        // if (!dayData.bookingDate) return\n\n        // setSelectedCalendar(null)\n        // setSelectedDay(dayData)\n        setCalendarWeekIndex(Math.ceil(dayData.dayNumber / 7) - 1)\n        setActiveCalendarFormat(1)\n    }\n\n    useEffect(() => {\n        if (!isLoading) {\n            if (response) {\n                if (isAdmin) {\n                    setCalendars(response.calendars)\n                    const userCalendar = response.calendars.find(calendar => calendar.premises === currentUser.premises)\n                    handleShowCalendarClick(userCalendar?._id)\n                    setShowModal(false)\n                } else {\n                    setCalendars(response.calendars.filter(calendar => calendar.premises === currentUser.premises))\n                    const userCalendar = response.calendars.find(calendar => calendar.premises === currentUser.premises)\n                    handleShowCalendarClick(userCalendar?._id)\n                    setShowModal(false)\n                }\n                closeModal()\n            }\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        return () => {\n            setShowModal(true)\n            setShowPremisesSection(true)\n            setActiveCalendarFormat(0)\n            setCalendars([])\n            setSelectedCalendar(null)\n            setSelectedMonth(new Date().getMonth())\n            setSelectedYear(new Date().getFullYear())\n            setCalendarWeekIndex(0)\n            setSelectedDay(null)\n            closeModal()\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={() => setShowModal(false)} />}\n\n            {isAdmin && <Header>\n                <FixedContainer>\n                    <div>\n                        <h1>Rezervácie</h1>\n                    </div>\n                    <div>\n                        <UpdateButton onClick={() => handleOpenUserBookingModal(null)}>Pridať rezerváciu</UpdateButton>\n                        <UpdateButton onClick={() => push('rezervacie/novy-kalendar')}>Pridať kalendár</UpdateButton>\n                    </div>\n\n                </FixedContainer>\n            </Header>}\n\n            {(!isOptometrist && !isAdmin) && (\n                <Header>\n                    <FixedContainer>\n                        <div>\n                            <h1>Rezervácie</h1>\n                        </div>\n                        {selectedCalendar ? <div>\n                            <UpdateButton onClick={() => handleOpenUserBookingModal(null)}>Pridať rezerváciu</UpdateButton>\n                        </div> : (\n                                <div>\n                                    <p>K vašemu účtu nieje priradená prevádzka</p>\n                                </div>\n                            )}\n\n                    </FixedContainer>\n                </Header>\n            )}\n\n            {(isOptometrist && !isAdmin) && (\n                <Header>\n                    <FixedContainer>\n                        <div>\n                            <h1>Rezervácie</h1>\n                        </div>\n                        {selectedCalendar ? <div>\n                            <UpdateButton onClick={() => handleOpenUserBookingModal(null)}>Pridať rezerváciu</UpdateButton>\n                            <UpdateButton onClick={() => push(`rezervacie/${selectedCalendar}`)}>Upraviť kalendár</UpdateButton>\n                        </div> : (\n                                <div>\n                                    <p>K vašemu účtu nieje priradená prevádzka</p>\n                                </div>\n                            )}\n\n                    </FixedContainer>\n                </Header>\n            )}\n\n            <ScrollContainer>\n                {isAdmin && <CalendarHeading>\n                    <Title>Pobočky</Title>\n                    <div onClick={() => setShowPremisesSection(prevValue => !prevValue)}>\n                        <p>\n                            {calendars.find(calendar => calendar._id === selectedCalendar)?.name}\n                        </p>\n                        <IconContainer>\n                            {showPremisesSection ? <AiOutlineUpCircle /> : <AiOutlineDownCircle />}\n                        </IconContainer>\n                    </div>\n                </CalendarHeading>}\n\n                {showPremisesSection && <GridRow>\n                    {calendars && calendars.map((calendar, idx) => (\n                        <BookingCalendarOverview\n                            key={idx}\n                            calendar={calendar}\n                            selectedCalendar={selectedCalendar}\n                            handleShowUpClick={() => handleShowCalendarClick(calendar._id)}\n                            handleUpdateClick={() => push(`rezervacie/${calendar._id}`)}\n                        />\n                    ))}\n                </GridRow>}\n\n                {selectedCalendar && (\n                    <React.Fragment>\n\n                        <CalendarHeader>\n                            <Title>Kalendár</Title>\n\n                            {activeCalendarFormat === 0 ? (\n                                <CalendarMonthContainer>\n                                    <button onClick={getPrevMonth}><AiOutlineLeft /></button>\n                                    <p>{months[selectedMonth]}</p>\n                                    <button onClick={getNextMonth}><AiOutlineRight /></button>\n                                </CalendarMonthContainer>\n                            ) : (\n                                    <CalendarMonthContainer>\n                                        <button onClick={getPrevWeek}><AiOutlineLeft /></button>\n                                        <div>\n                                            <p>{calendarWeekIndex + 1}</p>\n                                            <p>{months[selectedMonth]}</p>\n                                        </div>\n                                        <button onClick={getNextWeek}><AiOutlineRight /></button>\n                                    </CalendarMonthContainer>\n                                )}\n\n                            <ul>\n                                {calendarFormat.map((name, idx) => (\n                                    <CalendarFormat key={idx} isActive={activeCalendarFormat === idx} onClick={() => setActiveCalendarFormat(idx)}>{name}</CalendarFormat>\n                                ))}\n                            </ul>\n                        </CalendarHeader>\n                        <CalendarGridContainer>\n                            {activeCalendarFormat === 0 ? (\n                                <Calendar\n                                    calendar={selectedCalendar}\n                                    month={selectedMonth}\n                                    year={selectedYear}\n                                    handleCalendarBlockClick={handleCalendarBlockClick}\n                                />\n                            ) : (\n                                    <WeekCalendarProvider\n                                        calendar={selectedCalendar}\n                                        month={selectedMonth}\n                                        year={selectedYear}\n                                        weekIndex={calendarWeekIndex}\n                                        handleCalendarBlockClick={handleCalendarBlockClick}\n                                    >\n                                        <WeekDays\n                                            calendar={selectedCalendar}\n                                            month={selectedMonth}\n                                            year={selectedYear}\n                                            weekIndex={calendarWeekIndex}\n                                            handleCalendarBlockClick={handleCalendarBlockClick}\n                                            showUserBooking={showUserBooking}\n                                            setShowUserBooking={setShowUserBooking}\n                                            handleOpenUserBookingModal={handleOpenUserBookingModal}\n                                            selectedDay={selectedDay}\n                                            getNextWeek={getNextWeek}\n                                        />\n\n                                    </WeekCalendarProvider>\n                                )}\n                        </CalendarGridContainer>\n\n                        <BookingCalendarBookings calendarId={selectedCalendar} />\n                    </React.Fragment>\n                )}\n\n                {/* {selectedDay && (\n                    <BookingAppoinments\n                        day={selectedDay}\n                    />\n                )} */}\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default BookingSection\n","/imooptik-frontend/src/sections/post/post.section.jsx",["771","772","773"],"import React, { useState, useContext, useEffect } from 'react'\nimport { BlogContext } from '../../context/blog/blog.context'\nimport { ImageContext } from '../../context/image/image.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams, useHistory } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport CustomInput from '../../components/custom-input/custom-input.component'\nimport CustomTextarea from '../../components/custom-textarea/custom-textarea.component'\nimport CustomCheckbox from '../../components/custom-checkbox/custom-checkbox.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport ModalImage from '../../components/modal-images/modal-images.component'\nimport { Quill } from 'react-quill'\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\n\nimport {\n    Header,\n    GridContainer,\n    PostImage,\n    DeleteButton,\n    AddButton,\n    Title,\n    ContentTextare,\n    Container,\n} from './post.styles'\n\nconst PostSection = () => {\n    const { id } = useParams()\n    const { push } = useHistory()\n    const {\n        createPost,\n        isLoading,\n        message,\n        showLoading,\n        setIsLoading,\n        getPost,\n        post,\n        handlePostUpdate,\n        resetBlog\n    } = useContext(BlogContext)\n    const { closeModal } = useContext(LoadingModalContext)\n    const { selectedImage, setSelectedImage } = useContext(ImageContext)\n    const [title, setTitle] = useState('')\n    const [description, setDescription] = useState('')\n    const [content, setContent] = useState('')\n    const [image, setImage] = useState('')\n    const [draft, toggleDraft] = useState(false)\n    const [showImageModal, setImageModal] = useState(false)\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        if (image.length <= 0) return\n        if (content.length <= 0) return\n\n        if (id === 'novy-prispevok') {\n            createPost(image, title, description, draft, content)\n        } else {\n            handlePostUpdate(title, description, draft, content, image, id)\n        }\n\n        push('/dashboard/blog')\n\n    }\n\n    useEffect(() => {\n        setSelectedImage(null)\n\n        if (id !== 'novy-prispevok') {\n            getPost(id)\n            setIsUpdating(true)\n        }\n    }, [id])\n\n    useEffect(() => {\n        if (id !== 'novy-prispevok') {\n            if (post) {\n                setTitle(post.name)\n                setDescription(post.description)\n                setContent(post.html)\n                toggleDraft(post.draft)\n                if (post.image) {\n                    setImage(post.image._id)\n                    setSelectedImage(post.image)\n                }\n            }\n        }\n    }, [post])\n\n    useEffect(() => {\n        return () => {\n            closeModal()\n            resetBlog()\n            setTitle('')\n            setDescription('')\n            setContent('')\n            setImage('')\n            toggleDraft(false)\n            setImageModal(false)\n            setIsUpdating(false)\n        }\n    }, [])\n\n    return (\n        <form onSubmit={handleSubmit}>\n            {isLoading && <Popup loading={showLoading} title={message} close={() => setIsLoading(false)} />}\n            {showImageModal && <ModalImage close={() => setImageModal(false)} setImage={setImage} />}\n\n            <Header>\n                <FixedContainer>\n                    <div>\n                        <h1>Post</h1>\n                    </div>\n                    <div>\n                        <CustomCheckbox\n                            label='Draft'\n                            isActive={draft}\n                            handleClick={() => toggleDraft(prevValue => !prevValue)}\n                        />\n                        <DeleteButton>Vymazať</DeleteButton>\n                        <AddButton type='submit'>{isUpdating ? \"Upraviť príspevok\" : \"Pridať príspevok\"}</AddButton>\n                    </div>\n\n                </FixedContainer>\n            </Header>\n\n            <ScrollContainer>\n\n                <GridContainer>\n                    <Container>\n                        <h2>Informácia</h2>\n                        <CustomInput\n                            label=\"Nadpis\"\n                            type='text'\n                            name='title'\n                            value={title}\n                            handleChange={(e) => setTitle(e.target.value)}\n                            required\n                        />\n                        <CustomTextarea\n                            label=\"Popis\"\n                            name='description'\n                            rows='5'\n                            value={description}\n                            handleChange={(e) => setDescription(e.target.value)}\n                            required\n                        />\n                        <h2>Titulná fotka</h2>\n                        <PostImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                            {!selectedImage && \"Vybrať obrázok\"}\n                            {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                        </PostImage>\n                    </Container>\n                    <Container>\n                        <Title>Obsah</Title>\n                        <QuillToolbar />\n                        <ContentTextare\n                            value={content}\n                            onChange={setContent}\n                            modules={modules}\n                            formats={formats}\n                        />\n                    </Container>\n\n                </GridContainer>\n\n            </ScrollContainer>\n        </form>\n    )\n}\n\n\nconst CustomUndo = () => (\n    <svg viewBox=\"0 0 18 18\">\n        <polygon className=\"ql-fill ql-stroke\" points=\"6 10 4 12 2 10 6 10\" />\n        <path\n            className=\"ql-stroke\"\n            d=\"M8.09,13.91A4.6,4.6,0,0,0,9,14,5,5,0,1,0,4,9\"\n        />\n    </svg>\n);\n\n// Redo button icon component for Quill editor\nconst CustomRedo = () => (\n    <svg viewBox=\"0 0 18 18\">\n        <polygon className=\"ql-fill ql-stroke\" points=\"12 10 14 12 16 10 12 10\" />\n        <path\n            className=\"ql-stroke\"\n            d=\"M9.91,13.91A4.6,4.6,0,0,1,9,14a5,5,0,1,1,5-5\"\n        />\n    </svg>\n);\n\n// Undo and redo functions for Custom Toolbar\nfunction undoChange() {\n    this.quill.history.undo();\n}\nfunction redoChange() {\n    this.quill.history.redo();\n}\n\n// Add sizes to whitelist and register them\nconst Size = Quill.import(\"formats/size\");\nSize.whitelist = [\"extra-small\", \"small\", \"medium\", \"large\"];\nQuill.register(Size, true);\n\n// Add fonts to whitelist and register them\nconst Font = Quill.import(\"formats/font\");\nFont.whitelist = [\n    \"arial\",\n    \"comic-sans\",\n    \"courier-new\",\n    \"georgia\",\n    \"helvetica\",\n    \"lucida\"\n];\nQuill.register(Font, true);\n\n// Modules object for setting up the Quill editor\nconst modules = {\n    toolbar: {\n        container: \"#toolbar\",\n        handlers: {\n            undo: undoChange,\n            redo: redoChange\n        }\n    },\n    history: {\n        delay: 500,\n        maxStack: 100,\n        userOnly: true\n    }\n};\n\n// Formats objects for setting up the Quill editor\nconst formats = [\n    \"header\",\n    \"font\",\n    \"size\",\n    \"bold\",\n    \"italic\",\n    \"underline\",\n    \"align\",\n    \"strike\",\n    \"script\",\n    \"blockquote\",\n    \"background\",\n    \"list\",\n    \"bullet\",\n    \"indent\",\n    \"link\",\n    \"image\",\n    \"color\",\n    \"code-block\"\n];\n\n// Quill Toolbar component\nconst QuillToolbar = () => (\n    <div id=\"toolbar\" className=\"toolbar\">\n        <span className=\"ql-formats\">\n            <select className=\"ql-size\" defaultValue=\"medium\">\n                <option value=\"extra-small\">Size 1</option>\n                <option value=\"small\">Size 2</option>\n                <option value=\"medium\">Size 3</option>\n                <option value=\"large\">Size 4</option>\n            </select>\n            <select className=\"ql-header\" defaultValue=\"3\">\n                <option value=\"1\">Heading</option>\n                <option value=\"2\">Subheading</option>\n                <option value=\"3\">Normal</option>\n            </select>\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-bold\" />\n            <button className=\"ql-italic\" />\n            <button className=\"ql-underline\" />\n            <button className=\"ql-strike\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-list\" value=\"ordered\" />\n            <button className=\"ql-list\" value=\"bullet\" />\n            <button className=\"ql-indent\" value=\"-1\" />\n            <button className=\"ql-indent\" value=\"+1\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-script\" value=\"super\" />\n            <button className=\"ql-script\" value=\"sub\" />\n            <button className=\"ql-blockquote\" />\n            <button className=\"ql-direction\" />\n        </span>\n        <span className=\"ql-formats\">\n            <select className=\"ql-align\" />\n            <select className=\"ql-color\" />\n            <select className=\"ql-background\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-link\" />\n            <button className=\"ql-image\" />\n            <button className=\"ql-video\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-formula\" />\n            <button className=\"ql-code-block\" />\n            <button className=\"ql-clean\" />\n        </span>\n        <span className=\"ql-formats\">\n            <button className=\"ql-undo\">\n                <CustomUndo />\n            </button>\n            <button className=\"ql-redo\">\n                <CustomRedo />\n            </button>\n        </span>\n    </div>\n);\n\n\nexport default PostSection\n","/imooptik-frontend/src/sections/coupons/coupons.section.jsx",["774","775"],"import React, { useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { CouponsContext } from '../../context/coupons/coupons.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\n\nimport Popup from '../../components/popup/pop-up.component'\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport { formatPrice } from '../../utils/warehouse.utils'\n\nimport {\n    // CouponOverviewContainer,\n    DeleteButton,\n    OpenButton,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TableCol\n} from './coupons.styles'\n\nconst CouponsSection = () => {\n    // const [searchQuery, setSearchQuery] = useState('')\n    const { push } = useHistory()\n\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal\n    } = useContext(LoadingModalContext)\n\n    const {\n        coupons,\n        getCoupons,\n        deleteCoupon\n    } = useContext(CouponsContext)\n\n    useEffect(() => {\n        if (!coupons) {\n            getCoupons()\n        }\n    }, [coupons])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n\n            <SectionHeader\n                title='Kupóny'\n                // searchQuery={searchQuery}\n                // handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push('kupony/novy-kupon')}\n            />\n            <ScrollContainer>\n\n                <TableContainer>\n                    <TableHead>\n                        <TableCol>#</TableCol>\n                        <TableCol>Kód</TableCol>\n                        <TableCol>Typ</TableCol>\n                        <TableCol>Hodnota</TableCol>\n                        <TableCol>Možnosti</TableCol>\n                    </TableHead>\n                    {coupons && coupons.map((coupon, idx) => (\n                        <TableRow key={idx}>\n                            <TableCol>{idx + 1}</TableCol>\n                            <TableCol>{coupon.code}</TableCol>\n                            <TableCol>{coupon.type === \"percentage\" ? \"Percentá\" : \"Fixná suma\"}</TableCol>\n                            <TableCol>{coupon.type === \"percentage\" ? `${coupon.value}%` : `${(coupon.value / 100).toFixed(2)}€`}</TableCol>\n                            <TableCol>\n                                <OpenButton onClick={() => push(`kupony/${coupon._id}`)}>Zobraziť</OpenButton>\n                                <DeleteButton onClick={() => deleteCoupon(coupon._id)}>Ostrániť</DeleteButton>\n                            </TableCol>\n                        </TableRow>\n                    ))}\n                </TableContainer>\n                <ListArrows\n                    listItems={coupons}\n                />\n            </ScrollContainer>\n        </section>\n    )\n}\n\nexport default CouponsSection\n","/imooptik-frontend/src/sections/coupon/coupon.section.jsx",["776","777"],"/imooptik-frontend/src/sections/e-shop/e-shop.section.jsx",["778","779"],"import React, { useState, useContext, useEffect } from 'react'\n// import { AuthContext } from '../..//context/auth/auth.context'\nimport { WarehouseContext } from '../../context/warehouse/warehouse.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useHistory } from 'react-router-dom'\n\n\nimport SectionHeader from '../../components/section-header/section-header.component'\nimport SectionNavbar from '../../components/section-navbar/section-navbar.component'\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport ProductOverview from '../../components/product-overview/product-overview.component'\nimport Popup from '../../components/popup/pop-up.component'\nimport EshopFilterModal from '../../components/modal-eshop-filter/modal-eshop-filter.component'\n\nimport ListArrows from '../../components/list-arrows/list-arrows.component'\n\nimport {\n    FixedContainer,\n    FlexContainer\n} from '../../global.styles'\n\nimport {\n    Filterbutton,\n    ResetButton,\n    PublicButton,\n} from './e-shop.styles'\n\nconst EshopSection = () => {\n    const { push } = useHistory()\n    const { closeModal, showModal, isLoading, message } = useContext(LoadingModalContext)\n    const [searchQuery, setSearchQuery] = useState('')\n    const [productItems, setProductItems] = useState([])\n    const [queryFilter, setQueryFilter] = useState({\n        limit: 10,\n        skip: 0,\n        sortBy: {\n            date: -1\n        }\n    })\n\n    const [showFilterModal, setShowFilterModal] = useState(false)\n    const [hasFilter, setHasFilter] = useState(false)\n\n    const [selectedProducts, setSelectedProducts] = useState([])\n\n    const selectProduct = (productID) => {\n        setSelectedProducts(prevValue => ([\n            ...prevValue,\n            productID\n        ]))\n    }\n\n\n\n    const deselectProduct = (selectedProductsArr, productID) => {\n        const newArr = selectedProductsArr.filter(product => product !== productID)\n\n        setSelectedProducts(newArr)\n    }\n\n    const {\n        activePremisesTab,\n        products,\n        retailPremisesTabs,\n        getProductsByQuery,\n        handleChangePremisesTab,\n        productCategoryTypeTabs,\n        activeCategoryTypeTab,\n        handleChangeCategoryTypeTab,\n        deleteProduct,\n        deleteLenses,\n        deactivateMany,\n    } = useContext(WarehouseContext)\n\n    const handleDeactivateMany = (productIDs, boolean) => {\n        const dataObj = {\n            products: productIDs,\n            activate: boolean\n        }\n        deactivateMany(dataObj)\n        setSelectedProducts([])\n    }\n\n    const applyFilter = filter => {\n        getProductsByQuery(filter)\n        setShowFilterModal(false)\n        setHasFilter(true)\n    }\n\n    const resetFilter = () => {\n        getProductsByQuery({\n            limit: 10,\n            skip: 0,\n            sortBy: {\n                date: -1\n            }\n        })\n        setShowFilterModal(false)\n        setHasFilter(false)\n    }\n\n    const handleSearch = () => {\n        if (searchQuery !== '') {\n            if (activeCategoryTypeTab === 0) {\n                getProductsByQuery({\n                    query: searchQuery,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n            }\n        }\n    }\n\n    const handleDeleteProduct = (id) => {\n        deleteProduct(id)\n    }\n\n    useEffect(() => {\n        if (!products) {\n            getProductsByQuery({\n                limit: 10,\n                sortBy: {\n                    date: -1\n                }\n            })\n        }\n        if (products) {\n            setProductItems(products)\n        }\n    }, [products])\n\n    useEffect(() => {\n        if (!searchQuery && products) {\n            if (activeCategoryTypeTab === 0) {\n                getProductsByQuery({\n                    limit: 10,\n                    sortBy: {\n                        date: -1\n                    }\n                })\n            }\n        }\n    }, [searchQuery])\n\n\n    const getNextPage = () => {\n        if (productItems.length < 10) return\n        getProductsByQuery({\n            ...queryFilter,\n            skip: queryFilter.skip + 10\n        })\n        setQueryFilter({\n            ...queryFilter,\n            skip: queryFilter.skip + 10\n        })\n    }\n\n    const getPrevPage = () => {\n        if (queryFilter.skip === 0) return\n        getProductsByQuery({\n            ...queryFilter,\n            skip: queryFilter.skip - 10\n        })\n        setQueryFilter({\n            ...queryFilter,\n            skip: queryFilter.skip - 10\n        })\n    }\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            {showFilterModal && <EshopFilterModal applyFilter={applyFilter} resetFilter={resetFilter} close={() => setShowFilterModal(false)} />}\n\n            <SectionHeader\n                title=\"Sklad\"\n                searchQuery={searchQuery}\n                handleSearch={handleSearch}\n                handleChange={e => setSearchQuery(e.target.value)}\n                handleAddButton={() => push('sklad/novy-produkt')}\n\n            />\n\n            <FlexContainer>\n                <FixedContainer>\n\n                    <SectionNavbar\n                        items={retailPremisesTabs}\n                        activeIndex={activePremisesTab}\n                        setActiveIndex={handleChangePremisesTab}\n                    />\n                </FixedContainer>\n            </FlexContainer>\n\n\n            <FlexContainer>\n                <FixedContainer>\n                    <SectionNavbar\n                        items={productCategoryTypeTabs}\n                        activeIndex={activeCategoryTypeTab}\n                        setActiveIndex={handleChangeCategoryTypeTab}\n                    />\n                    {selectedProducts.length > 0 && <div>\n                        <PublicButton onClick={() => handleDeactivateMany(selectedProducts, false)}>Neverejné</PublicButton>\n                        <PublicButton onClick={() => handleDeactivateMany(selectedProducts, true)}>Verejné</PublicButton>\n                    </div>}\n                    {activeCategoryTypeTab === 0 && <div>\n                        {hasFilter && <ResetButton onClick={resetFilter}>reset</ResetButton>}\n                        <Filterbutton onClick={() => setShowFilterModal(true)}>Filter</Filterbutton>\n                    </div>}\n                </FixedContainer>\n            </FlexContainer>\n\n            <ScrollContainer>\n                {productItems.map((product, idx) => (\n                    <ProductOverview\n                        key={idx}\n                        product={product}\n                        activePremisesTab={activePremisesTab}\n                        handleUpdateButton={() => push(`sklad/${product._id}`)}\n                        handleDeleteButton={activeCategoryTypeTab === 0 ? () => handleDeleteProduct(product._id) : () => deleteLenses((product._id))}\n                        selectProduct={selectProduct}\n                        deselectProduct={deselectProduct}\n                        selectedProducts={selectedProducts}\n                    />\n                ))}\n\n                <ListArrows\n                    listItems={productItems}\n                    handleClickPrev={getPrevPage}\n                    handleClickNext={getNextPage}\n                />\n            </ScrollContainer>\n        </section >\n    )\n}\n\nexport default EshopSection\n","/imooptik-frontend/src/sections/calendar/calendar.section.jsx",["780"],"/imooptik-frontend/src/components/spinner/spinner.styles.jsx",[],"/imooptik-frontend/src/components/custom-button/custom-button.styles.jsx",[],"/imooptik-frontend/src/components/sidenav/sidenav.styles.jsx",[],"/imooptik-frontend/src/context/blog/blog.queries.jsx",[],"/imooptik-frontend/src/context/user/user.utils.jsx",[],"/imooptik-frontend/src/context/user/user.queries.jsx",[],"/imooptik-frontend/src/context/warehouse/warehouse.utils.jsx",[],"/imooptik-frontend/src/context/image/image.queries.jsx",[],"/imooptik-frontend/src/components/forgot-password/forgot-password.styles.jsx",[],"/imooptik-frontend/src/components/sign-in/sign-in.styles.jsx",[],"/imooptik-frontend/src/utils/warehouse.utils.jsx",[],"/imooptik-frontend/src/context/orders/orders.utils.jsx",[],"/imooptik-frontend/src/sections/orders/orders.styles.jsx",[],"/imooptik-frontend/src/utils/analytics.utils.jsx",[],"/imooptik-frontend/src/sections/analytics/analytics.styles.jsx",[],"/imooptik-frontend/src/utils/user.utils.jsx",[],"/imooptik-frontend/src/sections/customers/customers.styles.jsx",[],"/imooptik-frontend/src/components/custom-input/custom-input.styles.jsx",[],"/imooptik-frontend/src/sections/no-permission/no-permission.styles.jsx",[],"/imooptik-frontend/src/sections/order/order.styles.jsx",[],"/imooptik-frontend/src/sections/customer-profile/customer-profile.styles.jsx",[],"/imooptik-frontend/src/utils/calendar.utils.jsx",[],"/imooptik-frontend/src/sections/product/product.styles.jsx",[],"/imooptik-frontend/src/sections/post/post.styles.jsx",[],"/imooptik-frontend/src/sections/calendar/calendar.styles.jsx",[],"/imooptik-frontend/src/sections/coupons/coupons.styles.jsx",[],"/imooptik-frontend/src/sections/booking/booking.styles.jsx",[],"/imooptik-frontend/src/sections/coupon/coupon.styles.jsx",[],"/imooptik-frontend/src/sections/e-shop/e-shop.styles.jsx",[],"/imooptik-frontend/src/components/section-navbar/section-navbar.component.jsx",[],"/imooptik-frontend/src/components/section-header/section-header.component.jsx",[],"/imooptik-frontend/src/components/scroll-container/scroll-container.component.jsx",[],"/imooptik-frontend/src/components/list-arrows/list-arrows.component.jsx",["781","782"],"import React, { useState, useEffect } from 'react'\n\nimport {\n    AiFillLeftCircle,\n    AiFillRightCircle\n} from 'react-icons/ai'\n\nimport {\n    ArrowsContainer,\n    IconContainer\n} from './list-arrows.styles'\n\nconst ListArrows = ({\n    listItems = [],\n    handleClickPrev = () => { },\n    handleClickNext = () => { }\n}) => {\n    const [isDisablePrev, setIsDisablePrev] = useState(true)\n    const [isDisableNext, setIsDisableNext] = useState(true)\n    const [currentPage, setCurrentPage] = useState(0)\n\n    useEffect(() => {\n        if (currentPage === 0) {\n            setIsDisablePrev(true)\n        } else {\n            setIsDisablePrev(false)\n            // setCurrentPage(0)\n        }\n    }, [listItems])\n\n    useEffect(() => {\n        if (listItems?.length < 10) {\n            setIsDisableNext(true)\n        } else {\n            setIsDisableNext(false)\n        }\n    }, [listItems])\n\n    useEffect(() => {\n        if (currentPage === 0) return\n        setCurrentPage(prevValue => prevValue--)\n    }, [handleClickPrev])\n    useEffect(() => {\n        // if (currentPage === 0) return\n        setCurrentPage(prevValue => prevValue++)\n    }, [handleClickNext])\n\n    const handlePrev = () => {\n        handleClickPrev()\n        if (currentPage === 0) return\n        setCurrentPage(prevValue => prevValue - 1)\n    }\n    const handleNext = () => {\n        handleClickNext()\n        setCurrentPage(prevValue => prevValue + 1)\n    }\n\n    return (\n        <ArrowsContainer>\n            <IconContainer disabled={isDisablePrev} onClick={handlePrev}>\n                <AiFillLeftCircle />\n            </IconContainer>\n            <IconContainer disabled={isDisableNext} onClick={handleNext}>\n                <AiFillRightCircle />\n            </IconContainer>\n        </ArrowsContainer>\n    )\n}\n\nexport default ListArrows\n","/imooptik-frontend/src/hooks/useFetch.jsx",["783","784","785"],"import { useEffect, useState } from 'react'\n\nexport const useFetch = (path, skip = false, method = \"GET\") => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [message, setMessage] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const requestOptions = {\n        method: method,\n        // headers: myHeaders,\n        // body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setMessage(data.message)\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n                setMessage(\"Niečo sa pokazilo\")\n            }\n        }\n        fetchData()\n    }, [refetchIndex])\n\n    return { response, isLoading, error, message, refetch }\n}\n\nexport const useFetchByQuery = (path, queryObj, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify(queryObj)\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path])\n\n    return { response, isLoading, error, refetch }\n}\n\nexport const useFetchById = (path, id, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}/${id}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path, id])\n\n    return { response, isLoading, error, refetch }\n}\n","/imooptik-frontend/src/components/user-form/user-form.component.jsx",["786"],"/imooptik-frontend/src/components/modal-get-product-data/modal-get-product-data.component.jsx",["787"],"/imooptik-frontend/src/components/new-user-form/new-user-form.component.jsx",["788"],"/imooptik-frontend/src/components/modal-images/modal-images.component.jsx",[],"/imooptik-frontend/src/components/modal-get-lenses-data/modal-get-lenses-data.component.jsx",["789","790"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport { formatAvailable } from '../../utils/orders.utils'\n\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    SearchButton,\n    ProductTableHead,\n    ProductTableRow,\n    TableCol,\n    TableContainer\n} from './modal-get-lenses-data.styles'\n\nconst GetLensesDataModal = ({ close, getSingleLenses, productObj, setProductObj, fillProductData }) => {\n    const [searchQuery, setSearchQuery] = useState(\"\")\n\n    const [productItems, setProductItems] = useState([])\n\n    const [query, setQuery] = useState({\n        limit: 10,\n        skip: 0,\n    })\n\n    const { response, isLoading, refetch } = useFetchByQuery(\"api/admin/lenses/filter\", query)\n\n    const handleSearch = () => {\n        if (searchQuery === '') return\n        setQuery({\n            ...query,\n            query: searchQuery\n        })\n        refetch()\n    }\n    const handleSearchOnEnter = (e) => {\n        if (searchQuery !== \"\") {\n            if (e.key === 'Enter') {\n                setQuery({\n                    ...query,\n                    query: searchQuery\n                })\n                refetch()\n            }\n        }\n    }\n\n    const handleClick = (id) => {\n        getSingleLenses(id, (data) => {\n            const { lenses } = data\n\n            delete lenses['__v']\n            delete lenses['_id']\n            delete lenses['soldAmount']\n            delete lenses['dateCreated']\n\n            console.log(\"lenses\")\n            console.log(\"lenses\")\n            console.log(lenses)\n            console.log(setProductObj)\n\n            fillProductData({\n                ...lenses,\n                image: lenses.image._id,\n                lensType: lenses.type || \"číre\",\n                dioptric: lenses.dioptric || false,\n                type: 0,\n                price: (lenses.price / 100).toFixed(2),\n            })\n\n        })\n        close()\n\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        setProductItems(response.lenses)\n    }, [isLoading])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h2>Vyhľadať šošovky</h2>\n                <div>\n                    <CustomInput\n                        label='Názov šošoviek, eanCode alebo popis'\n                        value={searchQuery}\n                        handleChange={(e) => setSearchQuery(e.target.value)}\n                        onKeyPress={handleSearchOnEnter}\n                    />\n                </div>\n                <SearchButton onClick={handleSearch}>Hľadať</SearchButton>\n\n                <TableContainer>\n                    <ProductTableHead>\n                        <TableCol isHead>eanKód</TableCol>\n                        <TableCol isHead>Názov</TableCol>\n                        <TableCol isHead>Dioptrie</TableCol>\n                        <TableCol isHead>Cylinder</TableCol>\n                        <TableCol isHead>Cena</TableCol>\n                    </ProductTableHead>\n                    {productItems.map((product, idx) => (\n                        <ProductTableRow key={idx} onClick={() => handleClick(product._id)}>\n                            <TableCol>{product.eanCode}</TableCol>\n                            <TableCol>{product.name}</TableCol>\n                            <TableCol>\n                                {product.dioptersRange && <p>{`od ${product.dioptersRange[0]} do ${product.dioptersRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>\n                                {product.cylinderRange && <p>{`od ${product.cylinderRange[0]} do ${product.cylinderRange[1]}`}</p>}\n                            </TableCol>\n                            <TableCol>{(product.price / 100).toFixed(2)}€</TableCol>\n                        </ProductTableRow>\n                    ))}\n                </TableContainer>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default GetLensesDataModal\n","/imooptik-frontend/src/components/product-glasses-form/product-glasses-form.component.jsx",["791","792"],"import React, { useState, useEffect } from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport { glassesColors, glassesMaterials, glassesShapes } from '../../utils/warehouse.utils'\n\nimport { AiOutlineCopy } from 'react-icons/ai'\n\nimport {\n    ImageContainer,\n    ProductImage,\n    GlassesContainerForm,\n    GlassesContainer,\n    GlassesParameterContainer,\n    StockContainer,\n    CustomSelect,\n    BrandedCheckbox,\n    CopyButton\n} from './product-glasses-form.styles.jsx'\n\nconst ProductGlassesForm = ({\n    product,\n    handleChange,\n    selectedImage,\n    retailNames,\n    currentUser,\n    checkParameter,\n    handleAvailableChange,\n    handleGlassesParametersChange,\n    handleGlassesSpecsSizeChange,\n    handleSpecsChange,\n    glassesParameters,\n    setImageModal,\n    isUpdating,\n    filters,\n    handleGetProductData\n}) => {\n    const [isBranded, setIsBranded] = useState(true)\n\n\n    const handleIsBrandedClick = (isBrandedBool) => {\n        if (isBrandedBool) {\n            handleChange({\n                target: {\n                    name: \"brand\",\n                    value: \"Neznačkové\"\n                }\n            })\n            setIsBranded(false)\n        } else {\n            handleChange({\n                target: {\n                    name: \"brand\",\n                    value: \"\"\n                }\n            })\n\n            setIsBranded(true)\n\n        }\n    }\n\n    useEffect(() => {\n        if (product.brand === \"Neznačkové\") setIsBranded(false)\n    }, [isBranded])\n\n    return (\n        <GlassesContainerForm>\n            <GlassesContainer>\n                <CopyButton onClick={() => handleGetProductData(true)}><AiOutlineCopy /></CopyButton>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov produktu*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <BrandedCheckbox\n                    label={\"Značkové\"}\n                    isActive={isBranded}\n                    handleClick={() => handleIsBrandedClick(isBranded)}\n                />\n\n                {isBranded && (\n                    <React.Fragment>\n                        <CustomInput\n                            label=\"Značka\"\n                            type='text'\n                            name='brand'\n                            value={product.brand ?? \"\"}\n                            handleChange={(e) => handleChange(e)}\n                            list=\"brands\"\n                        />\n                        <datalist id=\"brands\">\n                            {filters?.brands && filters?.brands.map((brand, idx) => (\n                                <option key={idx} value={brand} />\n                            ))}\n                        </datalist>\n                    </React.Fragment>\n                )}\n\n                {/* <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n\n                /> */}\n\n                {/* <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n            </GlassesContainer>\n            <div>\n                <GlassesParameterContainer>\n                    <h3>Parametre</h3>\n                    {/* <CustomInput\n                        label=\"Farebný kód\"\n                        type='text'\n                        name='colorCode'\n                        value={glassesParameters.colorCode ?? \"\"}\n                        handleChange={(e) => handleGlassesParametersChange(e)}\n                    /> */}\n                    <div>\n                        <CustomInput\n                            label=\"Farba rámu\"\n                            type='text'\n                            name='frameColor'\n                            value={glassesParameters.specs.frameColor ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"colors\"\n\n                        />\n                        <datalist id=\"colors\">\n                            {glassesColors.map((color, idx) => (\n                                <option key={idx} value={color} />\n                            ))}\n                        </datalist>\n                        <CustomInput\n                            label=\"Materiál rámu\"\n                            type='text'\n                            name='frameMaterial'\n                            value={glassesParameters.specs.frameMaterial ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"materials\"\n\n                        />\n                        <datalist id=\"materials\">\n                            {glassesMaterials.map((material, idx) => (\n                                <option key={idx} value={material} />\n                            ))}\n                        </datalist>\n                        <CustomInput\n                            label=\"Tvar rámu\"\n                            type='text'\n                            name='frameStyle'\n                            value={glassesParameters.specs.frameStyle ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"shapes\"\n                        />\n                        <datalist id=\"shapes\">\n                            {glassesShapes.map((shape, idx) => (\n                                <option key={idx} value={shape} />\n                            ))}\n                        </datalist>\n                        {/* <CustomInput\n                            label=\"Farba šošovky\"\n                            type='text'\n                            name='lensColor'\n                            value={glassesParameters.specs.lensColor ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                        /> */}\n                        <CustomSelect\n                            label=\"Pohlavie\"\n                            type='text'\n                            name='sex'\n                            value={glassesParameters?.specs?.sex || \"\"}\n                            onChange={(e) => handleSpecsChange(e)}\n                        >\n                            <option value=''>-</option>\n                            <option value='M'>Pánske</option>\n                            <option value='W'>Dámske</option>\n                            <option value='CH'>Detské</option>\n                            <option value='U'>Nezáleží</option>\n                        </CustomSelect>\n                    </div>\n                    <div>\n                        <h4>Velkosť</h4>\n                        {glassesParameters.specs.size.map((value, idx) => (\n                            <CustomInput\n                                key={idx}\n                                label={idx === 0 ? \"Šírka očnice (mm)\" : idx === 1 ? \"Výška očnice (mm)\" : idx === 2 ? \"Veľkosť nosníka (mm)\" : \"Dĺžka stranice (mm)\"}\n                                type='text'\n                                name='size'\n                                value={checkParameter(glassesParameters.specs.size, idx)}\n                                handleChange={(e) => handleGlassesSpecsSizeChange(e, idx)}\n                            />\n                        ))}\n                    </div>\n                </GlassesParameterContainer>\n                {currentUser.admin >= 2 ? (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        {product.available.map((value, idx) => {\n                            if (idx === 0) return\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[idx]}\n                                    type='number'\n                                    name={\"available\"}\n                                    value={checkParameter(product.available, idx)}\n                                    handleChange={e => handleAvailableChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </StockContainer>\n                ) : (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        <CustomInput\n                            label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                            type='number'\n                            name={\"available\"}\n                            value={checkParameter(product.available, currentUser.premises)}\n                            handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                        />\n                    </StockContainer>\n                )}\n            </div>\n        </GlassesContainerForm>\n    )\n}\n\nexport default ProductGlassesForm\n","/imooptik-frontend/src/components/product-lenses-form/product-lenses-form.component.jsx",[],"/imooptik-frontend/src/components/product-accessories-form/product-accessories-form.component.jsx",["793"],"import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    AccessoriesFormContainer,\n    AccessoriesContainer,\n    StockContainer,\n    ImageContainer,\n    ProductImage,\n} from './product-accessories-form.styles'\n\nconst ProductAccessoriesForm = ({\n    product,\n    handleChange,\n    selectedImage,\n    setImageModal,\n    handleAvailableChange,\n    checkParameter,\n    retailNames,\n    currentUser,\n    isUpdating,\n    filters\n}) => {\n    return (\n        <AccessoriesFormContainer>\n            <AccessoriesContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='name'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov doplnku*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Značka\"\n                    type='text'\n                    name='brand'\n                    value={product.brand ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"brands\"\n                />\n\n                <datalist id=\"brands\">\n                    {filters?.brands && filters?.brands.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist>\n\n                {/* <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n\n                />\n\n                <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n            </AccessoriesContainer>\n            {currentUser.admin >= 2 ? (\n                <StockContainer>\n                    <h3>Skladové zásoby</h3>\n                    {product.available.map((value, idx) => {\n                        if (idx === 0) return\n                        return (\n                            <CustomInput\n                                key={idx}\n                                label={currentUser.admin === 1 ? retailNames[currentUser.premises - 1] : retailNames[idx]}\n                                type='number'\n                                name={\"available\"}\n                                value={checkParameter(product.available, idx)}\n                                handleChange={e => handleAvailableChange(e, idx)}\n                            />\n                        )\n                    })}\n                </StockContainer>\n            ) : (\n                <StockContainer>\n                    <h3>Skladové zásoby</h3>\n                    <CustomInput\n                        label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                        type='number'\n                        name={\"available\"}\n                        value={checkParameter(product.available, currentUser.premises)}\n                        handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                    />\n                </StockContainer>\n            )}\n        </AccessoriesFormContainer>\n    )\n}\n\nexport default ProductAccessoriesForm\n","/imooptik-frontend/src/components/product-contact-lenses-form/product-contact-lenses-form.component.jsx",["794"],"import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\n// import { lensesBrands } from '../../utils/warehouse.utils'\nimport {\n    AiOutlineCopy\n} from 'react-icons/ai'\n\nimport {\n    ContactLensesContainer,\n    ContactLensesFormContainer,\n    StockContainer,\n    ContactLensesParametersContainer,\n    IncreaseButton,\n    ImageContainer,\n    ProductImage,\n    CopyButton,\n} from './product-contact-lenses-form.styles'\n\nconst ProductContactLensesForm = ({\n    product,\n    handleChange,\n    setImageModal,\n    selectedImage,\n    checkParameter,\n    handleContactLensesChange,\n    handleAddNewParameter,\n    contactLensesParameters,\n    retailNames,\n    currentUser,\n    handleAvailableChange,\n    isUpdating,\n    filters,\n    handleGetProductData\n}) => {\n    return (\n        <ContactLensesFormContainer>\n            <ContactLensesContainer>\n                <CopyButton onClick={() => handleGetProductData(true)}><AiOutlineCopy /></CopyButton>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='name'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov doplnku*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Značka\"\n                    type='text'\n                    name='brand'\n                    value={product.brand ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"brands\"\n                />\n                <datalist id=\"brands\">\n                    {filters?.brands && filters?.brands.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist>\n                {/* \n                <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n                />\n\n                <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n            </ContactLensesContainer>\n            <div>\n                <ContactLensesParametersContainer>\n                    <h3>Parametre</h3>\n                    <div>\n                        <h4>Zakrivenie</h4>\n                        {contactLensesParameters.allowedCurves.map((value, idx) => {\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={idx + 1}\n                                    type='text'\n                                    name={\"allowedCurves\"}\n                                    value={checkParameter(contactLensesParameters.allowedCurves, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                        <IncreaseButton onClick={() => handleAddNewParameter({\n                            target: {\n                                name: 'allowedCurves'\n                            }\n                        })}>Pridať</IncreaseButton>\n                    </div>\n                    <div>\n                        <h4>Priemery</h4>\n                        {contactLensesParameters.allowedDiameters.map((value, idx) => {\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={idx + 1}\n                                    type='text'\n                                    name={\"allowedDiameters\"}\n                                    value={checkParameter(contactLensesParameters.allowedDiameters, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                        <IncreaseButton onClick={() => handleAddNewParameter({\n                            target: {\n                                name: 'allowedDiameters'\n                            }\n                        })}>Pridať</IncreaseButton>\n                    </div>\n\n                    <div>\n                        <h4>Dioptrie</h4>\n                        {contactLensesParameters.dioptersRange.map((value, idx) => {\n                            const inputLabel = idx === 0 ? \"minimum\" : \"maximum\"\n\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={inputLabel}\n                                    type='text'\n                                    name={\"dioptersRange\"}\n                                    value={checkParameter(contactLensesParameters.dioptersRange, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </div>\n                </ContactLensesParametersContainer>\n\n                {currentUser.admin >= 2 ? (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        {product.available.map((value, idx) => {\n                            if (idx === 0) return\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[idx]}\n                                    type='number'\n                                    name={\"available\"}\n                                    value={checkParameter(product.available, idx)}\n                                    handleChange={e => handleAvailableChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </StockContainer>\n                ) : (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        <CustomInput\n                            label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                            type='number'\n                            name={\"available\"}\n                            value={checkParameter(product.available, currentUser.premises)}\n                            handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                        />\n                    </StockContainer>\n                )}\n            </div>\n        </ContactLensesFormContainer>\n    )\n}\n\nexport default ProductContactLensesForm\n","/imooptik-frontend/src/components/product-service-form/product-service-form.component.jsx",["795","796"],"import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\n\nimport {\n    ServiceFormContainer,\n    ServiceContainer,\n    ImageContainer,\n    ProductImage\n} from './product-service-form.styles'\n\nconst ProductServiceForm = ({\n    product,\n    // isUpdating,\n    handleChange,\n    selectedImage,\n    setImageModal,\n}) => {\n    return (\n        <ServiceFormContainer>\n            <ServiceContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='name'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Názov služby*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                {/* <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer> */}\n            </ServiceContainer>\n        </ServiceFormContainer>\n    )\n}\n\nexport default ProductServiceForm\n","/imooptik-frontend/src/components/custom-select/custom-select.component.jsx",["797"],"import React from 'react'\n\nimport { CustomSelectContainer } from './custom-select.styles'\n\nconst CustomRetailSelect = ({ name, value, handleChange, listItems, defaultOption = false, defaultValue, defaultLabel }) => {\n    return (\n        <CustomSelectContainer name={name} value={value} onChange={(e) => handleChange(e)}>\n            {defaultOption && <option value={defaultValue}>{defaultLabel}</option>}\n            {listItems.map((name, idx) => {\n                if (idx === 4) return\n                return (\n                    <option key={idx} value={idx + 1}>{name}</option>\n                )\n            })}\n        </CustomSelectContainer>\n    )\n}\n\nexport default CustomRetailSelect\n","/imooptik-frontend/src/components/product-overview/product-overview.component.jsx",[],"/imooptik-frontend/src/components/modal-eshop-filter/modal-eshop-filter.component.jsx",["798","799"],"/imooptik-frontend/src/components/product-input-row/product-input-row.component.jsx",[],"/imooptik-frontend/src/components/custom-textarea/custom-textarea.component.jsx",[],"/imooptik-frontend/src/components/custom-checkbox/custom-checkbox.component.jsx",[],"/imooptik-frontend/src/components/booking-calendar-bookings/booking-calendar-bookings.component.jsx",[],"/imooptik-frontend/src/components/calendar-weekdays/calendar-weekdays.component.jsx",["800","801"],"import React, { useState, useEffect, useContext } from 'react'\nimport { useFetchById } from '../../hooks/useFetch'\nimport { BookingContext } from '../../context/booking/booking.context'\nimport { WeekCalendarContext } from '../../context/week-calendar/week-calendar.context'\n\nimport UserbookingDetailsModal from '../modal-userbookings-details/modal-userbookings-details.component'\nimport UserBookingModal from '../modal-user-bookings/modal-user-booking.component'\nimport CalendarBookedDay from '../calendar-booked-day/calendar-booked-day.component'\n\nimport {\n    dayNames,\n    getPreviousMonthDays,\n    getNextMonthDays,\n    getCurrentMonthDays,\n    getBooking,\n} from '../../utils/calendar.utils'\n\nimport { changeSlash } from '../../utils/week-calendar.utils'\n\nimport {\n    Container,\n    HeaderBlock,\n    HourBlock,\n    HourGrid,\n    TableHead,\n    HourBlockContainer,\n    EmptyContainer,\n    HourTime,\n    EmptyHourBlock\n} from './calendar-weekdays.styles'\n\nconst WeekDays = ({\n    calendar,\n    year,\n    month,\n    weekIndex,\n    showUserBooking,\n    setShowUserBooking,\n    handleOpenUserBookingModal,\n    selectedDay,\n}) => {\n    const { timeline, getDayData, refetchWeekCalendar, cancelUserBooking } = useContext(WeekCalendarContext)\n    const { createUserBooking } = useContext(BookingContext)\n    const { response, isLoading, refetch } = useFetchById('api/booking/calendars', calendar, !calendar)\n    const lastDay = new Date(year, month + 1, 0).getDate()\n    const firstDayIndex = new Date(year, month, 0).getDay();\n    const lastDayIndex = new Date(year, month + 1, 0).getDay()\n    const prevLastDay = new Date(year, month, 0).getDate()\n\n    const nextDays = 7 - lastDayIndex\n\n    const [calendarDays, setCalendarDays] = useState([])\n    // const [selectedDay, setSelectedDay] = useState(null)\n    const [showBookingDetails, setShowBookingDetails] = useState(false)\n\n    const [selectedUserBooking, setSelectedUserBooking] = useState(null)\n\n    const handleOpenDetailsModal = (userBooking) => {\n        setSelectedUserBooking(userBooking)\n        setShowBookingDetails(true)\n    }\n\n    const handleCancelUserBooking = (userBookingId) => {\n        cancelUserBooking(userBookingId, refetch, setShowBookingDetails)\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n\n        if (response.calendar) {\n            const prevMonthDays = getPreviousMonthDays(firstDayIndex)\n            const monthDays = getCurrentMonthDays(lastDay)\n            const nextMonthDays = getNextMonthDays(nextDays)\n            const monthDaysWithBookings = getBooking(monthDays, response.calendar, month, year)\n\n            setCalendarDays([\n                ...prevMonthDays,\n                ...monthDaysWithBookings,\n                ...nextMonthDays\n            ])\n\n            // fillDayData([\n            //     ...prevMonthDays,\n            //     ...monthDaysWithBookings,\n            //     ...nextMonthDays\n            // ], response.calendar)\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        refetch()\n    }, [month])\n\n\n    return (\n        <div>\n            {showBookingDetails && <UserbookingDetailsModal cancelUserBooking={handleCancelUserBooking} refetchCalendar={refetch} calendarId={calendar} userBooking={selectedUserBooking} close={() => setShowBookingDetails(false)} />}\n            {showUserBooking && <UserBookingModal refetchWeekCalendar={refetchWeekCalendar} createUserBooking={createUserBooking} refetchCalendar={refetch} calendar={response?.calendar} day={selectedDay} close={() => setShowUserBooking(false)} />}\n            <Container>\n                <TableHead>\n                    <HeaderBlock>{\" \"}</HeaderBlock>\n                    {calendarDays.slice(weekIndex * 7, (weekIndex * 7) + 7).map(({ dayNumber, isDisable, isPrevDay, isNextDay }, idx) => (\n                        <HeaderBlock isDisabled={isDisable} key={idx}>\n                            {isPrevDay ? (\n                                <React.Fragment>\n                                    <p>{dayNames[new Date(year, month - 1, prevLastDay - (dayNumber)).getDay()]}</p>\n                                    <p>{prevLastDay - (dayNumber - 1)}</p>\n                                </React.Fragment>\n                            ) : isNextDay ? (\n                                <React.Fragment>\n                                    <p>{dayNames[new Date(year, month + 1, dayNumber - 1).getDay()]}</p>\n                                    <p>{dayNumber} </p>\n                                </React.Fragment>\n                            ) : (\n                                <React.Fragment>\n                                    <p>{dayNames[new Date(year, month, dayNumber - 1).getDay()]}</p>\n                                    <p>{dayNumber} </p>\n                                </React.Fragment>\n                            )}\n                        </HeaderBlock>\n                    ))}\n                </TableHead>\n\n                <HourGrid>\n                    <HourBlock>\n                        {timeline && timeline.map((time, idx) => (\n                            <HourBlockContainer key={idx} style={response?.calendar?.interval === 60 ? ({ height: \"10rem\" }) : ({ height: \"5rem\" })}>\n                                <HourTime >\n                                    <p>{changeSlash(time) ?? \"\"}</p>\n                                </HourTime>\n                            </HourBlockContainer>\n\n                        ))}\n                    </HourBlock>\n                    {calendarDays.length > 0 && calendarDays.slice(weekIndex * 7, (weekIndex * 7) + 7).map((dayData, idx) => {\n                        const day = getDayData(dayData?.dayNumber, idx, response.calendar)\n                        return (\n                            < HourBlock key={idx} >\n                                { day && day.map((interval, idx) => {\n                                    if (interval?.empty) return (\n                                        <EmptyHourBlock style={response?.calendar?.interval === 60 ? ({ height: \"10rem\" }) : ({ height: \"5rem\" })} />\n                                    )\n                                    return (\n                                        <HourBlockContainer style={response?.calendar?.interval === 60 ? ({ height: \"10rem\" }) : ({ height: \"5rem\" })} key={idx}>\n                                            {interval?.userBookings && <CalendarBookedDay\n                                                dayData={dayData}\n                                                calendarId={calendar}\n                                                time={interval.time}\n                                                userBookings={interval.userBookings}\n                                                open={() => handleOpenDetailsModal(interval)}\n                                            />}\n                                            <EmptyContainer onClick={dayData.isDisable ? () => { } : () => handleOpenUserBookingModal({\n                                                ...dayData, time: interval.time, year,\n                                                month,\n                                            })} />\n                                        </HourBlockContainer>\n                                    )\n                                })}\n                            </HourBlock >\n                        )\n                    })}\n                </HourGrid>\n            </Container>\n        </div>\n    )\n}\n\nexport default WeekDays\n","/imooptik-frontend/src/components/product-glasses-form/product-glasses-form.styles.jsx",[],"/imooptik-frontend/src/sections/blog-posts/blog-posts.styles.jsx",[],"/imooptik-frontend/src/components/booking-calendar-overview/booking-calendar-overview.component.jsx",[],"/imooptik-frontend/src/components/calendar/calendar.component.jsx",["802","803","804"],"import React, { useState, useEffect } from 'react'\n\nimport {\n    dayNames,\n    getPreviousMonthDays,\n    getNextMonthDays,\n    getCurrentMonthDays,\n    getBooking\n} from '../../utils/calendar.utils'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    Container,\n    HeaderBlock,\n    Dayblock,\n\n} from './calendar.styles'\n\nconst Calendar = ({\n    calendar,\n    month,\n    year,\n    handleCalendarBlockClick\n}) => {\n    const date = new Date()\n\n    date.setDate(1)\n    const lastDay = new Date(year, month + 1, 0).getDate()\n    const prevLastDay = new Date(year, month, 0).getDate()\n\n    const firstDayIndex = new Date(year, month, 0).getDay();\n    const lastDayIndex = new Date(year, month + 1, 0).getDay()\n\n    const nextDays = 7 - lastDayIndex\n\n    const { response, isLoading, refetch } = useFetchById('api/booking/calendars', calendar, !calendar)\n    const [prevDays, setPrevDays] = useState([])\n    const [currentMonthDays, setCurrentMonthDays] = useState([])\n    const [nextMonthDays, setMonthNextDays] = useState([])\n\n    useEffect(() => {\n        refetch()\n    }, [month])\n\n    useEffect(() => {\n        if (calendar) {\n            refetch()\n        }\n    }, [calendar])\n\n    useEffect(() => {\n        if (!isLoading) {\n            if (response?.calendar) {\n                const prevDaysArr = getPreviousMonthDays(firstDayIndex)\n                const arr = getCurrentMonthDays(lastDay)\n                const nextDaysArr = getNextMonthDays(nextDays)\n                const checkedArr = getBooking(arr, response.calendar, month, year)\n\n                setPrevDays(prevDaysArr)\n                setCurrentMonthDays(checkedArr)\n                setMonthNextDays(nextDaysArr)\n            }\n        }\n    }, [isLoading])\n\n    useEffect(() => {\n        return () => {\n            setPrevDays([])\n            setCurrentMonthDays([])\n            setMonthNextDays([])\n        }\n    }, [])\n\n    return (\n        <Container>\n\n            {dayNames.map((name, idx) => (\n                <HeaderBlock key={idx}>\n                    {name}\n                </HeaderBlock>\n            ))}\n\n            {prevDays.map((value, idx) => (\n                <Dayblock faded={true} key={idx}>\n                    <p>\n                    </p>\n                    <p>\n                        {prevLastDay - idx}\n                    </p>\n                </Dayblock>\n            ))}\n\n            {currentMonthDays.map((data, idx) => {\n                const { dayNumber, bookings } = data\n                return (\n                    <Dayblock key={idx} onClick={() => handleCalendarBlockClick(data)}>\n                        <p>\n                            {bookings && <span>\n                                {bookings.length}\n                            </span>}\n                        </p>\n                        <p>\n                            {dayNumber}\n                        </p>\n                    </Dayblock>\n                )\n            })}\n            {nextMonthDays.map((value, idx) => (\n                <Dayblock faded={true} key={idx}>\n                    <p>\n                    </p>\n                    <p>\n                        {idx + 1}\n                    </p>\n                </Dayblock>\n            ))}\n        </Container>\n    )\n}\n\nexport default Calendar\n","/imooptik-frontend/src/context/week-calendar/week-calendar.context.jsx",["805","806","807","808","809"],"import React, { createContext, useState, useEffect, useContext } from 'react'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { useFetchById } from '../../hooks/useFetch'\nimport {\n    getHourTime,\n    checkBookings,\n    getTimeline\n} from '../../utils/week-calendar.utils'\n\nexport const WeekCalendarContext = createContext({\n    timeline: null,\n    getDayData: () => { },\n    refetchWeekCalendar: () => { },\n    cancelUserBooking: () => { },\n    // fillDayData: () => { }\n})\n\nconst WeekCalendarProvider = ({ children, calendar, month, year }) => {\n    const { response, isLoading, refetch } = useFetchById('api/booking/calendars', calendar, !calendar)\n    const { closeModal, setIsLoading, setShowModal, getMessage } = useContext(LoadingModalContext)\n    const { token } = useContext(AuthContext)\n    const [numberOfHours, setNumberOfHours] = useState(0)\n    const [timeline, setTimeline] = useState(null)\n\n    const getDayData = (dayNumber, dayIdx, calendar) => {\n        if (!calendar) return\n        const numberedStartTimes = calendar.startTimes.filter(number => number !== \"X\").map(time => (Number(time.split(\"/\")[0])))\n        const startTime = Math.min(...numberedStartTimes)\n\n        const hourblock = [...Array(numberOfHours)].map((value, idx) => {\n            const splitedStartTime = calendar.startTimes[dayIdx]?.split(\"/\").map(value => Number(value))\n            const splitedEndTime = calendar.endTimes[dayIdx]?.split(\"/\").map(value => Number(value))\n            const time = getHourTime(idx, calendar.interval)\n            const splitedTime = time.split('/').map(value => Number(value))\n\n            if (startTime > splitedTime[0]) return\n            if (splitedStartTime[0] > startTime && splitedStartTime[0] > splitedTime[0]) return ({ empty: true })\n            if (splitedStartTime[0] > startTime && splitedStartTime[0] > splitedTime[0] && !(splitedStartTime[1] === splitedTime[1]) && splitedTime[1] === 30) return ({ empty: true })\n\n            if (splitedEndTime[0] < splitedTime[0]) return\n            if (calendar.startTimes[dayIdx] === 'X') return\n            if (splitedEndTime[0] === splitedTime[0] && !(splitedEndTime[1] === splitedTime[1]) && splitedTime[1] === 30) return\n\n            return ({\n                id: idx,\n                time: time,\n                userBookings: checkBookings(calendar, idx, dayNumber, month, year)\n            })\n        }).filter(item => item !== undefined)\n\n        return hourblock\n    }\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const cancelUserBooking = async (userBookingId, refetchCalendar, setShowBookingDetails) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            // body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/userBookings/${userBookingId}/cancel`, requestOptions)\n            const data = await response.json()\n\n            if (data.userBooking) {\n                closeModal()\n                setShowBookingDetails()\n                setTimeout(() => {\n                    refetchCalendar()\n                }, 200);\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response.calendar.interval === 30) setNumberOfHours(48)\n        if (response.calendar.interval === 60) setNumberOfHours(24)\n        const timelineArr = getTimeline(response.calendar.startTimes, response.calendar.endTimes, response.calendar.interval)\n        setTimeline(timelineArr)\n    }, [isLoading])\n\n    return (\n        <WeekCalendarContext.Provider\n            value={{\n                timeline,\n                getDayData,\n                refetchWeekCalendar: refetch,\n                cancelUserBooking,\n                // fillDayData\n            }}\n        >\n            {children}\n        </WeekCalendarContext.Provider>\n    )\n}\n\nexport default WeekCalendarProvider","/imooptik-frontend/src/sections/order/steps/4-summary/summary.component.jsx",[],"/imooptik-frontend/src/sections/order/steps/2-select-product/select-product.component.jsx",["810"],"/imooptik-frontend/src/sections/order/steps/1-select-user/select-user.component.jsx",["811","812"],"/imooptik-frontend/src/sections/order/steps/3-select-lenses/select-lenses.component.jsx",["813"],"/imooptik-frontend/src/components/section-navbar/section-navbar.styles.jsx",[],"/imooptik-frontend/src/components/section-header/section-header.styles.jsx",[],"/imooptik-frontend/src/components/scroll-container/scroll-container.styles.jsx",[],"/imooptik-frontend/src/components/list-arrows/list-arrows.styles.jsx",[],"/imooptik-frontend/src/components/order-overview/order-overview.styles.jsx",[],"/imooptik-frontend/src/components/order-overview/order-overview.component.jsx",[],"/imooptik-frontend/src/components/user-form/user.form-styles.jsx",[],"/imooptik-frontend/src/utils/orders.utils.jsx",[],"/imooptik-frontend/src/components/modal-get-product-data/modal-get-product-data.styles.jsx",[],"/imooptik-frontend/src/components/new-user-form/new-user-form.styles.jsx",[],"/imooptik-frontend/src/components/modal-images/modal-images.styles.jsx",[],"/imooptik-frontend/src/components/product-accessories-form/product-accessories-form.styles.jsx",[],"/imooptik-frontend/src/components/modal-get-lenses-data/modal-get-lenses-data.styles.jsx",[],"/imooptik-frontend/src/components/product-contact-lenses-form/product-contact-lenses-form.styles.jsx",[],"/imooptik-frontend/src/components/product-service-form/product-service-form.styles.jsx",[],"/imooptik-frontend/src/components/product-lenses-form/product-lenses-form.styles.jsx",[],"/imooptik-frontend/src/components/modal-eshop-filter/modal-eshop-filter.styles.jsx",[],"/imooptik-frontend/src/components/product-overview/product-overview.styles.jsx",[],"/imooptik-frontend/src/components/custom-select/custom-select.styles.jsx",[],"/imooptik-frontend/src/components/custom-textarea/custom-textarea.styles.jsx",[],"/imooptik-frontend/src/components/custom-checkbox/custom-checkbox.styles.jsx",[],"/imooptik-frontend/src/components/product-input-row/product-input-row.styles.jsx",[],"/imooptik-frontend/src/components/custom-form-switch/custom-form-switch.component.jsx",[],"/imooptik-frontend/src/components/examinations-overview/examinations-overview.component.jsx",["814"],"import React, { useState, useEffect, useContext } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useFetchById } from '../../hooks/useFetch'\nimport { ExaminationContext } from '../../context/examination/examination.context'\n\nimport ExaminationUser from '../examination-user/examination-user.component'\nimport OptometristExaminationModal from '../modal-optometrist-examination/modal-optometrist-examination.component'\n\n// import {\n//     checkParameterValue\n// } from '../../utils/parameters.utils'\n\nimport {\n    ExaminationsOverviewContainer,\n    Header,\n    ExaminationContainer,\n    ExamHead,\n    // ExamTableContainer,\n    // HeadTableCol,\n    // TableCol,\n    ExaminationOptions,\n    AddButton,\n    UpdateButton,\n    DeleteButton\n} from './examinations-overview.styles'\n\nconst ExaminationsOverview = () => {\n    const params = useParams()\n    const examinationData = useFetchById(\"api/admin/exams/user\", params.id)\n    const { deleteExamination } = useContext(ExaminationContext)\n    const [showOptometristModal, setShowOptometristModal] = useState(false)\n    const [examinations, setExaminations] = useState([])\n    const [examinationToUpdate, setExaminationToUpdate] = useState(null)\n\n    const handleUpdateClick = (e, id) => {\n        e.preventDefault()\n        setExaminationToUpdate(id)\n        setShowOptometristModal(true)\n    }\n\n    const handleDelete = (e, id) => {\n        e.preventDefault()\n        deleteExamination(id)\n        examinationData.refetch()\n    }\n\n    const handleCloseModal = () => {\n        setShowOptometristModal(false)\n        setExaminationToUpdate(null)\n    }\n\n    useEffect(() => {\n        if (!examinationData.isLoading) {\n            if (examinationData.response) {\n                setExaminations(examinationData.response.exams)\n            }\n        }\n    }, [examinationData.isLoading])\n\n    return (\n        <ExaminationsOverviewContainer>\n            {showOptometristModal && <OptometristExaminationModal\n                userId={params.id}\n                examinationToUpdate={examinationToUpdate}\n                refetch={examinationData.refetch}\n                close={handleCloseModal}\n            />}\n            <Header>\n                <h2>Vyšetrenia</h2>\n                <div>\n                    <AddButton type='button' onClick={() => setShowOptometristModal(true)}>Pridať prehliadku</AddButton>\n                </div>\n            </Header>\n\n\n            <div>\n                {examinations && examinations.map((examination, idx) => (\n                    <ExaminationContainer key={idx}>\n                        <ExamHead>\n                            <h3>Dátum:</h3>\n                            <p>{new Date(examination?.date).toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric' })}</p>\n                        </ExamHead>\n                        <ExamHead>\n                            <h3>Typ vyšetrenia:</h3>\n                            <p>{examTypes[examination?.type - 1].name}</p>\n                        </ExamHead>\n\n                        <ExaminationOptions>\n                            <ExaminationUser userId={examination.doneBy} />\n                            <div>\n                                <UpdateButton onClick={e => handleUpdateClick(e, examination._id)}>Upraviť</UpdateButton>\n                                <DeleteButton onClick={e => handleDelete(e, examination._id)}>Vymazať</DeleteButton>\n                            </div>\n                        </ExaminationOptions>\n                    </ExaminationContainer>\n                ))}\n            </div>\n        </ExaminationsOverviewContainer>\n    )\n}\n\nexport default ExaminationsOverview\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"Anamnéza\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","/imooptik-frontend/src/components/parameters-table/parameters-table.component.jsx",["815","816","817","818","819"],"import React, { useEffect } from 'react'\n\nimport { formatfloatNumber } from '../../utils/warehouse.utils'\n\nimport {\n    TableContainer,\n    TitleCol,\n    Col,\n    OsContainer\n} from './parameters-table.styles'\n\nconst ParametersTable = ({ parameters, handleChange, disabledInputs = false }) => {\n    const checkParameters = (parameter, idx) => {\n        if (parameter.length === 0) {\n            return \"\"\n        }\n        if (parameter[idx] === 1001) {\n            return \"\"\n        }\n\n        return parameter[idx]\n    }\n\n    const formatParameter = (e, idx) => {\n        const value = formatfloatNumber(e.target.value)\n        handleChange({\n            target: {\n                value: value,\n                name: e.target.name\n            }\n        }, idx)\n    }\n\n    useEffect(() => {\n        if (handleChange) {\n            if (parameters.addition[0] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))).toFixed(2)\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[0] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[1] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))).toFixed(2)\n                    }\n                }, 3)\n                return\n            }\n\n\n            if (parameters.addition[1] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 3)\n            }\n        }\n    }, [parameters.diopters[0], parameters.addition[0], parameters.diopters[1], parameters.addition[1]])\n\n    return (\n        <TableContainer>\n            <TitleCol>\n                <div>{\" \"}</div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n            </TitleCol>\n\n\n            <Col>\n                <div>sph</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.diopters, idx)}\n                                name=\"diopters\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>cyl</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.cylinder, idx)}\n                                name=\"cylinder\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>ax</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <OsContainer key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.cylinderAxes, idx)}\n                                name=\"cylinderAxes\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n\n                            />\n                        </OsContainer>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>PD</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.distance, idx)}\n                                name=\"distance\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>prizma</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.prism, idx)}\n                                name=\"prism\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>basis</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.basis, idx)}\n                                name=\"basis\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>addicia</div>\n\n                {[...Array(2)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.addition, idx)}\n                                name=\"addition\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n\n\n        </TableContainer>\n    )\n}\n\nexport default ParametersTable\n","/imooptik-frontend/src/components/profile-order-overview/profile-order-overview.component.jsx",[],"/imooptik-frontend/src/components/booking-calendar-bookings/booking-calendar-bookings.styles.jsx",[],"/imooptik-frontend/src/utils/week-calendar.utils.jsx",[],"/imooptik-frontend/src/components/calendar-weekdays/calendar-weekdays.styles.jsx",[],"/imooptik-frontend/src/components/modal-booking/modal-booking.component.jsx",["820"],"import React, { useState, useContext, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport { BookingContext } from '../../context/booking/booking.context'\n\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\nimport { useFetchById } from '../../hooks/useFetch'\nimport {\n    formatBookingObj\n} from '../../utils/calendar.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    SubmitButton,\n    InputContainer,\n    ModalHeader,\n    CustomSelect\n} from './modal-booking.styles'\n\nconst BookingModal = ({ close, calendarId, refetch, selectedBooking }) => {\n    const { createBooking, updateBooking } = useContext(BookingContext)\n    const { response, isLoading } = useFetchById(\"api/booking/bookings\", selectedBooking, !selectedBooking)\n\n    const [booking, setBooking] = useState({})\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const handleBookingChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete booking[name]\n            setBooking({\n                ...booking\n            })\n            return\n        }\n\n        setBooking(prevValue => ({\n            ...prevValue,\n            [name]: value\n        }))\n    }\n\n    const handleSubmit = () => {\n        if (!booking?.name) return\n\n        if (isUpdating) {\n            let bookingToUpdate = formatBookingObj(booking)\n            updateBooking(bookingToUpdate, booking._id)\n        } else {\n            let bookingToAdd = {\n                ...booking,\n                calendar: calendarId\n            }\n            createBooking(bookingToAdd)\n        }\n\n        refetch()\n        close()\n    }\n\n    useEffect(() => {\n        if (isLoading) return\n        if (response?.booking) {\n            setIsUpdating(true)\n            setBooking(response?.booking)\n        }\n    }, [selectedBooking, isLoading])\n\n    useEffect(() => {\n        return () => {\n            setIsUpdating(false)\n            setBooking({})\n        }\n    }, [])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <ModalHeader>\n                    {!isUpdating && <h2>Nové vyšetrenie</h2>}\n                    {isUpdating && <h2>Upraviť vyšetrenie</h2>}\n                    <div>\n                        <CustomCheckbox\n                            label=\"Aktivné\"\n                            isActive={booking?.active || false}\n                            name='active'\n                            handleClick={() => handleBookingChange({\n                                target: {\n                                    name: 'active',\n                                    value: booking?.active ? !booking?.active : true\n                                }\n                            })}\n                        />\n                    </div>\n                </ModalHeader>\n                <InputContainer>\n                    <CustomInput\n                        label=\"Názov vyšetrenia*\"\n                        name=\"name\"\n                        value={booking?.name || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                <InputContainer>\n                    <CustomInput\n                        label=\"Cena\"\n                        name=\"price\"\n                        value={booking?.price || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                <InputContainer>\n                    <CustomInput\n                        label=\"Čas\"\n                        name=\"time\"\n                        value={booking?.time || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                <InputContainer>\n                    <CustomSelect\n                        label=\"Farba\"\n                        type='text'\n                        name='color'\n                        value={booking?.color || \"\"}\n                        onChange={handleBookingChange}\n                    >\n                        <option value='DD4C4C'>Červená</option>\n                        <option value='ebac01'>Žltá</option>\n                        <option value='32AA5F'>Zelená</option>\n                    </CustomSelect>\n                </InputContainer>\n                <InputContainer>\n                    <CustomTextarea\n                        label=\"Popis\"\n                        rows='5'\n                        name=\"description\"\n                        value={booking?.description || \"\"}\n                        handleChange={handleBookingChange}\n                    />\n                </InputContainer>\n                {!isUpdating && <SubmitButton onClick={handleSubmit}>Pridať</SubmitButton>}\n                {isUpdating && <SubmitButton onClick={handleSubmit}>Uložiť</SubmitButton>}\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById(\"portal\"))\n}\n\nexport default BookingModal\n","/imooptik-frontend/src/components/calendar-booked-day/calendar-booked-day.component.jsx",["821","822"],"import React, { useState, useEffect } from 'react'\nimport stringSimilarity from \"string-similarity\"\n\n\n// import Spinner from '../spinner/spinner.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\n\nimport {\n    BookedDayContainer\n} from './calendar-booked-day.styles'\n\nconst CalendarBookedDay = ({ dayData, calendarId, time, userBookings, open }) => {\n    const [isHalfHour, setIsHalfHour] = useState(false)\n    const { response, isLoading, refetch } = useFetchByQuery(`api/booking/calendars/${calendarId}/dayInfo`, {\n        date: dayData.bookingDate\n    }, !dayData?.bookingDate)\n    const [appointment, setAppointment] = useState(null)\n    const [isValidDueTime, setIsValiDueTime] = useState(false)\n    // const [isBelongToAnother, setIsBelongToAnother] = useState(false)\n\n    useEffect(() => {\n        if (isLoading) return\n        const bookingsDueTime = response?.userBookings?.filter(booking => !booking?.cancelled).map(booking => booking?.dueTime)\n\n        if (bookingsDueTime?.length > 0) {\n            const matches = stringSimilarity.findBestMatch(userBookings?.dueDate, bookingsDueTime);\n\n            const exactBooking = response?.userBookings?.find(booking => booking?.dueTime === userBookings?.dueDate)\n            const todayBooking = response?.userBookings?.find(booking => booking?.dueTime === matches?.bestMatch?.target)\n\n            if (userBookings?.dueDate === exactBooking?.dueTime) {\n                setIsValiDueTime(true)\n            } else if (matches?.bestMatch?.target === todayBooking?.dueTime) {\n                // setIsBelongToAnother(true)\n            }\n\n            setAppointment(exactBooking)\n\n        }\n\n    }, [isLoading])\n\n    useEffect(() => {\n        if (!dayData?.bookingDate) return\n        refetch()\n    }, [dayData?.bookingDate])\n\n    useEffect(() => {\n        return () => {\n            setIsHalfHour(false)\n            setIsValiDueTime(false)\n        }\n    }, [])\n\n    return (\n        <React.Fragment>\n            <BookedDayContainer onClick={isValidDueTime ? open : () => { }} color={appointment?.booking?.color ? `#${appointment?.booking?.color}` : `var(--appointment-container-background-color)`} isHalfHour={isHalfHour}>\n                {/* <BookedDayContainer onClick={() => console.log(appointment)} color={appointment?.booking?.color ? `#${appointment?.booking?.color}` : `#${response?.userBookings[0]?.booking?.color}`} isHalfHour={isHalfHour}> */}\n                {isValidDueTime && <div>\n                    <h4>{appointment && appointment?.booking?.name}</h4>\n                    <h5>{time}</h5>\n                </div>}\n                {/* {(isBelongToAnother && !isValidDueTime) && <div>\n                    <h4>Test</h4>\n                </div>} */}\n\n            </BookedDayContainer>\n        </React.Fragment>\n    )\n}\n\nexport default CalendarBookedDay\n","/imooptik-frontend/src/components/modal-user-bookings/modal-user-booking.component.jsx",["823","824"],"/imooptik-frontend/src/components/modal-userbookings-details/modal-userbookings-details.component.jsx",["825"],"import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Spinner from '../spinner/spinner.component'\n\nimport { useFetchByQuery } from '../../hooks/useFetch'\nimport { retailNames } from '../../utils/warehouse.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    GridContainer,\n    BlockContainer,\n    Header,\n    CancelButton,\n    Container\n} from './modal-userbookings-details.styles'\n\nconst UserbookingDetailsModal = ({ close, userBooking, calendarId, cancelUserBooking }) => {\n    const { response, isLoading } = useFetchByQuery(`api/booking/calendars/${calendarId}/dayInfo`, {\n        date: userBooking?.userBookings?.dueDate.split(\":\")[1]\n    }, !userBooking)\n\n    const [booking, setBooking] = useState(null)\n\n    useEffect(() => {\n        if (isLoading) return\n        if (!response) return\n\n        const newBooking = response.userBookings.find(booking => booking.dueTime === userBooking.userBookings.dueDate)\n        setBooking(newBooking)\n\n    }, [isLoading])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                {!booking && <Spinner />}\n                <h2>{booking?.booking?.name}</h2>\n\n                <Header>\n                    <h3>Informácie:</h3>\n                    <CancelButton onClick={() => cancelUserBooking(booking._id)}>Zrušiť rezerváciu</CancelButton>\n                </Header>\n                <GridContainer>\n                    <BlockContainer>\n                        <h3>Meno a priezvisko</h3>\n                        <p>{booking?.name}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>Prevadzka</h3>\n                        <p>{retailNames[booking?.booking?.premises]}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>Tel. číslo</h3>\n                        <p>{booking?.phone}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>E-mail</h3>\n                        <p>{booking?.email}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>Dátum</h3>\n                        <p>{booking?.dueTime}</p>\n                    </BlockContainer>\n                    <BlockContainer>\n                        <h3>Zrušené</h3>\n                        <p>{booking?.cancelled ? \"Ano\" : \"Nie\"}</p>\n                    </BlockContainer>\n                </GridContainer>\n\n                <Container>\n                    <BlockContainer>\n                        <h3>Poznámka</h3>\n                        {booking?.note ? (\n                            <p>{booking?.note}</p>\n                        ) : (\n                                <p>Žiadná poznámka</p>\n                            )}\n                    </BlockContainer>\n\n                    <BlockContainer>\n                        <h3>Popis</h3>\n                        <p>{booking?.booking?.description}</p>\n                    </BlockContainer>\n\n                </Container>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default UserbookingDetailsModal\n","/imooptik-frontend/src/components/booking-calendar-overview/booking-calendar-overview.styles.jsx",[],"/imooptik-frontend/src/components/calendar/calendar.styles.jsx",[],"/imooptik-frontend/src/sections/order/steps/4-summary/summary.styles.jsx",[],"/imooptik-frontend/src/sections/order/steps/2-select-product/select-product.styles.jsx",[],"/imooptik-frontend/src/sections/order/steps/1-select-user/select-user.styles.jsx",[],"/imooptik-frontend/src/sections/order/steps/3-select-lenses/select-lenses.styles.jsx",[],"/imooptik-frontend/src/components/order-summary-lenses-name/order-summary-lenses-name.component.jsx",[],"/imooptik-frontend/src/components/order-summary-product-name/order-summary-product-name.component.jsx",[],"/imooptik-frontend/src/components/modal-order-update-user/modal-order-update-user.component.jsx",["826","827"],"import React, { useContext, useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { UserContext } from '../../context/user/user.context'\n\nimport UserForm from '../user-form/user-form.component'\n\nimport {\n    CloseButton,\n    Modal,\n    ModalContainer,\n    UpdateButton\n} from './modal-order-update-user.styles'\n\nconst OrderUpdateUserModal = ({ close, userId, refetchUser, addUser }) => {\n    const { isAdmin, isOptometrist } = useContext(AuthContext)\n    const {\n        user,\n        isUpdating,\n        handleChange,\n        handleParameterChange,\n        handleCompanyChange,\n        getUser,\n        updateUser\n    } = useContext(UserContext)\n\n    const [userObj, setUserObj] = useState({})\n    // const [hasChanges, setHasChanges] = useState(false)\n\n    const handleUserChange = (e) => {\n        // setHasChanges(true)\n        const { name, value } = e.target\n\n        handleChange(e)\n\n\n        if (value === '') {\n            delete userObj[name]\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            [name]: value\n        })\n    }\n\n    const handleLensesParameterChange = (e, idx) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value\n\n\n        handleParameterChange(e, idx)\n        setUserObj({\n            ...userObj,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleCompanyAddressChange = (e) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        handleCompanyChange(e)\n\n        if (value === '') {\n            delete userObj.company[name]\n            if (Object.keys(userObj.company).length === 0) {\n                delete userObj[\"company\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            company: {\n                ...userObj.company,\n                [name]: value\n            }\n        })\n    }\n\n    const handleSubmit = (e, path) => {\n        e.preventDefault()\n        // setHasChanges(false)\n\n        if (userObj.fName || userObj.lName) {\n            delete userObj[\"fName\"]\n            delete userObj[\"lName\"]\n        } else if (!userObj.fName || !userObj.lName) {\n            delete userObj[\"name\"]\n        }\n        updateUser(userObj, user._id, \"isOrder\", refetchUser, close, addUser)\n    }\n\n    useEffect(() => {\n        setUserObj({\n            ...userObj,\n            name: user.fName + \" \" + user.lName\n        })\n    }, [userObj.fName, userObj.lName])\n\n    useEffect(() => {\n        if (userId) {\n            getUser(userId)\n        }\n    }, [userId])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <UserForm\n                    user={user}\n                    isAdmin={isAdmin}\n                    isUpdating={isUpdating}\n                    isOptometrist={isOptometrist}\n                    handleChange={handleUserChange}\n                    handleParameterChange={handleLensesParameterChange}\n                    handleCompanyChange={handleCompanyAddressChange}\n                    isOrder={true}\n                />\n\n                <UpdateButton onClick={handleSubmit}>Uložiť</UpdateButton>\n            </Modal>\n        </ModalContainer >\n    ), document.getElementById('portal'))\n}\n\nexport default OrderUpdateUserModal\n","/imooptik-frontend/src/components/custom-back-button/custom-back-button.component.jsx",[],"/imooptik-frontend/src/components/order-cart-row/order-cart-row.component.jsx",["828"],"import React, { useState, useEffect, useContext } from 'react'\nimport { OrderContext } from '../../context/order/order.context'\n\nimport CustomInput from '../custom-input/custom-input.component'\n\nimport {\n    AiFillCaretDown\n} from 'react-icons/ai'\n\nimport {\n    CartTableRow,\n    TableCol,\n    IconContainer,\n    OptionsContainer,\n    ContactLensesParameterContainer,\n    CustomSelect,\n    EmptyTittle\n} from './order-cart-row.styles'\n\nconst CartRow = ({ item, idx }) => {\n    const { deleteProduct, addProductDiscount, addLensesParameters } = useContext(OrderContext)\n\n    const [showRow, setShowRow] = useState(false)\n    const [contactLenses, setContactLenses] = useState({})\n\n\n    const handleClick = () => {\n        setShowRow(prevValue => !prevValue)\n    }\n\n    const handleContactLensesParameterChange = (e, idx, originalArr) => {\n        const { name, value } = e.target\n        let arr = originalArr\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        setContactLenses({\n            ...contactLenses,\n            [name]: arr\n        })\n    }\n\n    useEffect(() => {\n        addLensesParameters(idx, contactLenses)\n    }, [contactLenses])\n\n    useEffect(() => {\n        if (item.product.type) {\n            if (item.product.type === 3) {\n                setContactLenses({\n                    curve: [item.product.contactLenses.allowedCurves[0], item.product.contactLenses.allowedCurves[0]],\n                    diameter: [item.product.contactLenses.allowedDiameters[0], item.product.contactLenses.allowedDiameters[0]],\n                    diopters: [0, 0]\n                })\n            }\n        }\n    }, [item.product])\n\n    return (\n        <CartTableRow >\n            <TableCol onClick={() => deleteProduct(idx)}>{idx + 1}</TableCol>\n            <TableCol>\n                {item?.product?.name ? item?.product?.name : \"Šošovky\"}\n            </TableCol>\n            <TableCol>\n                {item?.product?.price ? `${(item?.product?.price / 100).toFixed(2)}€` : \"\"}\n            </TableCol>\n            <TableCol>\n                <div>\n                    <input\n                        value={item?.discount?.product ? item?.discount.product.percent : ''}\n                        onChange={(e) => addProductDiscount(idx, e.target.value)}\n                    />\n                </div>\n            </TableCol>\n            <TableCol>\n                <IconContainer onClick={handleClick}>\n                    <AiFillCaretDown />\n                </IconContainer>\n            </TableCol>\n            {showRow && (\n                <OptionsContainer>\n                    {item.product.type !== 3 && (\n                        <div>\n                            <EmptyTittle>Žiadne možnosti</EmptyTittle>\n                        </div>\n                    )}\n                    {item.product.type === 3 && (\n                        <ContactLensesParameterContainer>\n                            <div>\n                                <h4>Ľave oko</h4>\n                                <CustomSelect\n                                    name='curve'\n                                    value={contactLenses.curve[0]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 0, contactLenses.curve)}\n                                >\n                                    {item.product.contactLenses.allowedCurves.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n                                <CustomSelect\n                                    name='diameter'\n                                    value={contactLenses.diameter[0]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 0, contactLenses.diameter)}\n                                >\n                                    {item.product.contactLenses.allowedDiameters.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n\n                                <CustomInput\n                                    name='diopters'\n\n                                    type='number'\n                                    value={contactLenses.diopters[0]}\n                                    min={item.product.contactLenses.dioptersRange[0]}\n                                    max={item.product.contactLenses.dioptersRange[1]}\n                                    step={.25}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 0, contactLenses.diopters)}\n                                />\n                            </div>\n                            <div>\n                                <h4>Pravé oko</h4>\n                                <CustomSelect\n                                    name='curve'\n                                    value={contactLenses.curve[1]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 1, contactLenses.curve)}\n                                >\n                                    {item.product.contactLenses.allowedCurves.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n                                <CustomSelect\n                                    name='diameter'\n                                    value={contactLenses.diameter[1]}\n                                    onChange={(e) => handleContactLensesParameterChange(e, 1, contactLenses.diameter)}\n                                >\n                                    {item.product.contactLenses.allowedDiameters.map((value, idx) => (\n                                        <option key={idx} value={value}>{value}</option>\n                                    ))}\n                                </CustomSelect>\n                                <CustomInput\n                                    type='number'\n                                    value={contactLenses.diopters[1]}\n                                    min={item.product.contactLenses.dioptersRange[0]}\n                                    max={item.product.contactLenses.dioptersRange[1]}\n                                    step={.25}\n                                    name='diopters'\n                                    onChange={(e) => handleContactLensesParameterChange(e, 1, contactLenses.diopters)}\n                                />\n                            </div>\n                        </ContactLensesParameterContainer>\n                    )}\n                </OptionsContainer>\n            )}\n        </CartTableRow>\n    )\n}\n\nexport default CartRow\n","/imooptik-frontend/src/components/modal-finish-order/modal-finish-order.component.jsx",["829"],"/imooptik-frontend/src/components/order-cart-lenses-row/order-cart-lenses-row.component.jsx",[],"/imooptik-frontend/src/hooks/useOutsideAlerter.jsx",["830"],"import React, { useRef, useEffect } from \"react\";\n\nexport const useOutsideHandler = (ref, action) => {\n    useEffect(() => {\n        const handleClickOutside = e => {\n            if (ref.current && !ref.current.contains(e.target)) {\n                action()\n            }\n        }\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n\n    }, [ref])\n}\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\nfunction useOutsideAlerter(ref) {\n    useEffect(() => {\n        /**\n         * Alert if clicked on outside of element\n         */\n        function handleClickOutside(event) {\n            if (ref.current && !ref.current.contains(event.target)) {\n                alert(\"You clicked outside of me!\");\n            }\n        }\n        // Bind the event listener\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            // Unbind the event listener on clean up\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [ref]);\n}\n\n/**\n * Component that alerts if you click outside of it\n */\nfunction OutsideAlerter(props) {\n    const wrapperRef = useRef(null);\n    useOutsideAlerter(wrapperRef);\n\n    return <div ref={wrapperRef}>{props.children}</div>;\n}\n\nexport default OutsideAlerter;\n","/imooptik-frontend/src/components/order-deligate-modal/order-deligate-modal.component.jsx",["831"],"import React, { useState, useContext } from 'react'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport ReactDOM from 'react-dom'\n\nimport Popup from '../popup/pop-up.component'\n\nimport { retailNames } from '../../utils/warehouse.utils'\n\nimport {\n    ModalContainer,\n    Modal,\n    CloseButton,\n    CustomSelect,\n    SubmitButton\n} from './order-deligate-modal.styles'\n\n\nconst OrderDeligateModal = ({ close, premise, id, refetch }) => {\n    const [value, setValue] = useState(premise)\n    const { token } = useContext(AuthContext)\n    const {\n        getMessage,\n        message,\n        isLoading,\n        setIsLoading,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    const handleClick = async () => {\n        setIsLoading(true)\n        const myHeaders = new Headers();\n        myHeaders.append(\"auth-token\", token);\n        myHeaders.append(\"Content-Type\", \"application/json\");\n\n        const raw = JSON.stringify({\n            premises: Number(value),\n        })\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${id}/delegate`, requestOptions)\n            // if (response.status === 400) {\n            //     getMessage(\"Faktúra musí byt zaplatená, aby mohla byť priradená prevádzke\")\n            // }\n            // if (response.status === 401) {\n            //     getMessage(\"Musíš byt vedúci, aby si mohol manipulovať s priradovanim\")\n            // }\n            const data = await response.json()\n\n            if (data.order) {\n                refetch()\n                setIsLoading(false)\n                close()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            setIsLoading(false)\n        }\n    }\n\n    if (isLoading || message) return <Popup loading={isLoading} title={message} close={closeModal} />\n\n    return ReactDOM.createPortal((\n        <ModalContainer >\n            <CloseButton onClick={close} />\n            <Modal>\n                <h3>Priradiť k prevádzke</h3>\n                <CustomSelect value={value} onChange={(e) => setValue(e.target.value)}>\n                    <option value={0}>Nezadané</option>\n                    {retailNames.map((name, idx) => {\n                        if (idx === 0) return\n                        return (\n                            <option key={idx} value={idx}>{name}</option>\n                        )\n                    })}\n                </CustomSelect>\n                <SubmitButton onClick={handleClick}>Priradiť</SubmitButton>\n            </Modal>\n        </ModalContainer >\n    ), document.getElementById('portal'))\n}\n\nexport default OrderDeligateModal\n","/imooptik-frontend/src/components/modal-finish-deposited-order/modal-finish-deposited-order.component.jsx",[],"/imooptik-frontend/src/components/parameters-table/parameters-table.styles.jsx",[],"/imooptik-frontend/src/components/custom-form-switch/custom-form-switch.styles.jsx",[],"/imooptik-frontend/src/components/examinations-overview/examinations-overview.styles.jsx",[],"/imooptik-frontend/src/components/profile-order-overview/profile-order-overview.styles.jsx",[],"/imooptik-frontend/src/components/examination-user/examination-user.component.jsx",[],"/imooptik-frontend/src/components/modal-optometrist-examination/modal-optometrist-examination.component.jsx",["832","833"],"import React, { useState, useContext, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { ExaminationContext } from '../../context/examination/examination.context'\nimport { useFetchById } from '../../hooks/useFetch'\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    checkParameter,\n    formatParameter,\n    checkParameterValue\n} from '../../utils/parameters.utils'\n\nimport {\n    CloseButton,\n    Modal,\n    ModalContainer,\n    SubmitButton,\n    Container,\n    ExamTypeCheckbox,\n    TwoColContainer,\n    InputContainer,\n    IsSuitableCheckbox,\n    Col,\n    Table,\n    TableTitleCol,\n    TableCol,\n    // TableBlock,\n    ObjectiveRefTable,\n    SubjectiveRefTable,\n    ExamTable,\n    RefractTable,\n    KerathTable,\n    SubjectiveRefATable,\n    ContactLensesTable,\n    ContactLensesTypeTable\n} from './modal-optometrist-examination.styles'\n\nconst OptometristExaminationModal = ({ close, refetch, userId, examinationToUpdate }) => {\n    const examinationData = useFetchById('api/admin/exams', examinationToUpdate, !examinationToUpdate)\n\n    const { createExamination, updateExamination } = useContext(ExaminationContext)\n    const [examinationObj, setExaminationObj] = useState({})\n    const [recomendation, setRecomendation] = useState('')\n\n    //REFRAKCIA\n    const [vlastne_okuliare, setVlastne_okuliare] = useState({})\n    const [objektivna_refrakcia, setObjektivna_refrakcia] = useState({})\n    const [subjektivna_refrakcia, setSubjektivna_refrakcia] = useState({})\n\n\n    //ANAMNEZA\n    const [refraktometer, setRefraktometer] = useState({})\n    const [keratometer, setKeratometer] = useState({})\n    const [subjektivna_refrakciaA, setSubjektivna_refrakciaA] = useState({})\n    const [kontaktne_sosovky, setKontaktne_sosovky] = useState({})\n    const [typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek] = useState({})\n\n    //KONTROLA\n    const [tabulka, setTabulka] = useState({})\n\n    const [activeExamType, setActiveExamType] = useState(1)\n\n    const handleParameterChange = (e, idx, parameterObj, updateParameter) => {\n        const { name, value } = e.target\n        let arr = parameterObj[name] || [1001, 1001]\n        arr[idx] = value === '' ? 1001 : value\n\n        updateParameter({\n            ...parameterObj,\n            [name]: arr\n        })\n    }\n\n    const handleDomEye = (num, paramObj, handleChange) => {\n        if (paramObj?.domoko === num) {\n            handleChange(prevValue => ({\n                ...prevValue,\n                domoko: 0,\n            }))\n        } else {\n            handleChange(prevValue => ({\n                ...prevValue,\n                domoko: num,\n            }))\n        }\n    }\n\n    const handleChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete examinationObj[name]\n            setExaminationObj({\n                ...examinationObj,\n            })\n            return\n        }\n\n        setExaminationObj({\n            ...examinationObj,\n            [name]: value\n        })\n    }\n\n    const formatParameters = (e, newParameters, parameterObj, updateParameter) => {\n        if (newParameters) {\n            const { name } = e.target\n            updateParameter({\n                ...parameterObj,\n                [name]: newParameters.map(value => formatParameter(value))\n            })\n        }\n    }\n\n    const formatStringParameters = (e, newParameters, parameterObj, updateParameter) => {\n        if (newParameters) {\n            const { name } = e.target\n            updateParameter({\n                ...parameterObj,\n                [name]: newParameters.map(value => value)\n            })\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        let examObj = {\n            doneTo: userId,\n            type: activeExamType,\n            ...(recomendation !== \"\") && { doporucenia: recomendation }\n            // parameters: {\n            //     ...parameters\n            // }\n        }\n\n        if (activeExamType === 1) {\n            examObj = {\n                ...examObj,\n                refrakcia: {\n                    ...examinationObj,\n                    vlastne_okuliare: {\n                        ...vlastne_okuliare\n                    },\n                    objektivna_refrakcia: {\n                        ...objektivna_refrakcia\n                    },\n                    subjektivna_refrakcia: {\n                        ...subjektivna_refrakcia\n                    }\n                },\n            }\n        }\n\n        if (activeExamType === 2) {\n            examObj = {\n                ...examObj,\n                anamneza: {\n                    ...examinationObj,\n                    vlastne_okuliare: {\n                        ...vlastne_okuliare\n                    },\n                    refraktometer: {\n                        ...refraktometer\n                    },\n                    keratometer: {\n                        ...keratometer\n                    },\n                    subjektivna_refrakcia: {\n                        ...subjektivna_refrakciaA\n                    },\n                    kontaktne_sosovky: {\n                        ...kontaktne_sosovky\n                    },\n                    typ_kontaktnych_sosoviek: {\n                        ...typ_kontaktnych_sosoviek\n                    }\n                },\n            }\n        }\n\n        if (activeExamType === 3) {\n            examObj = {\n                ...examObj,\n                kontrola: {\n                    ...examinationObj,\n                    tabulka: {\n                        ...tabulka\n                    },\n                },\n            }\n        }\n\n        // console.log(\"EXAMINATION OBJECT BEFORE SEND\")\n        // console.log(examObj)\n\n        if (examinationToUpdate) {\n            delete examObj[\"doneTo\"]\n\n            updateExamination(examObj, examinationToUpdate)\n\n        } else {\n            createExamination(examObj)\n        }\n        refetch()\n        close()\n    }\n\n    useEffect(() => {\n        if (!!examinationToUpdate) return\n        setExaminationObj({})\n        setVlastne_okuliare({})\n        setObjektivna_refrakcia({})\n        setSubjektivna_refrakcia({})\n        setRefraktometer({})\n        setKeratometer({})\n        setSubjektivna_refrakciaA({})\n        setKontaktne_sosovky({})\n        setTyp_kontaktnych_sosoviek({})\n        setTabulka({})\n        setRecomendation('')\n    }, [activeExamType])\n\n    useEffect(() => {\n        if (!examinationData.isLoading) {\n            if (examinationData.response) {\n\n                if (examinationData.response?.exam?.type === 1) {\n                    let examObj = examinationData.response?.exam\n                    setVlastne_okuliare({\n                        ...examObj?.refrakcia?.vlastne_okuliare\n                    })\n                    setObjektivna_refrakcia({\n                        ...examObj?.refrakcia?.objektivna_refrakcia\n                    })\n                    setSubjektivna_refrakcia({\n                        ...examObj?.refrakcia?.subjektivna_refrakcia\n                    })\n\n                    setRecomendation(examObj?.doporucenia || \"\")\n                    setActiveExamType(examObj?.type)\n\n                    // delete examObj[\"refrakcia\"]\n                    delete examObj.refrakcia[\"vlastne_okuliare\"]\n                    delete examObj.refrakcia[\"objektivna_refrakcia\"]\n                    delete examObj.refrakcia[\"subjektivna_refrakcia\"]\n                    delete examObj[\"kontrola\"]\n                    delete examObj[\"anamneza\"]\n                    delete examObj[\"doneTo\"]\n                    delete examObj[\"doneBy\"]\n                    delete examObj[\"date\"]\n                    delete examObj[\"_id\"]\n                    delete examObj[\"__v\"]\n                    delete examObj[\"doporucenia\"]\n                    delete examObj[\"type\"]\n\n                    setExaminationObj({\n                        ...examObj?.refrakcia\n                    })\n                }\n\n                if (examinationData.response?.exam?.type === 2) {\n                    let examObj = examinationData.response?.exam\n                    setActiveExamType(examObj?.type)\n\n\n                    setVlastne_okuliare({\n                        ...examObj?.anamneza?.vlastne_okuliare\n                    })\n                    setRefraktometer({\n                        ...examObj?.anamneza?.refraktometer\n                    })\n                    setKeratometer({\n                        ...examObj?.anamneza?.keratometer\n                    })\n                    setSubjektivna_refrakciaA({\n                        ...examObj?.anamneza?.subjektivna_refrakcia\n                    })\n                    setKontaktne_sosovky({\n                        ...examObj?.anamneza?.kontaktne_sosovky\n                    })\n                    setTyp_kontaktnych_sosoviek({\n                        ...examObj?.anamneza?.typ_kontaktnych_sosoviek\n                    })\n\n                    setRecomendation(examObj?.doporucenia || \"\")\n\n                    delete examObj.anamneza[\"vlastne_okuliare\"]\n                    delete examObj.anamneza[\"refraktometer\"]\n                    delete examObj.anamneza[\"keratometer\"]\n                    delete examObj.anamneza[\"subjektivna_refrakcia\"]\n                    delete examObj.anamneza[\"kontaktne_sosovky\"]\n                    delete examObj.anamneza[\"typ_kontaktnych_sosoviek\"]\n                    delete examObj[\"kontrola\"]\n                    delete examObj[\"refrakcia\"]\n                    delete examObj[\"doneTo\"]\n                    delete examObj[\"doneBy\"]\n                    delete examObj[\"date\"]\n                    delete examObj[\"_id\"]\n                    delete examObj[\"__v\"]\n                    delete examObj[\"doporucenia\"]\n                    delete examObj[\"type\"]\n\n                    setExaminationObj({\n                        ...examObj?.anamneza\n                    })\n\n\n                }\n\n                if (examinationData.response?.exam?.type === 3) {\n                    let examObj = examinationData.response?.exam\n\n\n                    setActiveExamType(examObj?.type)\n\n                    setTabulka({\n                        ...examObj?.kontrola?.tabulka\n                    })\n\n                    setRecomendation(examObj?.doporucenia || \"\")\n\n                    delete examObj.kontrola[\"tabulka\"]\n                    delete examObj[\"anamneza\"]\n                    delete examObj[\"refrakcia\"]\n                    delete examObj[\"doneTo\"]\n                    delete examObj[\"doneBy\"]\n                    delete examObj[\"date\"]\n                    delete examObj[\"_id\"]\n                    delete examObj[\"__v\"]\n                    delete examObj[\"doporucenia\"]\n                    delete examObj[\"type\"]\n\n                    setExaminationObj({\n                        ...examObj?.kontrola\n                    })\n                }\n\n\n                // setParameters(examinationData.response?.exam?.parameters)\n                // setExaminationObj(examinationData.response?.exam)\n            }\n        }\n    }, [examinationToUpdate, examinationData.isLoading])\n\n    useEffect(() => {\n        return () => {\n            setExaminationObj({})\n            setExaminationObj({})\n            setVlastne_okuliare({})\n            setObjektivna_refrakcia({})\n            setSubjektivna_refrakcia({})\n            setRefraktometer({})\n            setKeratometer({})\n            setSubjektivna_refrakciaA({})\n            setKontaktne_sosovky({})\n            setTyp_kontaktnych_sosoviek({})\n            setTabulka({})\n            setRecomendation('')\n        }\n    }, [])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h3>Vyšetrenie</h3>\n                {!examinationToUpdate && <Container>\n                    <h4>Typ prehliadky</h4>\n                    <div>\n                        {examTypes.map((type, idx) => (\n                            <ExamTypeCheckbox\n                                key={idx}\n                                label={type.name}\n                                isActive={activeExamType === type.value}\n                                handleClick={() => setActiveExamType(type.value)}\n                            />\n                        ))}\n                    </div>\n                </Container>}\n\n                {activeExamType === 1 && (\n                    <Container>\n                        <h4>Refrakcia</h4>\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.nosi_od || \"\"}\n                                    type=\"date\"\n                                    name=\"nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.posledna_korekcia || \"\"}\n                                    type=\"date\"\n                                    name=\"posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'Typ, spôsob'}\n                                    value={examinationObj?.typ_sposob || \"\"}\n                                    type=\"text\"\n                                    name=\"typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examinationObj?.vyhovuje || false}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vyhovuje\",\n                                            value: examinationObj?.vyhovuje ? !examinationObj.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Anamnéza'\n                                name=\"anamneza\"\n                                value={examinationObj?.anamneza || ''}\n                                rows=\"5\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"dopl_info\"\n                                value={examinationObj?.dopl_info || \"\"}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='vnatur'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.vnatur, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='vbino'\n                                        type='text'\n                                        value={checkParameterValue(vlastne_okuliare?.vbino)}\n                                        onChange={e => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: Number(e.target.value)\n                                        }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Objektivná refrakcia</h4>\n\n                        <ObjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.sph, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.cyl, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.ax, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='se'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.se, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.se, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ObjectiveRefTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col isActive={subjektivna_refrakcia?.domoko === 1} clickable onClick={() => handleDomEye(1, subjektivna_refrakcia, setSubjektivna_refrakcia)}>P.</Col>\n                                <Col isActive={subjektivna_refrakcia?.domoko === 2} clickable onClick={() => handleDomEye(2, subjektivna_refrakcia, setSubjektivna_refrakcia)}>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.sph, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.cyl, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.ax, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.add, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.visus, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='vbino'\n                                        type='text'\n                                        value={checkParameterValue(subjektivna_refrakcia?.vbino)}\n                                        onChange={e => setSubjektivna_refrakcia(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: Number(e.target.value)\n                                        }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>PRIZMA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='prizma'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.prizma, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.prizma, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BÁZA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='basis'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.basis, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.basis, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>OS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='os'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.os, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.os, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </SubjectiveRefTable>\n                    </Container>\n                )}\n\n                {activeExamType === 2 && (\n                    <Container>\n                        <h4>Anamnéza</h4>\n\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.nosi_od || \"\"}\n                                    type=\"date\"\n                                    name=\"nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.posledna_korekcia || \"\"}\n                                    type=\"date\"\n                                    name=\"posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'Typ, spôsob'}\n                                    value={examinationObj?.typ_sposob || \"\"}\n                                    type=\"text\"\n                                    name=\"typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examinationObj?.vyhovuje || false}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vyhovuje\",\n                                            value: examinationObj?.vyhovuje ? !examinationObj.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Stav a povolanie'\n                                name=\"stav_a_povolanie\"\n                                value={examinationObj?.stav_a_povolanie || ''}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"dopl_info\"\n                                value={examinationObj?.dopl_info || \"\"}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Obj. nález'\n                                name=\"obj_nalez\"\n                                value={examinationObj?.obj_nalez || ''}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='vnatur'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.vnatur, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='vbino'\n                                        type='text'\n                                        value={checkParameterValue(vlastne_okuliare?.vbino)}\n                                        onChange={e => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: Number(e.target.value)\n                                        }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Refraktometer</h4>\n\n                        <RefractTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onBlur={(e) => formatParameters(e, refraktometer?.sph, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onBlur={(e) => formatParameters(e, refraktometer?.cyl, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onBlur={(e) => formatParameters(e, refraktometer?.ax, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='se'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.se, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onBlur={(e) => formatParameters(e, refraktometer?.se, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </RefractTable>\n\n                        <h4>Keratometer</h4>\n\n                        <KerathTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>HOR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='hor'\n                                            type='text'\n                                            value={checkParameter(keratometer?.hor, idx)}\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onBlur={(e) => formatParameters(e, keratometer?.hor, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VER</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ver'\n                                            type='text'\n                                            value={checkParameter(keratometer?.ver, idx)}\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onBlur={(e) => formatParameters(e, keratometer?.ver, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </KerathTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefATable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.sph, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.cyl, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.ax, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.add, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.visus, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO</Col>\n                                <Col>\n                                    <input\n                                        name='bino'\n                                        type='text'\n                                        value={checkParameterValue(subjektivna_refrakciaA?.bino)}\n                                        onChange={e => setSubjektivna_refrakciaA(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        onBlur={(e) => setSubjektivna_refrakciaA(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: Number(e.target.value)\n                                        }))}\n                                    />\n                                </Col>\n                            </TableCol>\n\n                        </SubjectiveRefATable>\n\n                        <h4>Kontaktné šošovky</h4>\n\n                        <ContactLensesTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.sph, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.cyl, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.ax, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.add, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visd'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.visd, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visd, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO1</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='bino1'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.bino1, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino1, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISB</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visb'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.visb, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visb, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO2</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='bino2'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.bino2, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino2, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ContactLensesTable>\n\n\n                        <h4>Typ Kontaktných šošoviek</h4>\n\n                        <ContactLensesTypeTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>PRVÝ</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='prvy'\n                                            type='text'\n                                            value={checkParameter(typ_kontaktnych_sosoviek?.prvy, idx)}\n                                            onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.prvy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>DRUHÝ</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='druhy'\n                                            type='text'\n                                            value={checkParameter(typ_kontaktnych_sosoviek?.druhy, idx)}\n                                            onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.druhy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>L.KONTROLA</Col>\n                                <Col>\n                                    <input\n                                        name='lkontrola'\n                                        type='text'\n                                        value={typ_kontaktnych_sosoviek?.lkontrola || \"\"}\n                                        onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>DOP.ROZTOK</Col>\n                                <Col>\n                                    <input\n                                        name='dop_roztok'\n                                        type='text'\n                                        value={typ_kontaktnych_sosoviek?.dop_roztok || \"\"}\n                                        onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </ContactLensesTypeTable>\n                    </Container>\n                )}\n\n                {activeExamType === 3 && (\n                    <Container>\n                        <h4>Kontrola</h4>\n                        <InputContainer>\n                            <CustomInput\n                                label={'Typ kontaktných šošoviek'}\n                                value={examinationObj?.typ_kontaktnych_sosoviek || \"\"}\n                                type=\"text\"\n                                name=\"typ_kontaktnych_sosoviek\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <ExamTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(tabulka?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.sph, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(tabulka?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.cyl, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(tabulka?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.ax, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(tabulka?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.add, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VIS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='vis'\n                                            type='text'\n                                            value={checkParameter(tabulka?.vis, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.vis, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ExamTable>\n\n                        <InputContainer>\n                            <CustomInput\n                                label={'Subj.'}\n                                value={examinationObj?.subj || \"\"}\n                                type=\"text\"\n                                name=\"subj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <InputContainer>\n                            <CustomInput\n                                label={'Obj.'}\n                                value={examinationObj?.obj || \"\"}\n                                type=\"text\"\n                                name=\"obj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                    </Container>\n                )}\n\n                <InputContainer>\n                    <CustomTextarea\n                        label='Doporučenia'\n                        name=\"doporucenia\"\n                        value={recomendation}\n                        rows=\"5\"\n                        handleChange={(e) => setRecomendation(e.target.value)}\n                    />\n                </InputContainer>\n                {/* doporucenia */}\n\n                <SubmitButton onClick={handleSubmit}>{examinationToUpdate ? \"Uložiť\" : \"Odoslať prehliadku\"}</SubmitButton>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default OptometristExaminationModal\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"apl. KŠ\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","/imooptik-frontend/src/components/modal-booking/modal-booking.styles.jsx",[],"/imooptik-frontend/src/components/calendar-booked-day/calendar-booked-day.styles.jsx",[],"/imooptik-frontend/src/components/modal-user-bookings/modal-user-booking.styles.jsx",[],"/imooptik-frontend/src/components/modal-userbookings-details/modal-userbookings-details.styles.jsx",[],"/imooptik-frontend/src/components/modal-order-update-user/modal-order-update-user.styles.jsx",[],"/imooptik-frontend/src/components/custom-back-button/custom-back-button.styles.jsx",[],"/imooptik-frontend/src/components/order-cart-row/order-cart-row.styles.jsx",[],"/imooptik-frontend/src/components/modal-finish-order/modal-finish-order.styles.jsx",[],"/imooptik-frontend/src/components/order-cart-lenses-row/order-cart-lenses-row.styles.jsx",[],"/imooptik-frontend/src/components/modal-finish-deposited-order/modal-finish-deposited-order.styles.jsx",[],"/imooptik-frontend/src/components/order-deligate-modal/order-deligate-modal.styles.jsx",[],"/imooptik-frontend/src/components/examination-user/examination-user.styles.jsx",[],"/imooptik-frontend/src/utils/parameters.utils.jsx",[],"/imooptik-frontend/src/components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx",[],{"ruleId":"834","replacedBy":"835"},{"ruleId":"836","replacedBy":"837"},{"ruleId":"838","severity":1,"message":"839","line":237,"column":8,"nodeType":"840","endLine":237,"endColumn":15,"suggestions":"841"},{"ruleId":"838","severity":1,"message":"842","line":152,"column":8,"nodeType":"840","endLine":152,"endColumn":34,"suggestions":"843"},{"ruleId":"838","severity":1,"message":"844","line":821,"column":8,"nodeType":"840","endLine":821,"endColumn":31,"suggestions":"845"},{"ruleId":"838","severity":1,"message":"846","line":849,"column":8,"nodeType":"840","endLine":849,"endColumn":22,"suggestions":"847"},{"ruleId":"848","severity":1,"message":"849","line":205,"column":19,"nodeType":"850","messageId":"851","endLine":205,"endColumn":23},{"ruleId":"838","severity":1,"message":"852","line":176,"column":8,"nodeType":"840","endLine":176,"endColumn":21,"suggestions":"853"},{"ruleId":"838","severity":1,"message":"854","line":189,"column":8,"nodeType":"840","endLine":189,"endColumn":43,"suggestions":"855"},{"ruleId":"848","severity":1,"message":"856","line":11,"column":10,"nodeType":"850","messageId":"851","endLine":11,"endColumn":25},{"ruleId":"838","severity":1,"message":"857","line":131,"column":8,"nodeType":"840","endLine":131,"endColumn":22,"suggestions":"858"},{"ruleId":"838","severity":1,"message":"857","line":139,"column":8,"nodeType":"840","endLine":139,"endColumn":21,"suggestions":"859"},{"ruleId":"848","severity":1,"message":"860","line":27,"column":5,"nodeType":"850","messageId":"851","endLine":27,"endColumn":17},{"ruleId":"838","severity":1,"message":"861","line":114,"column":8,"nodeType":"840","endLine":114,"endColumn":19,"suggestions":"862"},{"ruleId":"838","severity":1,"message":"863","line":130,"column":8,"nodeType":"840","endLine":130,"endColumn":21,"suggestions":"864"},{"ruleId":"838","severity":1,"message":"865","line":161,"column":8,"nodeType":"840","endLine":161,"endColumn":38,"suggestions":"866"},{"ruleId":"838","severity":1,"message":"867","line":167,"column":8,"nodeType":"840","endLine":167,"endColumn":12,"suggestions":"868"},{"ruleId":"838","severity":1,"message":"869","line":188,"column":8,"nodeType":"840","endLine":188,"endColumn":10,"suggestions":"870"},{"ruleId":"848","severity":1,"message":"871","line":434,"column":12,"nodeType":"850","messageId":"851","endLine":434,"endColumn":19},{"ruleId":"838","severity":1,"message":"872","line":456,"column":8,"nodeType":"840","endLine":456,"endColumn":26,"suggestions":"873"},{"ruleId":"838","severity":1,"message":"874","line":470,"column":8,"nodeType":"840","endLine":470,"endColumn":25,"suggestions":"875"},{"ruleId":"838","severity":1,"message":"876","line":477,"column":8,"nodeType":"840","endLine":477,"endColumn":26,"suggestions":"877"},{"ruleId":"838","severity":1,"message":"878","line":496,"column":8,"nodeType":"840","endLine":496,"endColumn":72,"suggestions":"879"},{"ruleId":"838","severity":1,"message":"880","line":512,"column":8,"nodeType":"840","endLine":512,"endColumn":26,"suggestions":"881"},{"ruleId":"838","severity":1,"message":"882","line":523,"column":8,"nodeType":"840","endLine":523,"endColumn":37,"suggestions":"883"},{"ruleId":"838","severity":1,"message":"884","line":535,"column":8,"nodeType":"840","endLine":535,"endColumn":10,"suggestions":"885"},{"ruleId":"838","severity":1,"message":"886","line":95,"column":8,"nodeType":"840","endLine":95,"endColumn":64,"suggestions":"887"},{"ruleId":"838","severity":1,"message":"888","line":101,"column":8,"nodeType":"840","endLine":101,"endColumn":28,"suggestions":"889"},{"ruleId":"838","severity":1,"message":"890","line":110,"column":8,"nodeType":"840","endLine":110,"endColumn":10,"suggestions":"891"},{"ruleId":"838","severity":1,"message":"892","line":93,"column":8,"nodeType":"840","endLine":93,"endColumn":21,"suggestions":"893"},{"ruleId":"838","severity":1,"message":"892","line":115,"column":8,"nodeType":"840","endLine":115,"endColumn":21,"suggestions":"894"},{"ruleId":"838","severity":1,"message":"895","line":121,"column":8,"nodeType":"840","endLine":121,"endColumn":29,"suggestions":"896"},{"ruleId":"838","severity":1,"message":"854","line":136,"column":8,"nodeType":"840","endLine":136,"endColumn":10,"suggestions":"897"},{"ruleId":"838","severity":1,"message":"898","line":166,"column":8,"nodeType":"840","endLine":166,"endColumn":19,"suggestions":"899"},{"ruleId":"838","severity":1,"message":"900","line":181,"column":8,"nodeType":"840","endLine":181,"endColumn":10,"suggestions":"901"},{"ruleId":"838","severity":1,"message":"902","line":78,"column":8,"nodeType":"840","endLine":78,"endColumn":12,"suggestions":"903"},{"ruleId":"838","severity":1,"message":"904","line":93,"column":8,"nodeType":"840","endLine":93,"endColumn":14,"suggestions":"905"},{"ruleId":"838","severity":1,"message":"906","line":107,"column":8,"nodeType":"840","endLine":107,"endColumn":10,"suggestions":"907"},{"ruleId":"848","severity":1,"message":"908","line":12,"column":10,"nodeType":"850","messageId":"851","endLine":12,"endColumn":21},{"ruleId":"838","severity":1,"message":"909","line":45,"column":8,"nodeType":"840","endLine":45,"endColumn":17,"suggestions":"910"},{"ruleId":"838","severity":1,"message":"911","line":46,"column":8,"nodeType":"840","endLine":46,"endColumn":18,"suggestions":"912"},{"ruleId":"838","severity":1,"message":"913","line":52,"column":8,"nodeType":"840","endLine":52,"endColumn":10,"suggestions":"914"},{"ruleId":"838","severity":1,"message":"915","line":131,"column":8,"nodeType":"840","endLine":131,"endColumn":18,"suggestions":"916"},{"ruleId":"838","severity":1,"message":"917","line":144,"column":8,"nodeType":"840","endLine":144,"endColumn":21,"suggestions":"918"},{"ruleId":"838","severity":1,"message":"919","line":161,"column":8,"nodeType":"840","endLine":161,"endColumn":20,"suggestions":"920"},{"ruleId":"838","severity":1,"message":"921","line":29,"column":8,"nodeType":"840","endLine":29,"endColumn":19,"suggestions":"922"},{"ruleId":"838","severity":1,"message":"921","line":42,"column":8,"nodeType":"840","endLine":42,"endColumn":25,"suggestions":"923"},{"ruleId":"838","severity":1,"message":"924","line":37,"column":8,"nodeType":"840","endLine":37,"endColumn":22,"suggestions":"925"},{"ruleId":"838","severity":1,"message":"926","line":79,"column":8,"nodeType":"840","endLine":79,"endColumn":28,"suggestions":"927"},{"ruleId":"838","severity":1,"message":"926","line":118,"column":8,"nodeType":"840","endLine":118,"endColumn":32,"suggestions":"928"},{"ruleId":"929","severity":1,"message":"930","line":60,"column":52,"nodeType":"931","messageId":"932","endLine":60,"endColumn":58},{"ruleId":"838","severity":1,"message":"933","line":114,"column":8,"nodeType":"840","endLine":114,"endColumn":19,"suggestions":"934"},{"ruleId":"929","severity":1,"message":"930","line":261,"column":56,"nodeType":"931","messageId":"932","endLine":261,"endColumn":62},{"ruleId":"848","severity":1,"message":"935","line":7,"column":10,"nodeType":"850","messageId":"851","endLine":7,"endColumn":25},{"ruleId":"838","severity":1,"message":"936","line":85,"column":8,"nodeType":"840","endLine":85,"endColumn":19,"suggestions":"937"},{"ruleId":"838","severity":1,"message":"938","line":66,"column":8,"nodeType":"840","endLine":66,"endColumn":19,"suggestions":"939"},{"ruleId":"929","severity":1,"message":"930","line":252,"column":44,"nodeType":"931","messageId":"932","endLine":252,"endColumn":50},{"ruleId":"929","severity":1,"message":"930","line":113,"column":40,"nodeType":"931","messageId":"932","endLine":113,"endColumn":46},{"ruleId":"929","severity":1,"message":"930","line":187,"column":44,"nodeType":"931","messageId":"932","endLine":187,"endColumn":50},{"ruleId":"848","severity":1,"message":"940","line":10,"column":5,"nodeType":"850","messageId":"851","endLine":10,"endColumn":19},{"ruleId":"848","severity":1,"message":"941","line":11,"column":5,"nodeType":"850","messageId":"851","endLine":11,"endColumn":17},{"ruleId":"929","severity":1,"message":"930","line":10,"column":32,"nodeType":"931","messageId":"932","endLine":10,"endColumn":38},{"ruleId":"838","severity":1,"message":"872","line":75,"column":8,"nodeType":"840","endLine":75,"endColumn":31,"suggestions":"942"},{"ruleId":"838","severity":1,"message":"876","line":82,"column":8,"nodeType":"840","endLine":82,"endColumn":19,"suggestions":"943"},{"ruleId":"838","severity":1,"message":"944","line":88,"column":8,"nodeType":"840","endLine":88,"endColumn":19,"suggestions":"945"},{"ruleId":"838","severity":1,"message":"872","line":92,"column":8,"nodeType":"840","endLine":92,"endColumn":15,"suggestions":"946"},{"ruleId":"838","severity":1,"message":"872","line":44,"column":8,"nodeType":"840","endLine":44,"endColumn":15,"suggestions":"947"},{"ruleId":"838","severity":1,"message":"872","line":50,"column":8,"nodeType":"840","endLine":50,"endColumn":18,"suggestions":"948"},{"ruleId":"838","severity":1,"message":"944","line":65,"column":8,"nodeType":"840","endLine":65,"endColumn":19,"suggestions":"949"},{"ruleId":"929","severity":1,"message":"930","line":37,"column":45,"nodeType":"931","messageId":"932","endLine":37,"endColumn":51},{"ruleId":"929","severity":1,"message":"930","line":41,"column":53,"nodeType":"931","messageId":"932","endLine":41,"endColumn":59},{"ruleId":"929","severity":1,"message":"930","line":42,"column":54,"nodeType":"931","messageId":"932","endLine":42,"endColumn":60},{"ruleId":"929","severity":1,"message":"930","line":43,"column":123,"nodeType":"931","messageId":"932","endLine":43,"endColumn":129},{"ruleId":"838","severity":1,"message":"950","line":97,"column":8,"nodeType":"840","endLine":97,"endColumn":19,"suggestions":"951"},{"ruleId":"838","severity":1,"message":"933","line":72,"column":8,"nodeType":"840","endLine":72,"endColumn":19,"suggestions":"952"},{"ruleId":"838","severity":1,"message":"953","line":69,"column":8,"nodeType":"840","endLine":69,"endColumn":15,"suggestions":"954"},{"ruleId":"838","severity":1,"message":"955","line":83,"column":8,"nodeType":"840","endLine":83,"endColumn":21,"suggestions":"956"},{"ruleId":"838","severity":1,"message":"936","line":72,"column":8,"nodeType":"840","endLine":72,"endColumn":19,"suggestions":"957"},{"ruleId":"838","severity":1,"message":"958","line":58,"column":8,"nodeType":"840","endLine":58,"endColumn":35,"suggestions":"959"},{"ruleId":"838","severity":1,"message":"960","line":74,"column":8,"nodeType":"840","endLine":74,"endColumn":104,"suggestions":"961"},{"ruleId":"838","severity":1,"message":"962","line":74,"column":9,"nodeType":"963","endLine":74,"endColumn":31},{"ruleId":"838","severity":1,"message":"962","line":74,"column":33,"nodeType":"963","endLine":74,"endColumn":55},{"ruleId":"838","severity":1,"message":"962","line":74,"column":57,"nodeType":"963","endLine":74,"endColumn":79},{"ruleId":"838","severity":1,"message":"962","line":74,"column":81,"nodeType":"963","endLine":74,"endColumn":103},{"ruleId":"838","severity":1,"message":"964","line":73,"column":8,"nodeType":"840","endLine":73,"endColumn":36,"suggestions":"965"},{"ruleId":"838","severity":1,"message":"966","line":42,"column":8,"nodeType":"840","endLine":42,"endColumn":19,"suggestions":"967"},{"ruleId":"838","severity":1,"message":"872","line":47,"column":8,"nodeType":"840","endLine":47,"endColumn":30,"suggestions":"968"},{"ruleId":"838","severity":1,"message":"969","line":122,"column":8,"nodeType":"840","endLine":122,"endColumn":13,"suggestions":"970"},{"ruleId":"929","severity":1,"message":"930","line":261,"column":67,"nodeType":"931","messageId":"932","endLine":261,"endColumn":73},{"ruleId":"838","severity":1,"message":"971","line":34,"column":8,"nodeType":"840","endLine":34,"endColumn":19,"suggestions":"972"},{"ruleId":"838","severity":1,"message":"865","line":110,"column":8,"nodeType":"840","endLine":110,"endColumn":38,"suggestions":"973"},{"ruleId":"838","severity":1,"message":"867","line":116,"column":8,"nodeType":"840","endLine":116,"endColumn":16,"suggestions":"974"},{"ruleId":"838","severity":1,"message":"975","line":44,"column":8,"nodeType":"840","endLine":44,"endColumn":23,"suggestions":"976"},{"ruleId":"838","severity":1,"message":"977","line":169,"column":8,"nodeType":"840","endLine":169,"endColumn":27,"suggestions":"978"},{"ruleId":"838","severity":1,"message":"979","line":15,"column":8,"nodeType":"840","endLine":15,"endColumn":13,"suggestions":"980"},{"ruleId":"929","severity":1,"message":"930","line":82,"column":40,"nodeType":"931","messageId":"932","endLine":82,"endColumn":46},{"ruleId":"838","severity":1,"message":"981","line":224,"column":8,"nodeType":"840","endLine":224,"endColumn":24,"suggestions":"982"},{"ruleId":"838","severity":1,"message":"958","line":346,"column":8,"nodeType":"840","endLine":346,"endColumn":56,"suggestions":"983"},"no-native-reassign",["984"],"no-negated-in-lhs",["985"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.","ArrayExpression",["986"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array. You can also do a functional update 'setUser(u => ...)' if you only need 'user' in the 'setUser' call.",["987"],"React Hook useEffect has missing dependencies: 'getLenses', 'getProductsByQuery', and 'products'. Either include them or remove the dependency array.",["988"],"React Hook useEffect has a missing dependency: 'product'. Either include it or remove the dependency array. You can also do a functional update 'setProduct(p => ...)' if you only need 'product' in the 'setProduct' call.",["989"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'activeIndex' and 'handleRefetch'. Either include them or remove the dependency array.",["990"],"React Hook useEffect has a missing dependency: 'closeModal'. Either include it or remove the dependency array.",["991"],"'retailNamesTabs' is defined but never used.","React Hook useEffect has a missing dependency: 'getAnalytics'. Either include it or remove the dependency array.",["992"],["993"],"'DeleteButton' is defined but never used.","React Hook useEffect has missing dependencies: 'closeModal' and 'response'. Either include them or remove the dependency array.",["994"],"React Hook useEffect has missing dependencies: 'activeIndex' and 'refetch'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFilterQuery' needs the current value of 'activeIndex'.",["995"],"React Hook useEffect has missing dependencies: 'user.fName', 'user.lName', and 'userObj'. Either include them or remove the dependency array. You can also do a functional update 'setUserObj(u => ...)' if you only need 'userObj' in the 'setUserObj' call.",["996"],"React Hook useEffect has a missing dependency: 'getUser'. Either include it or remove the dependency array.",["997"],"React Hook useEffect has missing dependencies: 'handleChange' and 'resetUser'. Either include them or remove the dependency array.",["998"],"'lensObj' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",["999"],"React Hook useEffect has missing dependencies: 'handleChange', 'lenses', 'productObj.lensType', and 'productObj.type'. Either include them or remove the dependency array.",["1000"],"React Hook useEffect has a missing dependency: 'response?.filters'. Either include it or remove the dependency array.",["1001"],"React Hook useEffect has missing dependencies: 'getEanCode', 'handleChange', and 'productObj'. Either include them or remove the dependency array.",["1002"],"React Hook useEffect has missing dependencies: 'getSingleProduct', 'handleChangeType', and 'productObj.type'. Either include them or remove the dependency array.",["1003"],"React Hook useEffect has a missing dependency: 'setSelectedImage'. Either include it or remove the dependency array.",["1004"],"React Hook useEffect has missing dependencies: 'resetContactLenses', 'resetGlassesParameters', 'resetLenses', 'resetProduct', and 'setSelectedImage'. Either include them or remove the dependency array.",["1005"],"React Hook useEffect has missing dependencies: 'addUser', 'changeStep', 'order', and 'setOrder'. Either include them or remove the dependency array.",["1006"],"React Hook useEffect has missing dependencies: 'addUser' and 'userData.response.user'. Either include them or remove the dependency array.",["1007"],"React Hook useEffect has missing dependencies: 'changeStep' and 'resetOrder'. Either include them or remove the dependency array.",["1008"],"React Hook useEffect has a missing dependency: 'blogsData'. Either include it or remove the dependency array.",["1009"],["1010"],"React Hook useEffect has a missing dependency: 'blogsData.response?.blogs'. Either include it or remove the dependency array.",["1011"],["1012"],"React Hook useEffect has missing dependencies: 'closeModal', 'currentUser.premises', 'handleShowCalendarClick', 'isAdmin', 'response', and 'setShowModal'. Either include them or remove the dependency array.",["1013"],"React Hook useEffect has missing dependencies: 'closeModal' and 'setShowModal'. Either include them or remove the dependency array.",["1014"],"React Hook useEffect has missing dependencies: 'getPost' and 'setSelectedImage'. Either include them or remove the dependency array.",["1015"],"React Hook useEffect has missing dependencies: 'id' and 'setSelectedImage'. Either include them or remove the dependency array.",["1016"],"React Hook useEffect has missing dependencies: 'closeModal' and 'resetBlog'. Either include them or remove the dependency array.",["1017"],"'formatPrice' is defined but never used.","React Hook useEffect has a missing dependency: 'getCoupons'. Either include it or remove the dependency array.",["1018"],"React Hook useEffect has a missing dependency: 'getCoupon'. Either include it or remove the dependency array.",["1019"],"React Hook useEffect has a missing dependency: 'resetCoupons'. Either include it or remove the dependency array.",["1020"],"React Hook useEffect has a missing dependency: 'getProductsByQuery'. Either include it or remove the dependency array.",["1021"],"React Hook useEffect has missing dependencies: 'activeCategoryTypeTab', 'getProductsByQuery', and 'products'. Either include them or remove the dependency array.",["1022"],"React Hook useEffect has missing dependencies: 'closeModal' and 'response.calendar'. Either include them or remove the dependency array.",["1023"],"React Hook useEffect has a missing dependency: 'currentPage'. Either include it or remove the dependency array.",["1024"],["1025"],"React Hook useEffect has missing dependencies: 'path', 'requestOptions', and 'skip'. Either include them or remove the dependency array.",["1026"],"React Hook useEffect has missing dependencies: 'requestOptions' and 'skip'. Either include them or remove the dependency array.",["1027"],["1028"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'response.products'. Either include it or remove the dependency array.",["1029"],"'formatAvailable' is defined but never used.","React Hook useEffect has a missing dependency: 'response.lenses'. Either include it or remove the dependency array.",["1030"],"React Hook useEffect has a missing dependency: 'product.brand'. Either include it or remove the dependency array.",["1031"],"'ImageContainer' is defined but never used.","'ProductImage' is defined but never used.",["1032"],["1033"],"React Hook useEffect has missing dependencies: 'firstDayIndex', 'lastDay', 'month', 'nextDays', 'response.calendar', and 'year'. Either include them or remove the dependency array.",["1034"],["1035"],["1036"],["1037"],["1038"],"React Hook useEffect has missing dependencies: 'response.calendar.endTimes', 'response.calendar.interval', and 'response.calendar.startTimes'. Either include them or remove the dependency array.",["1039"],["1040"],"React Hook useEffect has a missing dependency: 'getFilteredUsers'. Either include it or remove the dependency array.",["1041"],"React Hook useEffect has missing dependencies: 'getFilteredUsers' and 'users'. Either include them or remove the dependency array.",["1042"],["1043"],"React Hook useEffect has a missing dependency: 'examinationData.response'. Either include it or remove the dependency array.",["1044"],"React Hook useEffect has missing dependencies: 'handleChange', 'parameters.addition', and 'parameters.diopters'. Either include them or remove the dependency array. If 'handleChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1045"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has a missing dependency: 'response?.booking'. Either include it or remove the dependency array.",["1046"],"React Hook useEffect has missing dependencies: 'response?.userBookings' and 'userBookings?.dueDate'. Either include them or remove the dependency array.",["1047"],["1048"],"React Hook useEffect has a missing dependency: 'calendar'. Either include it or remove the dependency array. If 'setStartTime' needs the current value of 'calendar', you can also switch to useReducer instead of useState and read 'calendar' in the reducer.",["1049"],"React Hook useEffect has missing dependencies: 'response' and 'userBooking.userBookings.dueDate'. Either include them or remove the dependency array.",["1050"],["1051"],["1052"],"React Hook useEffect has missing dependencies: 'addLensesParameters' and 'idx'. Either include them or remove the dependency array.",["1053"],"React Hook useEffect has a missing dependency: 'handleOrderDetailChange'. Either include it or remove the dependency array.",["1054"],"React Hook useEffect has a missing dependency: 'action'. Either include it or remove the dependency array. If 'action' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1055"],"React Hook useEffect has a missing dependency: 'examinationToUpdate'. Either include it or remove the dependency array.",["1056"],["1057"],"no-global-assign","no-unsafe-negation",{"desc":"1058","fix":"1059"},{"desc":"1060","fix":"1061"},{"desc":"1062","fix":"1063"},{"desc":"1064","fix":"1065"},{"desc":"1066","fix":"1067"},{"desc":"1068","fix":"1069"},{"desc":"1070","fix":"1071"},{"desc":"1072","fix":"1073"},{"desc":"1074","fix":"1075"},{"desc":"1076","fix":"1077"},{"desc":"1078","fix":"1079"},{"desc":"1080","fix":"1081"},{"desc":"1082","fix":"1083"},{"desc":"1084","fix":"1085"},{"desc":"1086","fix":"1087"},{"desc":"1088","fix":"1089"},{"desc":"1090","fix":"1091"},{"desc":"1092","fix":"1093"},{"desc":"1094","fix":"1095"},{"desc":"1096","fix":"1097"},{"desc":"1098","fix":"1099"},{"desc":"1100","fix":"1101"},{"desc":"1102","fix":"1103"},{"desc":"1104","fix":"1105"},{"desc":"1106","fix":"1107"},{"desc":"1108","fix":"1109"},{"desc":"1110","fix":"1111"},{"desc":"1112","fix":"1113"},{"desc":"1114","fix":"1115"},{"desc":"1116","fix":"1117"},{"desc":"1118","fix":"1119"},{"desc":"1120","fix":"1121"},{"desc":"1122","fix":"1123"},{"desc":"1124","fix":"1125"},{"desc":"1126","fix":"1127"},{"desc":"1128","fix":"1129"},{"desc":"1130","fix":"1131"},{"desc":"1132","fix":"1133"},{"desc":"1134","fix":"1135"},{"desc":"1136","fix":"1137"},{"desc":"1138","fix":"1139"},{"desc":"1140","fix":"1141"},{"desc":"1142","fix":"1143"},{"desc":"1144","fix":"1145"},{"desc":"1146","fix":"1147"},{"desc":"1148","fix":"1149"},{"desc":"1150","fix":"1151"},{"desc":"1152","fix":"1153"},{"desc":"1154","fix":"1155"},{"desc":"1156","fix":"1157"},{"desc":"1156","fix":"1158"},{"desc":"1159","fix":"1160"},{"desc":"1154","fix":"1161"},{"desc":"1162","fix":"1163"},{"desc":"1144","fix":"1164"},{"desc":"1165","fix":"1166"},{"desc":"1167","fix":"1168"},{"desc":"1146","fix":"1169"},{"desc":"1170","fix":"1171"},{"desc":"1172","fix":"1173"},{"desc":"1174","fix":"1175"},{"desc":"1176","fix":"1177"},{"desc":"1178","fix":"1179"},{"desc":"1180","fix":"1181"},{"desc":"1182","fix":"1183"},{"desc":"1078","fix":"1184"},{"desc":"1185","fix":"1186"},{"desc":"1187","fix":"1188"},{"desc":"1189","fix":"1190"},{"desc":"1191","fix":"1192"},{"desc":"1193","fix":"1194"},{"desc":"1195","fix":"1196"},"Update the dependencies array to be: [getStats, token]",{"range":"1197","text":"1198"},"Update the dependencies array to be: [user, user?.fName, user?.lName]",{"range":"1199","text":"1200"},"Update the dependencies array to be: [activeCategoryTypeTab, getLenses, getProductsByQuery, products]",{"range":"1201","text":"1202"},"Update the dependencies array to be: [product, product.name]",{"range":"1203","text":"1204"},"Update the dependencies array to be: [activeIndex, handleRefetch, searchQuery]",{"range":"1205","text":"1206"},"Update the dependencies array to be: [isFetching, response, activeIndex, closeModal]",{"range":"1207","text":"1208"},"Update the dependencies array to be: [fitlterQuery, getAnalytics]",{"range":"1209","text":"1210"},"Update the dependencies array to be: [activeIndex, getAnalytics]",{"range":"1211","text":"1212"},"Update the dependencies array to be: [closeModal, isLoading, response]",{"range":"1213","text":"1214"},"Update the dependencies array to be: [activeIndex, refetch, searchQuery]",{"range":"1215","text":"1216"},"Update the dependencies array to be: [user.fName, user.lName, userObj, userObj.fName, userObj.lName]",{"range":"1217","text":"1218"},"Update the dependencies array to be: [getUser, id]",{"range":"1219","text":"1220"},"Update the dependencies array to be: [handleChange, resetUser]",{"range":"1221","text":"1222"},"Update the dependencies array to be: [productObj?.type, refetch]",{"range":"1223","text":"1224"},"Update the dependencies array to be: [handleChange, lenses, lenses.lensType, productObj.lensType, productObj.type]",{"range":"1225","text":"1226"},"Update the dependencies array to be: [isLoadingFilters, response?.filters]",{"range":"1227","text":"1228"},"Update the dependencies array to be: [id, eanCode, productObj.type, productObj.eanCode, product.type, getEanCode, productObj, handleChange]",{"range":"1229","text":"1230"},"Update the dependencies array to be: [getSingleProduct, handleChangeType, id, product.type, productObj.type]",{"range":"1231","text":"1232"},"Update the dependencies array to be: [product.image, lenses.image, setSelectedImage]",{"range":"1233","text":"1234"},"Update the dependencies array to be: [resetContactLenses, resetGlassesParameters, resetLenses, resetProduct, setSelectedImage]",{"range":"1235","text":"1236"},"Update the dependencies array to be: [userId, orderId, userData.response, orderData.response, changeStep, addUser, setOrder, order]",{"range":"1237","text":"1238"},"Update the dependencies array to be: [addUser, userData.isLoading, userData.response.user]",{"range":"1239","text":"1240"},"Update the dependencies array to be: [changeStep, resetOrder]",{"range":"1241","text":"1242"},"Update the dependencies array to be: [blogsData, searchQuery]",{"range":"1243","text":"1244"},"Update the dependencies array to be: [activeIndex, blogsData]",{"range":"1245","text":"1246"},"Update the dependencies array to be: [blogsData.isLoading, blogsData.response?.blogs]",{"range":"1247","text":"1248"},"Update the dependencies array to be: [closeModal]",{"range":"1249","text":"1250"},"Update the dependencies array to be: [closeModal, currentUser.premises, handleShowCalendarClick, isAdmin, isLoading, response, setShowModal]",{"range":"1251","text":"1252"},"Update the dependencies array to be: [closeModal, setShowModal]",{"range":"1253","text":"1254"},"Update the dependencies array to be: [getPost, id, setSelectedImage]",{"range":"1255","text":"1256"},"Update the dependencies array to be: [id, post, setSelectedImage]",{"range":"1257","text":"1258"},"Update the dependencies array to be: [closeModal, resetBlog]",{"range":"1259","text":"1260"},"Update the dependencies array to be: [coupons, getCoupons]",{"range":"1261","text":"1262"},"Update the dependencies array to be: [couponId, getCoupon]",{"range":"1263","text":"1264"},"Update the dependencies array to be: [resetCoupons]",{"range":"1265","text":"1266"},"Update the dependencies array to be: [getProductsByQuery, products]",{"range":"1267","text":"1268"},"Update the dependencies array to be: [activeCategoryTypeTab, getProductsByQuery, products, searchQuery]",{"range":"1269","text":"1270"},"Update the dependencies array to be: [closeModal, isFetching, response.calendar]",{"range":"1271","text":"1272"},"Update the dependencies array to be: [currentPage, listItems]",{"range":"1273","text":"1274"},"Update the dependencies array to be: [currentPage, handleClickPrev]",{"range":"1275","text":"1276"},"Update the dependencies array to be: [path, refetchIndex, requestOptions, skip]",{"range":"1277","text":"1278"},"Update the dependencies array to be: [refetchIndex, path, skip, requestOptions]",{"range":"1279","text":"1280"},"Update the dependencies array to be: [refetchIndex, path, id, skip, requestOptions]",{"range":"1281","text":"1282"},"Update the dependencies array to be: [isLoading, response.products]",{"range":"1283","text":"1284"},"Update the dependencies array to be: [isLoading, response.lenses]",{"range":"1285","text":"1286"},"Update the dependencies array to be: [isBranded, product.brand]",{"range":"1287","text":"1288"},"Update the dependencies array to be: [filter?.filters?.type, refetch]",{"range":"1289","text":"1290"},"Update the dependencies array to be: [isLoading, response?.filters]",{"range":"1291","text":"1292"},"Update the dependencies array to be: [firstDayIndex, isLoading, lastDay, month, nextDays, response.calendar, year]",{"range":"1293","text":"1294"},"Update the dependencies array to be: [month, refetch]",{"range":"1295","text":"1296"},{"range":"1297","text":"1296"},"Update the dependencies array to be: [calendar, refetch]",{"range":"1298","text":"1299"},{"range":"1300","text":"1294"},"Update the dependencies array to be: [isLoading, response.calendar.endTimes, response.calendar.interval, response.calendar.startTimes]",{"range":"1301","text":"1302"},{"range":"1303","text":"1284"},"Update the dependencies array to be: [getFilteredUsers, users]",{"range":"1304","text":"1305"},"Update the dependencies array to be: [getFilteredUsers, searchQuery, users]",{"range":"1306","text":"1307"},{"range":"1308","text":"1286"},"Update the dependencies array to be: [examinationData.isLoading, examinationData.response]",{"range":"1309","text":"1310"},"Update the dependencies array to be: [handleChange, parameters.addition, parameters.diopters]",{"range":"1311","text":"1312"},"Update the dependencies array to be: [selectedBooking, isLoading, response?.booking]",{"range":"1313","text":"1314"},"Update the dependencies array to be: [isLoading, response?.userBookings, userBookings?.dueDate]",{"range":"1315","text":"1316"},"Update the dependencies array to be: [dayData?.bookingDate, refetch]",{"range":"1317","text":"1318"},"Update the dependencies array to be: [calendar, day]",{"range":"1319","text":"1320"},"Update the dependencies array to be: [isLoading, response, userBooking.userBookings.dueDate]",{"range":"1321","text":"1322"},{"range":"1323","text":"1218"},"Update the dependencies array to be: [getUser, userId]",{"range":"1324","text":"1325"},"Update the dependencies array to be: [addLensesParameters, contactLenses, idx]",{"range":"1326","text":"1327"},"Update the dependencies array to be: [handleOrderDetailChange, isUpdating, order]",{"range":"1328","text":"1329"},"Update the dependencies array to be: [action, ref]",{"range":"1330","text":"1331"},"Update the dependencies array to be: [activeExamType, examinationToUpdate]",{"range":"1332","text":"1333"},"Update the dependencies array to be: [examinationToUpdate, examinationData.isLoading, examinationData.response]",{"range":"1334","text":"1335"},[6506,6513],"[getStats, token]",[3454,3480],"[user, user?.fName, user?.lName]",[24192,24215],"[activeCategoryTypeTab, getLenses, getProductsByQuery, products]",[24959,24973],"[product, product.name]",[4718,4731],"[activeIndex, handleRefetch, searchQuery]",[5051,5086],"[isFetching, response, activeIndex, closeModal]",[4123,4137],"[fitlterQuery, getAnalytics]",[4332,4345],"[activeIndex, getAnalytics]",[2982,2993],"[closeModal, isLoading, response]",[3345,3358],"[activeIndex, refetch, searchQuery]",[4153,4183],"[user.fName, user.lName, userObj, userObj.fName, userObj.lName]",[4287,4291],"[getUser, id]",[4986,4988],"[handleChange, resetUser]",[14191,14209],"[productObj?.type, refetch]",[14569,14586],"[handleChange, lenses, lenses.lensType, productObj.lensType, productObj.type]",[14740,14758],"[isLoadingFilters, response?.filters]",[15320,15384],"[id, eanCode, productObj.type, productObj.eanCode, product.type, getEanCode, productObj, handleChange]",[15778,15796],"[getSingleProduct, handleChangeType, id, product.type, productObj.type]",[16024,16053],"[product.image, lenses.image, setSelectedImage]",[16339,16341],"[resetContactLenses, resetGlassesParameters, resetLenses, resetProduct, setSelectedImage]",[2926,2982],"[userId, orderId, userData.response, orderData.response, changeStep, addUser, setOrder, order]",[3094,3114],"[addUser, userData.isLoading, userData.response.user]",[3310,3312],"[changeStep, resetOrder]",[2392,2405],"[blogsData, searchQuery]",[2908,2921],"[activeIndex, blogsData]",[3047,3068],"[blogsData.isLoading, blogsData.response?.blogs]",[3389,3391],"[closeModal]",[6046,6057],"[closeModal, currentUser.premises, handleShowCalendarClick, isAdmin, isLoading, response, setShowModal]",[6500,6502],"[closeModal, setShowModal]",[2426,2430],"[getPost, id, setSelectedImage]",[2858,2864],"[id, post, setSelectedImage]",[3183,3185],"[closeModal, resetBlog]",[1242,1251],"[coupons, getCoupons]",[1255,1265],"[couponId, getCoupon]",[1357,1359],"[resetCoupons]",[3697,3707],"[getProductsByQuery, products]",[4022,4035],"[activeCategoryTypeTab, getProductsByQuery, products, searchQuery]",[4700,4712],"[closeModal, isFetching, response.calendar]",[694,705],"[currentPage, listItems]",[1003,1020],"[currentPage, handleClickPrev]",[1192,1206],"[path, refetchIndex, requestOptions, skip]",[2507,2527],"[refetchIndex, path, skip, requestOptions]",[3754,3778],"[refetchIndex, path, id, skip, requestOptions]",[3588,3599],"[isLoading, response.products]",[2153,2164],"[isLoading, response.lenses]",[1577,1588],"[isBranded, product.brand]",[1921,1944],"[filter?.filters?.type, refetch]",[2091,2102],"[isLoading, response?.filters]",[2959,2970],"[firstDayIndex, isLoading, lastDay, month, nextDays, response.calendar, year]",[3020,3027],"[month, refetch]",[1086,1093],[1181,1191],"[calendar, refetch]",[1722,1733],[3996,4007],"[isLoading, response.calendar.endTimes, response.calendar.interval, response.calendar.startTimes]",[1911,1922],[1580,1587],"[getFilteredUsers, users]",[1908,1921],"[getFilteredUsers, searchQuery, users]",[1919,1930],[1819,1846],"[examinationData.isLoading, examinationData.response]",[2294,2390],"[handleChange, parameters.addition, parameters.diopters]",[1978,2006],"[selectedBooking, isLoading, response?.booking]",[1662,1673],"[isLoading, response?.userBookings, userBookings?.dueDate]",[1765,1787],"[dayData?.bookingDate, refetch]",[3254,3259],"[calendar, day]",[1007,1018],"[isLoading, response, userBooking.userBookings.dueDate]",[2694,2724],[2816,2824],"[getUser, userId]",[1141,1156],"[addLensesParameters, contactLenses, idx]",[4314,4333],"[handleOrderDetailChange, isUpdating, order]",[467,472],"[action, ref]",[6481,6497],"[activeExamType, examinationToUpdate]",[11142,11190],"[examinationToUpdate, examinationData.isLoading, examinationData.response]"]