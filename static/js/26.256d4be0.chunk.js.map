{"version":3,"sources":["context/examination/examination.context.jsx"],"names":["ExaminationContext","createContext","createExamination","updateExamination","deleteExamination","getPDF","useExaminationContext","useContext","ExaminationProvider","children","fetchData","useFetchContext","LoadingModalContext","closeModal","getMessage","setIsLoading","setShowModal","examId","a","data","filename","messageSK","setTimeout","win","window","open","process","focus","examToUpdate","callback","console","log","exam","Provider","value","examsToAdd","examSchema"],"mappings":"iyEAMaA,G,OAAqBC,wBAAc,CAC5CC,kBAAmB,aACnBC,kBAAmB,aACnBC,kBAAmB,aACnBC,OAAQ,gBAGCC,EAAwB,kBAAMC,qBAAWP,IAqHvCQ,UAnHa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnBC,EAAcC,cAAdD,UADkC,EAStCH,qBAAWK,KAJXC,EALsC,EAKtCA,WACAC,EANsC,EAMtCA,WACAC,EAPsC,EAOtCA,aACAC,EARsC,EAQtCA,aAGEX,EAAM,uCAAG,WAAOY,GAAP,SAAAC,EAAA,sDACXH,GAAa,GACbC,GAAa,GAEbN,EAAU,oBAAD,OAAqBO,EAArB,cAAyC,MAAM,SAACE,GAIjDA,EAAKC,WACLL,GAAa,GACbD,EAAWK,EAAKE,WAEhBC,YAAW,WACP,IAAMC,EAAMC,OAAOC,KAAP,UAAeC,mDAAf,wBAAqEP,EAAKC,UAAY,SAAU,uBACzG,OAAHG,QAAG,IAAHA,KAAKI,UACN,MAGPb,EAAWK,EAAKE,WAChBN,GAAa,KAGd,QAtBQ,2CAAH,sDAiDNZ,EAAiB,uCAAG,WAAOyB,EAAcX,GAArB,2BAAAC,EAAA,sDAA6BW,EAA7B,+BAAwC,aAC9Dd,GAAa,GACbC,GAAa,GAEbN,EAAU,oBAAD,OAAqBO,GAAUW,GAAc,SAACT,GAKnD,GAJAW,QAAQC,IAAI,8BACZD,QAAQC,IAAIZ,GACZJ,GAAa,GAETI,EAAKa,KAGL,OAFAH,EAASV,QACTN,IAIJC,EAAWK,EAAKE,WAChBN,GAAa,KACd,SAjBmB,2CAAH,wDAqBjBX,EAAiB,uCAAG,WAAOa,GAAP,2BAAAC,EAAA,sDAAeW,EAAf,+BAA0B,aAChDd,GAAa,GACbC,GAAa,GAEbN,EAAU,oBAAD,OAAqBO,GAAU,MAAM,SAACE,GAK3C,GAJAW,QAAQC,IAAI,8BACZD,QAAQC,IAAIZ,GACZJ,GAAa,GAETI,EAAKa,KAGL,OAFAH,EAASV,QACTN,IAIJC,EAAWK,EAAKE,WAChBN,GAAa,KACd,UAjBmB,2CAAH,sDAoBvB,OACI,cAACf,EAAmBiC,SAApB,CACIC,MAAO,CACHhC,kBApEc,SAACiC,GAAqC,IAAzBN,EAAwB,uDAAb,aAC9Cd,GAAa,GACbC,GAAa,GAEbc,QAAQC,IAAIK,GACZN,QAAQC,IAAII,GAEZzB,EAAU,oBAAqByB,GAAY,SAAChB,GAKxC,GAJAW,QAAQC,IAAI,0BACZD,QAAQC,IAAIZ,GACZJ,GAAa,GAETI,EAAKa,KAGL,OAFAH,EAASV,QACTN,IAIJC,EAAWK,EAAKE,WAChBN,GAAa,KACd,SAiDKZ,oBACAC,oBACAC,UALR,SAQKI","file":"static/js/26.256d4be0.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport {useFetchContext} from '../fetch-context/fetch.context'\nimport examSchema from './exam.json'\nimport lodash from 'lodash'\n\nexport const ExaminationContext = createContext({\n    createExamination: () => { },\n    updateExamination: () => { },\n    deleteExamination: () => { },\n    getPDF: () => {},\n})\n\nexport const useExaminationContext = () => useContext(ExaminationContext)\n\nconst ExaminationProvider = ({ children }) => {\n    const { fetchData } = useFetchContext()\n\n\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n    const getPDF = async (examId) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}/createPdf`, null, (data) => {\n            // console.log(\"after data fetching\")\n            // console.log(data)\n    \n            if (data.filename) {\n                setIsLoading(false)\n                getMessage(data.messageSK)\n\n                setTimeout(() => {\n                    const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${data.filename}`, \"_blank\", \"noreferrer noopener\");\n                    win?.focus();\n                }, 100)\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        \n\n        }, \"POST\")\n    }\n\n    const createExamination = (examsToAdd, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        console.log(examSchema)\n        console.log(examsToAdd)\n\n        fetchData(\"/api/admin/exams/\", examsToAdd, (data) => {\n            console.log(\"CREATE new examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"POST\")\n\n    }\n\n    const updateExamination = async (examToUpdate, examId, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}`, examToUpdate, (data) => {\n            console.log(\"UPDATE existed examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"PATCH\")\n\n    }\n\n    const deleteExamination = async (examId, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}`, null, (data) => {\n            console.log(\"DELETE existed examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"DELETE\")\n    }\n\n    return (\n        <ExaminationContext.Provider\n            value={{\n                createExamination,\n                updateExamination,\n                deleteExamination,\n                getPDF\n            }}\n        >\n            {children}\n        </ExaminationContext.Provider>\n    )\n}\n\nexport default ExaminationProvider"],"sourceRoot":""}