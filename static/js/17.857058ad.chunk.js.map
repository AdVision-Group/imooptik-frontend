{"version":3,"sources":["components/profile-order-overview/profile-order-overview.styles.jsx","components/profile-order-overview/profile-order-overview.component.jsx","components/user-form/user.form-styles.jsx","components/user-form/user-form.component.jsx","components/custom-form-switch/custom-form-switch.styles.jsx","components/custom-form-switch/custom-form-switch.component.jsx","components/new-user-form/new-user-form.styles.jsx","components/new-user-form/new-user-form.component.jsx","sections/customer-profile/customer-profile.styles.jsx","sections/customer-profile/customer-profile.section.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/product-input-row/product-input-row.styles.jsx","components/product-input-row/product-input-row.component.jsx"],"names":["OrderContainer","styled","div","OrderContent","Options","UpdateButton","CustomButton","DeleteButton","OrderId","p","ProfileOrderOverview","id","handleUpdateClick","onClick","Profile","GridContainer","ZeroMargin","GridRow","Row","Title","h2","Container","OrderHeader","OrderButton","AdminPanelContainer","CustomSelect","select","UserForm","isAdmin","isUpdating","user","handleChange","handleParameterChange","handleCompanyChange","push","useHistory","label","example","name","value","premises","onChange","e","retailNames","map","idx","admin","handleClick","target","optometrist","isActive","type","fName","lName","birthDate","email","phone","address","psc","city","country","company","ico","dic","parameters","lenses","preventDefault","_id","handleAddOrderButtonClick","orders","length","order","h3","ToggleOptionsContainer","ToggleFormButton","CustomFormSwitch","title","activeIndex","items","Fragment","item","CustomerForm","ColContainer","NewUserForm","formToShow","switchFormButtons","toggleUserForm","password","confirmPassword","Header","paddingStyles","DeleteProfileButton","SaveButton","CustomerProfile","useParams","useContext","AuthContext","LoadingModalContext","closeModal","isLoading","message","showModal","UserContext","getUser","updateUser","resetUser","createUser","useState","userObj","setUserObj","hasChanges","setHasChanges","handleUserChange","handleLensesParameterChange","arr","Number","handleCompanyAddressChange","console","log","Object","keys","useEffect","cylinder","cylinderAxes","diopters","distance","addition","basis","prism","loading","close","when","onSubmit","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError","InputRow","ProductInputRow","children","otherprops"],"mappings":"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","file":"static/js/17.857058ad.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\nexport const OrderContainer = styled.div`\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 25rem;\n\n    box-shadow: 0 0 1.5rem 0 rgba(0,0,0, 0.08);\n    padding: 2rem;\n\n    &:not(:last-child) {\n        margin-bottom: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n\n    }\n`\n\nexport const OrderContent = styled.div`\n\n    h2 {\n        font-size: 1.6rem;\n    }\n`\n\nexport const Options = styled.div`\n    align-self: end;\n    justify-self: end;\n`\n\nexport const UpdateButton = styled(CustomButton)`\n    font-size: 1rem;\n    margin-left: auto;\n    display:block;\n\n`\n\nexport const DeleteButton = styled(CustomButton)`\n    font-size: 1rem;\n    background-color: rgb(235, 172, 1);\n    margin-bottom: 1rem;\n    display:block;\n\n`\n\nexport const OrderId = styled.p`\n    font-size: 1.2rem;\n    color: gray;\n    /* margin-bottom: 2rem; */\n`","import React from 'react'\n\nimport {\n    DeleteButton,\n    Options,\n    OrderContainer,\n    OrderContent,\n    UpdateButton,\n    OrderId\n} from './profile-order-overview.styles'\n\nconst ProfileOrderOverview = ({ id, handleUpdateClick }) => {\n    return (\n        <OrderContainer>\n            <OrderContent>\n                <h2>ID Objednávky</h2>\n                <OrderId>{id}</OrderId>\n            </OrderContent>\n\n            <Options>\n                <DeleteButton>\n                    Vymazať\n                </DeleteButton>\n                <UpdateButton onClick={handleUpdateClick}>\n                    Upraviť\n                </UpdateButton>\n\n            </Options>\n\n        </OrderContainer>\n    )\n}\n\nexport default ProfileOrderOverview\n","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\n\nexport const Profile = styled.div`\n    padding: 2rem;\n    box-shadow: 0 0 1.5rem 0 rgba(0,0,0, 0.08);\n    margin-right: 2rem;\n\n`\n\nexport const GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: start;\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n    }\n`\n\nexport const ZeroMargin = styled.div`\n    input {\n        margin-bottom: 0 !important;\n    }\n`\n\nexport const GridRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n`\n\n\nexport const ThreeColRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    align-items: center;\n\n    input {\n        margin-bottom: 0 !important;\n    }\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr 1fr;\n        grid-template-areas:\n            \"a a\"\n            \"b c\";\n\n        div:nth-child(1){\n            grid-area: a;\n            margin-bottom: 0;\n        }\n        div:nth-child(2){\n            grid-area: b;\n            margin-bottom: 2rem;\n\n        }\n        div:nth-child(3){\n            grid-area: c;\n            margin-bottom: 2rem;\n        }\n    }\n`\n\nexport const Row = styled.div`\n    width: 75%;\n`\n\n\nexport const Title = styled.h2`\n    margin-bottom: 2rem;\n`\n\nexport const Container = styled.div`\n    margin-top: 2rem;\n`\n\nexport const OrderHeader = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n`\n\nexport const OrderButton = styled(CustomButton)`\n    margin-top: .2rem;\n    font-size: 1.2rem;\n`\n\nexport const AdminPanelContainer = styled.div`\n    margin-bottom: 3rem;\n`\n\nexport const CustomSelect = styled.select`\n    margin-top: 1.5rem;\n    min-width: 16.5rem;\n    width: 100%;\n    background-color: #F5F5F5;\n    border: none;\n    padding: .5rem .5rem .5rem 1rem;\n    font-size: inherit;\n    font-family: inherit;\n    display: block;\n`","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport ProfileOrderOverview from '../profile-order-overview/profile-order-overview.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\nimport {\n    retailNames\n} from '../../context/warehouse/warehouse.utils'\n\nimport {\n    Profile,\n    GridContainer,\n    GridRow,\n    Row,\n    ThreeColRow,\n    ZeroMargin,\n    Title,\n    Container,\n    OrderHeader,\n    OrderButton,\n    CustomSelect,\n    AdminPanelContainer\n} from './user.form-styles'\n\nconst UserForm = ({\n    isAdmin,\n    isUpdating,\n    user,\n    handleChange,\n    handleParameterChange,\n    handleCompanyChange\n}) => {\n    const { push } = useHistory()\n\n    const handleAddOrderButtonClick = e => {\n        e.preventDefault()\n        push(`/dashboard/objednavky/${user._id}`)\n    }\n\n    return (\n        <GridContainer>\n            <Profile>\n                {isAdmin && <AdminPanelContainer>\n                    <h2>Admin panel</h2>\n                    <InputRow\n                        label=\"Predajňa na ktorej uživatel pracuje\"\n                        example=''\n                    >\n                        <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Nezadané</option>\n                            {\n                                retailNames.map((name, idx) => {\n                                    if (idx === 4) return\n                                    return (\n                                        <option key={idx} value={idx + 1}>{name}</option>\n                                    )\n                                })\n                            }\n                        </CustomSelect>\n                    </InputRow>\n                    <InputRow\n                        label=\"Výška administrativných práv\"\n                        example=\"\"\n                    >\n                        <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Zákaznik</option>\n                            <option value={1}>Predavač</option>\n                            <option value={2}>Vedúci</option>\n                        </CustomSelect>\n                    </InputRow>\n\n                    <Container>\n                        <CustomCheckbox\n                            label='Optometrista'\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"optometrist\",\n                                    value: !user.optometrist\n                                }\n                            })}\n                            isActive={user.optometrist}\n                        />\n                    </Container>\n                </AdminPanelContainer>}\n                <div>\n                    <h2>Informácie</h2>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                // label=\"Priezvisko*\"\n                                type='date'\n                                name='birthDate'\n                                value={user.birthDate}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </div>\n\n                <Container>\n                    <h2>Kontaktné údaje</h2>\n                    <Row>\n                        <div>\n                            <CustomInput\n                                label=\"E-mail*\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Telefónne číslo\"\n                                type='text'\n                                name='phone'\n                                value={user.phone ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </Row>\n                </Container>\n\n                <Container>\n                    <h2>Fakturačné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.address ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.psc ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.city ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.country ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>\n                <Container>\n                    <h2>Firemné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČO\"\n                                type='text'\n                                name='ico'\n                                value={user.company.ico ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"DIČ\"\n                                type='text'\n                                name='dic'\n                                value={user.company.dic ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.company.address ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.company.psc ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.company.city ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.company.country ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>\n\n                <Container>\n                    <h2>Parametre</h2>\n\n                    <ParametersTable\n                        parameters={user.lenses}\n                        handleChange={handleParameterChange}\n                    />\n                </Container>\n\n\n            </Profile>\n\n            {isUpdating && <div>\n                <OrderHeader>\n                    <Title>\n                        Objednávky\n                    </Title>\n                    <OrderButton onClick={e => handleAddOrderButtonClick(e)}>Pridať objednávku</OrderButton>\n                </OrderHeader>\n\n                <div>\n                    {user.orders.length > 0 ? user.orders.map((order, idx) => (\n                        <ProfileOrderOverview\n                            key={idx}\n                            id={order}\n                            handleUpdateClick={() => push(`/dashboard/objednavky/${user._id}/${order}`)}\n                        />\n                    )) : (\n                            <p>Žiadné objednávky</p>\n                        )}\n\n\n                </div>\n            </div>}\n        </GridContainer>\n    )\n}\n\nexport default UserForm\n","import styled from 'styled-components'\nimport CustomButton from '../../components/custom-button/custom-button.component'\n\nexport const Title = styled.h3`\n    margin-top: 2rem;\n    /* margin-bottom: 2rem; */\n`\n\nexport const ToggleOptionsContainer = styled.div`\n    display: flex;\n    margin: 2rem 0;\n`\n\nexport const ToggleFormButton = styled(CustomButton)`\n    background-color: ${({ isActive }) => isActive ? \"rgb(235, 172, 1)\" : \"#000\"};\n    font-weight: 700;\n    margin-right: 2rem;\n`","import React from 'react'\n\nimport {\n    Title,\n    ToggleFormButton,\n    ToggleOptionsContainer\n} from './custom-form-switch.styles'\n\nconst CustomFormSwitch = ({ title, activeIndex, handleClick, items }) => {\n    return (\n        <React.Fragment>\n            <Title>{title}</Title>\n            <ToggleOptionsContainer>\n                {\n                    items.map((item, idx) => (\n                        <ToggleFormButton key={idx} isActive={activeIndex === idx} onClick={(e) => handleClick(e, idx)}>{item.name}</ToggleFormButton>\n                    ))\n                }\n            </ToggleOptionsContainer>\n        </React.Fragment>\n    )\n}\n\nexport default CustomFormSwitch\n","import styled from \"styled-components\"\n\nexport const CustomSelect = styled.select`\n    margin-top: 1.5rem;\n    min-width: 16.5rem;\n    width: 100%;\n    background-color: #F5F5F5;\n    border: none;\n    padding: .5rem .5rem .5rem 1rem;\n    font-size: inherit;\n    font-family: inherit;\n    display: block;\n`\n\n\nexport const CustomerForm = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 50rem;\n    grid-gap: 2rem;\n    align-items: start;\n`\n\nexport const ColContainer = styled.div`\n    padding: 2rem;\n    box-shadow: 0 0 1.5rem 0 rgba(0,0,0, 0.08);\n\n`\n\nexport const ZeroMargin = styled.div`\n    input {\n        margin-bottom: 0 !important;\n    }\n`\n\nexport const GridRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    max-width: 50rem;\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n`\nexport const Container = styled.div`\n    margin-top: 2rem;\n`","import React from 'react'\n\nimport CustomFormSwitch from '../custom-form-switch/custom-form-switch.component'\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from \"../custom-checkbox/custom-checkbox.component\"\n\nimport {\n    retailNames\n} from '../../context/warehouse/warehouse.utils'\n\nimport {\n    CustomSelect,\n    Container,\n    GridRow,\n    ZeroMargin,\n    ColContainer,\n    CustomerForm\n} from './new-user-form.styles'\n\n\nconst NewUserForm = ({\n    formToShow,\n    switchFormButtons,\n    toggleUserForm,\n    user,\n    handleChange,\n    isAdmin,\n    handleParameterChange,\n    handleCompanyChange\n}) => {\n\n    return (\n        <div>\n            {/* Akého uživatela chcete vytvoriť? */}\n            {isAdmin && <CustomFormSwitch\n                items={switchFormButtons}\n                title=\"Akého uživatela chcete vytvoriť?\"\n                activeIndex={formToShow}\n                handleClick={toggleUserForm}\n            />}\n\n            {\n                formToShow === 0 ? (\n                    <CustomerForm>\n                        <ColContainer>\n                            <h2>Informácie</h2>\n                            <InputRow\n                                label=\"\"\n                                example='napr: John'\n                            >\n                                <CustomInput\n                                    label=\"Meno*\"\n                                    type='text'\n                                    name='fName'\n                                    value={user.fName ?? \"\"}\n                                    handleChange={(e) => handleChange(e)}\n                                />\n                            </InputRow>\n                            <InputRow\n                                label=\"\"\n                                example='napr: Doe'\n                            >\n                                <CustomInput\n                                    label=\"Priezvisko*\"\n                                    type='text'\n                                    name='lName'\n                                    value={user.lName ?? \"\"}\n                                    handleChange={(e) => handleChange(e)}\n                                />\n                            </InputRow>\n                            <InputRow\n                                label=\"\"\n                                example='napr: priklad@email.com'\n                            >\n                                <CustomInput\n                                    label=\"E-mail*\"\n                                    type='email'\n                                    name='email'\n                                    value={user.email ?? \"\"}\n                                    handleChange={(e) => handleChange(e)}\n                                />\n                            </InputRow>\n                            <InputRow\n                                label=\"\"\n                                example='napr: 091234567'\n                            >\n                                <CustomInput\n                                    label=\"Telefónne číslo\"\n                                    type='text'\n                                    name='phone'\n                                    value={user.phone ?? \"\"}\n                                    handleChange={(e) => handleChange(e)}\n                                />\n                            </InputRow>\n                            <InputRow\n                                label=\"Dátum narodenia\"\n                                example=''\n                            >\n                                <CustomInput\n                                    // label=\"Priezvisko*\"\n                                    type='date'\n                                    name='birthDate'\n                                    value={user.birthDate}\n                                    handleChange={(e) => handleChange(e)}\n                                />\n                            </InputRow>\n\n                            <Container>\n                                <h2>Parametre</h2>\n\n                                <ParametersTable\n                                    parameters={user.lenses}\n                                    handleChange={handleParameterChange}\n                                />\n                            </Container>\n                        </ColContainer>\n\n                        <ColContainer>\n                            <div>\n                                <h2>Fakturačné údaje</h2>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"Ulica a čislo domu\"\n                                            type='text'\n                                            name='address'\n                                            value={user.address ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"PSČ\"\n                                            type='text'\n                                            name='psc'\n                                            value={user.psc ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Mesto\"\n                                            type='text'\n                                            name='city'\n                                            value={user.city ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Krajina\"\n                                            type='text'\n                                            name='country'\n                                            value={user.country ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </div>\n\n                            <Container>\n                                <h2>Firemné údaje</h2>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"IČO\"\n                                            type='text'\n                                            name='ico'\n                                            value={user.company.ico ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"DIČ\"\n                                            type='text'\n                                            name='dic'\n                                            value={user.company.dic ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"Ulica a čislo domu\"\n                                            type='text'\n                                            name='address'\n                                            value={user.company.address ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"PSČ\"\n                                            type='text'\n                                            name='psc'\n                                            value={user.company.psc ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Mesto\"\n                                            type='text'\n                                            name='city'\n                                            value={user.company.city ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Krajina\"\n                                            type='text'\n                                            name='country'\n                                            value={user.company.country ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </Container>\n                        </ColContainer>\n\n                    </CustomerForm>\n                ) : (\n                        <CustomerForm>\n\n                            <ColContainer>\n                                <h2>Informácie</h2>\n                                <InputRow\n                                    label=\"\"\n                                    example='napr: John'\n                                >\n                                    <CustomInput\n                                        label=\"Meno*\"\n                                        type='text'\n                                        name='fName'\n                                        value={user.fName ?? \"\"}\n                                        handleChange={(e) => handleChange(e)}\n                                    />\n                                </InputRow>\n                                <InputRow\n                                    label=\"\"\n                                    example='napr: Doe'\n                                >\n                                    <CustomInput\n                                        label=\"Priezvisko*\"\n                                        type='text'\n                                        name='lName'\n                                        value={user.lName ?? \"\"}\n                                        handleChange={(e) => handleChange(e)}\n                                    />\n                                </InputRow>\n                                <InputRow\n                                    label=\"\"\n                                    example='napr: priklad@email.com'\n                                >\n                                    <CustomInput\n                                        label=\"E-mail*\"\n                                        type='email'\n                                        name='email'\n                                        value={user.email ?? \"\"}\n                                        handleChange={(e) => handleChange(e)}\n                                    />\n                                </InputRow>\n                                <InputRow\n                                    label=\"Aspoň 1 velké pismeno, 1 malé pismeno a 1 číslo*\"\n                                    example=''\n                                >\n                                    <CustomInput\n                                        label=\"Heslo*\"\n                                        type='password'\n                                        name='password'\n                                        value={user.password ?? \"\"}\n                                        handleChange={(e) => handleChange(e)}\n                                    />\n                                </InputRow>\n                                <InputRow\n                                    label=\"\"\n                                    example=''\n                                >\n                                    <CustomInput\n                                        label=\"Potvrď heslo*\"\n                                        type='password'\n                                        name='confirmPassword'\n                                        value={user.confirmPassword ?? \"\"}\n                                        handleChange={(e) => handleChange(e)}\n                                    />\n                                </InputRow>\n\n\n                            </ColContainer>\n\n                            <ColContainer>\n                                <h2>Admin privilégia</h2>\n                                <InputRow\n                                    label=\"Predajňa na ktorej uživatel pracuje\"\n                                    example=''\n                                >\n\n                                    <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                                        <option value={0}>Nezadané</option>\n\n                                        {\n                                            retailNames.map((name, idx) => {\n                                                if (idx === 4) return\n                                                return (\n                                                    <option key={idx} value={idx + 1}>{name}</option>\n\n                                                )\n                                            })\n                                        }\n                                    </CustomSelect>\n\n                                </InputRow>\n                                <InputRow\n                                    label=\"Výška administrativných práv\"\n                                    example=\"\"\n                                >\n                                    <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                                        <option value={0}>Zákaznik</option>\n                                        <option value={1}>Predavač</option>\n                                        <option value={2}>Vedúci</option>\n                                    </CustomSelect>\n\n                                </InputRow>\n                                <Container>\n                                    <CustomCheckbox\n                                        label='Optometrista'\n                                        handleClick={() => handleChange({\n                                            target: {\n                                                name: \"optometrist\",\n                                                value: !user.optometrist\n                                            }\n                                        })}\n                                        isActive={user.optometrist}\n                                    />\n                                </Container>\n                            </ColContainer>\n                        </CustomerForm>\n                    )\n            }\n        </div>\n    )\n}\n\nexport default NewUserForm\n","import styled from 'styled-components'\nimport CustomButton from '../../components/custom-button/custom-button.component'\n\nimport { paddingStyles } from '../../global.styles'\n\nexport const Header = styled.div`\n    display: flex;\n    justify-content: space-between;\n\n    ${paddingStyles}\n    padding-top: 3rem;\n    padding-bottom: 3rem;\n`\n\nexport const DeleteProfileButton = styled(CustomButton)`\n    background-color: #DD4C4C;\n    font-size: 1.4rem;\n`\n\n\nexport const SaveButton = styled(CustomButton)`\n    margin-left: 2rem;\n    font-size: 1.4rem;\n    background-color: rgb(235, 172, 1);\n    font-weight: bolder;\n`\n","import React, { useContext, useEffect, useState } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { UserContext } from '../../context/user/user.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams, Prompt } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport UserForm from '../../components/user-form/user-form.component'\nimport NewUserForm from '../../components/new-user-form/new-user-form.component'\n\nimport Popup from '../../components/popup/pop-up.component'\n\nimport {\n    Header,\n    DeleteProfileButton,\n    // Name,\n    SaveButton,\n} from './customer-profile.styles'\n\nconst CustomerProfile = () => {\n    const { id } = useParams()\n    const { isAdmin } = useContext(AuthContext)\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal,\n    } = useContext(LoadingModalContext)\n\n    const {\n        isUpdating,\n        user,\n        getUser,\n        handleChange,\n        handleParameterChange,\n        handleCompanyChange,\n        updateUser,\n        resetUser,\n        formToShow,\n        switchFormButtons,\n        toggleUserForm,\n        createUser,\n    } = useContext(UserContext)\n\n    const [userObj, setUserObj] = useState({})\n    const [hasChanges, setHasChanges] = useState(false)\n\n    const handleUserChange = (e) => {\n        setHasChanges(true)\n        const { name, value } = e.target\n\n        handleChange(e)\n\n\n        if (value === '') {\n            delete userObj[name]\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            [name]: value\n        })\n    }\n\n    const handleLensesParameterChange = (e, idx) => {\n        setHasChanges(true)\n\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = Number(value)\n\n        handleParameterChange(e, idx)\n        setUserObj({\n            ...userObj,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleCompanyAddressChange = (e) => {\n        setHasChanges(true)\n\n        const { name, value } = e.target\n        handleCompanyChange(e)\n\n        console.log(value)\n\n        if (value === '') {\n            delete userObj.company[name]\n            if (Object.keys(userObj.company).length === 0) {\n                delete userObj[\"company\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            company: {\n                ...userObj.company,\n                [name]: value\n            }\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        setHasChanges(false)\n\n        if (id === 'novy-zakaznik') {\n            console.log(\"Create new user\")\n            if (userObj.fName || userObj.lName) {\n                delete userObj[\"fName\"]\n                delete userObj[\"lName\"]\n            }\n            createUser(userObj)\n        } else {\n            console.log(\"Update existing user\")\n            if (userObj.fName || userObj.lName) {\n                delete userObj[\"fName\"]\n                delete userObj[\"lName\"]\n            } else if (!userObj.fName || !userObj.lName) {\n                delete userObj[\"name\"]\n            }\n            updateUser(userObj, user._id)\n        }\n    }\n\n    useEffect(() => {\n        setUserObj({\n            ...userObj,\n            name: user.fName + \" \" + user.lName\n        })\n    }, [userObj.fName, userObj.lName])\n\n    useEffect(() => {\n        if (id !== 'novy-zakaznik') {\n            getUser(id)\n        }\n    }, [id])\n\n    useEffect(() => {\n        return () => {\n            console.log(\"UNMOUNT\")\n            resetUser()\n            handleChange({\n                target: {\n                    name: 'lenses',\n                    value: {\n                        cylinder: [1001, 1001, 1001, 1001],\n                        cylinderAxes: [1001, 1001, 1001, 1001],\n                        diopters: [1001, 1001, 1001, 1001],\n                        distance: [1001, 1001, 1001, 1001],\n                        addition: [1001, 1001, 1001, 1001],\n                        basis: [1001, 1001, 1001, 1001],\n                        prism: [1001, 1001, 1001, 1001],\n                    },\n                }\n            })\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            <Prompt\n                when={hasChanges}\n                message={\"Máte neuložené zmeny, chcete aj tak odísť ?\"}\n            />\n            <form onSubmit={handleSubmit}>\n                <Header>\n                    <h1>Profil</h1>\n                    <div>\n                        {isUpdating && <DeleteProfileButton>Vymazať</DeleteProfileButton>}\n                        <SaveButton type=\"submit\">\n                            {isUpdating ? \"Uložiť zmeny\" : \"Vytvoriť\"}\n                        </SaveButton>\n                    </div>\n                </Header>\n\n                <ScrollContainer>\n                    {\n                        isUpdating ? (\n                            <UserForm\n                                isAdmin={isAdmin}\n                                isUpdating={isUpdating}\n                                user={user}\n                                handleChange={handleUserChange}\n                                handleParameterChange={handleLensesParameterChange}\n                                handleCompanyChange={handleCompanyAddressChange}\n                            />\n                        ) : (\n                                <NewUserForm\n                                    isAdmin={isAdmin}\n                                    handleParameterChange={handleLensesParameterChange}\n                                    formToShow={formToShow}\n                                    switchFormButtons={switchFormButtons}\n                                    toggleUserForm={toggleUserForm}\n                                    user={user}\n                                    handleChange={handleUserChange}\n                                    handleCompanyChange={handleCompanyAddressChange}\n                                    resetUser={resetUser}\n\n                                />\n                            )\n                    }\n\n\n                </ScrollContainer>\n\n            </form>\n        </section>\n    )\n}\n\nexport default CustomerProfile\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styled from 'styled-components'\n\nexport const InputRow = styled.div`\n    display:flex;\n    align-items: center;\n\n    p {\n        margin-top: 1.8rem;\n        margin-left: 2rem;\n            opacity: .75;\n\n        span {\n            font-weight: 700;\n        }\n    }\n\n    @media all and (max-width: 800px) {\n        flex-direction: column-reverse;\n        align-items: flex-start;\n\n        p {\n            margin-left: unset;\n        }\n    }\n`","import React from 'react'\n\nimport { InputRow } from './product-input-row.styles'\n\nconst ProductInputRow = ({ children, label, example, ...otherprops }) => {\n    return (\n        <InputRow {...otherprops}>\n            <div>\n                {children}\n            </div>\n            <div>\n                <p>{label + \" \"}<span>{example}</span></p>\n            </div>\n        </InputRow>\n    )\n}\n\nexport default ProductInputRow\n"],"sourceRoot":""}