{"version":3,"sources":["components/user-form/user.form-styles.jsx","components/profile-order-overview/profile-order-overview.styles.jsx","components/profile-order-overview/profile-order-overview.component.jsx","components/examination-user/examination-user.styles.jsx","components/examination-user/examination-user.component.jsx","utils/parameters.utils.jsx","components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx","components/modal-optometrist-examination/modal-optometrist-examination.component.jsx","components/examinations-overview/examinations-overview.styles.jsx","components/examinations-overview/examinations-overview.component.jsx","components/user-form/user-form.component.jsx","components/custom-input/custom-input.styles.jsx","components/custom-input/custom-input.component.jsx","hooks/useFetch.jsx","components/scroll-container/scroll-container.styles.jsx","components/scroll-container/scroll-container.component.jsx","components/custom-checkbox/custom-checkbox.styles.jsx","components/custom-checkbox/custom-checkbox.component.jsx","components/custom-textarea/custom-textarea.styles.jsx","components/custom-textarea/custom-textarea.component.jsx","context/warehouse/warehouse.utils.jsx","context/user/user.queries.jsx","context/user/user.utils.jsx","context/user/user.context.jsx","components/product-input-row/product-input-row.styles.jsx","components/product-input-row/product-input-row.component.jsx","context/examination/examination.context.jsx","components/parameters-table/parameters-table.styles.jsx","components/parameters-table/parameters-table.component.jsx"],"names":["Profile","styled","div","GridContainer","ZeroMargin","GridRow","Row","Title","h2","Container","OrderHeader","OrderButton","CustomButton","AdminPanelContainer","CustomSelect","select","OrderContainer","OrderContent","Options","UpdateButton","OrderId","p","ProfileOrderOverview","id","handleUpdateClick","orderData","useFetchById","isLoading","order","response","dateData","Date","date","error","customId","toLocaleDateString","weekday","month","day","year","onClick","ExaminationUserContainer","ExaminationUser","userId","user","name","checkParameter","parametersArr","idx","length","checkParameterValue","value","ModalContainer","Modal","CloseButton","button","SubmitButton","ExamTypeCheckbox","CustomCheckbox","IsSuitableCheckbox","TwoColContainer","InputContainer","Table","ObjectiveRefTable","SubjectiveRefTable","RefractTable","KerathTable","SubjectiveRefATable","ContactLensesTable","ContactLensesTypeTable","ExamTable","TableTitleCol","TableCol","Col","isActive","clickable","OptometristExaminationModal","close","refetch","examinationToUpdate","examinationData","useContext","ExaminationContext","createExamination","updateExamination","useState","examinationObj","setExaminationObj","recomendation","setRecomendation","vlastne_okuliare","setVlastne_okuliare","objektivna_refrakcia","setObjektivna_refrakcia","subjektivna_refrakcia","setSubjektivna_refrakcia","refraktometer","setRefraktometer","keratometer","setKeratometer","subjektivna_refrakciaA","setSubjektivna_refrakciaA","kontaktne_sosovky","setKontaktne_sosovky","typ_kontaktnych_sosoviek","setTyp_kontaktnych_sosoviek","tabulka","setTabulka","activeExamType","setActiveExamType","handleParameterChange","e","parameterObj","updateParameter","target","arr","handleDomEye","num","paramObj","handleChange","console","log","domoko","prevValue","formatParameters","newParameters","map","parameter","changeNumber","toString","replace","isNaN","Number","formatParameter","useEffect","exam","type","examObj","refrakcia","doporucenia","anamneza","kontrola","ReactDOM","createPortal","examTypes","label","handleClick","nosi_od","posledna_korekcia","typ_sposob","vyhovuje","rows","dopl_info","Array","vnatur","onChange","onBlur","sph","cyl","ax","add","visus","vbino","se","prizma","basis","os","stav_a_povolanie","obj_nalez","hor","ver","bino","visd","bino1","visb","bino2","prvy","druhy","lkontrola","dop_roztok","vis","subj","obj","preventDefault","doneTo","document","getElementById","ExaminationsOverviewContainer","Header","ExaminationContainer","ExamHead","ExaminationOptions","AddButton","DeleteButton","ExaminationsOverview","params","useParams","deleteExamination","showOptometristModal","setShowOptometristModal","examinations","setExaminations","setExaminationToUpdate","exams","examination","doneBy","_id","handleDelete","UserForm","isAdmin","isUpdating","handleCompanyChange","isOptometrist","isOrder","push","useHistory","example","premises","retailNames","admin","optometrist","fName","lName","birthDate","email","phone","address","psc","city","country","company","ico","dic","parameters","lenses","handleAddOrderButtonClick","orders","reverse","slice","shrinkLabel","css","InputGroup","CustomInput","otherProps","className","htmlFor","useFetch","path","skip","method","setResponse","setError","message","setMessage","setIsLoading","refetchIndex","setRefetchIndex","prevRefetchIndex","requestOptions","redirect","a","fetch","process","res","json","data","fetchData","useFetchByQuery","queryObj","myHeaders","Headers","append","localStorage","getItem","raw","JSON","stringify","headers","body","paddingStyles","FixedContainer","ScrollContainer","children","CheckboxContainer","otherprops","CustomTextarea","initProductObj","description","price","brand","soldAmount","available","eanCode","image","eshop","link","category","initGlassesObj","colorCode","specs","frameColor","frameMaterial","frameStyle","lensColor","sex","size","initContactLensesObj","allowedCurves","allowedDiameters","dioptersRange","initLensesObj","cylinderRange","productCategories","premisesTabs","categoryTabs","formatPrice","includes","split","formatfloatNumber","number","formatAvailable","activePremisesTab","undefined","style","color","Math","abs","reduce","acc","currValue","dia","diaConvert","text","convertText","i","indexOf","charAt","formatLink","replaceAll","toLowerCase","trim","fetchUser","token","patchUser","postUser","postAdmin","password","initUserObj","boughtProducts","finishedRegistration","icdph","cylinder","cylinderAxes","diopters","distance","addition","prism","tempUser","totalSpent","watchList","confirmPassword","now","UserContext","createContext","activeIndex","handleChangeFilterItem","filterItems","totalCount","users","getUser","updateUser","resetUser","formToShow","switchFormButtons","toggleUserForm","createUser","getFilteredUsers","getUserByQuery","UserProvider","AuthContext","LoadingModalContext","closeModal","getMessage","setShowModal","setUser","setUsers","setIsUpdating","setActiveIndex","setFormToShow","refetchUser","addUser","messageSK","filters","filter","query","Provider","itemIndex","InputRow","ProductInputRow","ExaminationProvider","examsToAdd","examToUpdate","examId","TableContainer","TitleCol","OsContainer","ParametersTable","disabledInputs","checkParameters","toFixed","disabled"],"mappings":"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","file":"static/js/1.1b183ab3.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\n\nexport const Profile = styled.div`\n    padding: 2rem;\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    margin-right: 2rem;\n\n`\n\nexport const GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: start;\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n    }\n`\n\nexport const ZeroMargin = styled.div`\n    input {\n        margin-bottom: 0 !important;\n    }\n`\n\nexport const GridRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n`\n\n\nexport const ThreeColRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    align-items: center;\n\n    input {\n        margin-bottom: 0 !important;\n    }\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr 1fr;\n        grid-template-areas:\n            \"a a\"\n            \"b c\";\n\n        div:nth-child(1){\n            grid-area: a;\n            margin-bottom: 0;\n        }\n        div:nth-child(2){\n            grid-area: b;\n            margin-bottom: 2rem;\n\n        }\n        div:nth-child(3){\n            grid-area: c;\n            margin-bottom: 2rem;\n        }\n    }\n`\n\nexport const Row = styled.div`\n    width: 75%;\n`\n\n\nexport const Title = styled.h2`\n    margin-bottom: 2rem;\n`\n\nexport const Container = styled.div`\n    margin-top: 2rem;\n    \n`\n\nexport const OrderHeader = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n`\n\nexport const OrderButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    margin-top: .2rem;\n    font-size: 1.2rem;\n`\n\nexport const AdminPanelContainer = styled.div`\n    margin-bottom: 3rem;\n`\n\nexport const CustomSelect = styled.select`\n    margin-top: 1.5rem;\n    min-width: 16.5rem;\n    width: 100%;\n    background-color: var(--input-background-color);\n    color: var(--input-color);\n    border: none;\n    padding: .5rem .5rem .5rem 1rem;\n    font-size: inherit;\n    font-family: inherit;\n    display: block;\n`","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\nexport const OrderContainer = styled.div`\n    width: 100%;\n    /* display: grid;\n    grid-template-columns: 1fr 25rem; */\n\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n    padding: 2rem;\n\n    &:not(:last-child) {\n        margin-bottom: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n\n    }\n`\n\nexport const OrderContent = styled.div`\n    display: flex;\n    justify-content: space-between;\n    /* align-items: center; */\n    margin-bottom: 2rem;\n    h2 {\n        font-size: 1.6rem;\n    }\n`\n\nexport const Options = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n    /* align-self: end;\n    justify-self: end; */\n`\n\nexport const UpdateButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    font-size: 1.2rem;\n    /* margin-left: auto; */\n    display:block;\n\n`\n\nexport const DeleteButton = styled(CustomButton)`\n    font-size: 1.2rem;\n    /* background-color: rgb(235, 172, 1); */\n    background-color: #DD4C4C;\n    /* margin-bottom: 1rem; */\n    margin-left: 1rem;\n    display:block;\n\n`\n\nexport const OrderId = styled.p`\n    opacity: .83;\n    /* font-size: 1.2rem; */\n    /* color: gray; */\n    /* margin-bottom: 2rem; */\n`","import React from 'react'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    // DeleteButton,\n    Options,\n    OrderContainer,\n    OrderContent,\n    UpdateButton,\n    OrderId\n} from './profile-order-overview.styles'\n\nconst ProfileOrderOverview = ({ id, handleUpdateClick }) => {\n    const orderData = useFetchById('api/admin/orders', id, !id)\n\n    if (orderData.isLoading) return <OrderContainer>\n        <h3>Načítavam</h3>\n    </OrderContainer>\n\n    const { order } = orderData.response\n\n    const dateData = new Date(order?.date)\n\n    return (\n        <OrderContainer>\n            {orderData.response?.error === 'invalid-branch' ? <OrderContent>\n                <h2>Táto objednávka patri inej prevadzke</h2>\n            </OrderContent> : <OrderContent>\n                    <div>\n                        <h2>ID Objednávky</h2>\n                        <OrderId>{order?.customId}</OrderId>\n                    </div>\n                    <div>\n                        <p>{dateData.toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric', year: \"numeric\" })}</p>\n                    </div>\n                </OrderContent>}\n\n            {!orderData.response?.error && <Options>\n                <UpdateButton onClick={handleUpdateClick}>\n                    Zobraziť\n                </UpdateButton>\n                {/* <DeleteButton>\n                    Vymazať\n                </DeleteButton> */}\n            </Options>}\n\n        </OrderContainer>\n    )\n}\n\nexport default ProfileOrderOverview\n","import styled from 'styled-components'\n\nexport const ExaminationUserContainer = styled.div`\n    font-size: 1.4rem;\n\n    span {\n        font-weight: bolder\n    }\n`","import React from 'react'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    ExaminationUserContainer\n} from './examination-user.styles'\n\nconst ExaminationUser = ({ userId }) => {\n    const { isLoading, response } = useFetchById(\"api/admin/users\", userId)\n\n    return (\n        <ExaminationUserContainer>\n            <p>Vystavoval:</p> <span>{isLoading ? \"Hľadám...\" : response?.user?.name}</span>\n        </ExaminationUserContainer>\n    )\n}\n\nexport default ExaminationUser\n","\nexport const checkParameter = (parametersArr, idx) => {\n    if (parametersArr) {\n        if (parametersArr.length === 0) {\n            return \"\"\n        }\n        if (parametersArr[idx] === 1001) {\n            return \"\"\n        }\n        return parametersArr[idx]\n    } else {\n        return \"\"\n    }\n}\n\nexport const checkParameterValue = (value) => {\n    if (value) {\n        if (value === 0) {\n            return \"\"\n        }\n        if (value === 1001) {\n            return \"\"\n        }\n        return value\n    } else {\n        return \"\"\n    }\n}\n\n// check if valid number othervise return 1001\nexport const formatParameter = parameter => {\n    if (parameter) {\n        const changeNumber = parameter.toString().replace(',', '.')\n        return isNaN(changeNumber) ? 1001 : Number(changeNumber)\n    }\n}","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\n\nexport const ModalContainer = styled.div`\n    position: fixed;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: 99999;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    background-color: rgba(0,0,0,0.3);\n`\n\nexport const Modal = styled.div`\n    width:100%;\n    max-width: 65rem;\n    max-height: 60rem;\n    color: var(--primary-text-color);\n\n    overflow-y: scroll;\n\n    padding: 2rem;\n    border-radius: .5rem;\n    background-color: var(--background-primary-color);\n\n    position: relative;\n    z-index: 999999;\n\n    h3 {\n        margin-bottom: 2rem;\n    }\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n        background:  var(--background-primary-color);\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n        background: var(--primary-color);\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n        background: var(--primary-color);\n    }\n`\n\nexport const CloseButton = styled.button`\n    width: 100%;\n    height: 100%;\n\n    position: fixed;\n    left: 0;\n    right: 0;\n    z-index: 99999;\n\n    border: none;\n    outline: none;\n    opacity: 0;\n\n    &:focus {\n        outline: none\n    }\n`\n\nexport const SubmitButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    display: block;\n    margin: 2rem auto 0;\n`\n\nexport const Container = styled.div`\n    margin-bottom: 2rem;\n    h4 {\n        margin-bottom: 1rem;\n    }\n\n    div {\n    }\n`\n\nexport const ExamTypeCheckbox = styled(CustomCheckbox)`\n    margin-right: 1rem;\n`\n\nexport const IsSuitableCheckbox = styled(CustomCheckbox)`\n    margin-top: 2.2rem;\n`\n\nexport const TwoColContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 3rem;\n`\n\nexport const InputContainer = styled.div`\n    margin-bottom: 2rem;\n`\n\nexport const Table = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(7, 1fr);\n`\n\nexport const ObjectiveRefTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(4, 1fr);\n`\n\nexport const SubjectiveRefTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(9, 1fr);\n`\n\nexport const RefractTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(4, 1fr);\n`\nexport const KerathTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(2, 1fr);\n`\nexport const SubjectiveRefATable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(6, 1fr);\n`\nexport const ContactLensesTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(8, 1fr);\n`\nexport const ContactLensesTypeTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(4, 1fr);\n`\n\nexport const ExamTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(5, 1fr);\n`\n\nexport const TableTitleCol = styled.div`\n    padding: 1rem;\n`\n\nexport const TableCol = styled.div`\n\n`\n\nexport const Col = styled.div`\n    text-align: center;\n    margin: 1rem;\n    height: 4rem;\n    color: ${({ isActive }) => isActive ? \"var(--primary-color)\" : \"var(--input-color)\"};\n\n\n    input {\n        display:block;\n        width: 100%;\n        border: none;\n        padding: 1rem .5rem;\n        text-align: center;\n        font-family: inherit;\n        font-size: inherit;\n        background-color: var(--input-background-color);\n        color: var(--input-color);\n        border-radius: .5rem;\n        outline: none;\n        &:focus {\n            outline: none;\n        }\n        &:disabled {\n            opacity: .83;\n        }\n    }\n\n    /* clickable */\n\n    ${({ clickable }) => clickable && `\n        cursor: pointer;\n        \n        &:hover {\n            color: var(--primary-color);\n        }\n    `}\n`\n\nexport const TableBlock = styled.div`\n\n`","import React, { useState, useContext, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { ExaminationContext } from '../../context/examination/examination.context'\nimport { useFetchById } from '../../hooks/useFetch'\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    checkParameter,\n    formatParameter,\n    checkParameterValue\n} from '../../utils/parameters.utils'\n\nimport {\n    CloseButton,\n    Modal,\n    ModalContainer,\n    SubmitButton,\n    Container,\n    ExamTypeCheckbox,\n    TwoColContainer,\n    InputContainer,\n    IsSuitableCheckbox,\n    Col,\n    Table,\n    TableTitleCol,\n    TableCol,\n    // TableBlock,\n    ObjectiveRefTable,\n    SubjectiveRefTable,\n    ExamTable,\n    RefractTable,\n    KerathTable,\n    SubjectiveRefATable,\n    ContactLensesTable,\n    ContactLensesTypeTable\n} from './modal-optometrist-examination.styles'\n\nconst OptometristExaminationModal = ({ close, refetch, userId, examinationToUpdate }) => {\n    const examinationData = useFetchById('api/admin/exams', examinationToUpdate, !examinationToUpdate)\n\n    const { createExamination, updateExamination } = useContext(ExaminationContext)\n    const [examinationObj, setExaminationObj] = useState({})\n    const [recomendation, setRecomendation] = useState('')\n\n    //REFRAKCIA\n    const [vlastne_okuliare, setVlastne_okuliare] = useState({})\n    const [objektivna_refrakcia, setObjektivna_refrakcia] = useState({})\n    const [subjektivna_refrakcia, setSubjektivna_refrakcia] = useState({})\n\n\n    //ANAMNEZA\n    const [refraktometer, setRefraktometer] = useState({})\n    const [keratometer, setKeratometer] = useState({})\n    const [subjektivna_refrakciaA, setSubjektivna_refrakciaA] = useState({})\n    const [kontaktne_sosovky, setKontaktne_sosovky] = useState({})\n    const [typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek] = useState({})\n\n    //KONTROLA\n    const [tabulka, setTabulka] = useState({})\n\n    const [activeExamType, setActiveExamType] = useState(1)\n\n    const handleParameterChange = (e, idx, parameterObj, updateParameter) => {\n        const { name, value } = e.target\n        let arr = parameterObj[name] || [1001, 1001]\n        arr[idx] = value === '' ? 1001 : value\n\n        updateParameter({\n            ...parameterObj,\n            [name]: arr\n        })\n    }\n\n    const handleDomEye = (num, paramObj, handleChange) => {\n        console.log(paramObj)\n        if (paramObj?.domoko === num) {\n            handleChange(prevValue => ({\n                ...prevValue,\n                domoko: 0,\n            }))\n        } else {\n            handleChange(prevValue => ({\n                ...prevValue,\n                domoko: num,\n            }))\n        }\n    }\n\n    const handleChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete examinationObj[name]\n            setExaminationObj({\n                ...examinationObj,\n            })\n            return\n        }\n\n        setExaminationObj({\n            ...examinationObj,\n            [name]: value\n        })\n    }\n\n    const formatParameters = (e, newParameters, parameterObj, updateParameter) => {\n        if (newParameters) {\n            const { name } = e.target\n            updateParameter({\n                ...parameterObj,\n                [name]: newParameters.map(value => formatParameter(value))\n            })\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        let examObj = {\n            doneTo: userId,\n            type: activeExamType,\n            ...(recomendation !== \"\") && { doporucenia: recomendation }\n            // parameters: {\n            //     ...parameters\n            // }\n        }\n\n        if (activeExamType === 1) {\n            examObj = {\n                ...examObj,\n                refrakcia: {\n                    ...examinationObj,\n                    vlastne_okuliare: {\n                        ...vlastne_okuliare\n                    },\n                    objektivna_refrakcia: {\n                        ...objektivna_refrakcia\n                    },\n                    subjektivna_refrakcia: {\n                        ...subjektivna_refrakcia\n                    }\n                },\n            }\n        }\n\n        if (activeExamType === 2) {\n            examObj = {\n                ...examObj,\n                anamneza: {\n                    ...examinationObj,\n                    vlastne_okuliare: {\n                        ...vlastne_okuliare\n                    },\n                    refraktometer: {\n                        ...refraktometer\n                    },\n                    keratometer: {\n                        ...keratometer\n                    },\n                    subjektivna_refrakcia: {\n                        ...subjektivna_refrakciaA\n                    },\n                    kontaktne_sosovky: {\n                        ...kontaktne_sosovky\n                    },\n                    typ_kontaktnych_sosoviek: {\n                        ...typ_kontaktnych_sosoviek\n                    }\n                },\n            }\n        }\n\n        if (activeExamType === 3) {\n            examObj = {\n                ...examObj,\n                kontrola: {\n                    ...examinationObj,\n                    tabulka: {\n                        ...tabulka\n                    },\n                },\n            }\n        }\n\n        // console.log(\"EXAMINATION OBJECT BEFORE SEND\")\n        // console.log(examObj)\n\n        if (examinationToUpdate) {\n            delete examObj[\"doneTo\"]\n\n            updateExamination(examObj, examinationToUpdate)\n\n        } else {\n            createExamination(examObj)\n        }\n        refetch()\n        close()\n    }\n\n    useEffect(() => {\n        if (!!examinationToUpdate) return\n        setExaminationObj({})\n        setVlastne_okuliare({})\n        setObjektivna_refrakcia({})\n        setSubjektivna_refrakcia({})\n        setRefraktometer({})\n        setKeratometer({})\n        setSubjektivna_refrakciaA({})\n        setKontaktne_sosovky({})\n        setTyp_kontaktnych_sosoviek({})\n        setTabulka({})\n        setRecomendation('')\n    }, [activeExamType])\n\n    useEffect(() => {\n        if (!examinationData.isLoading) {\n            if (examinationData.response) {\n\n                if (examinationData.response?.exam?.type === 1) {\n                    let examObj = examinationData.response?.exam\n                    setVlastne_okuliare({\n                        ...examObj?.refrakcia?.vlastne_okuliare\n                    })\n                    setObjektivna_refrakcia({\n                        ...examObj?.refrakcia?.objektivna_refrakcia\n                    })\n                    setSubjektivna_refrakcia({\n                        ...examObj?.refrakcia?.subjektivna_refrakcia\n                    })\n\n                    setRecomendation(examObj?.doporucenia || \"\")\n                    setActiveExamType(examObj?.type)\n\n                    // delete examObj[\"refrakcia\"]\n                    delete examObj.refrakcia[\"vlastne_okuliare\"]\n                    delete examObj.refrakcia[\"objektivna_refrakcia\"]\n                    delete examObj.refrakcia[\"subjektivna_refrakcia\"]\n                    delete examObj[\"kontrola\"]\n                    delete examObj[\"anamneza\"]\n                    delete examObj[\"doneTo\"]\n                    delete examObj[\"doneBy\"]\n                    delete examObj[\"date\"]\n                    delete examObj[\"_id\"]\n                    delete examObj[\"__v\"]\n                    delete examObj[\"doporucenia\"]\n                    delete examObj[\"type\"]\n\n                    setExaminationObj({\n                        ...examObj?.refrakcia\n                    })\n                }\n\n                if (examinationData.response?.exam?.type === 2) {\n                    let examObj = examinationData.response?.exam\n                    setActiveExamType(examObj?.type)\n\n\n                    setVlastne_okuliare({\n                        ...examObj?.anamneza?.vlastne_okuliare\n                    })\n                    setRefraktometer({\n                        ...examObj?.anamneza?.refraktometer\n                    })\n                    setKeratometer({\n                        ...examObj?.anamneza?.keratometer\n                    })\n                    setSubjektivna_refrakciaA({\n                        ...examObj?.anamneza?.subjektivna_refrakcia\n                    })\n                    setKontaktne_sosovky({\n                        ...examObj?.anamneza?.kontaktne_sosovky\n                    })\n                    setTyp_kontaktnych_sosoviek({\n                        ...examObj?.anamneza?.typ_kontaktnych_sosoviek\n                    })\n\n                    setRecomendation(examObj?.doporucenia || \"\")\n\n                    delete examObj.anamneza[\"vlastne_okuliare\"]\n                    delete examObj.anamneza[\"refraktometer\"]\n                    delete examObj.anamneza[\"keratometer\"]\n                    delete examObj.anamneza[\"subjektivna_refrakcia\"]\n                    delete examObj.anamneza[\"kontaktne_sosovky\"]\n                    delete examObj.anamneza[\"typ_kontaktnych_sosoviek\"]\n                    delete examObj[\"kontrola\"]\n                    delete examObj[\"refrakcia\"]\n                    delete examObj[\"doneTo\"]\n                    delete examObj[\"doneBy\"]\n                    delete examObj[\"date\"]\n                    delete examObj[\"_id\"]\n                    delete examObj[\"__v\"]\n                    delete examObj[\"doporucenia\"]\n                    delete examObj[\"type\"]\n\n                    setExaminationObj({\n                        ...examObj?.anamneza\n                    })\n\n\n                }\n\n                if (examinationData.response?.exam?.type === 3) {\n                    let examObj = examinationData.response?.exam\n\n\n                    setActiveExamType(examObj?.type)\n\n                    setTabulka({\n                        ...examObj?.kontrola?.tabulka\n                    })\n\n                    setRecomendation(examObj?.doporucenia || \"\")\n\n                    delete examObj.kontrola[\"tabulka\"]\n                    delete examObj[\"anamneza\"]\n                    delete examObj[\"refrakcia\"]\n                    delete examObj[\"doneTo\"]\n                    delete examObj[\"doneBy\"]\n                    delete examObj[\"date\"]\n                    delete examObj[\"_id\"]\n                    delete examObj[\"__v\"]\n                    delete examObj[\"doporucenia\"]\n                    delete examObj[\"type\"]\n\n                    setExaminationObj({\n                        ...examObj?.kontrola\n                    })\n                }\n\n\n                // setParameters(examinationData.response?.exam?.parameters)\n                // setExaminationObj(examinationData.response?.exam)\n            }\n        }\n    }, [examinationToUpdate, examinationData.isLoading])\n\n    useEffect(() => {\n        return () => {\n            setExaminationObj({})\n            setExaminationObj({})\n            setVlastne_okuliare({})\n            setObjektivna_refrakcia({})\n            setSubjektivna_refrakcia({})\n            setRefraktometer({})\n            setKeratometer({})\n            setSubjektivna_refrakciaA({})\n            setKontaktne_sosovky({})\n            setTyp_kontaktnych_sosoviek({})\n            setTabulka({})\n            setRecomendation('')\n        }\n    }, [])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h3>Vyšetrenie</h3>\n                {!examinationToUpdate && <Container>\n                    <h4>Typ prehliadky</h4>\n                    <div>\n                        {examTypes.map((type, idx) => (\n                            <ExamTypeCheckbox\n                                key={idx}\n                                label={type.name}\n                                isActive={activeExamType === type.value}\n                                handleClick={() => setActiveExamType(type.value)}\n                            />\n                        ))}\n                    </div>\n                </Container>}\n\n                {activeExamType === 1 && (\n                    <Container>\n                        <h4>Refrakcia</h4>\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.nosi_od || \"\"}\n                                    type=\"date\"\n                                    name=\"nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.posledna_korekcia || \"\"}\n                                    type=\"date\"\n                                    name=\"posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'Typ, spôsob'}\n                                    value={examinationObj?.typ_sposob || \"\"}\n                                    type=\"text\"\n                                    name=\"typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examinationObj?.vyhovuje || false}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vyhovuje\",\n                                            value: examinationObj?.vyhovuje ? !examinationObj.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Anamnéza'\n                                name=\"anamneza\"\n                                value={examinationObj?.anamneza || ''}\n                                rows=\"5\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"dopl_info\"\n                                value={examinationObj?.dopl_info || \"\"}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='vnatur'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.vnatur, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='vbino'\n                                        type='text'\n                                        value={checkParameterValue(vlastne_okuliare?.vbino)}\n                                        onChange={e => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: Number(e.target.value)\n                                        }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Objektivná refrakcia</h4>\n\n                        <ObjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.sph, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.cyl, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.ax, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='se'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.se, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.se, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ObjectiveRefTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col isActive={subjektivna_refrakcia?.domoko === 1} clickable onClick={() => handleDomEye(1, subjektivna_refrakcia, setSubjektivna_refrakcia)}>P.</Col>\n                                <Col isActive={subjektivna_refrakcia?.domoko === 2} clickable onClick={() => handleDomEye(2, subjektivna_refrakcia, setSubjektivna_refrakcia)}>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.sph, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.cyl, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.ax, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.add, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.visus, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='vbino'\n                                        type='text'\n                                        value={checkParameterValue(subjektivna_refrakcia?.vbino)}\n                                        onChange={e => setSubjektivna_refrakcia(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: Number(e.target.value)\n                                        }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>PRIZMA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='prizma'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.prizma, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.prizma, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BASIS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='basis'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.basis, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.basis, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>OS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='os'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.os, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.os, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </SubjectiveRefTable>\n                    </Container>\n                )}\n\n                {activeExamType === 2 && (\n                    <Container>\n                        <h4>Anamnéza</h4>\n\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.nosi_od || \"\"}\n                                    type=\"date\"\n                                    name=\"nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.posledna_korekcia || \"\"}\n                                    type=\"date\"\n                                    name=\"posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'Typ, spôsob'}\n                                    value={examinationObj?.typ_sposob || \"\"}\n                                    type=\"text\"\n                                    name=\"typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examinationObj?.vyhovuje || false}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vyhovuje\",\n                                            value: examinationObj?.vyhovuje ? !examinationObj.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Stav a povolanie'\n                                name=\"stav_a_povolanie\"\n                                value={examinationObj?.stav_a_povolanie || ''}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"dopl_info\"\n                                value={examinationObj?.dopl_info || \"\"}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Obj. nález'\n                                name=\"obj_nalez\"\n                                value={examinationObj?.obj_nalez || ''}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='vnatur'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.vnatur, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='vbino'\n                                        type='text'\n                                        value={checkParameterValue(vlastne_okuliare?.vbino)}\n                                        onChange={e => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: Number(e.target.value)\n                                        }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Refraktometer</h4>\n\n                        <RefractTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onBlur={(e) => formatParameters(e, refraktometer?.sph, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onBlur={(e) => formatParameters(e, refraktometer?.cyl, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onBlur={(e) => formatParameters(e, refraktometer?.ax, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='se'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.se, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onBlur={(e) => formatParameters(e, refraktometer?.se, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </RefractTable>\n\n                        <h4>Keratometer</h4>\n\n                        <KerathTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>HOR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='hor'\n                                            type='text'\n                                            value={checkParameter(keratometer?.hor, idx)}\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onBlur={(e) => formatParameters(e, keratometer?.hor, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VER</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ver'\n                                            type='text'\n                                            value={checkParameter(keratometer?.ver, idx)}\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onBlur={(e) => formatParameters(e, keratometer?.ver, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </KerathTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefATable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.sph, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.cyl, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.ax, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.add, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.visus, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO</Col>\n                                <Col>\n                                    <input\n                                        name='bino'\n                                        type='text'\n                                        value={checkParameterValue(subjektivna_refrakciaA?.bino)}\n                                        onChange={e => setSubjektivna_refrakciaA(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        onBlur={(e) => setSubjektivna_refrakciaA(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: Number(e.target.value)\n                                        }))}\n                                    />\n                                </Col>\n                            </TableCol>\n\n                        </SubjectiveRefATable>\n\n                        <h4>Kontaktné šošovky</h4>\n\n                        <ContactLensesTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.sph, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.cyl, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.ax, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.add, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visd'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.visd, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visd, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO1</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='bino1'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.bino1, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino1, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISB</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visb'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.visb, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visb, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO2</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='bino2'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.bino2, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino2, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ContactLensesTable>\n\n\n                        <h4>Typ Kontaktných šošoviek</h4>\n\n                        <ContactLensesTypeTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>PRVÝ</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='prvy'\n                                            type='text'\n                                            value={checkParameter(typ_kontaktnych_sosoviek?.prvy, idx)}\n                                            onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            onBlur={(e) => formatParameters(e, typ_kontaktnych_sosoviek?.prvy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>DRUHÝ</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='druhy'\n                                            type='text'\n                                            value={checkParameter(typ_kontaktnych_sosoviek?.druhy, idx)}\n                                            onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            onBlur={(e) => formatParameters(e, typ_kontaktnych_sosoviek?.druhy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>L.KONTROLA</Col>\n                                <Col>\n                                    <input\n                                        name='lkontrola'\n                                        type='text'\n                                        value={typ_kontaktnych_sosoviek?.lkontrola || \"\"}\n                                        onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>DOP.ROZTOK</Col>\n                                <Col>\n                                    <input\n                                        name='dop_roztok'\n                                        type='text'\n                                        value={typ_kontaktnych_sosoviek?.dop_roztok || \"\"}\n                                        onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </ContactLensesTypeTable>\n                    </Container>\n                )}\n\n                {activeExamType === 3 && (\n                    <Container>\n                        <h4>Kontrola</h4>\n                        <InputContainer>\n                            <CustomInput\n                                label={'Typ kontaktných šošoviek'}\n                                value={examinationObj?.typ_kontaktnych_sosoviek || \"\"}\n                                type=\"text\"\n                                name=\"typ_kontaktnych_sosoviek\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <ExamTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(tabulka?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.sph, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(tabulka?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.cyl, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(tabulka?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.ax, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(tabulka?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.add, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VIS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='vis'\n                                            type='text'\n                                            value={checkParameter(tabulka?.vis, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onBlur={(e) => formatParameters(e, tabulka?.vis, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ExamTable>\n\n                        <InputContainer>\n                            <CustomInput\n                                label={'Subj.'}\n                                value={examinationObj?.subj || \"\"}\n                                type=\"text\"\n                                name=\"subj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <InputContainer>\n                            <CustomInput\n                                label={'Obj.'}\n                                value={examinationObj?.obj || \"\"}\n                                type=\"text\"\n                                name=\"obj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                    </Container>\n                )}\n\n                <InputContainer>\n                    <CustomTextarea\n                        label='Doporučenia'\n                        name=\"doporucenia\"\n                        value={recomendation}\n                        rows=\"5\"\n                        handleChange={(e) => setRecomendation(e.target.value)}\n                    />\n                </InputContainer>\n                {/* doporucenia */}\n\n                <SubmitButton onClick={handleSubmit}>{examinationToUpdate ? \"Uložiť\" : \"Odoslať prehliadku\"}</SubmitButton>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default OptometristExaminationModal\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"Anamnéza\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\nexport const ExaminationsOverviewContainer = styled.div`\n\n`\n\nexport const Header = styled.div`\n    margin-top: 2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    h2 {\n        margin: 2rem 0;\n    }\n`\n\nexport const ExaminationContainer = styled.div`\n    border-radius: .5rem;\n    padding: 2rem;\n    /* box-shadow: 0 0 1.5rem 0 rgba(0,0,0, 0.08); */\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n\n    margin-bottom: 2rem;\n`\n\nexport const ExamHead = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 2rem;\n`\n\nexport const ExamTableContainer = styled.div`\n    display: grid;\n    grid-template-columns: 3rem repeat(10, 1fr);\n    font-size: 1.2rem;  \n`\n\nexport const HeadTableCol = styled.div`\n    display: grid;\n    grid-template-rows: repeat(5, 5rem);\n    div {\n        align-self: center;\n        display:flex;\n        justify-content: space-between;\n    }\n`\n\nexport const TableCol = styled.div`\n    display: grid;\n    grid-template-rows: repeat(5, 5rem);\n\n    div {\n        text-align:center;\n        align-self: center;\n        margin-left: .5rem;\n\n        &:not(:first-child) {\n            background-color: var(--input-background-color);\n            padding: .5rem;\n            border-radius: .5rem;\n            min-height: 2.5rem;\n        }\n    }\n`\nexport const ExaminationOptions = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport const AddButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    font-size: 1.2rem;\n`\n\nexport const UpdateButton = styled(CustomButton)`\n    font-size: 1.2rem;\n`\n\nexport const DeleteButton = styled(CustomButton)`\n    font-size: 1.2rem;\n    background-color: var(--color-red);\n    margin-left: 1rem;\n\n`","import React, { useState, useEffect, useContext } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useFetchById } from '../../hooks/useFetch'\nimport { ExaminationContext } from '../../context/examination/examination.context'\n\nimport ExaminationUser from '../examination-user/examination-user.component'\nimport OptometristExaminationModal from '../modal-optometrist-examination/modal-optometrist-examination.component'\n\n// import {\n//     checkParameterValue\n// } from '../../utils/parameters.utils'\n\nimport {\n    ExaminationsOverviewContainer,\n    Header,\n    ExaminationContainer,\n    ExamHead,\n    // ExamTableContainer,\n    // HeadTableCol,\n    // TableCol,\n    ExaminationOptions,\n    AddButton,\n    UpdateButton,\n    DeleteButton\n} from './examinations-overview.styles'\n\nconst ExaminationsOverview = () => {\n    const params = useParams()\n    const examinationData = useFetchById(\"api/admin/exams/user\", params.id)\n    const { deleteExamination } = useContext(ExaminationContext)\n    const [showOptometristModal, setShowOptometristModal] = useState(false)\n    const [examinations, setExaminations] = useState([])\n    const [examinationToUpdate, setExaminationToUpdate] = useState(null)\n\n    const handleUpdateClick = (e, id) => {\n        e.preventDefault()\n        setExaminationToUpdate(id)\n        setShowOptometristModal(true)\n    }\n\n    const handleDelete = (e, id) => {\n        e.preventDefault()\n        deleteExamination(id)\n        examinationData.refetch()\n    }\n\n    const handleCloseModal = () => {\n        setShowOptometristModal(false)\n        setExaminationToUpdate(null)\n    }\n\n    useEffect(() => {\n        if (!examinationData.isLoading) {\n            if (examinationData.response) {\n                setExaminations(examinationData.response.exams)\n            }\n        }\n    }, [examinationData.isLoading])\n\n    return (\n        <ExaminationsOverviewContainer>\n            {showOptometristModal && <OptometristExaminationModal\n                userId={params.id}\n                examinationToUpdate={examinationToUpdate}\n                refetch={examinationData.refetch}\n                close={handleCloseModal}\n            />}\n            <Header>\n                <h2>Vyšetrenia</h2>\n                <div>\n                    <AddButton type='button' onClick={() => setShowOptometristModal(true)}>Pridať prehliadku</AddButton>\n                </div>\n            </Header>\n\n\n            <div>\n                {examinations && examinations.map((examination, idx) => (\n                    <ExaminationContainer key={idx}>\n                        <ExamHead>\n                            <h3>Dátum:</h3>\n                            <p>{new Date(examination?.date).toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric' })}</p>\n                        </ExamHead>\n                        <ExamHead>\n                            <h3>Typ vyšetrenia:</h3>\n                            <p>{examTypes[examination?.type - 1].name}</p>\n                        </ExamHead>\n\n                        <ExaminationOptions>\n                            <ExaminationUser userId={examination.doneBy} />\n                            <div>\n                                <UpdateButton onClick={e => handleUpdateClick(e, examination._id)}>Upraviť</UpdateButton>\n                                <DeleteButton onClick={e => handleDelete(e, examination._id)}>Vymazať</DeleteButton>\n                            </div>\n                        </ExaminationOptions>\n                    </ExaminationContainer>\n                ))}\n            </div>\n        </ExaminationsOverviewContainer>\n    )\n}\n\nexport default ExaminationsOverview\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"Anamnéza\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport ProfileOrderOverview from '../profile-order-overview/profile-order-overview.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\nimport ExaminationsOverview from '../examinations-overview/examinations-overview.component'\n\nimport {\n    retailNames\n} from '../../context/warehouse/warehouse.utils'\n\nimport {\n    Profile,\n    GridContainer,\n    GridRow,\n    Row,\n    // ThreeColRow,\n    ZeroMargin,\n    Title,\n    Container,\n    OrderHeader,\n    OrderButton,\n    CustomSelect,\n    AdminPanelContainer\n} from './user.form-styles'\n\nconst UserForm = ({\n    isAdmin,\n    isUpdating,\n    user,\n    handleChange,\n    handleParameterChange,\n    handleCompanyChange,\n    isOptometrist,\n    isOrder = false\n}) => {\n    const { push } = useHistory()\n\n    const handleAddOrderButtonClick = e => {\n        e.preventDefault()\n        push(`/dashboard/objednavky/${user._id}`)\n    }\n\n    return (\n        <GridContainer>\n            <Profile>\n                {isAdmin && <AdminPanelContainer>\n                    <h2>Admin panel</h2>\n                    <InputRow\n                        label=\"Predajňa na ktorej uživatel pracuje\"\n                        example=''\n                    >\n                        <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Nezadané</option>\n                            {\n                                retailNames.map((name, idx) => {\n                                    if (idx === 4) return\n                                    return (\n                                        <option key={idx} value={idx + 1}>{name}</option>\n                                    )\n                                })\n                            }\n                        </CustomSelect>\n                    </InputRow>\n                    <InputRow\n                        label=\"Výška administrativných práv\"\n                        example=\"\"\n                    >\n                        <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Zákaznik</option>\n                            <option value={1}>Predavač</option>\n                            <option value={2}>Vedúci</option>\n                        </CustomSelect>\n                    </InputRow>\n\n                    <Container>\n                        <CustomCheckbox\n                            label='Optometrista'\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"optometrist\",\n                                    value: !user.optometrist\n                                }\n                            })}\n                            isActive={user.optometrist}\n                        />\n                    </Container>\n                </AdminPanelContainer>}\n                <div>\n                    <h2>Informácie</h2>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                // label=\"Priezvisko*\"\n                                type='date'\n                                name='birthDate'\n                                value={user.birthDate}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </div>\n\n                <Container>\n                    <h2>Kontaktné údaje</h2>\n                    <Row>\n                        <div>\n                            <CustomInput\n                                label=\"E-mail*\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Telefónne číslo\"\n                                type='text'\n                                name='phone'\n                                value={user.phone ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </Row>\n                </Container>\n\n                <Container>\n                    <h2>Fakturačné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.address ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.psc ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.city ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.country ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>\n                <Container>\n                    <h2>Firemné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČO\"\n                                type='text'\n                                name='ico'\n                                value={user.company.ico ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"DIČ\"\n                                type='text'\n                                name='dic'\n                                value={user.company.dic ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.company.address ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.company.psc ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.company.city ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.company.country ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>\n\n                <Container>\n                    <h2>Parametre</h2>\n\n                    <ParametersTable\n                        parameters={user.lenses}\n                        handleChange={handleParameterChange}\n                    />\n                </Container>\n\n\n            </Profile>\n\n            {!isOrder && isUpdating && <div>\n                <OrderHeader>\n                    <Title>\n                        Objednávky\n                    </Title>\n                    <OrderButton onClick={e => handleAddOrderButtonClick(e)}>Pridať objednávku</OrderButton>\n                </OrderHeader>\n                <div>\n                    {user.orders.length > 0 ? user.orders.map((order, idx) => (\n                        <ProfileOrderOverview\n                            key={idx}\n                            id={order}\n                            handleUpdateClick={() => push(`/dashboard/objednavky/${user._id}/${order}`)}\n                        />\n                    )).reverse().slice(0, 5) : (\n                            <p>Žiadné objednávky</p>\n                        )}\n                </div>\n                {isOptometrist && <ExaminationsOverview />}\n            </div>}\n        </GridContainer>\n    )\n}\n\nexport default UserForm\n","import styled, { css } from \"styled-components\"\n\nconst shrinkLabel = css`\n    left: .5rem;\n    top: -14px;\n    font-size: 12px;\n    color: var(--input-color);\n`\nexport const InputGroup = styled.div`\n    position: relative;\n\n    /* margin: 45px 0; */\n\n    .form-input {\n        /* background: none; */\n        background-color: var(--input-background-color);\n        color: var(--input-color);\n        font-size: 1.5rem;\n        padding: 1rem .5rem 1rem 2rem;\n        display: block;\n        width: 100%;\n        border: none;\n        border-radius: .5rem;\n        /* border-bottom: 1px solid #000; */\n        margin: 2rem 0 0;\n        font-family: inherit;\n\n        &:focus {\n        outline: none;\n        }\n\n        &:focus ~ .form-input-label {\n            ${shrinkLabel}\n        }\n    }\n\n    input[type = 'password'] {\n        letter-spacing: 0.3em;\n    }\n\n    .form-input-label {\n        color: var(--input-color);\n        font-size: 1.4rem;\n        font-weight: normal;\n        position: absolute;\n        pointer-events: none;\n        left: 1.5rem;\n        top: 1rem;\n        transition: 300ms ease all;\n\n        &.shrink {\n            ${shrinkLabel}\n        }\n    }\n\n    @media all and (max-width: 500px) {\n        .form-input {\n            font-size: 1.4rem;\n        }\n        /* padding: 1rem .5rem 1rem 2rem; */\n    }\n`\n","import React from 'react'\n\nimport { InputGroup } from './custom-input.styles'\n\nconst CustomInput = ({ handleChange, label, name, ...otherProps }) => {\n    return (\n        <InputGroup>\n            <input\n                className='form-input'\n                name={name}\n                onChange={handleChange}\n                {...otherProps}\n            />\n            {label ? (\n                <label htmlFor={name} className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}>\n                    {label}\n                </label>\n            ) : null\n            }\n        </InputGroup>\n    )\n}\n\nexport default CustomInput","import { useEffect, useState } from 'react'\n\nexport const useFetch = (path, skip = false, method = \"GET\") => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [message, setMessage] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const requestOptions = {\n        method: method,\n        // headers: myHeaders,\n        // body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setMessage(data.message)\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n                setMessage(\"Niečo sa pokazilo\")\n            }\n        }\n        fetchData()\n    }, [refetchIndex])\n\n    return { response, isLoading, error, message, refetch }\n}\n\nexport const useFetchByQuery = (path, queryObj, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify(queryObj)\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path])\n\n    return { response, isLoading, error, refetch }\n}\n\nexport const useFetchById = (path, id, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}/${id}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path, id])\n\n    return { response, isLoading, error, refetch }\n}\n","import styled from 'styled-components'\nimport { paddingStyles } from '../../global.styles'\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    /* height: 100%; */\n    overflow-y: scroll;\n    overflow-x: visible;\n    scroll-behavior: smooth;\n    ${paddingStyles};\n    padding-top: 1.5rem;\n    padding-bottom: 1.5rem;\n    color: var(--primary-text-color);\n\n\n\n\n    @media all and (max-width: 1150px) {\n        margin-bottom: 8rem;\n    }\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n        background:  var(--background-primary-color);\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n        background: var(--primary-color);\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n        background: var(--primary-color);\n    }\n`\n\nexport const FixedContainer = styled.div`\n    max-width: 125rem;\n    width: 100%;\n`","import React from 'react'\nimport { Container, FixedContainer } from './scroll-container.styles'\n\nconst ScrollContainer = ({ children }) => {\n    return (\n        <Container>\n            <FixedContainer>\n                {children}\n            </FixedContainer>\n        </Container>\n    )\n}\n\nexport default ScrollContainer","import styled from 'styled-components'\n\nexport const CheckboxContainer = styled.div`\n    display: inline-block;\n    cursor: pointer;\n    font-size: 1.5rem;\n    font-weight: 700;\n    /* margin-right: 2rem; */\n    background-color: ${({ isActive }) => isActive ? \"var(--primary-color)\" : \"var(--body-background-primary-color)\"};\n    color: ${({ isActive }) => isActive ? \"var(--button-font-color)\" : \"var(--secondary-text-color)\"};\n    /* font-weight: ${({ isActive }) => isActive ? \"border\" : \"normal\"}; */\n    padding: .8rem 3rem;\n    border-radius: .2rem;\n    transition: all .2s ease-out;\n\n    @media all and (max-width: 500px) {\n        padding: 0.5rem 1.5rem;\n        font-size: 1.4rem;\n    }\n`","import React from 'react'\n\nimport { CheckboxContainer } from './custom-checkbox.styles'\n\nconst CustomCheckbox = ({ label, isActive, handleClick, ...otherprops }) => {\n    return (\n        <CheckboxContainer isActive={isActive} onClick={handleClick} {...otherprops}>\n            {label}\n        </CheckboxContainer>\n    )\n}\n\nexport default CustomCheckbox\n","import styled, { css } from \"styled-components\"\n\nconst shrinkLabel = css`\n    left: .5rem;\n    top: -14px;\n    font-size: 12px;\n    color: var(--input-color);\n`\nexport const InputGroup = styled.div`\n    position: relative;\n    /* margin: 45px 0; */\n\n    .form-input {\n        background: none;\n        background-color: var(--input-background-color);\n        color: var(--input-color);\n\n        font-size: 1.5rem;\n        padding: .5rem .5rem .5rem 2rem;\n        display: block;\n        width: 100%;\n        border: none;\n        border-radius: .5rem;\n        /* border-bottom: 1px solid #000; */\n        margin: 25px 0;\n        font-family: inherit;\n        resize: none;\n\n        &:focus {\n        outline: none;\n        }\n\n        &:focus ~ .form-input-label {\n            ${shrinkLabel}\n        }\n    }\n\n    .form-input-label {\n        color: var(--input-color);\n        font-size: 1.4rem;\n        font-weight: normal;\n        position: absolute;\n        pointer-events: none;\n        left: 1.5rem;\n        top: .6rem;\n        transition: 300ms ease all;\n\n        &.shrink {\n            ${shrinkLabel}\n        }\n    }\n`\n","import React from 'react'\n\nimport { InputGroup } from './custom-textarea.styles'\n\nconst CustomTextarea = ({ handleChange, label, name, ...otherProps }) => {\n    return (\n        <InputGroup>\n            <textarea\n                className='form-input'\n                name={name}\n                onChange={handleChange}\n                {...otherProps}\n            />\n            {label ? (\n                <label htmlFor={name} className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}>\n                    {label}\n                </label>\n            ) : null\n            }\n        </InputGroup>\n    )\n}\n\nexport default CustomTextarea","export const initProductObj = {\n    name: \"\",\n    description: \"\",\n    price: 0,\n    type: 0,\n    brand: \"\",\n    soldAmount: 0,\n    available: [0, 1001, 1001, 1001, 1001],\n    eanCode: \"\",\n    image: \"\",\n    eshop: true,\n    link: '',\n    category: ''\n}\n\nexport const initGlassesObj = {\n    colorCode: \"\",\n    specs: {\n        frameColor: \"\",\n        frameMaterial: \"\",\n        frameStyle: \"\",\n        lensColor: \"\",\n        sex: \"\",\n        size: [1001, 1001, 1001, 1001],\n    }\n}\n\nexport const initContactLensesObj = {\n    allowedCurves: [1001],\n    allowedDiameters: [1001],\n    dioptersRange: [1001, 1001]\n}\n\nexport const initLensesObj = {\n    id: \"\",\n    name: \"\",\n    description: \"\",\n    dioptersRange: [1001, 1001],\n    cylinderRange: [1001, 1001],\n    price: 0,\n    brand: \"\",\n    image: ''\n}\n\nexport const retailNames = [\n    \"Obchodná 57, Bratislava\",\n    \"Miletičova 38, Bratislava\",\n    \"Vajnory, Bratislava\",\n    \"Senica, OC Branč\",\n    \"Trnava, City Aréna\"\n]\n\n// Category variables\nexport const productCategories = [\n    {\n        name: \"Dioptrické\",\n        value: 1\n    },\n    {\n        name: \"Slnečné\",\n        value: 2\n    },\n    {\n        name: \"Kontaktné Šošovky\",\n        value: 3\n    },\n    {\n        name: \"Športové\",\n        value: 4\n    },\n    {\n        name: \"Doplnky\",\n        value: 5\n    },\n    {\n        name: \"Služby\",\n        value: 6\n    },\n    {\n        name: \"Šošovky\",\n        value: 0\n    },\n]\n\nexport const premisesTabs = [\n    {\n        id: 0,\n        name: \"Všetko\",\n        premises: 0,\n\n    },\n    {\n        id: 1,\n        name: \"Obchodná 57, Bratislava\",\n        premises: 1,\n    },\n    {\n        id: 2,\n        name: \"Miletičova 38, Bratislava\",\n        premises: 2,\n    },\n    {\n        id: 3,\n        name: \"Vajnory, Bratislava\",\n        premises: 3,\n    },\n    {\n        id: 4,\n        name: \"Senica, OC Branč\",\n        premises: 4,\n    },\n\n    // {\n    //     id: 5,\n    //     name: \"Trnava, City Aréna\",\n    //     permission: 5,\n    // },\n]\n\nexport const categoryTabs = [\n    {\n        id: 0,\n        name: \"Okuliare\",\n    },\n    {\n        id: 1,\n        name: \"Šosovky\",\n    },\n]\n\nexport const lensesBrands = [\n    \"Acuvue\",\n    \"Adore\",\n    \"Air Optix\",\n    \"Biofinity\",\n    \"Biomedics\",\n    \"Clariti\",\n    \"ColourVue\",\n    \"Comfilcon A\",\n    \"Dailies\",\n    \"Freshlook\",\n    \"Lenjoy\",\n    \"Proclear\",\n    \"Purevision\",\n    \"Soflens\",\n]\n\nexport const brands = [\n    \"Adidas\",\n    \"Armani Exchange\",\n    \"Arnette\",\n    \"Blackfin\",\n    \"Blumarine\",\n    \"Burberry\",\n    \"Bvlgari\",\n    \"Calvin Klein\",\n    \"Carolina Herrera\",\n    \"Carrera\",\n    \"David Beckham\",\n    \"Dior\",\n    \"Dolce & Gabbana\",\n    \"Elle\",\n    \"Emporio Armani\",\n    \"Esprit\",\n    \"Etnia Barcelona\",\n    \"Fendi\",\n    \"Fossil\",\n    \"Furla\",\n    \"Giorgio Armani\",\n    \"Givenchy\",\n    \"Gucci\",\n    \"Guess\",\n    \"H.I.S\",\n    \"Hawkers\",\n    \"Hugo Boss\",\n    \"Jaguar\",\n    \"Jimmy Choo\",\n    \"Lacoste\",\n    \"Liu Jo\",\n    \"Marc Jacobs\",\n    \"Max Mara\",\n    \"Max&Co\",\n    \"Meller\",\n    \"Mexx\",\n    \"Michael Kors\",\n    \"Moschino\",\n    \"Oakley\",\n    \"Persol\",\n    \"Polaroid\",\n    \"Police\",\n    \"Polo Ralph Lauren\",\n    \"Prada\",\n    \"Prada Linea Rossa\",\n    \"Ralph\",\n    \"Ralph Lauren\",\n    \"Ray-Ban\",\n    \"Salvatore Ferragamo\",\n    \"Smith\",\n    \"Strellson\",\n    \"Tiffany&Co.\",\n    \"Tom Ford\",\n    \"Tommy Hilfiger\",\n    \"Versace\",\n    \"Vogue\"\n]\n\nexport const formatPrice = price => {\n    let value = 0\n    if (price.includes(',')) {\n        if (price.split(',')[1].length === 1) {\n            value = price.split(',')[0] + price.split(',')[1] + \"0\"\n            return Number(value)\n        } else {\n            value = price.split(',')[0] + price.split(',')[1]\n            return Number(value)\n        }\n    } else {\n        return Number(price * 100)\n    }\n}\n\nexport const formatfloatNumber = number => {\n    let value = 0\n    if (number.includes(',')) {\n        value = number.split(',')[0] + '.' + number.split(',')[1]\n        return Number(value)\n    } else {\n        return Number(number)\n\n    }\n}\n\nexport const formatAvailable = (available, activePremisesTab) => {\n    if (available === undefined) return \"Šosovka\"\n    if (typeof available === \"number\") {\n        if (available < 0) {\n            return <>\n                <p style={{ color: \"var(--color-red)\" }}>0 ks</p>\n                <p style={{ color: \"var(--color-red)\" }}>Chýba {Math.abs(available)}</p>\n            </>\n        } else if (available === 0) {\n            return <p style={{ color: \"var(--color-red)\" }}>0 ks</p>\n        } else {\n            return `${available} ks`\n        }\n    } else {\n        if (activePremisesTab === 0) {\n            if (available.reduce((acc, currValue) => acc + currValue) < 0) {\n                return <p style={{ color: \"var(--color-red)\" }}>Všetky: 0 ks</p>\n            } else if (available.reduce((acc, currValue) => acc + currValue) === 0) {\n                return <p style={{ color: \"var(--color-red)\" }}>Všetky: 0 ks</p>\n            } else {\n                return `Všetky: ${available.reduce((acc, currValue) => acc + currValue)} ks`\n            }\n        } else {\n            if (available[activePremisesTab] < 0) {\n                return <>\n                    <p style={{ color: \"var(--color-red)\" }}>0 ks</p>\n                    <p style={{ color: \"var(--color-red)\" }}>Chýba {Math.abs(available[activePremisesTab])}</p>\n                </>\n            } else if (available[activePremisesTab] === 0) {\n                return <p style={{ color: \"var(--color-red)\" }}>0 ks</p>\n            } else {\n                return `${available[activePremisesTab]} ks`\n            }\n        }\n    }\n}\n\nexport const checkParameter = (parameter, idx) => {\n    if (parameter === undefined) return\n    if (parameter.length === 0) {\n        return \"\"\n    }\n    if (parameter[idx] === 1001) {\n        return \"\"\n    }\n\n    return parameter[idx].toString()\n}\n\nconst dia = \"áäčďéíľĺňóôŕšťúýžÁČĎÉÍĽĹŇÓŠŤÚÝŽ\";\nconst nodia = \"aacdeillnoorstuyzACDEILLNOSTUYZ\";\n\nexport const diaConvert = (text) => {\n    let convertText = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (dia.indexOf(text.charAt(i)) !== -1) {\n            convertText += nodia.charAt(dia.indexOf(text.charAt(i)));\n        }\n        else {\n            convertText += text.charAt(i);\n        }\n    }\n    return convertText;\n}\n\nexport const formatLink = (text) => {\n    return diaConvert(text).replaceAll(\" \", \"-\").toLowerCase().trim()\n}","export const fetchUsers = (token) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users`, requestOptions)\n\n}\n\nexport const fetchUser = (token, id) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n}\n\nexport const patchUser = (token, user, id) => {\n    // const {\n    //     _id: id,\n    //     address,\n    //     admin,\n    //     city,\n    //     country,\n    //     email,\n    //     lenses: {\n    //         cylinder,\n    //         cylinderAxes,\n    //         diopters,\n    //         distance,\n    //         addition,\n    //         basis,\n    //         prism,\n    //     },\n    //     name,\n    //     phone,\n    //     psc,\n    //     premises\n    // } = user\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const raw = JSON.stringify({\n        ...user\n        // address: address || undefined,\n        // admin: admin,\n        // premises: Number(premises) === 0 ? undefined : premises,\n        // city: city || undefined,\n        // country: country || undefined,\n        // email: email || undefined,\n        // lenses: {\n        //     cylinder: cylinder,\n        //     cylinderAxes: cylinderAxes,\n        //     diopters: diopters,\n        //     distance: distance,\n        //     addition: addition,\n        //     basis: basis,\n        //     prism: prism,\n        // },\n        // name: name,\n        // phone: phone || undefined,\n        // psc: psc || undefined,\n    })\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n}\n\nexport const postUser = (token, user) => {\n    const {\n        name,\n        email,\n    } = user\n\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const raw = JSON.stringify({\n        email: email,\n        name: name,\n    })\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\n}\n\nexport const postAdmin = (token, user) => {\n\n    const {\n        name,\n        email,\n        password,\n        premises,\n        admin\n    } = user\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const raw = JSON.stringify({\n        admin: Number(admin),\n        email: email,\n        name: name,\n        premises: Number(premises),\n        password\n    })\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\n}","export const initUserObj = {\n    address: \"\",\n    admin: 0,\n    premises: 0,\n    boughtProducts: {},\n    city: \"\",\n    country: \"\",\n    date: \"\",\n    email: \"\",\n    finishedRegistration: false,\n    company: {\n        ico: \"\",\n        dic: \"\",\n        icdph: \"\",\n        address: '',\n        psc: '',\n        country: '',\n    },\n    lenses: {\n        cylinder: [1001, 1001, 1001, 1001],\n        cylinderAxes: [1001, 1001, 1001, 1001],\n        diopters: [1001, 1001, 1001, 1001],\n        distance: [1001, 1001, 1001, 1001],\n        addition: [1001, 1001, 1001, 1001],\n        basis: [1001, 1001, 1001, 1001],\n        prism: [1001, 1001, 1001, 1001],\n    },\n    name: \"\",\n    orders: [],\n    phone: \"\",\n    psc: \"\",\n    tempUser: false,\n    totalSpent: 0,\n    watchList: [],\n    fName: \"\",\n    lName: \"\",\n    password: '',\n    confirmPassword: \"\",\n    birthDate: Date.now(),\n    optometrist: false\n\n}","import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n// import { OrderContext } from '../order/order.context'\n\nimport {\n    // fetchUsers,\n    fetchUser,\n    patchUser,\n    postAdmin,\n    postUser,\n} from './user.queries'\n\nimport {\n    initUserObj\n} from './user.utils'\n\nexport const UserContext = createContext({\n    isUpdating: false,\n    activeIndex: 0,\n    handleChangeFilterItem: () => { },\n    filterItems: [],\n    totalCount: 0,\n    users: null,\n    user: null,\n    // getUsers: () => { },\n    getUser: () => { },\n    handleChange: () => { },\n    handleParameterChange: () => { },\n    handleCompanyChange: () => { },\n    updateUser: () => { },\n    resetUser: () => { },\n    formToShow: 0,\n    switchFormButtons: [],\n    toggleUserForm: () => { },\n    createUser: () => { },\n    getFilteredUsers: () => { },\n    getUserByQuery: () => { },\n})\n\nconst UserProvider = ({ children }) => {\n    const { push } = useHistory()\n    const { token } = useContext(AuthContext)\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n    // ------------------------\n\n    const [user, setUser] = useState(initUserObj)\n    const [users, setUsers] = useState(null)\n    const [totalCount] = useState(0)\n\n    // ------------------------\n\n    const [isUpdating, setIsUpdating] = useState(false)\n    const [activeIndex, setActiveIndex] = useState(0)\n    const filterItems = [\n        {\n            id: 0,\n            name: \"Zákaznici\",\n            filter: 0,\n        },\n        {\n            id: 1,\n            name: \"Zamestnanci\",\n            filter: 1,\n        },\n        {\n            id: 2,\n            name: \"Vedúci\",\n            filter: 2,\n        },\n        // {\n        //     id: 3,\n        //     name: \"Velký brat\",\n        //     filter: 3,\n        // },\n        // {\n        //     id: 4,\n        //     name: \"Odstránené\",\n        //     filter: 3\n        // }\n    ]\n\n    // ------------------------\n\n    const [formToShow, setFormToShow] = useState(0)\n    const switchFormButtons = [\n        {\n            name: \"Zákazník\"\n        },\n        {\n            name: \"Zamestnanec\"\n        }\n    ]\n\n    const toggleUserForm = (e, idx) => {\n        e.preventDefault()\n        setFormToShow(idx)\n    }\n\n    // ------------------------\n\n\n    const handleChangeFilterItem = (itemIndex) => {\n        setActiveIndex(itemIndex)\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n\n        setUser({\n            ...user,\n            [name]: value\n        })\n    }\n\n    const handleParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value === '' ? 1001 : value\n        setUser({\n            ...user,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleCompanyChange = (e) => {\n        const { name, value } = e.target\n        setUser({\n            ...user,\n            company: {\n                ...user.company,\n                [name]: value\n            }\n        })\n    }\n\n    useEffect(() => {\n        setUser({\n            ...user,\n            name: user?.fName + \" \" + user?.lName\n        })\n    }, [user?.fName, user?.lName])\n\n    const resetUser = () => {\n        setUser(initUserObj)\n        setIsUpdating(false)\n        setFormToShow(0)\n    }\n\n    // ------------------------\n    // USER ACTIONS\n    // ------------------------\n\n    // Get all users\n    // const getUsers = async () => {\n    //     setIsLoading(true)\n    //     setShowModal(true)\n\n    //     try {\n    //         const response = await fetchUsers(token)\n    //         const data = await response.json()\n\n    //         console.log(data)\n    //         if (data.users) {\n    //             setUsers(data.users)\n    //             setTotalCount(data.count)\n    //             setIsLoading(false)\n    //             closeModal()\n\n    //         } else {\n    //             getMessage(data.message)\n    //             setIsLoading(false)\n    //         }\n    //     } catch (err) {\n    //         console.log(err)\n    //         getMessage(\"Nieco sa pokazilo\")\n    //         setIsLoading(false)\n    //     }\n    // }\n\n    // Get single user\n    const getUser = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n        setIsUpdating(true)\n\n        try {\n            const response = await fetchUser(token, id)\n            const data = await response.json()\n\n            if (data.user) {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                setIsLoading(false)\n                closeModal()\n\n            } else {\n                getMessage(data.message)\n                setIsLoading(false)\n            }\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // Update user\n    const updateUser = async (user, id, path, refetchUser, close, addUser) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await patchUser(token, user, id)\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.messageSK)\n                setIsLoading(false)\n                return\n            }\n\n\n            setIsLoading(false)\n            closeModal()\n\n            if (path === 'order') {\n                push(`/dashboard/objednavky/${id}`)\n            } else if (path === 'profile') {\n                push(`/dashboard/zakaznici/${id}`)\n            } else if (path === 'isOrder') {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n\n                addUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // refetchUser()\n                close()\n            } else {\n                push(\"/dashboard/zakaznici\")\n            }\n\n            getFilteredUsers({\n                filters: {\n                    admin: activeIndex\n                }\n            })\n            // http://localhost:1000/#/dashboard/zakaznici\n\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createUser = async (user, path) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            if (formToShow === 0) {\n                let data = {}\n                if (!user._id) {\n                    const response = await postUser(token, user)\n                    data = await response.json()\n\n                    if (data.error) {\n                        getMessage(data.message)\n\n                        if (data.type === 'email') {\n                            getMessage(\"Email existuje\")\n                        }\n                        if (data.error === 'format' && data.message.includes('email')) {\n                            getMessage(\"Email musi byt platny email\")\n                        }\n                        setIsLoading(false)\n                        return\n                    }\n\n                    setUser({\n                        ...data.user,\n                        _id: data.user._id\n                    })\n                }\n\n                const userId = data.user ? data.user._id : user._id\n\n                updateUser({\n                    ...user\n                }, userId, path)\n\n                // setIsLoading(false)\n                // getUsers()\n                // push('/dashboard/zakaznici')\n                // closeModal()\n\n            } else {\n                if (user.password !== user.confirmPassword) {\n                    getMessage(\"Heslá sa nezhodujú\")\n                    setIsLoading(false)\n                    return\n                }\n\n                const response = await postAdmin(token, user)\n                const data = await response.json()\n\n                if (data.error) {\n                    getMessage(data.message)\n                    setIsLoading(false)\n                    return\n                }\n\n                setIsLoading(false)\n                getFilteredUsers({\n                    filters: {\n                        admin: activeIndex\n                    }\n                })\n\n                push(\"/dashboard/zakaznici\")\n                closeModal()\n            }\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // ----------------------------------------------\n    // ----------------------------------------------\n    // ----------------------------------------------\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n\n    const getFilteredUsers = async (filter) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(filter)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getUserByQuery = async (query) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(query)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <UserContext.Provider\n            value={{\n                isUpdating,\n                activeIndex,\n                handleChangeFilterItem,\n                filterItems,\n                users,\n                user,\n                totalCount,\n                // getUsers,\n                getUser,\n                handleChange,\n                handleParameterChange,\n                handleCompanyChange,\n                updateUser,\n                resetUser,\n                formToShow,\n                switchFormButtons,\n                toggleUserForm,\n                createUser,\n                getFilteredUsers,\n                getUserByQuery,\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    )\n}\n\nexport default UserProvider","import styled from 'styled-components'\n\nexport const InputRow = styled.div`\n    display:flex;\n    align-items: center;\n\n    p {\n        margin-top: 1.8rem;\n        margin-left: 2rem;\n            opacity: .75;\n\n        span {\n            font-weight: 700;\n        }\n    }\n\n    @media all and (max-width: 800px) {\n        flex-direction: column-reverse;\n        align-items: flex-start;\n\n        p {\n            margin-left: unset;\n        }\n    }\n`","import React from 'react'\n\nimport { InputRow } from './product-input-row.styles'\n\nconst ProductInputRow = ({ children, label, example, ...otherprops }) => {\n    return (\n        <InputRow {...otherprops}>\n            <div>\n                {children}\n            </div>\n            <div>\n                <p>{label + \" \"}<span>{example}</span></p>\n            </div>\n        </InputRow>\n    )\n}\n\nexport default ProductInputRow\n","import React, { createContext, useContext } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\n\nexport const ExaminationContext = createContext({\n    createExamination: () => { },\n    updateExamination: () => { },\n    deleteExamination: () => { },\n})\n\nconst ExaminationProvider = ({ children }) => {\n    const { token } = useContext(AuthContext)\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const createExamination = async (examsToAdd) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(examsToAdd)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/exams/`, requestOptions)\n            const data = await response.json()\n\n\n            if (data.exam) {\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateExamination = async (examToUpdate, examId) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(examToUpdate)\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/exams/${examId}`, requestOptions)\n            const data = await response.json()\n\n\n            if (data.exam) {\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const deleteExamination = async (examId) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/exams/${examId}`, requestOptions)\n            const data = await response.json()\n\n            if (data.exam) {\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <ExaminationContext.Provider\n            value={{\n                createExamination,\n                updateExamination,\n                deleteExamination\n            }}\n        >\n            {children}\n        </ExaminationContext.Provider>\n    )\n}\n\nexport default ExaminationProvider","import styled from 'styled-components'\n\nexport const TableContainer = styled.div`\n    display: grid;\n    grid-template-columns: 2rem repeat(7, 7.5rem);\n    margin-bottom: 3rem;\n`\n\nexport const TitleCol = styled.div`\n    display: grid;\n    grid-template-rows: repeat(4, 5rem);\n    div {\n        align-self: center;\n        display:flex;\n        justify-content: space-between;\n    }\n`\n\nexport const Col = styled.div`\n    display: grid;\n    grid-template-rows: repeat(4, 5rem);\n    div {\n        text-align:center;\n        align-self: center;\n        margin-left: .5rem;\n\n\n        &:nth-child(1) {\n            align-self: center;\n        }\n\n        input {\n            display:block;\n            width: 100%;\n            border: none;\n            padding: 1rem .5rem;\n            text-align: center;\n            font-family: inherit;\n            font-size: inherit;\n            background-color: var(--input-background-color);\n            color: var(--input-color);\n            border-radius: .5rem;\n            outline: none;\n\n            &:focus {\n                outline: none;\n            }\n\n            &:disabled {\n                opacity: .83;\n            }\n        }\n\n        input[type=number]::-webkit-inner-spin-button, \n        input[type=number]::-webkit-outer-spin-button {  \n            opacity: 1;\n\n        }\n    }\n`\n\nexport const OsContainer = styled.div`\n        text-align:center;\n        align-self: center;\n        margin-left: .5rem;\n\n\n        &:nth-child(1) {\n            align-self: center;\n        }\n\n        input {\n            display:block;\n            width: 100%;\n            border: none;\n            padding: 1rem .5rem;\n            text-align: center;\n            font-family: inherit;\n            font-size: inherit;\n            background-color: var(--input-background-color);\n            color: var(--input-color);\n            border-radius: .5rem;\n            outline: none;\n\n            &:focus {\n                outline: none;\n            }\n        }\n\n        input[type=number]::-webkit-inner-spin-button, \n        input[type=number]::-webkit-outer-spin-button {  \n            display:none;\n            opacity: 0;\n\n        }\n`","import React, { useEffect } from 'react'\n\nimport {\n    TableContainer,\n    TitleCol,\n    Col,\n    OsContainer\n} from './parameters-table.styles'\n\nconst ParametersTable = ({ parameters, handleChange, disabledInputs = false }) => {\n    const checkParameters = (parameter, idx) => {\n        if (parameter.length === 0) {\n            return \"\"\n        }\n        if (parameter[idx] === 1001) {\n            return \"\"\n        }\n\n        return parameter[idx]\n    }\n\n    useEffect(() => {\n        if (handleChange) {\n            console.log(parameters)\n\n            if (parameters.addition[0] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))).toFixed(2)\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[0] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[1] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))).toFixed(2)\n                    }\n                }, 3)\n                return\n            }\n\n\n            if (parameters.addition[1] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 3)\n            }\n        }\n    }, [parameters.diopters[0], parameters.addition[0], parameters.diopters[1], parameters.addition[1]])\n\n    return (\n        <TableContainer>\n            <TitleCol>\n                <div>{\" \"}</div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n            </TitleCol>\n\n\n            <Col>\n                <div>sph</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.diopters, idx)}\n                                name=\"diopters\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>cyl</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.cylinder, idx)}\n                                name=\"cylinder\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>ax</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <OsContainer key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.cylinderAxes, idx)}\n                                name=\"cylinderAxes\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n\n                            />\n                        </OsContainer>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>PD</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.distance, idx)}\n                                name=\"distance\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>prizma</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.prism, idx)}\n                                name=\"prism\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>basis</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.basis, idx)}\n                                name=\"basis\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>addicia</div>\n\n                {[...Array(2)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.addition, idx)}\n                                name=\"addition\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n\n\n        </TableContainer>\n    )\n}\n\nexport default ParametersTable\n"],"sourceRoot":""}