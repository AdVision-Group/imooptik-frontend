{"version":3,"sources":["context/booking/booking.context.jsx","context/booking/booking.queries.jsx"],"names":["BookingContext","createContext","calendars","getCalendars","bookings","getBookings","bookingRows","getBookingRows","BookingProvider","children","useContext","LoadingModalContext","getMessage","setIsLoading","setShowModal","closeModal","useState","setCalendars","a","fetch","process","response","json","data","error","message","console","log","setBookings","setBookingRows","Provider","value"],"mappings":"sNASaA,EAAiBC,wBAAc,CACxCC,UAAW,KACXC,aAAc,aACdC,SAAU,KACVC,YAAa,aACbC,YAAa,KACbC,eAAgB,eAiILC,UA9HS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAMlCC,qBAAWC,KAJXC,EAFkC,EAElCA,WACAC,EAHkC,EAGlCA,aACAC,EAJkC,EAIlCA,aACAC,EALkC,EAKlCA,WALkC,EAWJC,mBAAS,MAXL,mBAW/Bd,EAX+B,KAWpBe,EAXoB,KAahCd,EAAY,uCAAG,8BAAAe,EAAA,6DACjBL,GAAa,GACbC,GAAa,GAFI,kBC5BdK,MAAM,GAAD,OAAIC,6BAAJ,2BD4BS,cAKPC,EALO,gBAMMA,EAASC,OANf,YAMPC,EANO,QAQJC,MARI,wBASTZ,EAAWW,EAAKE,SAChBZ,GAAa,GAVJ,2BAcTU,EAAKrB,YACLe,EAAaM,EAAKrB,WAClBW,GAAa,GACbE,KAGJH,EAAWW,EAAKE,SAChBZ,GAAa,GArBA,kDAuBba,QAAQC,IAAR,MACAf,EAAW,qBACXC,GAAa,GAzBA,0DAAH,qDAboB,EA6CNG,mBAAS,MA7CH,mBA6C/BZ,EA7C+B,KA6CrBwB,EA7CqB,KA+ChCvB,EAAW,uCAAG,8BAAAa,EAAA,6DAChBL,GAAa,GACbC,GAAa,GAFG,kBC3DbK,MAAM,GAAD,OAAIC,6BAAJ,0BD2DQ,cAKNC,EALM,gBAMOA,EAASC,OANhB,YAMNC,EANM,QAQHC,MARG,wBASRZ,EAAWW,EAAKE,SAChBZ,GAAa,GAVL,2BAcRU,EAAKnB,WACLwB,EAAYL,EAAKnB,UACjBS,GAAa,GACbE,KAGJH,EAAWW,EAAKE,SAChBZ,GAAa,GArBD,kDAuBZa,QAAQC,IAAR,MACAf,EAAW,qBACXC,GAAa,GAzBD,0DAAH,qDA/CqB,EA+EAG,mBAAS,MA/ET,mBA+E/BV,EA/E+B,KA+ElBuB,EA/EkB,KAiFhCtB,EAAc,uCAAG,8BAAAW,EAAA,6DACnBL,GAAa,GACbC,GAAa,GAFM,kBC1FhBK,MAAM,GAAD,OAAIC,6BAAJ,6BD0FW,cAKTC,EALS,gBAMIA,EAASC,OANb,YAMTC,EANS,QAQNC,MARM,wBASXZ,EAAWW,EAAKE,SAChBZ,GAAa,GAVF,2BAcXU,EAAKjB,cACLuB,EAAeN,EAAKjB,aACpBO,GAAa,GACbE,KAGJH,EAAWW,EAAKE,SAChBZ,GAAa,GArBE,kDAuBfa,QAAQC,IAAR,MACAf,EAAW,qBACXC,GAAa,GAzBE,0DAAH,qDA6BpB,OACI,cAACb,EAAe8B,SAAhB,CACIC,MAAO,CACH7B,YACAC,eACAC,WACAC,cACAC,cACAC,kBAPR,SAUKE","file":"static/js/16.cdf485a9.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n\nimport {\n    fetchCalendars,\n    fetchBookings,\n    fetchBookingRows\n} from './booking.queries'\n\nexport const BookingContext = createContext({\n    calendars: null,\n    getCalendars: () => { },\n    bookings: null,\n    getBookings: () => { },\n    bookingRows: null,\n    getBookingRows: () => { }\n})\n\nconst BookingProvider = ({ children }) => {\n    const {\n        getMessage,\n        setIsLoading,\n        setShowModal,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    // ------------------------\n    // CALENDAR ACTIONS\n    // ------------------------\n    const [calendars, setCalendars] = useState(null)\n\n    const getCalendars = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchCalendars()\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.message)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.calendars) {\n                setCalendars(data.calendars)\n                setIsLoading(false)\n                closeModal()\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // ------------------------\n    // BOOKINGS ACTIONS\n    // ------------------------\n    const [bookings, setBookings] = useState(null)\n\n    const getBookings = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchBookings()\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.message)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.bookings) {\n                setBookings(data.bookings)\n                setIsLoading(false)\n                closeModal()\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // ------------------------\n    // BOOKINGSROW ACTIONS\n    // ------------------------\n    const [bookingRows, setBookingRows] = useState(null)\n\n    const getBookingRows = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchBookingRows()\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.message)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.bookingRows) {\n                setBookingRows(data.bookingRows)\n                setIsLoading(false)\n                closeModal()\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <BookingContext.Provider\n            value={{\n                calendars,\n                getCalendars,\n                bookings,\n                getBookings,\n                bookingRows,\n                getBookingRows,\n            }}\n        >\n            {children}\n        </BookingContext.Provider>\n    )\n}\n\nexport default BookingProvider","\n\nexport const fetchCalendars = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/calendars`)\n}\nexport const fetchBookings = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/bookings`)\n}\nexport const fetchBookingRows = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/bookingRows`)\n}"],"sourceRoot":""}