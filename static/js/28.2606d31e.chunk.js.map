{"version":3,"sources":["context/booking/booking.context.jsx"],"names":["BookingContext","createContext","createCalendar","updateCalendar","deleteCalendar","createBooking","updateBooking","deleteBooking","createUserBooking","BookingProvider","children","push","useHistory","token","useContext","AuthContext","LoadingModalContext","getMessage","setIsLoading","setShowModal","closeModal","myHeaders","Headers","append","calendarToAdd","a","raw","JSON","stringify","requestOptions","method","headers","body","redirect","fetch","process","response","json","data","calendar","messageSK","console","log","calendarToUpdate","calendarId","bookingToAdd","booking","bookingToUpdate","bookingId","message","userBookingToAdd","refetchCalendar","close","refetchWeekCalendar","userBooking","Provider","value"],"mappings":"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","file":"static/js/28.2606d31e.chunk.js","sourcesContent":["import React, { createContext, useContext } from 'react'\r\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\r\nimport { AuthContext } from '../auth/auth.context'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport const BookingContext = createContext({\r\n    createCalendar: () => { },\r\n    updateCalendar: () => { },\r\n    deleteCalendar: () => { },\r\n    createBooking: () => { },\r\n    updateBooking: () => { },\r\n    deleteBooking: () => { },\r\n    createUserBooking: () => { },\r\n})\r\n\r\nconst BookingProvider = ({ children }) => {\r\n    const { push } = useHistory()\r\n    const { token } = useContext(AuthContext)\r\n    const {\r\n        getMessage,\r\n        setIsLoading,\r\n        setShowModal,\r\n        closeModal\r\n    } = useContext(LoadingModalContext)\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const createCalendar = async (calendarToAdd) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const raw = JSON.stringify(calendarToAdd);\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/calendars`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.calendar) {\r\n                setIsLoading(false)\r\n                closeModal()\r\n                push('/dashboard/rezervacie')\r\n                return\r\n            }\r\n\r\n            setIsLoading(false)\r\n            getMessage(data.messageSK)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Niečo sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const updateCalendar = async (calendarToUpdate, calendarId) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const raw = JSON.stringify(calendarToUpdate);\r\n\r\n        const requestOptions = {\r\n            method: 'PATCH',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/calendars/${calendarId}`, requestOptions)\r\n            const data = await response.json()\r\n\r\n\r\n            if (data.calendar) {\r\n                setIsLoading(false)\r\n                closeModal()\r\n                push('/dashboard/rezervacie')\r\n                return\r\n            }\r\n\r\n\r\n            setIsLoading(false)\r\n            getMessage(data.messageSK)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Niečo sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const deleteCalendar = async (calendarId) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const requestOptions = {\r\n            method: 'DELETE',\r\n            headers: myHeaders,\r\n            // body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/calendars/${calendarId}`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            setIsLoading(false)\r\n            getMessage(data.messageSK)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Niečo sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const createBooking = async (bookingToAdd) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const raw = JSON.stringify(bookingToAdd);\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/bookings`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.booking) {\r\n                setIsLoading(false)\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            setIsLoading(false)\r\n            getMessage(data.messageSK)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Niečo sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const updateBooking = async (bookingToUpdate, bookingId) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const raw = JSON.stringify(bookingToUpdate);\r\n\r\n        const requestOptions = {\r\n            method: 'PATCH',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/bookings/${bookingId}`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            setIsLoading(false)\r\n            getMessage(data.message)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Niečo sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const deleteBooking = async (bookingId) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const requestOptions = {\r\n            method: 'DELETE',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/bookings/${bookingId}`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            setIsLoading(false)\r\n            getMessage(data.message)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Niečo sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const createUserBooking = async (userBookingToAdd, refetchCalendar, close, refetchWeekCalendar) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const raw = JSON.stringify(userBookingToAdd);\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/userBookings`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.userBooking) {\r\n                setIsLoading(false)\r\n\r\n                refetchCalendar()\r\n                refetchWeekCalendar()\r\n                closeModal()\r\n                close()\r\n            }\r\n\r\n\r\n            setIsLoading(false)\r\n            getMessage(data.messageSK)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Niečo sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <BookingContext.Provider\r\n            value={{\r\n                createCalendar,\r\n                updateCalendar,\r\n                deleteCalendar,\r\n                createBooking,\r\n                updateBooking,\r\n                deleteBooking,\r\n                createUserBooking\r\n            }}\r\n        >\r\n            {children}\r\n        </BookingContext.Provider>\r\n    )\r\n}\r\n\r\nexport default BookingProvider"],"sourceRoot":""}