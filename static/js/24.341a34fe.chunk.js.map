{"version":3,"sources":["components/custom-form-switch/custom-form-switch.styles.jsx","components/custom-form-switch/custom-form-switch.component.jsx","components/new-user-form/new-user-form.styles.jsx","components/new-user-form/new-user-form.component.jsx","sections/customer-profile/customer-profile.styles.jsx","sections/customer-profile/customer-profile.section.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["Title","styled","h3","ToggleOptionsContainer","div","ToggleFormButton","CustomButton","isActive","CustomFormSwitch","title","activeIndex","handleClick","items","Fragment","map","item","idx","onClick","e","name","CustomSelect","select","CustomerForm","ColContainer","SectionTitle","h2","ZeroMargin","GridRow","Container","NewUserForm","formToShow","switchFormButtons","toggleUserForm","user","handleChange","isAdmin","handleParameterChange","handleCompanyChange","label","type","value","fName","lName","email","phone","example","birthDate","parameters","lenses","address","psc","city","country","company","ico","dic","icdph","password","confirmPassword","premises","onChange","retailNames","admin","target","optometrist","Header","paddingStyles","DeleteProfileButton","SaveButton","CustomerProfile","id","useParams","useContext","AuthContext","isOptometrist","LoadingModalContext","closeModal","isLoading","message","showModal","UserContext","isUpdating","getUser","updateUser","resetUser","createUser","deleteUser","useState","userObj","setUserObj","handleUserChange","handleLensesParameterChange","arr","handleCompanyAddressChange","Object","keys","length","handleSubmit","path","preventDefault","newUserObj","_id","useEffect","cylinder","cylinderAxes","diopters","distance","addition","basis","prism","loading","close","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/24.341a34fe.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport CustomButton from '../../components/custom-button/custom-button.component'\n\nexport const Title = styled.h3`\n    margin-top: 2rem;\n    /* margin-bottom: 2rem; */\n`\n\nexport const ToggleOptionsContainer = styled.div`\n    display: flex;\n    margin: 2rem 0;\n`\n\nexport const ToggleFormButton = styled(CustomButton)`\n    background-color: ${({ isActive }) => isActive ? \"rgb(235, 172, 1)\" : \"#000\"};\n    font-weight: 700;\n    margin-right: 2rem;\n`","import React from 'react'\n\nimport {\n    Title,\n    ToggleFormButton,\n    ToggleOptionsContainer\n} from './custom-form-switch.styles'\n\nconst CustomFormSwitch = ({ title, activeIndex, handleClick, items }) => {\n    return (\n        <React.Fragment>\n            <Title>{title}</Title>\n            <ToggleOptionsContainer>\n                {\n                    items.map((item, idx) => (\n                        <ToggleFormButton key={idx} isActive={activeIndex === idx} onClick={(e) => handleClick(e, idx)}>{item.name}</ToggleFormButton>\n                    ))\n                }\n            </ToggleOptionsContainer>\n        </React.Fragment>\n    )\n}\n\nexport default CustomFormSwitch\n","import styled from \"styled-components\"\n\nexport const CustomSelect = styled.select`\n    margin-top: 1.5rem;\n    min-width: 16.5rem;\n    width: 100%;\n    background-color: var(--input-background-color);\n    color: var(--input-color);\n    border: none;\n    padding: .5rem .5rem .5rem 1rem;\n    font-size: inherit;\n    font-family: inherit;\n    display: block;\n\n        margin-bottom: 2rem;\n`\n\n\nexport const CustomerForm = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 50rem;\n    grid-gap: 2rem;\n    align-items: start;\n`\n\nexport const ColContainer = styled.div`\n    padding: 2rem;\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n`\n\nexport const SectionTitle = styled.h2`\n    margin-bottom: 2rem;\n`\n\nexport const ZeroMargin = styled.div`\n    input {\n        margin-bottom: 0 !important;\n    }\n`\n\nexport const GridRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    max-width: 50rem;\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n`\nexport const Container = styled.div`\n    margin-top: 2rem;\n`","import React from 'react'\n\nimport CustomFormSwitch from '../custom-form-switch/custom-form-switch.component'\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from \"../custom-checkbox/custom-checkbox.component\"\n\nimport {\n    retailNames\n} from '../../utils/warehouse.utils'\n\nimport {\n    CustomSelect,\n    Container,\n    GridRow,\n    ZeroMargin,\n    ColContainer,\n    CustomerForm,\n    SectionTitle\n} from './new-user-form.styles'\n\n\nconst NewUserForm = ({\n    formToShow,\n    switchFormButtons,\n    toggleUserForm,\n    user,\n    handleChange,\n    isAdmin,\n    handleParameterChange,\n    handleCompanyChange\n}) => {\n\n    return (\n        <div>\n            {/* Akého uživatela chcete vytvoriť? */}\n            {isAdmin && <CustomFormSwitch\n                items={switchFormButtons}\n                title=\"Akého uživatela chcete vytvoriť ?\"\n                activeIndex={formToShow}\n                handleClick={toggleUserForm}\n            />}\n\n            {\n                formToShow === 0 ? (\n                    <CustomerForm>\n                        <ColContainer>\n                            <h2>Informácie</h2>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"E-mail*\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Telefónne číslo\"\n                                type='text'\n                                name='phone'\n                                value={user.phone ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <InputRow\n                                label=\"Dátum narodenia\"\n                                example=''\n                            >\n                                <CustomInput\n                                    // label=\"Priezvisko*\"\n                                    type='date'\n                                    name='birthDate'\n                                    value={user.birthDate}\n                                    handleChange={(e) => handleChange(e)}\n                                />\n                            </InputRow>\n\n                            <Container>\n                                <h2>Parametre</h2>\n\n                                <ParametersTable\n                                    parameters={user.lenses}\n                                    handleChange={handleParameterChange}\n                                />\n                            </Container>\n                        </ColContainer>\n\n                        <ColContainer>\n                            <div>\n                                <h2>Fakturačné údaje</h2>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"Ulica a čislo domu\"\n                                            type='text'\n                                            name='address'\n                                            value={user.address ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"PSČ\"\n                                            type='text'\n                                            name='psc'\n                                            value={user.psc ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Mesto\"\n                                            type='text'\n                                            name='city'\n                                            value={user.city ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Krajina\"\n                                            type='text'\n                                            name='country'\n                                            value={user.country ?? \"\"}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </div>\n\n                            <Container>\n                                <h2>Firemné údaje</h2>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"IČO\"\n                                            type='text'\n                                            name='ico'\n                                            value={user.company.ico ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"DIČ\"\n                                            type='text'\n                                            name='dic'\n                                            value={user.company.dic ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"IČ DPH\"\n                                            type='text'\n                                            name='icdph'\n                                            value={user.company.icdph ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        {/* <CustomInput\n                                            label=\"IČ DPH\"\n                                            type='text'\n                                            name='icdph'\n                                            value={user.company.icdph ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        /> */}\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"Ulica a čislo domu\"\n                                            type='text'\n                                            name='address'\n                                            value={user.company.address ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"PSČ\"\n                                            type='text'\n                                            name='psc'\n                                            value={user.company.psc ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Mesto\"\n                                            type='text'\n                                            name='city'\n                                            value={user.company.city ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Krajina\"\n                                            type='text'\n                                            name='country'\n                                            value={user.company.country ?? \"\"}\n                                            handleChange={(e) => handleCompanyChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </Container>\n                        </ColContainer>\n\n                    </CustomerForm>\n                ) : (\n                    <CustomerForm>\n\n                        <ColContainer>\n                            <h2>Informácie</h2>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"E-mail*\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Heslo*\"\n                                type='password'\n                                name='password'\n                                value={user.password ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                            <CustomInput\n                                label=\"Potvrď heslo*\"\n                                type='password'\n                                name='confirmPassword'\n                                value={user.confirmPassword ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ColContainer>\n\n                        <ColContainer>\n                            <SectionTitle>Admin privilégiá</SectionTitle>\n                            <div>\n                                <h4>Predajňa na ktorej zamestnanec pracuje</h4>\n                                <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                                    <option value={0}>Nezadané</option>\n                                    {retailNames.map((name, idx) => {\n                                        if (idx === 0) return\n                                        return (\n                                            <option key={idx} value={idx}>{name}</option>\n\n                                        )\n                                    })}\n                                </CustomSelect>\n\n                            </div>\n                            <div>\n                                <h4>Výška administrativných práv</h4>\n                                <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                                    {/* <option value={0}>Zákaznik</option> */}\n                                    <option value={1}>Zamestnanec</option>\n                                    <option value={2}>Vedúci</option>\n                                </CustomSelect>\n\n                            </div>\n                            <Container>\n                                <CustomCheckbox\n                                    label='Optometrista'\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"optometrist\",\n                                            value: !user.optometrist\n                                        }\n                                    })}\n                                    isActive={user.optometrist}\n                                />\n                            </Container>\n                        </ColContainer>\n                    </CustomerForm>\n                )\n            }\n        </div>\n    )\n}\n\nexport default NewUserForm\n","import styled from 'styled-components'\nimport CustomButton from '../../components/custom-button/custom-button.component'\n\nimport { paddingStyles } from '../../global.styles'\n\nexport const Header = styled.div`\n    ${paddingStyles}\n    padding-top: 3rem;\n    padding-bottom: 3rem;\n\n    color: var(--primary-text-color);\n`\n\nexport const DeleteProfileButton = styled(CustomButton)`\n    background-color: var(--color-red);\n    font-size: 1.4rem;\n    margin-left: 2rem;\n`\n\n\nexport const SaveButton = styled(CustomButton)`\n    margin-left: 2rem;\n    font-size: 1.4rem;\n    background-color: var(--primary-color);\n    font-weight: bolder;\n`","import React, { useContext, useEffect, useState } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { UserContext } from '../../context/user/user.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport UserForm from '../../components/user-form/user-form.component'\nimport NewUserForm from '../../components/new-user-form/new-user-form.component'\n\nimport Popup from '../../components/popup/pop-up.component'\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    DeleteProfileButton,\n    // Name,\n    SaveButton,\n} from './customer-profile.styles'\n\nconst CustomerProfile = () => {\n    const { id } = useParams()\n    const { isAdmin, isOptometrist } = useContext(AuthContext)\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal,\n    } = useContext(LoadingModalContext)\n\n    const {\n        isUpdating,\n        user,\n        getUser,\n        handleChange,\n        handleParameterChange,\n        handleCompanyChange,\n        updateUser,\n        resetUser,\n        formToShow,\n        switchFormButtons,\n        toggleUserForm,\n        createUser,\n        deleteUser\n    } = useContext(UserContext)\n\n    const [userObj, setUserObj] = useState({})\n    // const [hasChanges, setHasChanges] = useState(false)\n\n    const handleUserChange = (e) => {\n        // setHasChanges(true)\n        const { name, value } = e.target\n\n        handleChange(e)\n\n\n        if (value === '') {\n            delete userObj[name]\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            [name]: value\n        })\n    }\n\n    const handleLensesParameterChange = (e, idx) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value\n\n\n        handleParameterChange(e, idx)\n        setUserObj({\n            ...userObj,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n\n    const handleCompanyAddressChange = (e) => {\n        // setHasChanges(true)\n\n        const { name, value } = e.target\n        handleCompanyChange(e)\n\n        if (value === '') {\n            delete userObj.company[name]\n            if (Object.keys(userObj.company).length === 0) {\n                delete userObj[\"company\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setUserObj({\n            ...userObj,\n            company: {\n                ...userObj.company,\n                [name]: value\n            }\n        })\n    }\n\n    const handleSubmit = (e, path) => {\n        e.preventDefault()\n        // setHasChanges(false)\n\n        if (id === 'novy-zakaznik') {\n            if (userObj.fName || userObj.lName) {\n                delete userObj[\"fName\"]\n                delete userObj[\"lName\"]\n            }\n\n            if (formToShow === 1) {\n                const newUserObj = {\n                    ...userObj,\n                    admin: userObj.admin || 1\n                }\n                createUser(newUserObj, path)\n                return\n            }\n            createUser(userObj, path)\n        } else {\n            if (userObj.fName || userObj.lName) {\n                delete userObj[\"fName\"]\n                delete userObj[\"lName\"]\n            } else if (!userObj.fName || !userObj.lName) {\n                delete userObj[\"name\"]\n            }\n\n            if (userObj.company) {\n                const newUserObj = {\n                    ...userObj,\n                    company: {\n                        ...user.company,\n                        ...userObj.company\n                    }\n                }\n                updateUser(newUserObj, user._id)\n                return\n            }\n            updateUser(userObj, user._id)\n        }\n    }\n\n    useEffect(() => {\n        setUserObj({\n            ...userObj,\n            name: user.fName + \" \" + user.lName\n        })\n    }, [userObj.fName, userObj.lName])\n\n    useEffect(() => {\n        if (id !== 'novy-zakaznik') {\n            getUser(id)\n        }\n    }, [id])\n\n    //unmount\n    useEffect(() => {\n        return () => {\n            resetUser()\n            handleChange({\n                target: {\n                    name: 'lenses',\n                    value: {\n                        cylinder: [1001, 1001, 1001, 1001],\n                        cylinderAxes: [1001, 1001, 1001, 1001],\n                        diopters: [1001, 1001, 1001, 1001],\n                        distance: [1001, 1001, 1001, 1001],\n                        addition: [1001, 1001, 1001, 1001],\n                        basis: [1001, 1001, 1001, 1001],\n                        prism: [1001, 1001, 1001, 1001],\n                    },\n                }\n            })\n        }\n    }, [])\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            {/* <Prompt\n                when={hasChanges}\n                message={\"Chcete opustiť tuto stránku?\"}\n            /> */}\n            <form>\n                <Header>\n                    <FixedContainer>\n                        <h1>Profil</h1>\n                        <div>\n                            {isUpdating && <DeleteProfileButton onClick={() => deleteUser(user._id)} type='button'>Vymazať</DeleteProfileButton>}\n                            {!isUpdating && <SaveButton onClick={(e) => handleSubmit(e, 'profile')}>Vytvoriť a prejsť na profil</SaveButton>}\n                            {!isUpdating && !(formToShow === 1) && <SaveButton onClick={(e) => handleSubmit(e, 'order')}>Vytvoriť a prejsť na objednávku</SaveButton>}\n                            <SaveButton onClick={(e) => handleSubmit(e, 'customers')}>\n                                {isUpdating ? \"Uložiť zmeny\" : \"Vytvoriť\"}\n                            </SaveButton>\n                        </div>\n\n                    </FixedContainer>\n                </Header>\n\n                <ScrollContainer>\n                    {\n                        isUpdating ? (\n                            <UserForm\n                                user={user}\n                                isAdmin={isAdmin}\n                                isUpdating={isUpdating}\n                                isOptometrist={isOptometrist}\n                                handleChange={handleUserChange}\n                                handleParameterChange={handleLensesParameterChange}\n                                handleCompanyChange={handleCompanyAddressChange}\n                            />\n                        ) : (\n                            <NewUserForm\n                                isAdmin={isAdmin}\n                                handleParameterChange={handleLensesParameterChange}\n                                formToShow={formToShow}\n                                switchFormButtons={switchFormButtons}\n                                toggleUserForm={toggleUserForm}\n                                user={user}\n                                handleChange={handleUserChange}\n                                handleCompanyChange={handleCompanyAddressChange}\n                                resetUser={resetUser}\n\n                            />\n                        )\n                    }\n\n\n                </ScrollContainer>\n\n            </form>\n        </section>\n    )\n}\n\nexport default CustomerProfile\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}