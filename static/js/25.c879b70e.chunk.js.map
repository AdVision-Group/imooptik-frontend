{"version":3,"sources":["context/examination/examination.context.jsx"],"names":["ExaminationContext","createContext","createExamination","updateExamination","deleteExamination","useExaminationContext","useContext","ExaminationProvider","children","fetchData","useFetchContext","LoadingModalContext","closeModal","getMessage","setIsLoading","setShowModal","examToUpdate","examId","a","callback","data","console","log","exam","messageSK","Provider","value","examsToAdd","examSchema"],"mappings":"iyEAMaA,G,MAAqBC,wBAAc,CAC5CC,kBAAmB,aACnBC,kBAAmB,aACnBC,kBAAmB,gBAGVC,EAAwB,kBAAMC,qBAAWN,IA4FvCO,UA1Fa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnBC,EAAcC,cAAdD,UADkC,EAQtCH,qBAAWK,KAJXC,EAJsC,EAItCA,WACAC,EALsC,EAKtCA,WACAC,EANsC,EAMtCA,aACAC,EAPsC,EAOtCA,aA6BEZ,EAAiB,uCAAG,WAAOa,EAAcC,GAArB,2BAAAC,EAAA,sDAA6BC,EAA7B,+BAAwC,aAC9DL,GAAa,GACbC,GAAa,GAEbN,EAAU,oBAAD,OAAqBQ,GAAUD,GAAc,SAACI,GAKnD,GAJAC,QAAQC,IAAI,8BACZD,QAAQC,IAAIF,GACZN,GAAa,GAETM,EAAKG,KAGL,OAFAJ,EAASC,QACTR,IAIJC,EAAWO,EAAKI,WAChBV,GAAa,KACd,SAjBmB,2CAAH,wDAqBjBV,EAAiB,uCAAG,WAAOa,GAAP,2BAAAC,EAAA,sDAAeC,EAAf,+BAA0B,aAChDL,GAAa,GACbC,GAAa,GAEbN,EAAU,oBAAD,OAAqBQ,GAAU,MAAM,SAACG,GAK3C,GAJAC,QAAQC,IAAI,8BACZD,QAAQC,IAAIF,GACZN,GAAa,GAETM,EAAKG,KAGL,OAFAJ,EAASC,QACTR,IAIJC,EAAWO,EAAKI,WAChBV,GAAa,KACd,UAjBmB,2CAAH,sDAoBvB,OACI,cAACd,EAAmByB,SAApB,CACIC,MAAO,CACHxB,kBApEc,SAACyB,GAAqC,IAAzBR,EAAwB,uDAAb,aAC9CL,GAAa,GACbC,GAAa,GAEbM,QAAQC,IAAIM,GACZP,QAAQC,IAAIK,GAEZlB,EAAU,oBAAqBkB,GAAY,SAACP,GAKxC,GAJAC,QAAQC,IAAI,0BACZD,QAAQC,IAAIF,GACZN,GAAa,GAETM,EAAKG,KAGL,OAFAJ,EAASC,QACTR,IAIJC,EAAWO,EAAKI,WAChBV,GAAa,KACd,SAiDKX,oBACAC,qBAJR,SAOKI","file":"static/js/25.c879b70e.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport {useFetchContext} from '../fetch-context/fetch.context'\nimport examSchema from './exam.json'\nimport lodash from 'lodash'\n\nexport const ExaminationContext = createContext({\n    createExamination: () => { },\n    updateExamination: () => { },\n    deleteExamination: () => { },\n})\n\nexport const useExaminationContext = () => useContext(ExaminationContext)\n\nconst ExaminationProvider = ({ children }) => {\n    const { fetchData } = useFetchContext()\n\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n\n\n    const createExamination = (examsToAdd, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        console.log(examSchema)\n        console.log(examsToAdd)\n\n        fetchData(\"/api/admin/exams/\", examsToAdd, (data) => {\n            console.log(\"CREATE new examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"POST\")\n\n    }\n\n    const updateExamination = async (examToUpdate, examId, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}`, examToUpdate, (data) => {\n            console.log(\"UPDATE existed examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"PATCH\")\n\n    }\n\n    const deleteExamination = async (examId, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}`, null, (data) => {\n            console.log(\"DELETE existed examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"DELETE\")\n    }\n\n    return (\n        <ExaminationContext.Provider\n            value={{\n                createExamination,\n                updateExamination,\n                deleteExamination\n            }}\n        >\n            {children}\n        </ExaminationContext.Provider>\n    )\n}\n\nexport default ExaminationProvider"],"sourceRoot":""}