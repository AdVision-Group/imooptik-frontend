{"version":3,"sources":["context/booking/booking.queries.jsx","context/booking/booking.context.jsx"],"names":["fetchSingleCalendar","id","fetch","process","fetchUserBookings","token","myHeaders","Headers","append","requestOptions","method","headers","redirect","BookingContext","createContext","calendar","calendars","getCalendars","getCalendar","bookings","getBookings","userBookings","getUserBookings","activeCalendar","resetBooking","selectedDate","setSelectedDate","BookingProvider","children","useContext","AuthContext","LoadingModalContext","getMessage","setIsLoading","setShowModal","closeModal","useState","setActiveCalendar","setCalendars","setCalendar","a","response","json","data","error","message","console","log","idx","setBookings","setUserBookings","Provider","value"],"mappings":"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","file":"static/js/22.9d8710c0.chunk.js","sourcesContent":["\n\nexport const fetchCalendars = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/calendars`)\n}\n\nexport const fetchSingleCalendar = (id) => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/calendars/${id}`)\n}\n\nexport const fetchBookings = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/bookings`)\n}\nexport const fetchBookingRows = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/bookingRows`)\n}\n\nexport const fetchUserBookings = (token) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/userBookings`, requestOptions)\n}","import React, { createContext, useState, useContext } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\n\nimport {\n    fetchCalendars,\n    fetchSingleCalendar,\n    fetchBookings,\n    // fetchBookingRows,\n    fetchUserBookings\n} from './booking.queries'\n\nexport const BookingContext = createContext({\n    calendar: null,\n    calendars: null,\n    getCalendars: () => { },\n    getCalendar: () => { },\n    bookings: null,\n    getBookings: () => { },\n    userBookings: null,\n    getUserBookings: () => { },\n    // bookingRows: null,\n    // getBookingRows: () => { },\n    activeCalendar: 0,\n    resetBooking: () => { },\n    selectedDate: '',\n    setSelectedDate: () => { }\n})\n\nconst BookingProvider = ({ children }) => {\n    const { token } = useContext(AuthContext)\n    const {\n        getMessage,\n        setIsLoading,\n        setShowModal,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    // ------------------------\n    // CALENDAR ACTIONS\n    // ------------------------\n    const [activeCalendar, setActiveCalendar] = useState(0)\n    const [calendars, setCalendars] = useState(null)\n    const [calendar, setCalendar] = useState(null)\n    const [selectedDate, setSelectedDate] = useState('')\n\n    // Get all calendars\n    const getCalendars = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchCalendars()\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.message)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.calendars) {\n                setCalendars(data.calendars)\n                setIsLoading(false)\n                closeModal()\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // Get single calendar\n    const getCalendar = async (id, idx) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchSingleCalendar(id)\n            const data = await response.json()\n\n            console.log(data)\n            if (data.calendar) {\n                setCalendar(data.calendar)\n                setActiveCalendar(idx)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // ------------------------\n    // BOOKINGS ACTIONS\n    // ------------------------\n    const [bookings, setBookings] = useState(null)\n    const [userBookings, setUserBookings] = useState(null)\n\n    const getBookings = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchBookings()\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.message)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.bookings) {\n                setBookings(data.bookings)\n                setIsLoading(false)\n                closeModal()\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getUserBookings = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchUserBookings(token)\n            const data = await response.json()\n\n            if (data.userBookings) {\n                setUserBookings(data.userBookings)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // ------------------------\n    // BOOKINGSROW ACTIONS\n    // ------------------------\n    // const [bookingRows, setBookingRows] = useState(null)\n\n    // const getBookingRows = async () => {\n    //     setIsLoading(true)\n    //     setShowModal(true)\n\n    //     try {\n    //         const response = await fetchBookingRows()\n    //         const data = await response.json()\n\n    //         if (data.error) {\n    //             getMessage(data.message)\n    //             setIsLoading(false)\n    //             return\n    //         }\n\n    //         if (data.bookingRows) {\n    //             setBookingRows(data.bookingRows)\n    //             setIsLoading(false)\n    //             closeModal()\n    //         }\n\n    //         getMessage(data.message)\n    //         setIsLoading(false)\n    //     } catch (err) {\n    //         console.log(err)\n    //         getMessage(\"Nieco sa pokazilo\")\n    //         setIsLoading(false)\n    //     }\n    // }\n\n    const resetBooking = () => {\n        setActiveCalendar(0)\n    }\n\n    return (\n        <BookingContext.Provider\n            value={{\n                calendar,\n                calendars,\n                getCalendars,\n                getCalendar,\n                bookings,\n                getBookings,\n                userBookings,\n                getUserBookings,\n                // bookingRows,\n                // getBookingRows,\n                activeCalendar,\n                resetBooking,\n                selectedDate,\n                setSelectedDate,\n            }}\n        >\n            {children}\n        </BookingContext.Provider>\n    )\n}\n\nexport default BookingProvider"],"sourceRoot":""}