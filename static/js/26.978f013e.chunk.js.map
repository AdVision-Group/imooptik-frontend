{"version":3,"sources":["context/analytics/analytics.context.jsx"],"names":["AnalyticsContext","createContext","stats","getAnalytics","generateReport","AnalyticsProvider","children","token","useContext","AuthContext","LoadingModalContext","closeModal","getMessage","setShowModal","setIsLoading","useState","setStats","myHeaders","Headers","append","time","a","requestOptions","method","headers","redirect","fetch","process","response","json","data","messageSK","console","log","reportParametersObj","raw","JSON","stringify","body","name","setTimeout","win","window","open","focus","Provider","value"],"mappings":"iOAIaA,EAAmBC,wBAAc,CAC1CC,MAAO,KACPC,aAAc,aACdC,eAAgB,eAyFLC,UAtFW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBC,EAAUC,qBAAWC,KAArBF,MADgC,EAEuBC,qBAAWE,KAAlEC,EAFgC,EAEhCA,WAAYC,EAFoB,EAEpBA,WAAYC,EAFQ,EAERA,aAAcC,EAFN,EAEMA,aAFN,EAIdC,mBAAS,MAJK,mBAIjCb,EAJiC,KAI1Bc,EAJ0B,KAMlCC,EAAY,IAAIC,QACtBD,EAAUE,OAAO,aAAcZ,GAC/BU,EAAUE,OAAO,eAAgB,oBAEjC,IAAMhB,EAAY,uCAAG,WAAOiB,GAAP,mBAAAC,EAAA,6DACjBR,GAAa,GACbC,GAAa,GAEPQ,EAAiB,CACnBC,OAAQ,MACRC,QAASP,EACTQ,SAAU,UAPG,kBAWUC,MAAM,GAAD,OAAIC,gCAAJ,qCAAuEP,GAAQE,GAX9F,cAWPM,EAXO,gBAYMA,EAASC,OAZf,YAYPC,EAZO,QAcJ5B,MAdI,wBAeTc,EAASc,EAAK5B,OACdS,IAhBS,2BAoBbC,EAAWkB,EAAKC,WAChBjB,GAAa,GArBA,kDAuBbkB,QAAQC,IAAR,MACArB,EAAW,qBACXE,GAAa,GAzBA,0DAAH,sDA6BZV,EAAc,uCAAG,WAAO8B,GAAP,qBAAAb,EAAA,6DACnBR,GAAa,GACbC,GAAa,GAEPqB,EAAMC,KAAKC,UAAUH,GAErBZ,EAAiB,CACnBC,OAAQ,OACRC,QAASP,EACTqB,KAAMH,EACNV,SAAU,UAVK,kBAcQC,MAAM,GAAD,OAAIC,gCAAJ,mCAA6EL,GAd1F,cAcTM,EAdS,iBAeIA,EAASC,OAfb,SAeTC,EAfS,QAkBNS,MACLC,YAAW,WACP,IAAMC,EAAMC,OAAOC,KAAP,UAAehB,gCAAf,0BAAuEG,EAAKS,MAAQ,SAAU,uBACvG,OAAHE,QAAG,IAAHA,KAAKG,UACN,KAGPhC,EAAWkB,EAAKC,WAChBjB,GAAa,GA1BE,kDA4BfkB,QAAQC,IAAR,MACArB,EAAW,qBACXE,GAAa,GA9BE,0DAAH,sDAkCpB,OACI,cAACd,EAAiB6C,SAAlB,CACIC,MAAO,CACH5C,QACAC,eACAC,kBAJR,SAOKE","file":"static/js/26.978f013e.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\r\nimport { AuthContext } from '../auth/auth.context'\r\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\r\n\r\nexport const AnalyticsContext = createContext({\r\n    stats: null,\r\n    getAnalytics: () => { },\r\n    generateReport: () => { },\r\n})\r\n\r\nconst AnalyticsProvider = ({ children }) => {\r\n    const { token } = useContext(AuthContext)\r\n    const { closeModal, getMessage, setShowModal, setIsLoading } = useContext(LoadingModalContext)\r\n\r\n    const [stats, setStats] = useState(null)\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const getAnalytics = async (time) => {\r\n        setShowModal(true)\r\n        setIsLoading(true)\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats?timespan=${time}`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.stats) {\r\n                setStats(data.stats)\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            getMessage(data.messageSK)\r\n            setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const generateReport = async (reportParametersObj) => {\r\n        setShowModal(true)\r\n        setIsLoading(true)\r\n\r\n        const raw = JSON.stringify(reportParametersObj)\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats/generateReport`, requestOptions)\r\n            const data = await response.json()\r\n\r\n\r\n            if (data.name) {\r\n                setTimeout(() => {\r\n                    const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/excel/${data.name}`, \"_blank\", \"noreferrer noopener\");\r\n                    win?.focus();\r\n                }, 2000)\r\n            }\r\n\r\n            getMessage(data.messageSK)\r\n            setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AnalyticsContext.Provider\r\n            value={{\r\n                stats,\r\n                getAnalytics,\r\n                generateReport,\r\n            }}\r\n        >\r\n            {children}\r\n        </AnalyticsContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AnalyticsProvider"],"sourceRoot":""}