{"version":3,"sources":["sections/customer-profile/customer-profile.styles.jsx","sections/customer-profile/customer-profile.section.jsx","components/scroll-container/scroll-container.styles.jsx","components/scroll-container/scroll-container.component.jsx","components/product-input-row/product-input-row.styles.jsx","components/product-input-row/product-input-row.component.jsx","components/order-overview/order-overview.styles.jsx","components/order-overview/order-overview.component.jsx"],"names":["Header","styled","div","paddingStyles","Profile","DeleteProfileButton","CustomButton","GridContainer","ZeroMargin","GridRow","ThreeColRow","Row","SaveButton","Title","h2","Container","CustomerProfile","id","useParams","isAdmin","useContext","AuthContext","LoadingModalContext","closeModal","isLoading","message","showModal","UserContext","isUpdating","user","getUser","handleChange","handleDioptersChange","handleDistanceChange","handleCylinderChange","handleCylinderAxesChange","updateUser","resetUser","useEffect","console","log","loading","title","close","onSubmit","e","preventDefault","type","label","example","name","value","premises","toString","required","admin","fName","lName","email","phone","address","psc","city","country","lenses","diopters","distance","cylinder","cylinderAxes","date","totalPrice","ScrollContainer","children","InputRow","ProductInputRow","otherprops","OrderContainer","OrderContent","OrderId","p","Date","Price","Options","UpdateButton","DeleteButton","OrderOverview","props"],"mappings":"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","file":"static/js/7.2867c25c.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport CustomButton from '../../components/custom-button/custom-button.component'\n\nimport { paddingStyles } from '../../global.styles'\n\nexport const Header = styled.div`\n    display: flex;\n    justify-content: space-between;\n\n    ${paddingStyles}\n    padding-top: 3rem;\n    padding-bottom: 3rem;\n`\n\nexport const Profile = styled.div`\n    /* padding: 2rem;\n    box-shadow: 0 0 1.5rem 0 rgba(0,0,0, 0.08); */\n    margin-right: 2rem;\n\n`\n\nexport const Name = styled.div`\n    font-size: 4.5rem;\n    font-weight: 700;\n`\n\nexport const DeleteProfileButton = styled(CustomButton)`\n    background-color: #DD4C4C;\n    font-size: 1.4rem;\n`\n\nexport const GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: start;\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n    }\n`\n\nexport const ZeroMargin = styled.div`\n    input {\n        margin-bottom: 0 !important;\n    }\n`\n\nexport const GridRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n`\n\nexport const ThreeColRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    align-items: center;\n\n    input {\n        margin-bottom: 0 !important;\n    }\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr 1fr;\n        grid-template-areas:\n            \"a a\"\n            \"b c\";\n\n        div:nth-child(1){\n            grid-area: a;\n            margin-bottom: 0;\n        }\n        div:nth-child(2){\n            grid-area: b;\n            margin-bottom: 2rem;\n\n        }\n        div:nth-child(3){\n            grid-area: c;\n            margin-bottom: 2rem;\n        }\n    }\n`\n\nexport const Row = styled.div`\n    width: 75%;\n`\n\nexport const SaveButton = styled(CustomButton)`\n    margin-left: 2rem;\n    font-size: 1.4rem;\n`\n\nexport const Title = styled.h2`\n    margin-bottom: 2rem;\n`\n\nexport const Container = styled.div`\n    margin-top: 2rem;\n`","import React, { useState, useContext, useEffect } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { UserContext } from '../../context/user/user.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams } from 'react-router-dom'\n\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport InputRow from '../../components/product-input-row/product-input-row.component'\n\nimport CustomInput from '../../components/custom-input/custom-input.component'\nimport OrderOverview from '../../components/order-overview/order-overview.component'\nimport Popup from '../../components/popup/pop-up.component'\n\nimport {\n    Header,\n    Profile,\n    DeleteProfileButton,\n    // Name,\n    GridContainer,\n    GridRow,\n    Row,\n    ThreeColRow,\n    ZeroMargin,\n    SaveButton,\n    Title,\n    Container\n} from './customer-profile.styles'\n\nconst CustomerProfile = () => {\n    const { id } = useParams()\n    const { isAdmin } = useContext(AuthContext)\n    const {\n        closeModal,\n        isLoading,\n        message,\n        showModal,\n    } = useContext(LoadingModalContext)\n\n    const {\n        isUpdating,\n        user,\n        getUser,\n        handleChange,\n        handleDioptersChange,\n        handleDistanceChange,\n        handleCylinderChange,\n        handleCylinderAxesChange,\n        updateUser,\n        resetUser\n    } = useContext(UserContext)\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if (id === 'novy-zakaznik') {\n            console.log(\"Create new user\")\n        } else {\n            console.log(\"Update existing user\")\n            updateUser(user)\n        }\n    }\n\n    useEffect(() => {\n        if (id !== 'novy-zakaznik') {\n            getUser(id)\n        }\n    }, [id])\n\n    useEffect(() => {\n        return () => {\n            console.log(\"UNMOUNT\")\n            resetUser()\n        }\n    }, [])\n\n\n    return (\n        <section>\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n\n            <form onSubmit={handleSubmit}>\n                <Header>\n                    <h1>Profil</h1>\n                    <div>\n                        {isUpdating && <DeleteProfileButton>Vymazať</DeleteProfileButton>}\n                        <SaveButton type=\"submit\">\n                            {isUpdating ? \"Uložiť zmeny\" : \"Vytvoriť\"}\n                        </SaveButton>\n                    </div>\n                </Header>\n\n                <ScrollContainer>\n                    <GridContainer>\n                        <Profile>\n                            {isAdmin && <div>\n                                <h2>Admin panel</h2>\n                                <InputRow\n                                    label=\"Predajňa na ktorej uživatel pracuje\"\n                                    example='napr: 1-4'\n                                >\n                                    <CustomInput\n                                        label=\"Premises*\"\n                                        type='text'\n                                        name='premises'\n                                        value={user.premises.toString()}\n                                        handleChange={(e) => handleChange(e)}\n                                        required\n                                    />\n                                </InputRow>\n                                <InputRow\n                                    label=\"Výška administrativných práv\"\n                                    example=\"napr: 1-4\"\n                                >\n                                    <CustomInput\n                                        label=\"Admin*\"\n                                        type='text'\n                                        name='admin'\n                                        value={user.admin.toString()}\n                                        handleChange={(e) => handleChange(e)}\n                                        required\n                                    />\n                                </InputRow>\n                            </div>}\n                            <div>\n                                <h2>Informácie</h2>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Meno*\"\n                                            type='text'\n                                            name='fName'\n                                            value={user.fName}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Priezvisko*\"\n                                            type='text'\n                                            name='lName'\n                                            value={user.lName}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </div>\n\n                            <Container>\n                                <h2>Kontaktné údaje</h2>\n                                <Row>\n                                    <div>\n                                        <CustomInput\n                                            label=\"E-mail*\"\n                                            type='email'\n                                            name='email'\n                                            value={user.email}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Telefónne číslo\"\n                                            type='text'\n                                            name='phone'\n                                            value={user.phone}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                </Row>\n                            </Container>\n\n                            <Container>\n                                <h2>Fakturačné údaje</h2>\n                                <GridRow>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"Ulica a čislo domu\"\n                                            type='text'\n                                            name='address'\n                                            value={user.address}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                    <ZeroMargin>\n                                        <CustomInput\n                                            label=\"PSČ\"\n                                            type='text'\n                                            name='psc'\n                                            value={user.psc}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </ZeroMargin>\n                                </GridRow>\n                                <GridRow>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Mesto\"\n                                            type='text'\n                                            name='city'\n                                            value={user.city}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Krajina\"\n                                            type='text'\n                                            name='country'\n                                            value={user.country}\n                                            handleChange={(e) => handleChange(e)}\n                                        />\n                                    </div>\n                                </GridRow>\n                            </Container>\n\n                            <Container>\n                                <h2>Parametre</h2>\n\n                                <ThreeColRow>\n                                    <div>\n                                        Dioptrie\n                                </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Ľavé oko\"\n                                            type='text'\n                                            name='city'\n                                            value={user.lenses.diopters[0].toString()}\n                                            handleChange={(e) => handleDioptersChange(e, 0)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Pravé oko\"\n                                            type='text'\n                                            name='state'\n                                            value={user.lenses.diopters[1].toString()}\n                                            handleChange={(e) => handleDioptersChange(e, 1)}\n                                        />\n                                    </div>\n                                </ThreeColRow>\n\n                                <ThreeColRow>\n                                    <div>\n                                        Vzdialenosť\n                                </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Ľavé oko\"\n                                            type='text'\n                                            name='city'\n                                            value={user.lenses.distance[0].toString()}\n                                            handleChange={(e) => handleDistanceChange(e, 0)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Pravé oko\"\n                                            type='text'\n                                            name='state'\n                                            value={user.lenses.distance[1].toString()}\n                                            handleChange={(e) => handleDistanceChange(e, 1)}\n                                        />\n                                    </div>\n                                </ThreeColRow>\n\n                                <ThreeColRow>\n                                    <div>\n                                        Cylinder\n                                </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Ľavé oko\"\n                                            type='text'\n                                            name='city'\n                                            value={user.lenses.cylinder[0].toString()}\n                                            handleChange={(e) => handleCylinderChange(e, 0)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Pravé oko\"\n                                            type='text'\n                                            name='state'\n                                            value={user.lenses.cylinder[1].toString()}\n                                            handleChange={(e) => handleCylinderChange(e, 1)}\n                                        />\n                                    </div>\n                                </ThreeColRow>\n\n                                <ThreeColRow>\n                                    <div>\n                                        Os cylindrov\n                                </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Ľavé oko\"\n                                            type='text'\n                                            name='city'\n                                            value={user.lenses.cylinderAxes[0].toString()}\n                                            handleChange={(e) => handleCylinderAxesChange(e, 0)}\n                                        />\n                                    </div>\n                                    <div>\n                                        <CustomInput\n                                            label=\"Pravé oko\"\n                                            type='text'\n                                            name='state'\n                                            value={user.lenses.cylinderAxes[1].toString()}\n                                            handleChange={(e) => handleCylinderAxesChange(e, 1)}\n                                        />\n                                    </div>\n                                </ThreeColRow>\n                            </Container>\n\n\n                        </Profile>\n\n                        <div>\n                            <Title>\n                                Objednávky\n                        </Title>\n\n                            <div>\n                                <OrderOverview\n                                    name='Product name'\n                                    id='[Product ID]'\n                                    date='28. November 2020'\n                                    totalPrice='99.99'\n                                />\n                                <OrderOverview\n                                    name='Product name'\n                                    id='[Product ID]'\n                                    date='28. November 2020'\n                                    totalPrice='99.99'\n                                />\n                                <OrderOverview\n                                    name='Product name'\n                                    id='[Product ID]'\n                                    date='28. November 2020'\n                                    totalPrice='99.99'\n                                />\n                            </div>\n                        </div>\n                    </GridContainer>\n                </ScrollContainer>\n\n            </form>\n        </section>\n    )\n}\n\nexport default CustomerProfile\n","import styled from 'styled-components'\nimport { paddingStyles } from '../../global.styles'\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    /* height: 100%; */\n    overflow-y: scroll;\n    overflow-x: visible;\n    scroll-behavior: smooth;\n    ${paddingStyles};\n    padding-top: 1.5rem;\n    padding-bottom: 1.5rem;\n\n    @media all and (max-width: 1150px) {\n        margin-bottom: 8rem;\n    }\n`","import React from 'react'\nimport { Container } from './scroll-container.styles'\n\nconst ScrollContainer = ({ children }) => {\n    return (\n        <Container>\n            {children}\n        </Container>\n    )\n}\n\nexport default ScrollContainer","import styled from 'styled-components'\n\nexport const InputRow = styled.div`\n    display:flex;\n    align-items: center;\n\n    p {\n        margin-top: 1.8rem;\n        margin-left: 2rem;\n            opacity: .75;\n\n        span {\n            font-weight: 700;\n        }\n    }\n\n    @media all and (max-width: 800px) {\n        flex-direction: column-reverse;\n        align-items: flex-start;\n\n        p {\n            margin-left: unset;\n        }\n    }\n`","import React from 'react'\n\nimport { InputRow } from './product-input-row.styles'\n\nconst ProductInputRow = ({ children, label, example, ...otherprops }) => {\n    return (\n        <InputRow {...otherprops}>\n            <div>\n                {children}\n            </div>\n            <div>\n                <p>{label + \" \"}<span>{example}</span></p>\n            </div>\n        </InputRow>\n    )\n}\n\nexport default ProductInputRow\n","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\nexport const OrderContainer = styled.div`\n    width: 100%;\n    display: grid;\n    grid-template-columns: 1fr 25rem;\n\n    box-shadow: 0 0 1.5rem 0 rgba(0,0,0, 0.08);\n    padding: 2rem;\n\n    &:not(:last-child) {\n        margin-bottom: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n\n    }\n`\n\nexport const OrderContent = styled.div`\n    h2 {\n        font-size: 1.6rem;\n    }\n`\n\nexport const OrderId = styled.p`\n    font-size: 1.2rem;\n    color: gray;\n    margin-bottom: 2rem;\n`\n\nexport const Date = styled.p`\n    font-size: 1.4rem;\n    /* font-weight: 700; */\n    color: gray;\n    margin-bottom: 2rem;\n`\n\nexport const Price = styled.p`\n    font-weight: 700;\n    font-size: 1.8rem;\n`\n\nexport const Options = styled.div`\n    align-self: end;\n    justify-self: end;\n`\n\nexport const UpdateButton = styled(CustomButton)`\n    font-size: 1.4rem;\n    margin-right: 1rem;\n`\n\nexport const DeleteButton = styled(CustomButton)`\n    font-size: 1.4rem;\n    background-color: rgb(235, 172, 1);\n`","import React from 'react'\n\nimport {\n    OrderContainer,\n    OrderContent,\n    Options,\n    OrderId,\n    Date,\n    DeleteButton,\n    Price,\n    UpdateButton\n} from './order-overview.styles'\n\nconst OrderOverview = (props) => {\n    const { name, id, date, totalPrice } = props\n\n    return (\n        <OrderContainer>\n\n            <OrderContent>\n                <h2>{name}</h2>\n                <OrderId>{id}</OrderId>\n                <Date>{date}</Date>\n                <Price>{totalPrice}€</Price>\n            </OrderContent>\n\n            <Options>\n                <UpdateButton>\n                    Upraviť\n                </UpdateButton>\n                <DeleteButton>\n                    Vymazať\n                </DeleteButton>\n            </Options>\n\n        </OrderContainer>\n    )\n}\n\nexport default OrderOverview\n"],"sourceRoot":""}