{"version":3,"sources":["components/parameters-table/parameters-table.styles.jsx","components/parameters-table/parameters-table.component.jsx","components/user-form/user.form-styles.jsx","components/profile-order-overview/profile-order-overview.styles.jsx","components/profile-order-overview/profile-order-overview.component.jsx","components/examination-user/examination-user.styles.jsx","components/examination-user/examination-user.component.jsx","utils/object.utils.jsx","utils/parameters.utils.jsx","components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx","components/modal-optometrist-examination/modal-optometrist-examination.component.jsx","components/examinations-overview/examinations-overview.styles.jsx","components/examinations-overview/examinations-overview.component.jsx","components/user-form/user-form.component.jsx","components/custom-input/custom-input.styles.jsx","components/custom-input/custom-input.component.jsx","hooks/useFetch.jsx","utils/warehouse.utils.jsx","components/scroll-container/scroll-container.styles.jsx","components/scroll-container/scroll-container.component.jsx","components/custom-checkbox/custom-checkbox.styles.jsx","components/custom-checkbox/custom-checkbox.component.jsx","components/custom-textarea/custom-textarea.styles.jsx","components/custom-textarea/custom-textarea.component.jsx","context/user/user.queries.jsx","context/user/user.utils.jsx","context/user/user.context.jsx","components/product-input-row/product-input-row.styles.jsx","components/product-input-row/product-input-row.component.jsx","context/examination/examination.context.jsx"],"names":["TableContainer","styled","div","TitleCol","Col","OsContainer","ParametersTable","parameters","handleChange","disabledInputs","checkParameters","parameter","idx","length","formatParameter","e","target","value","formatfloatNumber","console","log","includes","Number","toFixed","name","checkaAx","formatAx","useEffect","addition","diopters","Array","map","type","onChange","disabled","onBlur","cylinder","cylinderAxes","distance","vys","prism","basis","Profile","GridContainer","ZeroMargin","GridRow","Row","Title","h2","Container","OrderHeader","OrderButton","CustomButton","AdminPanelContainer","CustomSelect","select","OrderContainer","OrderContent","Options","UpdateButton","OrderId","p","ProfileOrderOverview","id","handleUpdateClick","orderData","useFetchById","isLoading","order","response","dateData","Date","date","error","customId","toLocaleDateString","weekday","month","day","year","onClick","ExaminationUserContainer","ExaminationUser","userId","user","removeEmpty","obj","Object","fromEntries","entries","filter","checkParameter","parametersArr","checkParameterValue","ModalContainer","Modal","CloseButton","button","SubmitButton","ExamTypeCheckbox","CustomCheckbox","IsSuitableCheckbox","TwoColContainer","InputContainer","Table","ObjectiveRefTable","SubjectiveRefTable","RefractTable","KerathTable","SubjectiveRefATable","ContactLensesTable","ContactLensesTypeTable","ExamTable","TableTitleCol","TableCol","isActive","clickable","OptometristExaminationModal","close","refetch","examinationToUpdate","exam","isUpdating","useExaminationContext","createExamination","updateExamination","useState","examObj","setExamObj","lodash","set","prevValue","refrakcia","anamneza","kontrola","examSchema","doneBy","doneTo","nosi_od","posledna_korekcia","vyhovuje","typ_sposob","dopl_info","vlastne_okuliare","vnatur","sph","cyl","ax","add","visus","vbino","objektivna_refrakcia","se","pd","subjektivna_refrakcia","vbl","prizma","os","domoko","stav_a_povolanie","obj_nalez","refraktometer","keratometer","hor","ver","ave","bino","kontaktne_sosovky","visd","bino1","visb","bino2","typ_kontaktnych_sosoviek","prvy","druhy","lkontrola","dop_roztok","tabulka","vis","subj","doporucenia","vodic","pc","ReactDOM","createPortal","examTypes","label","handleClick","rows","className","formatedObj","document","getElementById","ExaminationsOverviewContainer","Header","ExaminationContainer","ExamHead","ExaminationOptions","AddButton","PdfButton","DeleteButton","ExaminationsOverview","params","useParams","examinationData","useContext","ExaminationContext","deleteExamination","getPDF","showOptometristModal","setShowOptometristModal","examinations","setExaminations","setExaminationToUpdate","isDisabled","setIsDisabled","exams","examination","_id","preventDefault","setTimeout","handleDelete","UserForm","isAdmin","handleParameterChange","handleCompanyChange","isOptometrist","isOrder","isCustomer","push","useHistory","example","premises","retailNames","admin","optometrist","fName","lName","birthDate","email","phone","address","psc","city","country","company","ico","dic","icdph","lenses","note","handleAddOrderButtonClick","orders","reverse","slice","shrinkLabel","css","InputGroup","CustomInput","otherProps","htmlFor","useFetch","path","skip","method","setResponse","setError","message","setMessage","setIsLoading","refetchIndex","setRefetchIndex","prevRefetchIndex","requestOptions","redirect","a","fetch","process","res","json","data","fetchData","useFetchByQuery","queryObj","myHeaders","Headers","append","localStorage","getItem","raw","JSON","stringify","headers","body","brands","retailNamesTabs","glassesColors","glassesMaterials","glassesShapes","formatPrice","price","toString","split","number","paddingStyles","FixedContainer","ScrollContainer","children","CheckboxContainer","otherprops","CustomTextarea","fetchUser","token","patchUser","postUser","postAdmin","password","initUserObj","boughtProducts","finishedRegistration","tempUser","totalSpent","watchList","confirmPassword","now","UserContext","createContext","activeIndex","handleChangeFilterItem","filterItems","totalCount","users","getUser","updateUser","resetUser","formToShow","switchFormButtons","toggleUserForm","createUser","getFilteredUsers","getUserByQuery","deleteUser","UserProvider","AuthContext","LoadingModalContext","closeModal","getMessage","setShowModal","setUser","setUsers","count","setIsUpdating","setActiveIndex","setFormToShow","refetchUser","addUser","messageSK","filters","query","Provider","itemIndex","arr","InputRow","ProductInputRow","ExaminationProvider","useFetchContext","examId","filename","win","window","open","focus","examToUpdate","callback","examsToAdd"],"mappings":"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AAMvM,IAEjB,CAAEM,WAAUF,YAAWM,QAAO8C,a,gCCvHzC,gRAAO,IAAM+K,EAAS,CAClB,SACA,kBACA,UACA,WACA,YACA,WACA,UACA,eACA,mBACA,UACA,gBACA,OACA,kBACA,OACA,iBACA,SACA,kBACA,QACA,SACA,QACA,iBACA,WACA,QACA,QACA,QACA,UACA,YACA,SACA,aACA,UACA,SACA,cACA,WACA,SACA,SACA,OACA,eACA,WACA,SACA,SACA,WACA,SACA,oBACA,QACA,oBACA,QACA,eACA,UACA,sBACA,QACA,YACA,cACA,WACA,iBACA,UACA,SAoBS7D,EAAc,CACvB,QACA,qBACA,0BACA,8BACA,sBACA,8BACA,yBAGS8D,EAAkB,CAC3B,CACIxO,GAAI,EACJvC,KAAM,eAEV,CACIuC,GAAI,EACJvC,KAAM,sBAEV,CACIuC,GAAI,EACJvC,KAAM,2BAEV,CACIuC,GAAI,EACJvC,KAAM,+BAEV,CACIuC,GAAI,EACJvC,KAAM,uBAEV,CACIuC,GAAI,EACJvC,KAAM,+BAEV,CACIuC,GAAI,EACJvC,KAAM,0BAIDgR,EAAgB,CACzB,iBACA,WACA,kBACA,UACA,WACA,gBACA,WACA,aACA,YACA,UACA,cAGSC,EAAmB,CAC5B,YACA,MACA,WACA,OACA,SACA,SAGSC,EAAgB,CACzB,QACA,UACA,WACA,UACA,OACA,WACA,aACA,YACA,2BACA,WACA,qBAGSC,EAAc,WAAiB,IAAhBC,EAAe,uDAAP,GAChCA,EAAMC,WACN,IAAI5R,EAAQ,EACZ,OAAI2R,EAAMvR,SAAS,KACoB,IAA/BuR,EAAME,MAAM,KAAK,GAAGjS,QACpBI,EAAQ2R,EAAME,MAAM,KAAK,GAAKF,EAAME,MAAM,KAAK,GAAK,IAC7CxR,OAAOL,KAEdA,EAAQ2R,EAAME,MAAM,KAAK,GAAKF,EAAME,MAAM,KAAK,GACxCxR,OAAOL,IAGXK,OAAe,IAARsR,IAIT1R,EAAoB,SAAA6R,GAG7B,OAAIA,EAAO1R,SAAS,KACR0R,EAAOD,MAAM,KAAK,GAAK,IAAMC,EAAOD,MAAM,KAAK,GAGhDC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","file":"static/js/2.32fe2ef7.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const TableContainer = styled.div`\n    display: grid;\n    grid-template-columns: 2rem repeat(8, 7rem);\n    margin-bottom: 3rem;\n`\n\nexport const TitleCol = styled.div`\n    display: grid;\n    grid-template-rows: repeat(4, 5rem);\n    div {\n        align-self: center;\n        display:flex;\n        justify-content: space-between;\n    }\n`\n\nexport const Col = styled.div`\n    display: grid;\n    grid-template-rows: repeat(4, 5rem);\n    div {\n        text-align:center;\n        align-self: center;\n        margin-left: .5rem;\n\n\n        &:nth-child(1) {\n            align-self: center;\n        }\n\n        input {\n            display:block;\n            width: 100%;\n            border: none;\n            padding: 1rem .5rem;\n            text-align: center;\n            font-family: inherit;\n            font-size: inherit;\n            background-color: var(--input-background-color);\n            color: var(--input-color);\n            border-radius: .5rem;\n            outline: none;\n\n            &:focus {\n                outline: none;\n            }\n\n            &:disabled {\n                opacity: .83;\n            }\n        }\n\n        input[type=number]::-webkit-inner-spin-button, \n        input[type=number]::-webkit-outer-spin-button {  \n            opacity: 1;\n\n        }\n    }\n`\n\nexport const OsContainer = styled.div`\n        text-align:center;\n        align-self: center;\n        margin-left: .5rem;\n\n\n        &:nth-child(1) {\n            align-self: center;\n        }\n\n        input {\n            display:block;\n            width: 100%;\n            border: none;\n            padding: 1rem .5rem;\n            text-align: center;\n            font-family: inherit;\n            font-size: inherit;\n            background-color: var(--input-background-color);\n            color: var(--input-color);\n            border-radius: .5rem;\n            outline: none;\n\n            &:focus {\n                outline: none;\n            }\n        }\n\n        input[type=number]::-webkit-inner-spin-button, \n        input[type=number]::-webkit-outer-spin-button {  \n            display:none;\n            opacity: 0;\n\n        }\n`","import React, { useEffect } from 'react'\n\nimport { formatfloatNumber } from '../../utils/warehouse.utils'\n\nimport {\n    TableContainer,\n    TitleCol,\n    Col,\n    OsContainer\n} from './parameters-table.styles'\n\nconst ParametersTable = ({ parameters, handleChange, disabledInputs = false }) => {\n    const checkParameters = (parameter, idx) => {\n        if (parameter.length === 0) {\n            return \"\"\n        }\n        if (parameter[idx] === 1001 || parameter[idx] === \"1001\") {\n            return \"\"\n        }\n\n        return parameter[idx]\n    }\n\n    const formatParameter = (e, idx) => {\n        if(e.target.value === \"\") return\n        const value = formatfloatNumber(e.target.value)\n        console.log(value)\n        handleChange({\n            target: {\n                value: value.includes(\"+\") ? `+${Number(value).toFixed(2)}` : Number(value).toFixed(2) < 0 ? Number(value).toFixed(2) : `+${Number(value).toFixed(2)}`,\n                name: e.target.name\n            }\n        }, idx)\n    }\n\n    const checkaAx = (parameter, idx) => {\n        if (parameter.length === 0) {\n            return \"\"\n        }\n        if (parameter[idx] === 1001 || parameter[idx] === '1001') {\n            return \"\"\n        }\n\n        return parameter[idx]\n    }\n\n    const formatAx = (e, idx) => {\n        if(e.target.value === \"\") return\n        const value = formatfloatNumber(e.target.value)\n        handleChange({\n            target: {\n                value: value,\n                name: e.target.name\n            }\n        }, idx)\n    }\n\n    useEffect(() => {\n        if (handleChange) {\n            if (parameters.addition[0] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))).toFixed(2)\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[0] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[1] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))).toFixed(2)\n                    }\n                }, 3)\n                return\n            }\n\n\n            if (parameters.addition[1] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 3)\n            }\n        }\n    }, [parameters.diopters[0], parameters.addition[0], parameters.diopters[1], parameters.addition[1]])\n\n    return (\n        <TableContainer>\n            <TitleCol>\n                <div>{\" \"}</div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n            </TitleCol>\n\n\n            <Col>\n                <div>sph</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.diopters, idx)}\n                                name=\"diopters\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>cyl</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.cylinder, idx)}\n                                name=\"cylinder\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>ax</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <OsContainer key={idx}>\n                            <input\n                                type='text'\n                                value={checkaAx(parameters.cylinderAxes, idx)}\n                                name=\"cylinderAxes\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatAx(e, idx)}\n\n\n                            />\n                        </OsContainer>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>PD</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkaAx(parameters.distance, idx)}\n                                name=\"distance\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatAx(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>vys.</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkaAx(parameters.vys, idx)}\n                                name=\"vys\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatAx(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>prizma</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.prism, idx)}\n                                name=\"prism\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>basis</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.basis, idx)}\n                                name=\"basis\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>addicia</div>\n\n                {[...Array(2)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.addition, idx)}\n                                name=\"addition\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n\n\n        </TableContainer>\n    )\n}\n\nexport default ParametersTable\n","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\n\nexport const Profile = styled.div`\n    padding: 2rem;\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    margin-right: 2rem;\n\n`\n\nexport const GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: start;\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n    }\n`\n\nexport const ZeroMargin = styled.div`\n    input {\n        margin-bottom: 0 !important;\n    }\n`\n\nexport const GridRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n`\n\n\nexport const ThreeColRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    align-items: center;\n\n    input {\n        margin-bottom: 0 !important;\n    }\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr 1fr;\n        grid-template-areas:\n            \"a a\"\n            \"b c\";\n\n        div:nth-child(1){\n            grid-area: a;\n            margin-bottom: 0;\n        }\n        div:nth-child(2){\n            grid-area: b;\n            margin-bottom: 2rem;\n\n        }\n        div:nth-child(3){\n            grid-area: c;\n            margin-bottom: 2rem;\n        }\n    }\n`\n\nexport const Row = styled.div`\n    width: 75%;\n`\n\n\nexport const Title = styled.h2`\n    margin-bottom: 2rem;\n`\n\nexport const Container = styled.div`\n    margin-top: 2rem;\n    \n`\n\nexport const OrderHeader = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n`\n\nexport const OrderButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    margin-top: .2rem;\n    font-size: 1.2rem;\n`\n\nexport const AdminPanelContainer = styled.div`\n    margin-bottom: 3rem;\n`\n\nexport const CustomSelect = styled.select`\n    margin-top: 1.5rem;\n    min-width: 16.5rem;\n    width: 100%;\n    background-color: var(--input-background-color);\n    color: var(--input-color);\n    border: none;\n    padding: .5rem .5rem .5rem 1rem;\n    font-size: inherit;\n    font-family: inherit;\n    display: block;\n`","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\nexport const OrderContainer = styled.div`\n    width: 100%;\n    /* display: grid;\n    grid-template-columns: 1fr 25rem; */\n\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n    padding: 2rem;\n\n    &:not(:last-child) {\n        margin-bottom: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n\n    }\n`\n\nexport const OrderContent = styled.div`\n    display: flex;\n    justify-content: space-between;\n    /* align-items: center; */\n    margin-bottom: 2rem;\n    h2 {\n        font-size: 1.6rem;\n    }\n`\n\nexport const Options = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n    /* align-self: end;\n    justify-self: end; */\n`\n\nexport const UpdateButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    font-size: 1.2rem;\n    /* margin-left: auto; */\n    display:block;\n\n`\n\nexport const DeleteButton = styled(CustomButton)`\n    font-size: 1.2rem;\n    /* background-color: rgb(235, 172, 1); */\n    background-color: #DD4C4C;\n    /* margin-bottom: 1rem; */\n    margin-left: 1rem;\n    display:block;\n\n`\n\nexport const OrderId = styled.p`\n    opacity: .83;\n    /* font-size: 1.2rem; */\n    /* color: gray; */\n    /* margin-bottom: 2rem; */\n`","import React from 'react'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    // DeleteButton,\n    Options,\n    OrderContainer,\n    OrderContent,\n    UpdateButton,\n    OrderId\n} from './profile-order-overview.styles'\n\nconst ProfileOrderOverview = ({ id, handleUpdateClick }) => {\n    const orderData = useFetchById('api/admin/orders', id, !id)\n\n    if (orderData.isLoading) return <OrderContainer>\n        <h3>Načítavam</h3>\n    </OrderContainer>\n\n    const { order } = orderData.response\n\n    const dateData = new Date(order?.date)\n\n    return (\n        <OrderContainer>\n            {orderData.response?.error === 'invalid-branch' ? <OrderContent>\n                <h2>Táto objednávka patri inej prevadzke</h2>\n            </OrderContent> : <OrderContent>\n                    <div>\n                        <h2>ID Objednávky</h2>\n                        <OrderId>{order?.customId}</OrderId>\n                    </div>\n                    <div>\n                        <p>{dateData.toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric', year: \"numeric\" })}</p>\n                    </div>\n                </OrderContent>}\n\n            {!orderData.response?.error && <Options>\n                <UpdateButton onClick={handleUpdateClick}>\n                    Zobraziť\n                </UpdateButton>\n                {/* <DeleteButton>\n                    Vymazať\n                </DeleteButton> */}\n            </Options>}\n\n        </OrderContainer>\n    )\n}\n\nexport default ProfileOrderOverview\n","import styled from 'styled-components'\n\nexport const ExaminationUserContainer = styled.div`\n    font-size: 1.4rem;\n\n    span {\n        font-weight: bolder\n    }\n`","import React from 'react'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    ExaminationUserContainer\n} from './examination-user.styles'\n\nconst ExaminationUser = ({ userId }) => {\n    const { isLoading, response } = useFetchById(\"api/admin/users\", userId)\n\n    return (\n        <ExaminationUserContainer>\n            <p>Vystavoval:</p> <span>{isLoading ? \"Hľadám...\" : response?.user?.name}</span>\n        </ExaminationUserContainer>\n    )\n}\n\nexport default ExaminationUser\n","export const removeEmpty = (obj = {}) => {\n    return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v !== \"\"));\n}","\nexport const checkParameter = (parametersArr, idx) => {\n    if (parametersArr) {\n        if (parametersArr.length === 0) {\n            return \"\"\n        }\n        if (parametersArr[idx] === 1001 || parametersArr[idx] === \"1001\") {\n            return \"\"\n        }\n        return parametersArr[idx]\n    } else {\n        return \"\"\n    }\n}\n\nexport const checkParameterValue = (value) => {\n    if (value) {\n        if (value === \"1001\") {\n            return \"\"\n        }\n        if (value === 0) {\n            return \"\"\n        }\n        if (value === 1001) {\n            return \"\"\n        }\n        return value\n    } else {\n        return \"\"\n    }\n}\n\n// check if valid number othervise return 1001\nexport const formatParameter = parameter => {\n    if (parameter) {\n        const changeNumber = parameter.toString().replace(',', '.')\n        return isNaN(changeNumber) ? 1001 : changeNumber.toFixed(2)\n    }\n}","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\n\nexport const ModalContainer = styled.div`\n    position: fixed;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: 99999;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    background-color: rgba(0,0,0,0.3);\n`\n\n\n\nexport const Modal = styled.div`\n    width:100%;\n    max-width: 85rem;\n    max-height: 60rem;\n    color: var(--primary-text-color);\n\n    overflow-y: scroll;\n\n    padding: 2rem;\n    border-radius: .5rem;\n    background-color: var(--background-primary-color);\n\n    position: relative;\n    z-index: 999999;\n\n    h3 {\n        margin-bottom: 2rem;\n    }\n\n    .checkboxes {\n        width: 15rem;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n        background:  var(--background-primary-color);\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n        background: var(--primary-color);\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n        background: var(--primary-color);\n    }\n`\n\nexport const CloseButton = styled.button`\n    width: 100%;\n    height: 100%;\n\n    position: fixed;\n    left: 0;\n    right: 0;\n    z-index: 99999;\n\n    border: none;\n    outline: none;\n    opacity: 0;\n\n    &:focus {\n        outline: none\n    }\n`\n\nexport const SubmitButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    display: block;\n    margin: 2rem auto 0;\n`\n\nexport const Container = styled.div`\n    margin-bottom: 2rem;\n    h4 {\n        margin-bottom: 1rem;\n    }\n\n    div {\n    }\n`\n\nexport const ExamTypeCheckbox = styled(CustomCheckbox)`\n    margin-right: 1rem;\n`\n\nexport const IsSuitableCheckbox = styled(CustomCheckbox)`\n    margin-top: 2.2rem;\n`\n\nexport const TwoColContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 3rem;\n`\n\nexport const InputContainer = styled.div`\n    margin-bottom: 2rem;\n`\n\nexport const Table = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(7, 1fr);\n`\n\nexport const ObjectiveRefTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(5, 1fr);\n`\n\nexport const SubjectiveRefTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(10, 1fr);\n`\n\nexport const RefractTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(5, 1fr);\n`\nexport const KerathTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(3, 1fr);\n`\nexport const SubjectiveRefATable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(6, 1fr);\n`\nexport const ContactLensesTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(8, 1fr);\n`\nexport const ContactLensesTypeTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(4, 1fr);\n`\n\nexport const ExamTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(5, 1fr);\n`\n\nexport const TableTitleCol = styled.div`\n    padding: 1rem;\n`\n\nexport const TableCol = styled.div`\n\n`\n\nexport const Col = styled.div`\n    text-align: center;\n    margin: 1rem;\n    height: 4rem;\n    color: ${({ isActive }) => isActive ? \"var(--primary-color)\" : \"var(--input-color)\"};\n\n\n    input {\n        display:block;\n        width: 100%;\n        border: none;\n        padding: 1rem .5rem;\n        text-align: center;\n        font-family: inherit;\n        font-size: inherit;\n        background-color: var(--input-background-color);\n        color: var(--input-color);\n        border-radius: .5rem;\n        outline: none;\n        &:focus {\n            outline: none;\n        }\n        &:disabled {\n            opacity: .83;\n        }\n    }\n\n    /* clickable */\n\n    ${({ clickable }) => clickable && `\n        cursor: pointer;\n        \n        &:hover {\n            color: var(--primary-color);\n        }\n    `}\n`\n\nexport const TableBlock = styled.div`\n\n`","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport lodash from 'lodash'\nimport examSchema from '../../context/examination/exam.json'\nimport { removeEmpty } from '../../utils/object.utils'\n\nimport { useExaminationContext } from '../../context/examination/examination.context'\nimport { useFetchById } from '../../hooks/useFetch'\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    checkParameter,\n    checkParameterValue\n} from '../../utils/parameters.utils'\n\nimport {\n    CloseButton,\n    Modal,\n    ModalContainer,\n    SubmitButton,\n    Container,\n    ExamTypeCheckbox,\n    TwoColContainer,\n    InputContainer,\n    IsSuitableCheckbox,\n    Col,\n    Table,\n    TableTitleCol,\n    TableCol,\n    // TableBlock,\n    ObjectiveRefTable,\n    SubjectiveRefTable,\n    ExamTable,\n    RefractTable,\n    KerathTable,\n    SubjectiveRefATable,\n    ContactLensesTable,\n    ContactLensesTypeTable\n} from './modal-optometrist-examination.styles'\n\nconst OptometristExaminationModal = ({ close, refetch, userId, examinationToUpdate }) => {\n    const exam = useFetchById('api/admin/exams', examinationToUpdate, !examinationToUpdate)\n    const isUpdating = examinationToUpdate ? true : false\n\n    const {\n        createExamination,\n        updateExamination\n    } = useExaminationContext()\n\n    const [examObj, setExamObj] = useState(null)\n\n    const handleChange = (e) => {\n        const { value, name } = e.target\n\n        if(value === '') {\n            const obj = lodash.set(examObj, name, \"1001\")\n            setExamObj({\n                ...obj\n            })\n        } else {\n            const obj = lodash.set(examObj, name, value)\n            setExamObj({\n                ...obj\n            })\n        }\n    }\n\n    const handleSubmit = () => {\n        const formatedObj = {\n            ...removeEmpty(examObj),\n            doneTo: userId,\n            refrakcia: {\n                ...removeEmpty(examObj.refrakcia)\n            },\n            anamneza: {\n                ...removeEmpty(examObj.anamneza)\n            },\n            kontrola: {\n                ...removeEmpty(examObj.kontrola)\n            }\n        }\n\n        if (examObj.type === 1) {\n            delete formatedObj[\"anamneza\"]\n            delete formatedObj[\"kontrola\"]\n        }\n        if (examObj.type === 2) {\n            delete formatedObj[\"refrakcia\"]\n            delete formatedObj[\"kontrola\"]\n        }\n        if (examObj.type === 3) {\n            delete formatedObj[\"refrakcia\"]\n            delete formatedObj[\"anamneza\"]\n        }\n\n        if (isUpdating) {\n            delete formatedObj['date']\n            delete formatedObj['doneTo']\n            delete formatedObj['doneBy']\n            delete formatedObj['__v']\n            delete formatedObj['_id']\n\n            updateExamination(formatedObj, examinationToUpdate, () => {\n                refetch()\n                close()\n            })\n        } else {\n            createExamination(formatedObj, () => {\n                refetch()\n                close()\n            })\n        }\n\n    }\n\n    useEffect(() => {\n        // if(!examObj) return\n        if (!examinationToUpdate) return\n        if (exam.isLoading) return\n        if (!exam.response) return\n        setExamObj(prevValue => ({\n            ...prevValue,\n            ...exam.response.exam,\n            refrakcia: {\n                ...prevValue.refrakcia,\n                ...exam.response.exam.refrakcia,\n            },\n            anamneza: {\n                ...prevValue.anamneza,\n                ...exam.response.exam.anamneza,\n            },\n            kontrola: {\n                ...prevValue.kontrola,\n                ...exam.response.exam.kontrola,\n            }\n        }))\n\n    }, [exam.isLoading])\n\n    useEffect(() => {\n        // if(examinationToUpdate) return\n        if (!examSchema) return\n        setExamObj({\n            date: \"\",\n            doneBy: \"\",\n            doneTo: \"\",\n            type: 1,\n            refrakcia: {\n                nosi_od: \"\",\n                posledna_korekcia: \"\",\n                vyhovuje: false,\n                typ_sposob: \"\",\n                anamneza: \"\",\n                dopl_info: \"\",\n                vlastne_okuliare: {\n                    vnatur: [\"1001\", \"1001\"],\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visus: [\"1001\", \"1001\"],\n                    vbino: \"1001\"\n                },\n                objektivna_refrakcia: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    se: [\"1001\", \"1001\"],\n                    pd:[\"1001\",\"1001\"]\n\n                },\n                subjektivna_refrakcia: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visus: [\"1001\", \"1001\"],\n                    vbino: \"1001\",\n                    vbl: \"1001\",\n                    prizma: [\"1001\", \"1001\"],\n                    basis: [\"1001\", \"1001\"],\n                    os: [\"1001\", \"1001\"],\n                    domoko: \"0\"\n                }\n            },\n            anamneza: {\n                nosi_od: \"\",\n                posledna_korekcia: \"\",\n                vyhovuje: false,\n                typ_sposob: \"\",\n                stav_a_povolanie: \"\",\n                dopl_info: \"\",\n                obj_nalez: \"\",\n                vlastne_okuliare: {\n                    vnatur: [\"1001\", \"1001\"],\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visus: [\"1001\", \"1001\"],\n                    vbino: \"1001\"\n                },\n                refraktometer: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    se: [\"1001\", \"1001\"],\n                    pd:[\"1001\",\"1001\"]\n\n                },\n                keratometer: {\n                    hor: [\"1001\", \"1001\"],\n                    ver: [\"1001\", \"1001\"],\n                    ave: [\"1001\", \"1001\"]\n                },\n                subjektivna_refrakcia: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visus: [\"1001\", \"1001\"],\n                    bino: \"1001\",\n                    domoko: \"1001\"\n\n                },\n                kontaktne_sosovky: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    visd: [\"1001\", \"1001\"],\n                    bino1: [\"1001\", \"1001\"],\n                    visb: [\"1001\", \"1001\"],\n                    bino2: [\"1001\", \"1001\"]\n                },\n                typ_kontaktnych_sosoviek: {\n                    prvy: [\"1001\", \"1001\"],\n                    druhy: [\"1001\", \"1001\"],\n                    lkontrola: \"1001\",\n                    dop_roztok: \"1001\"\n                }\n            },\n            kontrola: {\n                typ_kontaktnych_sosoviek: {\n                    prvy: [\"1001\", \"1001\"],\n                    druhy: [\"1001\", \"1001\"],\n                    lkontrola: \"1001\",\n                    dop_roztok: \"1001\"\n                },\n                tabulka: {\n                    sph: [\"1001\", \"1001\"],\n                    cyl: [\"1001\", \"1001\"],\n                    ax: [\"1001\", \"1001\"],\n                    add: [\"1001\", \"1001\"],\n                    vis: [\"1001\", \"1001\"]\n                },\n                subj: \"\",\n                obj: \"\"\n            },\n            doporucenia: \"\",\n            vodic: false,\n            pc: false\n        })\n    }, [examSchema])\n\n    useEffect(() => {\n        return () => {\n            setExamObj(null)\n        }\n    }, [])\n\n    if (!examObj) return <ModalContainer><Modal><p>Loading...</p></Modal></ModalContainer>\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h3>Vyšetrenie</h3>\n                {!examinationToUpdate && <Container>\n                    <h4>Typ prehliadky</h4>\n                    <div>\n                        {examTypes.map((type, idx) => (\n                            <ExamTypeCheckbox\n                                key={idx}\n                                label={type.name}\n                                isActive={examObj.type === type.value}\n                                handleClick={() => handleChange({\n                                    target: {\n                                        name: \"type\",\n                                        value: type.value\n                                    }\n                                })}\n                            />\n                        ))}\n                    </div>\n                </Container>}\n\n                {examObj.type === 1 && (\n                    <Container>\n                        <h4>Refrakcia</h4>\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.refrakcia.nosi_od}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"refrakcia.nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.refrakcia.posledna_korekcia}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"refrakcia.posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'KŠ typ, spôsob nosenia'}\n                                    value={examObj.refrakcia.typ_sposob}\n                                    type=\"text\"\n                                    name=\"refrakcia.typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examObj?.refrakcia.vyhovuje}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"refrakcia.vyhovuje\",\n                                            value: examObj?.vyhovuje ? !examObj.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Anamnéza'\n                                name=\"refrakcia.anamneza\"\n                                value={examObj?.refrakcia.anamneza}\n                                rows=\"5\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={examObj.vodic}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vodic\",\n                                            value: examObj.vodic ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={examObj.pc}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"pc\",\n                                            value: examObj.pc ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </div>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"refrakcia.dopl_info\"\n                                value={examObj?.refrakcia.dopl_info || \"\"}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.vnatur[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare.vnatur, idx)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.sph, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.vlastne_okuliare.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.vlastne_okuliare?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='refrakcia.vlastne_okuliare.vbino'\n                                        type='text'\n                                        value={checkParameterValue(examObj.refrakcia.vlastne_okuliare?.vbino)}\n                                        // onChange={e => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                    // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vbino, vlastne_okuliare, setVlastne_okuliare)}\n                                    // onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Objektivná refrakcia</h4>\n\n                        <ObjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.sph, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.cyl, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.ax, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.se[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.se, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.se, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>PD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.objektivna_refrakcia.pd[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.objektivna_refrakcia?.pd, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.se, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ObjectiveRefTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col isActive={examObj.refrakcia.subjektivna_refrakcia?.domoko === \"1\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"refrakcia.subjektivna_refrakcia.domoko\",\n                                        value: examObj.refrakcia.subjektivna_refrakcia?.domoko === \"1\" ? \"0\" : \"1\"\n                                    }\n                                })}>P.</Col>\n                                <Col isActive={examObj.refrakcia.subjektivna_refrakcia?.domoko === \"2\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"refrakcia.subjektivna_refrakcia.domoko\",\n                                        value: examObj.refrakcia.subjektivna_refrakcia?.domoko === \"2\" ? \"0\" : \"2\"\n                                    }\n                                })}>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.sph, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.cyl, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.ax, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n                                        // \n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.add, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.visus, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='refrakcia.subjektivna_refrakcia.vbino'\n                                        type='text'\n                                        value={checkParameterValue(examObj.refrakcia.subjektivna_refrakcia?.vbino)}\n                                        // onChange={e => setSubjektivna_refrakcia(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                    // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.vbino, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n\n                                    // onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>PRIZMA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.prizma[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.prizma, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.prizma, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BÁZA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.basis[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.basis, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.basis, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>OS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`refrakcia.subjektivna_refrakcia.os[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.refrakcia.subjektivna_refrakcia?.os, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.os, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BL</Col>\n                                <Col>\n                                    <input\n                                        name={`refrakcia.subjektivna_refrakcia.vbl`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.refrakcia.subjektivna_refrakcia?.vbl)}\n                                        // onChange={e => setSubjektivna_refrakcia(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                    // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.vbino, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n\n                                    // onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </SubjectiveRefTable>\n                    </Container>\n                )}\n\n                {examObj.type === 2 && (\n                    <Container>\n                        <h4>Apl. KŠ</h4>\n\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.anamneza.nosi_od}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"anamneza.nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examObj.anamneza.posledna_korekcia}\n                                    // type=\"date\"\n                                    type=\"month\"\n                                    name=\"anamneza.posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'KŠ typ, spôsob nosenia'}\n                                    value={examObj.anamneza.typ_sposob}\n                                    type=\"text\"\n                                    name=\"anamneza.typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examObj.anamneza.vyhovuje}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"anamneza.vyhovuje\",\n                                            value: examObj.anamneza.vyhovuje ? !examObj.anamneza.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Povolanie'\n                                name=\"anamneza.stav_a_povolanie\"\n                                value={examObj.anamneza.stav_a_povolanie}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={examObj.vodic}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vodic\",\n                                            value: examObj.vodic ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={examObj.pc}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"pc\",\n                                            value: examObj.pc ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </div>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Anamnéza'\n                                name=\"anamneza.dopl_info\"\n                                value={examObj.anamneza.dopl_info}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Obj. nález'\n                                name=\"anamneza.obj_nalez\"\n                                value={examObj.anamneza.obj_nalez}\n                                rows=\"3\"\n\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.vnatur[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare.vnatur, idx)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.sph, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.vlastne_okuliare.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.vlastne_okuliare?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='anamneza.vlastne_okuliare.vbino'\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.vlastne_okuliare?.vbino)}\n                                        // onChange={e => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        onChange={handleChange}\n\n                                    // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vbino, vlastne_okuliare, setVlastne_okuliare)}\n                                    // onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Refraktometer</h4>\n\n                        <RefractTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.sph, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.cyl, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.ax, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.se[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.se, idx)}\n                                            onChange={handleChange}\n\n                                        // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.se, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>PD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.refraktometer.pd[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.refraktometer?.pd, idx)}\n                                            onChange={handleChange}\n\n                                        // onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                        // onBlur={(e) => formatParameters(e, refraktometer?.se, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </RefractTable>\n\n                        <h4>Keratometer</h4>\n\n                        <KerathTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>HOR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.keratometer.hor[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.keratometer?.hor, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, keratometer?.hor, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VER</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.keratometer.ver[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.keratometer?.ver, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, keratometer?.ver, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AVE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.keratometer.ave[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.keratometer?.ave, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, keratometer?.ave, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </KerathTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefATable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col isActive={examObj.anamneza.subjektivna_refrakcia?.domoko === \"1\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"anamneza.subjektivna_refrakcia.domoko\",\n                                        value: examObj.anamneza.subjektivna_refrakcia?.domoko === \"1\" ? \"0\" : \"1\"\n                                    }\n                                })}>P.</Col>\n                                <Col isActive={examObj.anamneza.subjektivna_refrakcia?.domoko === \"2\"} clickable onClick={() => handleChange({\n                                    target: {\n                                        name: \"anamneza.subjektivna_refrakcia.domoko\",\n                                        value: examObj.anamneza.subjektivna_refrakcia?.domoko === \"2\" ? \"0\" : \"2\"\n                                    }\n                                })}>L.</Col>\n                            </TableTitleCol>\n\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.sph, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.cyl, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.ax, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.ax, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.add, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.add, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.subjektivna_refrakcia.visus[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.subjektivna_refrakcia?.visus, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            onChange={handleChange}\n\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.visus, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO</Col>\n                                <Col>\n                                    <input\n                                        name={`anamneza.subjektivna_refrakcia.bino`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.subjektivna_refrakcia?.bino)}\n                                        // onChange={e => setSubjektivna_refrakciaA(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: e.target.value\n                                        // }))}\n                                        // onBlur={(e) => setSubjektivna_refrakciaA(prevValue => ({\n                                        onChange={handleChange}\n\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n\n                        </SubjectiveRefATable>\n\n                        <h4>Kontaktné šošovky</h4>\n\n                        <ContactLensesTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.sph, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.sph, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onChange={handleChange}\n\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.cyl[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.cyl, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            onChange={handleChange}\n\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.ax[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.ax, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.ax, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.add[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.add, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.add, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.visd[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.visd, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visd, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO1</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.bino1[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.bino1, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino1, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BL</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.visb[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.visb, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visb, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            {/* <TableCol>\n                                <Col>BINO2</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.kontaktne_sosovky.bino2[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.kontaktne_sosovky?.bino2, idx)}\n                                            onChange={handleChange}\n                                            // onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino2, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol> */}\n                        </ContactLensesTable>\n\n\n                        <h4>Typ Kontaktných šošoviek</h4>\n\n                        <ContactLensesTypeTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>PRVÝ TYP</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`anamneza.typ_kontaktnych_sosoviek.prvy[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.typ_kontaktnych_sosoviek?.prvy, idx)}\n                                            onChange={handleChange}\n\n                                        // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.prvy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>DRUHÝ TYP</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            // name='druhy'\n                                            name={`anamneza.typ_kontaktnych_sosoviek.druhy[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.anamneza.typ_kontaktnych_sosoviek?.druhy, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.druhy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>DOP.KONTROLA</Col>\n                                <Col>\n                                    <input\n                                        // name='lkontrola'\n                                        name={`anamneza.typ_kontaktnych_sosoviek.lkontrola`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.typ_kontaktnych_sosoviek?.lkontrola)}\n                                        onChange={handleChange}\n                                    // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: e.target.value\n                                    // }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>DOP.ROZTOK</Col>\n                                <Col>\n                                    <input\n                                        // name='dop_roztok'\n                                        name={`anamneza.typ_kontaktnych_sosoviek.dop_roztok`}\n                                        type='text'\n                                        value={checkParameterValue(examObj.anamneza.typ_kontaktnych_sosoviek?.dop_roztok)}\n                                        onChange={handleChange}\n                                    // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: e.target.value\n                                    // }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </ContactLensesTypeTable>\n                    </Container>\n                )}\n\n                {examObj.type === 3 && (\n                    <Container>\n                        <h4>Kontrola</h4>\n\n                        {/* <h4>Typ Kontaktných šošoviek</h4> */}\n\n<ContactLensesTypeTable>\n    <TableTitleCol>\n        <Col>{\"-\"}</Col>\n        <Col>P.</Col>\n        <Col>L.</Col>\n    </TableTitleCol>\n\n    <TableCol>\n        <Col>PRVÝ TYP</Col>\n        {[...Array(2)].map((value, idx) => (\n            <Col key={idx}>\n                <input\n                    name={`kontrola.typ_kontaktnych_sosoviek.prvy[${idx}]`}\n                    type='text'\n                    value={checkParameter(examObj.kontrola.typ_kontaktnych_sosoviek?.prvy, idx)}\n                    onChange={handleChange}\n\n                // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.prvy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                />\n            </Col>\n        ))}\n    </TableCol>\n    <TableCol>\n        <Col>DRUHÝ TYP</Col>\n        {[...Array(2)].map((value, idx) => (\n            <Col key={idx}>\n                <input\n                    // name='druhy'\n                    name={`kontrola.typ_kontaktnych_sosoviek.druhy[${idx}]`}\n                    type='text'\n                    value={checkParameter(examObj.kontrola.typ_kontaktnych_sosoviek?.druhy, idx)}\n                    // onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                    onChange={handleChange}\n                // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.druhy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                />\n            </Col>\n        ))}\n    </TableCol>\n    <TableCol>\n        <Col>DOP.KONTROLA</Col>\n        <Col>\n            <input\n                // name='lkontrola'\n                name={`kontrola.typ_kontaktnych_sosoviek.lkontrola`}\n                type='text'\n                value={checkParameterValue(examObj.kontrola.typ_kontaktnych_sosoviek?.lkontrola)}\n                onChange={handleChange}\n            // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n            //     ...prevValue,\n            //     [e.target.name]: e.target.value\n            // }))}\n            // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n            //     ...prevValue,\n            //     [e.target.name]: Number(e.target.value)\n            // }))}\n            />\n        </Col>\n    </TableCol>\n    <TableCol>\n        <Col>DOP.ROZTOK</Col>\n        <Col>\n            <input\n                // name='dop_roztok'\n                name={`kontrola.typ_kontaktnych_sosoviek.dop_roztok`}\n                type='text'\n                value={checkParameterValue(examObj.kontrola.typ_kontaktnych_sosoviek?.dop_roztok)}\n                onChange={handleChange}\n            // onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n            //     ...prevValue,\n            //     [e.target.name]: e.target.value\n            // }))}\n            // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n            //     ...prevValue,\n            //     [e.target.name]: Number(e.target.value)\n            // }))}\n            />\n        </Col>\n    </TableCol>\n</ContactLensesTypeTable>\n\n                        <ExamTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.sph[${idx}]`}\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.sph, idx)}\n                                            onChange={handleChange}\n\n                                        // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.sph, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            // name='cyl'\n                                            name={`kontrola.tabulka.cyl[${idx}]`}\n\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.cyl, idx)}\n                                            // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            onChange={handleChange}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.cyl, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.ax[${idx}]`}\n                                            // name='ax'\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.ax, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.ax, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.add[${idx}]`}\n                                            // name='add'\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.add, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.add, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VIS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name={`kontrola.tabulka.vis[${idx}]`}\n                                            // name='vis'\n                                            type='text'\n                                            value={checkParameter(examObj.kontrola.tabulka?.vis, idx)}\n                                            onChange={handleChange}\n                                        // onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                        // onBlur={(e) => formatParameters(e, tabulka?.vis, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ExamTable>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label={'Subj.'}\n                                value={examObj.kontrola.subj}\n                                rows=\"3\"\n                                type=\"text\"\n                                name=\"kontrola.subj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label={'Obj.'}\n                                value={examObj.kontrola.obj}\n                                rows=\"3\"\n                                type=\"text\"\n                                name=\"kontrola.obj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={examObj.vodic}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vodic\",\n                                            value: examObj.vodic ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={examObj.pc}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"pc\",\n                                            value: examObj.pc ? false : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </div>\n                    </Container>\n                )}\n\n                <InputContainer>\n                    <CustomTextarea\n                        label='Doporučenia'\n                        name=\"doporucenia\"\n                        value={examObj.doporucenia}\n                        rows=\"5\"\n                        handleChange={e => handleChange(e)}\n                    />\n                </InputContainer>\n\n                <SubmitButton onClick={handleSubmit}>{examinationToUpdate ? \"Uložiť\" : \"Odoslať prehliadku\"}</SubmitButton>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default OptometristExaminationModal\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"Apl. KŠ\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\nexport const ExaminationsOverviewContainer = styled.div`\n\n`\n\nexport const Header = styled.div`\n    margin-top: 2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    h2 {\n        margin: 2rem 0;\n    }\n`\n\nexport const ExaminationContainer = styled.div`\n    border-radius: .5rem;\n    padding: 2rem;\n    /* box-shadow: 0 0 1.5rem 0 rgba(0,0,0, 0.08); */\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n\n    margin-bottom: 2rem;\n`\n\nexport const ExamHead = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 2rem;\n`\n\nexport const ExamTableContainer = styled.div`\n    display: grid;\n    grid-template-columns: 3rem repeat(10, 1fr);\n    font-size: 1.2rem;  \n`\n\nexport const HeadTableCol = styled.div`\n    display: grid;\n    grid-template-rows: repeat(5, 5rem);\n    div {\n        align-self: center;\n        display:flex;\n        justify-content: space-between;\n    }\n`\n\nexport const TableCol = styled.div`\n    display: grid;\n    grid-template-rows: repeat(5, 5rem);\n\n    div {\n        text-align:center;\n        align-self: center;\n        margin-left: .5rem;\n\n        &:not(:first-child) {\n            background-color: var(--input-background-color);\n            padding: .5rem;\n            border-radius: .5rem;\n            min-height: 2.5rem;\n        }\n    }\n`\nexport const ExaminationOptions = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport const AddButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    font-size: 1.2rem;\n`\n\nexport const PdfButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-size: 1.2rem;\n    font-weight: bold;\n`\n\nexport const UpdateButton = styled(CustomButton)`\n    font-size: 1.2rem;\n    margin-left: 1rem;\n    margin-right: 1rem;\n`\n\nexport const DeleteButton = styled(CustomButton)`\n    font-size: 1.2rem;\n    background-color: var(--color-red);\n\n`","import React, { useState, useEffect, useContext } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useFetchById } from '../../hooks/useFetch'\nimport { ExaminationContext } from '../../context/examination/examination.context'\n\nimport ExaminationUser from '../examination-user/examination-user.component'\nimport OptometristExaminationModal from '../modal-optometrist-examination/modal-optometrist-examination.component'\n\n// import {\n//     checkParameterValue\n// } from '../../utils/parameters.utils'\n\nimport {\n    ExaminationsOverviewContainer,\n    Header,\n    ExaminationContainer,\n    ExamHead,\n    // ExamTableContainer,\n    // HeadTableCol,\n    // TableCol,\n    ExaminationOptions,\n    AddButton,\n    UpdateButton,\n    DeleteButton,\n    PdfButton\n} from './examinations-overview.styles'\n\nconst ExaminationsOverview = () => {\n    const params = useParams()\n    const examinationData = useFetchById(\"api/admin/exams/user\", params.id)\n    const { deleteExamination, getPDF } = useContext(ExaminationContext)\n    const [showOptometristModal, setShowOptometristModal] = useState(false)\n    const [examinations, setExaminations] = useState([])\n    const [examinationToUpdate, setExaminationToUpdate] = useState(null)\n\n    const [isDisabled, setIsDisabled] = useState(false)\n\n\n    const handleUpdateClick = (e, id) => {\n        e.preventDefault()\n        setExaminationToUpdate(id)\n        setShowOptometristModal(true)\n    }\n\n    const handleDelete = (e, id) => {\n        e.preventDefault()\n        if (isDisabled) {\n            return;\n        }\n        setIsDisabled(true);\n        deleteExamination(id)\n\n        setTimeout(() => {\n            examinationData.refetch()\n            setIsDisabled(false);\n        }, 100)\n    }\n\n    const handleCloseModal = () => {\n        setShowOptometristModal(false)\n        setExaminationToUpdate(null)\n    }\n\n    useEffect(() => {\n        if (!examinationData.isLoading) {\n            if (examinationData.response) {\n                setExaminations(examinationData.response.exams)\n            }\n        }\n    }, [examinationData.isLoading])\n\n    return (\n        <ExaminationsOverviewContainer>\n            {showOptometristModal && <OptometristExaminationModal\n                userId={params.id}\n                examinationToUpdate={examinationToUpdate}\n                refetch={examinationData.refetch}\n                close={handleCloseModal}\n            />}\n            <Header>\n                <h2>Vyšetrenia</h2>\n                <div>\n                    <AddButton type='button' onClick={() => setShowOptometristModal(true)}>Pridať prehliadku</AddButton>\n                </div>\n            </Header>\n\n\n            <div>\n                {examinations && examinations.map((examination, idx) => (\n                    <ExaminationContainer key={idx}>\n                        <ExamHead>\n                            <h3>Dátum:</h3>\n                            <p>{new Date(examination?.date).toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric' })}</p>\n                        </ExamHead>\n                        <ExamHead>\n                            <h3>Typ vyšetrenia:</h3>\n                            <p>{examTypes[examination?.type - 1].name}</p>\n                        </ExamHead>\n\n                        <ExaminationOptions>\n                            <ExaminationUser userId={examination.doneBy} />\n                            <div>\n                                <PdfButton onClick={e => getPDF(examination._id)}>PDF</PdfButton>\n                                <UpdateButton onClick={e => handleUpdateClick(e, examination._id)}>Upraviť</UpdateButton>\n\n                                <DeleteButton disabled={isDisabled} onClick={e => handleDelete(e, examination._id)}>\n                                    {isDisabled ? 'Mažem...' : 'Vymazať'}\n                                </DeleteButton>\n                            </div>\n                        </ExaminationOptions>\n                    </ExaminationContainer>\n                ))}\n            </div>\n        </ExaminationsOverviewContainer>\n    )\n}\n\nexport default ExaminationsOverview\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"Apl. KŠ\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\nimport ProfileOrderOverview from '../profile-order-overview/profile-order-overview.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\nimport ExaminationsOverview from '../examinations-overview/examinations-overview.component'\n\nimport {\n    retailNames\n} from '../../utils/warehouse.utils'\n\nimport {\n    Profile,\n    GridContainer,\n    GridRow,\n    Row,\n    // ThreeColRow,\n    ZeroMargin,\n    Title,\n    Container,\n    OrderHeader,\n    OrderButton,\n    CustomSelect,\n    AdminPanelContainer\n} from './user.form-styles'\n\nconst UserForm = ({\n    isAdmin,\n    isUpdating,\n    user,\n    handleChange,\n    handleParameterChange,\n    handleCompanyChange,\n    isOptometrist,\n    isOrder = false,\n    isCustomer\n}) => {\n    const { push } = useHistory()\n\n    const handleAddOrderButtonClick = e => {\n        e.preventDefault()\n        push(`/dashboard/objednavky/${user._id}`)\n    }\n\n\n    return (\n        <GridContainer>\n            <Profile>\n                {isAdmin && !isCustomer && <AdminPanelContainer>\n                    <h2>Admin panel</h2>\n                    <InputRow\n                        label=\"Predajňa na ktorej uživatel pracuje\"\n                        example=''\n                    >\n                        <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Nezadané</option>\n                            {\n                                retailNames.map((name, idx) => {\n                                    if (idx === 0) return\n                                    return (\n                                        <option key={idx} value={idx}>{name}</option>\n                                    )\n                                })\n                            }\n                        </CustomSelect>\n                    </InputRow>\n                    <InputRow\n                        label=\"Výška administrativných práv\"\n                        example=\"\"\n                    >\n                        <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Zákaznik</option>\n                            <option value={1}>Predavač</option>\n                            <option value={2}>Vedúci</option>\n                        </CustomSelect>\n                    </InputRow>\n\n                    <Container>\n                        <CustomCheckbox\n                            label='Optometrista'\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"optometrist\",\n                                    value: !user.optometrist\n                                }\n                            })}\n                            isActive={user.optometrist}\n                        />\n                    </Container>\n                </AdminPanelContainer>}\n                <div>\n                    <h2>Informácie</h2>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        {isCustomer && <div>\n                            <CustomInput\n                                // label=\"Priezvisko*\"\n                                type='date'\n                                name='birthDate'\n                                value={user.birthDate}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>}\n                    </GridRow>\n                </div>\n\n                <Container>\n                    <h2>Kontaktné údaje</h2>\n                    <Row>\n                        <div>\n                            <CustomInput\n                                label=\"E-mail*\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        {isCustomer && <div>\n                            <CustomInput\n                                label=\"Telefónne číslo\"\n                                type='text'\n                                name='phone'\n                                value={user.phone ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>}\n                    </Row>\n                </Container>\n\n                {isCustomer && <Container>\n                    <h2>Fakturačné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.address ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.psc ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.city ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.country ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>}\n                {isCustomer && <Container>\n                    <h2>Firemné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČO\"\n                                type='text'\n                                name='ico'\n                                value={user.company.ico ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"DIČ\"\n                                type='text'\n                                name='dic'\n                                value={user.company.dic ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČ DPH\"\n                                type='text'\n                                name='icdph'\n                                value={user.company.icdph ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            {/* <CustomInput\n                                label=\"IČ DPH\"\n                                type='text'\n                                name='icdph'\n                                value={user.company.icdph ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            /> */}\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.company.address ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.company.psc ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.company.city ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.company.country ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n\n\n                </Container>}\n\n                {isCustomer && <Container>\n                    <h2>Parametre</h2>\n\n                    <ParametersTable\n                        parameters={user.lenses}\n                        handleChange={handleParameterChange}\n                    />\n                </Container>}\n\n\n                {isCustomer && <div>\n                        <CustomTextarea\n                            label=\"Poznámka\"\n                            type='text'\n                            rows=\"5\"\n                            name='note'\n                            value={user.note ?? \"\"}\n                            handleChange={(e) => handleChange(e)}\n                        />\n                </div>}\n\n            </Profile>\n\n            {\n                isCustomer && !isOrder && isUpdating && <div>\n                    <OrderHeader>\n                        <Title>\n                            Objednávky\n                    </Title>\n                        <OrderButton onClick={e => handleAddOrderButtonClick(e)}>Pridať objednávku</OrderButton>\n                    </OrderHeader>\n                    <div>\n                        {user.orders.length > 0 ? user.orders.map((order, idx) => (\n                            <ProfileOrderOverview\n                                key={idx}\n                                id={order}\n                                handleUpdateClick={() => push(`/dashboard/objednavky/${user._id}/${order}`)}\n                            />\n                        )).reverse().slice(0, 5) : (\n                            <p>Žiadné objednávky</p>\n                        )}\n                    </div>\n                    {isOptometrist && <ExaminationsOverview />}\n                </div>\n            }\n        </GridContainer >\n    )\n}\n\nexport default UserForm\n","import styled, { css } from \"styled-components\"\n\nconst shrinkLabel = css`\n    left: .5rem;\n    top: -14px;\n    font-size: 12px;\n    color: var(--input-color);\n`\nexport const InputGroup = styled.div`\n    position: relative;\n\n    /* margin: 45px 0; */\n\n    .form-input {\n        /* background: none; */\n        background-color: var(--input-background-color);\n        color: var(--input-color);\n        font-size: 1.5rem;\n        padding: 1rem .5rem 1rem 2rem;\n        display: block;\n        width: 100%;\n        border: none;\n        border-radius: .5rem;\n        /* border-bottom: 1px solid #000; */\n        margin: 2rem 0 0;\n        font-family: inherit;\n\n        &:focus {\n        outline: none;\n        }\n\n        &:focus ~ .form-input-label {\n            ${shrinkLabel}\n        }\n    }\n\n    input[type = 'password'] {\n        letter-spacing: 0.3em;\n    }\n\n    .form-input-label {\n        color: var(--input-color);\n        font-size: 1.4rem;\n        font-weight: normal;\n        position: absolute;\n        pointer-events: none;\n        left: 1.5rem;\n        top: 1rem;\n        transition: 300ms ease all;\n\n        &.shrink {\n            ${shrinkLabel}\n        }\n    }\n\n    @media all and (max-width: 500px) {\n        .form-input {\n            font-size: 1.4rem;\n        }\n        /* padding: 1rem .5rem 1rem 2rem; */\n    }\n`\n","import React from 'react'\n\nimport { InputGroup } from './custom-input.styles'\n\nconst CustomInput = ({ handleChange, label, name, ...otherProps }) => {\n    return (\n        <InputGroup>\n            <input\n                className='form-input'\n                name={name}\n                onChange={handleChange}\n                {...otherProps}\n            />\n            {label ? (\n                <label htmlFor={name} className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}>\n                    {label}\n                </label>\n            ) : null\n            }\n        </InputGroup>\n    )\n}\n\nexport default CustomInput","import { useEffect, useState } from 'react'\n\nexport const useFetch = (path, skip = false, method = \"GET\") => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [message, setMessage] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const requestOptions = {\n        method: method,\n        // headers: myHeaders,\n        // body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setMessage(data.message)\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n                setMessage(\"Niečo sa pokazilo\")\n            }\n        }\n        fetchData()\n    }, [refetchIndex])\n\n    return { response, isLoading, error, message, refetch }\n}\n\nexport const useFetchByQuery = (path, queryObj, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify(queryObj)\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path])\n\n    return { response, isLoading, error, refetch }\n}\n\nexport const useFetchById = (path, id, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}/${id}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path, id])\n\n    return { response, isLoading, error, refetch }\n}\n","export const brands = [\n    \"Adidas\",\n    \"Armani Exchange\",\n    \"Arnette\",\n    \"Blackfin\",\n    \"Blumarine\",\n    \"Burberry\",\n    \"Bvlgari\",\n    \"Calvin Klein\",\n    \"Carolina Herrera\",\n    \"Carrera\",\n    \"David Beckham\",\n    \"Dior\",\n    \"Dolce & Gabbana\",\n    \"Elle\",\n    \"Emporio Armani\",\n    \"Esprit\",\n    \"Etnia Barcelona\",\n    \"Fendi\",\n    \"Fossil\",\n    \"Furla\",\n    \"Giorgio Armani\",\n    \"Givenchy\",\n    \"Gucci\",\n    \"Guess\",\n    \"H.I.S\",\n    \"Hawkers\",\n    \"Hugo Boss\",\n    \"Jaguar\",\n    \"Jimmy Choo\",\n    \"Lacoste\",\n    \"Liu Jo\",\n    \"Marc Jacobs\",\n    \"Max Mara\",\n    \"Max&Co\",\n    \"Meller\",\n    \"Mexx\",\n    \"Michael Kors\",\n    \"Moschino\",\n    \"Oakley\",\n    \"Persol\",\n    \"Polaroid\",\n    \"Police\",\n    \"Polo Ralph Lauren\",\n    \"Prada\",\n    \"Prada Linea Rossa\",\n    \"Ralph\",\n    \"Ralph Lauren\",\n    \"Ray-Ban\",\n    \"Salvatore Ferragamo\",\n    \"Smith\",\n    \"Strellson\",\n    \"Tiffany&Co.\",\n    \"Tom Ford\",\n    \"Tommy Hilfiger\",\n    \"Versace\",\n    \"Vogue\"\n]\n\nexport const lensesBrands = [\n    \"Acuvue\",\n    \"Adore\",\n    \"Air Optix\",\n    \"Biofinity\",\n    \"Biomedics\",\n    \"Clariti\",\n    \"ColourVue\",\n    \"Comfilcon A\",\n    \"Dailies\",\n    \"Freshlook\",\n    \"Lenjoy\",\n    \"Proclear\",\n    \"Purevision\",\n    \"Soflens\",\n]\n\nexport const retailNames = [\n    \"eshop\",\n    \"Centrálny sklad\",\n    \"Obchodná, Bratislava\",\n    \"Miletičova, Bratislava\",\n    \"Vajnory, Bratislava\",\n    \"Vajnorská 53, Bratislava\",\n    \"OC Branč, Senica\"\n]\n\nexport const retailNamesTabs = [\n    {\n        id: 0,\n        name: \"Všetky\",\n    },\n    {\n        id: 1,\n        name: \"Centrálny sklad\",\n    },\n    {\n        id: 2,\n        name: \"Obchodná, Bratislava\",\n    },\n    {\n        id: 3,\n        name: \"Miletičova, Bratislava\",\n    },\n    {\n        id: 4,\n        name: \"Vajnory, Bratislava\",\n    },\n    {\n        id: 5,\n        name: \"Vajnorská 53, Bratislava\",\n    },\n    {\n        id: 6,\n        name: \"OC Branč, Senica\",\n    },\n]\n\nexport const glassesColors = [\n    \"Čierná\",\n    \"Modrá\",\n    \"Červená\",\n    \"Sivá\",\n    \"Zlatá\",\n    \"Strieborná\",\n    \"Hnedá\",\n    \"Fialová\",\n    \"Zelená\",\n    \"Sedá\",\n    \"Bordová\",\n]\n\nexport const glassesMaterials = [\n    \"Acetát\",\n    \"Kov\",\n    \"Titán\",\n    \"TR90\",\n    \"Patent\",\n    \"Optyl\",\n]\n\nexport const glassesShapes = [\n    \"Pilot\",\n    \"Squared\",\n    \"Browline\",\n    \"Cat eye\",\n    \"Tiny\",\n    \"Oversize\",\n    \"Okrúhle\",\n    \"Oválne\",\n    \"Obdĺžnikové\",\n    \"Flat top\",\n    \"Špeciálne\"\n]\n\nexport const formatPrice = (price = \"\") => {\n    price.toString()\n    let value = 0\n    if (price.includes(',')) {\n        if (price.split(',')[1].length === 1) {\n            value = price.split(',')[0] + price.split(',')[1] + \"0\"\n            return Number(value)\n        } else {\n            value = price.split(',')[0] + price.split(',')[1]\n            return Number(value)\n        }\n    } else {\n        return Number(price * 100)\n    }\n}\n\nexport const formatfloatNumber = number => {\n    let value = 0\n\n    if (number.includes(',')) {\n        value = number.split(',')[0] + '.' + number.split(',')[1]\n        return value\n    } else {\n        return number\n    }\n}","import styled from 'styled-components'\nimport { paddingStyles } from '../../global.styles'\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    /* height: 100%; */\n    overflow-y: scroll;\n    overflow-x: visible;\n    scroll-behavior: smooth;\n    ${paddingStyles};\n    padding-top: 1.5rem;\n    padding-bottom: 1.5rem;\n    color: var(--primary-text-color);\n    /* border: 1px solid red; */\n\n\n\n\n    @media all and (max-width: 1150px) {\n        margin-bottom: 8rem;\n\n        @media all and (max-width: 700px) {\n            overflow-x: scroll;\n        }\n    }\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n        background:  var(--background-primary-color);\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n        background: var(--primary-color);\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n        background: var(--primary-color);\n    }\n`\n\nexport const FixedContainer = styled.div`\n    max-width: 125rem;\n    width: 100%;\n`","import React from 'react'\nimport { Container, FixedContainer } from './scroll-container.styles'\n\nconst ScrollContainer = ({ children }) => {\n    return (\n        <Container>\n            <FixedContainer>\n                {children}\n            </FixedContainer>\n        </Container>\n    )\n}\n\nexport default ScrollContainer","import styled from 'styled-components'\n\nexport const CheckboxContainer = styled.div`\n    display: inline-block;\n    cursor: pointer;\n    font-size: 1.5rem;\n    font-weight: 700;\n    /* margin-right: 2rem; */\n    background-color: ${({ isActive }) => isActive ? \"var(--primary-color)\" : \"var(--body-background-primary-color)\"};\n    color: ${({ isActive }) => isActive ? \"var(--button-font-color)\" : \"var(--secondary-text-color)\"};\n    /* font-weight: ${({ isActive }) => isActive ? \"border\" : \"normal\"}; */\n    padding: .8rem 3rem;\n    border-radius: .2rem;\n    transition: all .2s ease-out;\n\n    @media all and (max-width: 500px) {\n        padding: 0.5rem 1.5rem;\n        font-size: 1.4rem;\n    }\n`","import React from 'react'\n\nimport { CheckboxContainer } from './custom-checkbox.styles'\n\nconst CustomCheckbox = ({ label, isActive, handleClick, ...otherprops }) => {\n    return (\n        <CheckboxContainer isActive={isActive} onClick={handleClick} {...otherprops}>\n            {label}\n        </CheckboxContainer>\n    )\n}\n\nexport default CustomCheckbox\n","import styled, { css } from \"styled-components\"\n\nconst shrinkLabel = css`\n    left: .5rem;\n    top: -14px;\n    font-size: 12px;\n    color: var(--input-color);\n`\nexport const InputGroup = styled.div`\n    position: relative;\n    /* margin: 45px 0; */\n\n    .form-input {\n        background: none;\n        background-color: var(--input-background-color);\n        color: var(--input-color);\n\n        font-size: 1.5rem;\n        padding: .5rem .5rem .5rem 2rem;\n        display: block;\n        width: 100%;\n        border: none;\n        border-radius: .5rem;\n        /* border-bottom: 1px solid #000; */\n        margin: 25px 0;\n        font-family: inherit;\n        resize: none;\n\n        &:focus {\n        outline: none;\n        }\n\n        &:focus ~ .form-input-label {\n            ${shrinkLabel}\n        }\n    }\n\n    .form-input-label {\n        color: var(--input-color);\n        font-size: 1.4rem;\n        font-weight: normal;\n        position: absolute;\n        pointer-events: none;\n        left: 1.5rem;\n        top: .6rem;\n        transition: 300ms ease all;\n\n        &.shrink {\n            ${shrinkLabel}\n        }\n    }\n`\n","import React from 'react'\n\nimport { InputGroup } from './custom-textarea.styles'\n\nconst CustomTextarea = ({ handleChange, label, name, ...otherProps }) => {\n    return (\n        <InputGroup>\n            <textarea\n                className='form-input'\n                name={name}\n                onChange={handleChange}\n                {...otherProps}\n            />\n            {label ? (\n                <label htmlFor={name} className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}>\n                    {label}\n                </label>\n            ) : null\n            }\n        </InputGroup>\n    )\n}\n\nexport default CustomTextarea","export const fetchUsers = (token) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users`, requestOptions)\n\n}\n\nexport const fetchUser = (token, id) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n}\n\nexport const patchUser = (token, user, id) => {\n    // const {\n    //     _id: id,\n    //     address,\n    //     admin,\n    //     city,\n    //     country,\n    //     email,\n    //     lenses: {\n    //         cylinder,\n    //         cylinderAxes,\n    //         diopters,\n    //         distance,\n    //         addition,\n    //         basis,\n    //         prism,\n    //     },\n    //     name,\n    //     phone,\n    //     psc,\n    //     premises\n    // } = user\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const raw = JSON.stringify({\n        ...user\n        // address: address || undefined,\n        // admin: admin,\n        // premises: Number(premises) === 0 ? undefined : premises,\n        // city: city || undefined,\n        // country: country || undefined,\n        // email: email || undefined,\n        // lenses: {\n        //     cylinder: cylinder,\n        //     cylinderAxes: cylinderAxes,\n        //     diopters: diopters,\n        //     distance: distance,\n        //     addition: addition,\n        //     basis: basis,\n        //     prism: prism,\n        // },\n        // name: name,\n        // phone: phone || undefined,\n        // psc: psc || undefined,\n    })\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n}\n\nexport const postUser = (token, user) => {\n    const {\n        name,\n        email,\n    } = user\n\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const raw = JSON.stringify({\n        email: email,\n        name: name,\n    })\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\n}\n\nexport const postAdmin = (token, user) => {\n\n    const {\n        name,\n        email,\n        password,\n        premises,\n        admin\n    } = user\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const raw = JSON.stringify({\n        admin: Number(admin),\n        email: email,\n        name: name,\n        premises: Number(premises),\n        password\n    })\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\n}","export const initUserObj = {\n    address: \"\",\n    admin: 0,\n    premises: 0,\n    boughtProducts: {},\n    city: \"\",\n    country: \"\",\n    date: \"\",\n    email: \"\",\n    finishedRegistration: false,\n    company: {\n        ico: \"\",\n        dic: \"\",\n        icdph: \"\",\n        address: '',\n        psc: '',\n        country: '',\n    },\n    lenses: {\n        cylinder: [1001, 1001, 1001, 1001],\n        cylinderAxes: [1001, 1001, 1001, 1001],\n        diopters: [1001, 1001, 1001, 1001],\n        distance: [1001, 1001, 1001, 1001],\n        addition: [1001, 1001, 1001, 1001],\n        basis: [1001, 1001, 1001, 1001],\n        prism: [1001, 1001, 1001, 1001],\n        vys: [1001, 1001, 1001, 1001],\n    },\n    name: \"\",\n    orders: [],\n    phone: \"\",\n    psc: \"\",\n    tempUser: false,\n    totalSpent: 0,\n    watchList: [],\n    fName: \"\",\n    lName: \"\",\n    password: '',\n    confirmPassword: \"\",\n    birthDate: Date.now(),\n    optometrist: false\n\n}","import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n// import { OrderContext } from '../order/order.context'\n\nimport {\n    // fetchUsers,\n    fetchUser,\n    patchUser,\n    postAdmin,\n    postUser,\n} from './user.queries'\n\nimport {\n    initUserObj\n} from './user.utils'\n\nexport const UserContext = createContext({\n    isUpdating: false,\n    activeIndex: 0,\n    handleChangeFilterItem: () => { },\n    filterItems: [],\n    totalCount: 0,\n    users: null,\n    user: null,\n    // getUsers: () => { },\n    getUser: () => { },\n    handleChange: () => { },\n    handleParameterChange: () => { },\n    handleCompanyChange: () => { },\n    updateUser: () => { },\n    resetUser: () => { },\n    formToShow: 0,\n    switchFormButtons: [],\n    toggleUserForm: () => { },\n    createUser: () => { },\n    getFilteredUsers: () => { },\n    getUserByQuery: () => { },\n    deleteUser: () => { },\n})\n\nconst UserProvider = ({ children }) => {\n    const { push } = useHistory()\n    const { token } = useContext(AuthContext)\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n    // ------------------------\n\n    const [user, setUser] = useState(initUserObj)\n    const [users, setUsers] = useState(null)\n    const [totalCount] = useState(0)\n\n    // ------------------------\n\n    console.count(\"USERCONTEXT\")\n    console.log(user)\n\n    const [isUpdating, setIsUpdating] = useState(false)\n    const [activeIndex, setActiveIndex] = useState(0)\n    const filterItems = [\n        {\n            id: 0,\n            name: \"Zákazníci\",\n            filter: 0,\n        },\n        {\n            id: 1,\n            name: \"Zamestnanci\",\n            filter: 1,\n        },\n        {\n            id: 2,\n            name: \"Vedúci\",\n            filter: 2,\n        },\n        // {\n        //     id: 3,\n        //     name: \"Velký brat\",\n        //     filter: 3,\n        // },\n        // {\n        //     id: 4,\n        //     name: \"Odstránené\",\n        //     filter: 3\n        // }\n    ]\n\n    // ------------------------\n\n    const [formToShow, setFormToShow] = useState(0)\n    const switchFormButtons = [\n        {\n            name: \"Zákazník\"\n        },\n        {\n            name: \"Zamestnanec\"\n        }\n    ]\n\n    const toggleUserForm = (e, idx) => {\n        e.preventDefault()\n        setFormToShow(idx)\n    }\n\n    // ------------------------\n\n\n    const handleChangeFilterItem = (itemIndex) => {\n        setActiveIndex(itemIndex)\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n\n        setUser({\n            ...user,\n            [name]: value\n        })\n    }\n\n    const handleParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value === '' ? 1001 : value\n        setUser({\n            ...user,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleCompanyChange = (e) => {\n        const { name, value } = e.target\n        setUser({\n            ...user,\n            company: {\n                ...user.company,\n                [name]: value\n            }\n        })\n    }\n\n    useEffect(() => {\n        setUser({\n            ...user,\n            name: user?.fName + \" \" + user?.lName\n        })\n    }, [user?.fName, user?.lName])\n\n    const resetUser = () => {\n        setUser(initUserObj)\n        setIsUpdating(false)\n        setFormToShow(0)\n    }\n\n    // ------------------------\n    // USER ACTIONS\n    // ------------------------\n\n    // Get all users\n    // const getUsers = async () => {\n    //     setIsLoading(true)\n    //     setShowModal(true)\n\n    //     try {\n    //         const response = await fetchUsers(token)\n    //         const data = await response.json()\n\n    //         console.log(data)\n    //         if (data.users) {\n    //             setUsers(data.users)\n    //             setTotalCount(data.count)\n    //             setIsLoading(false)\n    //             closeModal()\n\n    //         } else {\n    //             getMessage(data.message)\n    //             setIsLoading(false)\n    //         }\n    //     } catch (err) {\n    //         console.log(err)\n    //         getMessage(\"Nieco sa pokazilo\")\n    //         setIsLoading(false)\n    //     }\n    // }\n\n    // Get single user\n    const getUser = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n        setIsUpdating(true)\n\n        try {\n            const response = await fetchUser(token, id)\n            const data = await response.json()\n\n            if (data.user) {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                setIsLoading(false)\n                closeModal()\n\n            } else {\n                getMessage(data.message)\n                setIsLoading(false)\n            }\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // Update user\n    const updateUser = async (user, id, path, refetchUser, close, addUser) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await patchUser(token, user, id)\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.messageSK)\n                setIsLoading(false)\n                return\n            }\n\n\n            setIsLoading(false)\n            closeModal()\n\n            if (path === 'order') {\n                push(`/dashboard/objednavky/${id}`)\n            } else if (path === 'profile') {\n                push(`/dashboard/zakaznici/${id}`)\n            } else if (path === 'isOrder') {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n\n                addUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // refetchUser()\n                close()\n            } else {\n                push(\"/dashboard/zakaznici\")\n            }\n\n            getFilteredUsers({\n                filters: {\n                    admin: activeIndex\n                }\n            })\n            // http://localhost:1000/#/dashboard/zakaznici\n\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createUser = async (user, path) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            if (formToShow === 0) {\n                let data = {}\n                if (!user._id) {\n                    const response = await postUser(token, user)\n                    data = await response.json()\n\n                    if (data.error) {\n                        getMessage(data.message)\n\n                        if (data.type === 'email') {\n                            getMessage(\"Email existuje\")\n                        }\n                        if (data.error === 'format' && data.message.includes('email')) {\n                            getMessage(\"Email musi byt platny email\")\n                        }\n                        setIsLoading(false)\n                        return\n                    }\n\n                    setUser({\n                        ...data.user,\n                        _id: data.user._id\n                    })\n                }\n\n                const userId = data.user ? data.user._id : user._id\n\n                updateUser({\n                    ...user\n                }, userId, path)\n\n                // setIsLoading(false)\n                // getUsers()\n                // push('/dashboard/zakaznici')\n                // closeModal()\n\n            } else {\n                if (user.password !== user.confirmPassword) {\n                    getMessage(\"Heslá sa nezhodujú\")\n                    setIsLoading(false)\n                    return\n                }\n\n                const response = await postAdmin(token, user)\n                const data = await response.json()\n\n                if (data.error) {\n                    getMessage(data.message)\n                    setIsLoading(false)\n                    return\n                }\n\n                setIsLoading(false)\n                getFilteredUsers({\n                    filters: {\n                        admin: activeIndex\n                    }\n                })\n\n                push(\"/dashboard/zakaznici\")\n                closeModal()\n            }\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n\n\n    // ----------------------------------------------\n    // ----------------------------------------------\n    // ----------------------------------------------\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const deleteUser = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            // body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.user) {\n\n                push(\"/dashboard/zakaznici\")\n                setIsLoading(false)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getFilteredUsers = async (filter) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(filter)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getUserByQuery = async (query) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(query)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <UserContext.Provider\n            value={{\n                isUpdating,\n                activeIndex,\n                handleChangeFilterItem,\n                filterItems,\n                users,\n                user,\n                totalCount,\n                // getUsers,\n                getUser,\n                handleChange,\n                handleParameterChange,\n                handleCompanyChange,\n                updateUser,\n                resetUser,\n                formToShow,\n                switchFormButtons,\n                toggleUserForm,\n                createUser,\n                getFilteredUsers,\n                getUserByQuery,\n                deleteUser\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    )\n}\n\nexport default UserProvider","import styled from 'styled-components'\n\nexport const InputRow = styled.div`\n    display:flex;\n    align-items: center;\n\n    p {\n        margin-top: 1.8rem;\n        margin-left: 2rem;\n            opacity: .75;\n\n        span {\n            font-weight: 700;\n        }\n    }\n\n    @media all and (max-width: 800px) {\n        flex-direction: column-reverse;\n        align-items: flex-start;\n\n        p {\n            margin-left: unset;\n        }\n    }\n`","import React from 'react'\n\nimport { InputRow } from './product-input-row.styles'\n\nconst ProductInputRow = ({ children, label, example, ...otherprops }) => {\n    return (\n        <InputRow {...otherprops}>\n            <div>\n                {children}\n            </div>\n            <div>\n                <p>{label + \" \"}<span>{example}</span></p>\n            </div>\n        </InputRow>\n    )\n}\n\nexport default ProductInputRow\n","import React, { createContext, useContext, useState } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport {useFetchContext} from '../fetch-context/fetch.context'\nimport examSchema from './exam.json'\nimport lodash from 'lodash'\n\nexport const ExaminationContext = createContext({\n    createExamination: () => { },\n    updateExamination: () => { },\n    deleteExamination: () => { },\n    getPDF: () => {},\n})\n\nexport const useExaminationContext = () => useContext(ExaminationContext)\n\nconst ExaminationProvider = ({ children }) => {\n    const { fetchData } = useFetchContext()\n\n\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n    const getPDF = async (examId) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}/createPdf`, null, (data) => {\n            // console.log(\"after data fetching\")\n            // console.log(data)\n    \n            if (data.filename) {\n                setIsLoading(false)\n                getMessage(data.messageSK)\n\n                setTimeout(() => {\n                    const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${data.filename}`, \"_blank\", \"noreferrer noopener\");\n                    win?.focus();\n                }, 100)\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        \n\n        }, \"POST\")\n    }\n\n    const createExamination = (examsToAdd, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        console.log(examSchema)\n        console.log(examsToAdd)\n\n        fetchData(\"/api/admin/exams/\", examsToAdd, (data) => {\n            console.log(\"CREATE new examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"POST\")\n\n    }\n\n    const updateExamination = async (examToUpdate, examId, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}`, examToUpdate, (data) => {\n            console.log(\"UPDATE existed examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"PATCH\")\n\n    }\n\n    const deleteExamination = async (examId, callback = () => {}) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        fetchData(`/api/admin/exams/${examId}`, null, (data) => {\n            console.log(\"DELETE existed examination\")\n            console.log(data)\n            setIsLoading(false)\n\n            if (data.exam) {\n                callback(data)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        }, \"DELETE\")\n    }\n\n    return (\n        <ExaminationContext.Provider\n            value={{\n                createExamination,\n                updateExamination,\n                deleteExamination,\n                getPDF\n            }}\n        >\n            {children}\n        </ExaminationContext.Provider>\n    )\n}\n\nexport default ExaminationProvider"],"sourceRoot":""}