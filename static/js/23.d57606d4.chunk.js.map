{"version":3,"sources":["context/analytics/analytics.context.jsx"],"names":["AnalyticsContext","createContext","stats","getAnalytics","AnalyticsProvider","children","token","useContext","AuthContext","LoadingModalContext","closeModal","getMessage","setShowModal","setIsLoading","useState","setStats","myHeaders","Headers","append","time","a","console","log","requestOptions","method","headers","redirect","fetch","process","response","json","data","message","Provider","value"],"mappings":"gOAIaA,EAAmBC,wBAAc,CAC1CC,MAAO,KACPC,aAAc,eAyDHC,UAtDW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBC,EAAUC,qBAAWC,KAArBF,MADgC,EAEuBC,qBAAWE,KAAlEC,EAFgC,EAEhCA,WAAYC,EAFoB,EAEpBA,WAAYC,EAFQ,EAERA,aAAcC,EAFN,EAEMA,aAFN,EAIdC,mBAAS,MAJK,mBAIjCZ,EAJiC,KAI1Ba,EAJ0B,KAMlCC,EAAY,IAAIC,QACtBD,EAAUE,OAAO,aAAcZ,GAC/BU,EAAUE,OAAO,eAAgB,oBAEjC,IAAMf,EAAY,uCAAG,WAAOgB,GAAP,mBAAAC,EAAA,6DACjBC,QAAQC,IAAIH,GACZP,GAAa,GACbC,GAAa,GAEPU,EAAiB,CACnBC,OAAQ,MACRC,QAAST,EACTU,SAAU,UARG,kBAYUC,MAAM,GAAD,OAAIC,6BAAJ,4BAA8DT,GAAQI,GAZrF,cAYPM,EAZO,OAabR,QAAQC,IAAIO,GAbC,UAcMA,EAASC,OAdf,WAcPC,EAdO,OAgBbV,QAAQC,IAAIS,IACRA,EAAK7B,MAjBI,wBAkBTa,EAASgB,EAAK7B,OACdQ,IAnBS,2BAuBbC,EAAWoB,EAAKC,SAChBnB,GAAa,GAxBA,kDA0BbQ,QAAQC,IAAR,MACAX,EAAW,qBACXE,GAAa,GA5BA,0DAAH,sDAgClB,OACI,cAACb,EAAiBiC,SAAlB,CACIC,MAAO,CACHhC,QACAC,gBAHR,SAMKE","file":"static/js/23.d57606d4.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n\nexport const AnalyticsContext = createContext({\n    stats: null,\n    getAnalytics: () => { }\n})\n\nconst AnalyticsProvider = ({ children }) => {\n    const { token } = useContext(AuthContext)\n    const { closeModal, getMessage, setShowModal, setIsLoading } = useContext(LoadingModalContext)\n\n    const [stats, setStats] = useState(null)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const getAnalytics = async (time) => {\n        console.log(time)\n        setShowModal(true)\n        setIsLoading(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats/${time}`, requestOptions)\n            console.log(response)\n            const data = await response.json()\n\n            console.log(data)\n            if (data.stats) {\n                setStats(data.stats)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <AnalyticsContext.Provider\n            value={{\n                stats,\n                getAnalytics\n            }}\n        >\n            {children}\n        </AnalyticsContext.Provider>\n    )\n}\n\nexport default AnalyticsProvider"],"sourceRoot":""}