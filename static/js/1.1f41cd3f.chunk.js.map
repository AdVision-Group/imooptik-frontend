{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/fuse.js/dist/fuse.esm.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","_setPrototypeOf","o","p","setPrototypeOf","__proto__","_inherits","subClass","superClass","prototype","create","constructor","value","writable","configurable","_getPrototypeOf","getPrototypeOf","_typeof","obj","_possibleConstructorReturn","self","call","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","toString","e","result","Super","NewTarget","this","arguments","apply","_classCallCheck","instance","Constructor","_defineProperties","target","props","i","length","descriptor","enumerable","defineProperty","key","_createClass","protoProps","staticProps","getTag","isString","isNumber","isBoolean","isObject","isObjectLike","isDefined","undefined","isBlank","trim","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","PATTERN_LENGTH_TOO_LARGE","max","hasOwn","hasOwnProperty","KeyStore","keys","_keys","_keyMap","totalWeight","forEach","createKey","weight","push","id","keyId","JSON","stringify","path","src","createKeyPath","createKeyId","Error","name","MISSING_KEY_PROPERTY","INVALID_KEY_WEIGHT_VALUE","split","join","AdvancedOptions","useExtendedSearch","getFn","list","deepGet","index","baseToString","len","ignoreLocation","ignoreFieldNorm","Config","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","SPACE","norm","mantissa","cache","Map","m","Math","pow","get","numTokens","match","has","sqrt","n","parseFloat","round","set","clear","FuseIndex","isCreated","setIndexRecords","docs","records","_keysMap","doc","docIndex","_addString","_addObject","size","splice","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","setKeys","map","setSources","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","indices","start","end","MAX_BITS","createPatternAlphabet","mask","char","charAt","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","text","isMatch","allIndices","totalScore","hasMatches","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","binMin","binMid","floor","finish","bitArr","j","charMatch","search","BaseMatch","getMatch","multiRegex","singleRegex","exp","matches","ExactMatch","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","searchIn","IncludeMatch","searchers","searchersLen","SPACE_RE","parseQuery","query","filter","results","queryItem","found","searcher","token","isMultiMatch","isSingleMatch","MultiMatchSet","Set","type","ExtendedSearch","numMatches","qLen","pLen","_","registeredSearchers","createSearcher","searcherClass","condition","LogicalOperator","KeyType","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","computeScore$1","Number","EPSILON","transformMatches","data","refIndex","transformScore","format","transformers","transformer","Fuse","_keyStore","setCollection","_docs","_myIndex","add","predicate","removeAt","limit","_searchStringList","_searchObjectList","_searchLogical","sort","slice","expression","evaluate","_findMatches","getValueForItemAtKeyId","res","resultMap","expResults","version","parseIndex","config","register"],"mappings":"kKAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,4CIL/E,SAASC,EAAgBC,EAAGC,GAMzC,OALAF,EAAkBJ,OAAOO,gBAAkB,SAAyBF,EAAGC,GAErE,OADAD,EAAEG,UAAYF,EACPD,IAGcA,EAAGC,GCLb,SAASG,EAAUC,EAAUC,GAC1C,GAA0B,oBAAfA,GAA4C,OAAfA,EACtC,MAAM,IAAIR,UAAU,sDAGtBO,EAASE,UAAYZ,OAAOa,OAAOF,GAAcA,EAAWC,UAAW,CACrEE,YAAa,CACXC,MAAOL,EACPM,UAAU,EACVC,cAAc,KAGdN,GAAY,EAAeD,EAAUC,GCb5B,SAASO,EAAgBb,GAItC,OAHAa,EAAkBlB,OAAOO,eAAiBP,OAAOmB,eAAiB,SAAyBd,GACzF,OAAOA,EAAEG,WAAaR,OAAOmB,eAAed,KAEvBA,GCJV,SAASe,EAAQC,GAa9B,OATED,EADoB,oBAAXtB,QAAoD,kBAApBA,OAAOC,SACtC,SAAiBsB,GACzB,cAAcA,GAGN,SAAiBA,GACzB,OAAOA,GAAyB,oBAAXvB,QAAyBuB,EAAIP,cAAgBhB,QAAUuB,IAAQvB,OAAOc,UAAY,gBAAkBS,IAI9GA,GCXF,SAASC,EAA2BC,EAAMC,GACvD,OAAIA,GAA2B,WAAlBJ,EAAQI,IAAsC,oBAATA,ECHrC,SAAgCD,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIE,eAAe,6DAG3B,OAAOF,EDEA,CAAsBA,GAHpBC,EEDI,SAASE,EAAaC,GACnC,IAAIC,ECJS,WACb,GAAuB,qBAAZC,UAA4BA,QAAQC,UAAW,OAAO,EACjE,GAAID,QAAQC,UAAUC,KAAM,OAAO,EACnC,GAAqB,oBAAVC,MAAsB,OAAO,EAExC,IAEE,OADAC,KAAKrB,UAAUsB,SAASV,KAAKK,QAAQC,UAAUG,KAAM,IAAI,iBAClD,EACP,MAAOE,GACP,OAAO,GDLuB,GAChC,OAAO,WACL,IACIC,EADAC,EAAQ,EAAeV,GAG3B,GAAIC,EAA2B,CAC7B,IAAIU,EAAY,EAAeC,MAAMzB,YACrCsB,EAASP,QAAQC,UAAUO,EAAOG,UAAWF,QAE7CF,EAASC,EAAMI,MAAMF,KAAMC,WAG7B,OAAO,EAA0BD,KAAMH,I,oBEhB5B,SAASM,EAAgBC,EAAUC,GAChD,KAAMD,aAAoBC,GACxB,MAAM,IAAIzC,UAAU,qCCFxB,SAAS0C,EAAkBC,EAAQC,GACjC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAaH,EAAMC,GACvBE,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWjC,cAAe,EACtB,UAAWiC,IAAYA,EAAWlC,UAAW,GACjDhB,OAAOoD,eAAeN,EAAQI,EAAWG,IAAKH,IAInC,SAASI,EAAaV,EAAaW,EAAYC,GAG5D,OAFID,GAAYV,EAAkBD,EAAYhC,UAAW2C,GACrDC,GAAaX,EAAkBD,EAAaY,GACzCZ,ECJT,SAASjD,EAAQoB,GACf,OAAQrB,MAAMC,QAEVD,MAAMC,QAAQoB,GADI,mBAAlB0C,EAAO1C,GAmBb,SAAS2C,EAAS3C,GAChB,MAAwB,kBAAVA,EAGhB,SAAS4C,EAAS5C,GAChB,MAAwB,kBAAVA,EAIhB,SAAS6C,EAAU7C,GACjB,OACY,IAAVA,IACU,IAAVA,GAUJ,SAAsBA,GACpB,OAAO8C,EAAS9C,IAAoB,OAAVA,EAVvB+C,CAAa/C,IAA2B,oBAAjB0C,EAAO1C,GAInC,SAAS8C,EAAS9C,GAChB,MAAwB,kBAAVA,EAQhB,SAASgD,EAAUhD,GACjB,YAAiBiD,IAAVjD,GAAiC,OAAVA,EAGhC,SAASkD,EAAQlD,GACf,OAAQA,EAAMmD,OAAOjB,OAKvB,SAASQ,EAAO1C,GACd,OAAgB,MAATA,OACOiD,IAAVjD,EACE,qBACA,gBACFf,OAAOY,UAAUsB,SAASV,KAAKT,GAGrC,IAIMoD,EAAuC,SAACd,GAAD,sCAClBA,IAErBe,EAA2B,SAACC,GAAD,8CACEA,EADF,MAQ3BC,EAAStE,OAAOY,UAAU2D,eAE1BC,E,WACJ,WAAYC,GAAM,qBAChBlC,KAAKmC,MAAQ,GACbnC,KAAKoC,QAAU,GAEf,IAAIC,EAAc,EAElBH,EAAKI,SAAQ,SAACxB,GACZ,IAAIhC,EAAMyD,EAAUzB,GAEpBuB,GAAevD,EAAI0D,OAEnB,EAAKL,MAAMM,KAAK3D,GAChB,EAAKsD,QAAQtD,EAAI4D,IAAM5D,EAEvBuD,GAAevD,EAAI0D,UAIrBxC,KAAKmC,MAAMG,SAAQ,SAACxB,GAClBA,EAAI0B,QAAUH,K,sCAGdM,GACF,OAAO3C,KAAKoC,QAAQO,K,6BAGpB,OAAO3C,KAAKmC,Q,+BAGZ,OAAOS,KAAKC,UAAU7C,KAAKmC,W,KAI/B,SAASI,EAAUzB,GACjB,IAAIgC,EAAO,KACPJ,EAAK,KACLK,EAAM,KACNP,EAAS,EAEb,GAAIrB,EAASL,IAAQ1D,EAAQ0D,GAC3BiC,EAAMjC,EACNgC,EAAOE,EAAclC,GACrB4B,EAAKO,EAAYnC,OACZ,CACL,IAAKiB,EAAO9C,KAAK6B,EAAK,QACpB,MAAM,IAAIoC,MArDa,SAACC,GAAD,wBAAqBA,EAArB,oBAqDPC,CAAqB,SAGvC,IAAMD,EAAOrC,EAAIqC,KAGjB,GAFAJ,EAAMI,EAEFpB,EAAO9C,KAAK6B,EAAK,YACnB0B,EAAS1B,EAAI0B,SAEC,EACZ,MAAM,IAAIU,MA7De,SAACpC,GAAD,0CACFA,EADE,gCA6DTuC,CAAyBF,IAI7CL,EAAOE,EAAcG,GACrBT,EAAKO,EAAYE,GAGnB,MAAO,CAAEL,OAAMJ,KAAIF,SAAQO,OAG7B,SAASC,EAAclC,GACrB,OAAO1D,EAAQ0D,GAAOA,EAAMA,EAAIwC,MAAM,KAGxC,SAASL,EAAYnC,GACnB,OAAO1D,EAAQ0D,GAAOA,EAAIyC,KAAK,KAAOzC,EAiDxC,IAyCM0C,EAAkB,CAEtBC,mBAAmB,EAGnBC,MA5FF,SAAa5E,EAAKgE,GAChB,IAAIa,EAAO,GACPzG,GAAM,EAyCV,OAvCgB,SAAV0G,EAAW9E,EAAKgE,EAAMe,GAC1B,GAAKrC,EAAU1C,GAGf,GAAKgE,EAAKe,GAGH,CACL,IAEMrF,EAAQM,EAFJgE,EAAKe,IAIf,IAAKrC,EAAUhD,GACb,OAKF,GACEqF,IAAUf,EAAKpC,OAAS,IACvBS,EAAS3C,IAAU4C,EAAS5C,IAAU6C,EAAU7C,IAEjDmF,EAAKlB,KAtKb,SAAkBjE,GAChB,OAAgB,MAATA,EAAgB,GAVzB,SAAsBA,GAEpB,GAAoB,iBAATA,EACT,OAAOA,EAET,IAAIqB,EAASrB,EAAQ,GACrB,MAAiB,KAAVqB,GAAiB,EAAIrB,IAAS,IAAY,KAAOqB,EAI5BiE,CAAatF,GAqKzBmB,CAASnB,SACd,GAAIpB,EAAQoB,GAAQ,CACzBtB,GAAM,EAEN,IAAK,IAAIuD,EAAI,EAAGsD,EAAMvF,EAAMkC,OAAQD,EAAIsD,EAAKtD,GAAK,EAChDmD,EAAQpF,EAAMiC,GAAIqC,EAAMe,EAAQ,QAEzBf,EAAKpC,QAEdkD,EAAQpF,EAAOsE,EAAMe,EAAQ,QAzB/BF,EAAKlB,KAAK3D,GA+Bd8E,CAAQ9E,EAAKqC,EAAS2B,GAAQA,EAAKQ,MAAM,KAAOR,EAAM,GAE/C5F,EAAMyG,EAAOA,EAAK,IAqDzBK,gBAAgB,EAIhBC,iBAAiB,GAGfC,EAAS,mDA7CQ,CAGnBC,iBAAiB,EAEjBC,cAAc,EAEdlC,KAAM,GAENmC,YAAY,EAEZC,OAAQ,SAACC,EAAGC,GAAJ,OACND,EAAEE,QAAUD,EAAEC,MAASF,EAAEG,IAAMF,EAAEE,KAAO,EAAI,EAAKH,EAAEE,MAAQD,EAAEC,OAAS,EAAI,KAxBzD,CAInBE,gBAAgB,EAGhBC,gBAAgB,EAEhBC,mBAAoB,IAkBD,CAEnBC,SAAU,EAGVC,UAAW,GAMXC,SAAU,MAuBPxB,GAGCyB,EAAQ,SAId,SAASC,IAAmB,IAAdC,EAAc,uDAAH,EACjBC,EAAQ,IAAIC,IACZC,EAAIC,KAAKC,IAAI,GAAIL,GAEvB,MAAO,CACLM,IADK,SACDjH,GACF,IAAMkH,EAAYlH,EAAMmH,MAAMV,GAAOvE,OAErC,GAAI0E,EAAMQ,IAAIF,GACZ,OAAON,EAAMK,IAAIC,GAGnB,IAAMR,EAAO,EAAIK,KAAKM,KAAKH,GAGrBI,EAAIC,WAAWR,KAAKS,MAAMd,EAAOI,GAAKA,GAI5C,OAFAF,EAAMa,IAAIP,EAAWI,GAEdA,GAETI,MAjBK,WAkBHd,EAAMc,U,IAKNC,E,WACJ,aAA2C,6DAAJ,GAAI,IAA7BzC,aAA6B,MAArBQ,EAAOR,MAAc,YACzC1D,KAAKkF,KAAOA,EAAK,GACjBlF,KAAK0D,MAAQA,EACb1D,KAAKoG,WAAY,EAEjBpG,KAAKqG,kB,+CAEe,IAAXC,EAAW,uDAAJ,GAChBtG,KAAKsG,KAAOA,I,wCAEgB,IAAdC,EAAc,uDAAJ,GACxBvG,KAAKuG,QAAUA,I,gCAEE,WAAXrE,EAAW,uDAAJ,GACblC,KAAKkC,KAAOA,EACZlC,KAAKwG,SAAW,GAChBtE,EAAKI,SAAQ,SAACxB,EAAK4D,GACjB,EAAK8B,SAAS1F,EAAI4B,IAAMgC,O,+BAGnB,YACH1E,KAAKoG,WAAcpG,KAAKsG,KAAK5F,SAIjCV,KAAKoG,WAAY,EAGbjF,EAASnB,KAAKsG,KAAK,IACrBtG,KAAKsG,KAAKhE,SAAQ,SAACmE,EAAKC,GACtB,EAAKC,WAAWF,EAAKC,MAIvB1G,KAAKsG,KAAKhE,SAAQ,SAACmE,EAAKC,GACtB,EAAKE,WAAWH,EAAKC,MAIzB1G,KAAKkF,KAAKgB,W,0BAGRO,GACF,IAAM/B,EAAM1E,KAAK6G,OAEb1F,EAASsF,GACXzG,KAAK2G,WAAWF,EAAK/B,GAErB1E,KAAK4G,WAAWH,EAAK/B,K,+BAIhBA,GACP1E,KAAKuG,QAAQO,OAAOpC,EAAK,GAGzB,IAAK,IAAIjE,EAAIiE,EAAKX,EAAM/D,KAAK6G,OAAQpG,EAAIsD,EAAKtD,GAAK,EACjDT,KAAKuG,QAAQ9F,GAAGA,GAAK,I,6CAGFsG,EAAMpE,GAC3B,OAAOoE,EAAK/G,KAAKwG,SAAS7D,M,6BAG1B,OAAO3C,KAAKuG,QAAQ7F,S,iCAEX+F,EAAKC,GACd,GAAKlF,EAAUiF,KAAQ/E,EAAQ+E,GAA/B,CAIA,IAAIO,EAAS,CACXC,EAAGR,EACHhG,EAAGiG,EACHZ,EAAG9F,KAAKkF,KAAKO,IAAIgB,IAGnBzG,KAAKuG,QAAQ9D,KAAKuE,M,iCAETP,EAAKC,GAAU,WACpBM,EAAS,CAAEvG,EAAGiG,EAAUQ,EAAG,IAG/BlH,KAAKkC,KAAKI,SAAQ,SAACxB,EAAKqG,GAEtB,IAAI3I,EAAQ,EAAKkF,MAAM+C,EAAK3F,EAAIgC,MAEhC,GAAKtB,EAAUhD,GAIf,GAAIpB,EAAQoB,IAAQ,WAIlB,IAHA,IAAI4I,EAAa,GACXC,EAAQ,CAAC,CAAEC,gBAAiB,EAAG9I,UAE9B6I,EAAM3G,QAAQ,OACe2G,EAAME,MAAhCD,EADW,EACXA,eAAgB9I,EADL,EACKA,MAExB,GAAKgD,EAAUhD,GAIf,GAAI2C,EAAS3C,KAAWkD,EAAQlD,GAAQ,CACtC,IAAIgJ,EAAY,CACdP,EAAGzI,EACHiC,EAAG6G,EACHxB,EAAG,EAAKZ,KAAKO,IAAIjH,IAGnB4I,EAAW3E,KAAK+E,QACPpK,EAAQoB,IACjBA,EAAM8D,SAAQ,SAACyE,EAAMU,GACnBJ,EAAM5E,KAAK,CACT6E,eAAgBG,EAChBjJ,MAAOuI,OAKfC,EAAOE,EAAEC,GAAYC,EA5BH,QA6Bb,IAAK1F,EAAQlD,GAAQ,CAC1B,IAAIgJ,EAAY,CACdP,EAAGzI,EACHsH,EAAG,EAAKZ,KAAKO,IAAIjH,IAGnBwI,EAAOE,EAAEC,GAAYK,MAIzBxH,KAAKuG,QAAQ9D,KAAKuE,K,+BAGlB,MAAO,CACL9E,KAAMlC,KAAKkC,KACXqE,QAASvG,KAAKuG,a,KAKpB,SAASmB,EAAYxF,EAAMoE,GAAqC,6DAAJ,GAAI,IAA7B5C,aAA6B,MAArBQ,EAAOR,MAAc,EACxDiE,EAAU,IAAIxB,EAAU,CAAEzC,UAIhC,OAHAiE,EAAQC,QAAQ1F,EAAK2F,IAAItF,IACzBoF,EAAQG,WAAWxB,GACnBqB,EAAQrJ,SACDqJ,EAWT,SAASI,EACPC,GAQA,6DADI,GACJ,IANEC,cAMF,MANW,EAMX,MALEC,uBAKF,MALoB,EAKpB,MAJEC,wBAIF,MAJqB,EAIrB,MAHEnD,gBAGF,MAHad,EAAOc,SAGpB,MAFEhB,sBAEF,MAFmBE,EAAOF,eAE1B,EACMoE,EAAWH,EAASD,EAAQtH,OAElC,GAAIsD,EACF,OAAOoE,EAGT,IAAMC,EAAY9C,KAAK+C,IAAIH,EAAmBD,GAE9C,OAAKlD,EAKEoD,EAAWC,EAAYrD,EAHrBqD,EAAY,EAAMD,EAM7B,SAASG,IASP,IANA,IAFAC,EAEA,uDAFY,GACZ3D,EACA,uDADqBX,EAAOW,mBAExB4D,EAAU,GACVC,GAAS,EACTC,GAAO,EACPlI,EAAI,EAECsD,EAAMyE,EAAU9H,OAAQD,EAAIsD,EAAKtD,GAAK,EAAG,CAChD,IAAIkF,EAAQ6C,EAAU/H,GAClBkF,IAAoB,IAAX+C,EACXA,EAAQjI,EACEkF,IAAoB,IAAX+C,KACnBC,EAAMlI,EAAI,GACAiI,EAAQ,GAAK7D,GACrB4D,EAAQhG,KAAK,CAACiG,EAAOC,IAEvBD,GAAS,GASb,OAJIF,EAAU/H,EAAI,IAAMA,EAAIiI,GAAS7D,GACnC4D,EAAQhG,KAAK,CAACiG,EAAOjI,EAAI,IAGpBgI,EAIT,IAAMG,EAAW,GAyLjB,SAASC,EAAsBb,GAG7B,IAFA,IAAIc,EAAO,GAEFrI,EAAI,EAAGsD,EAAMiE,EAAQtH,OAAQD,EAAIsD,EAAKtD,GAAK,EAAG,CACrD,IAAMsI,EAAOf,EAAQgB,OAAOvI,GAC5BqI,EAAKC,IAASD,EAAKC,IAAS,GAAM,GAAMhF,EAAMtD,EAAI,EAGpD,OAAOqI,E,IAGHG,E,WACJ,WACEjB,GAWA,oEADI,GACJ,IATElD,gBASF,MATaZ,EAAOY,SASpB,MAREC,iBAQF,MARcb,EAAOa,UAQrB,MAPEC,gBAOF,MAPad,EAAOc,SAOpB,MANEL,sBAMF,MANmBT,EAAOS,eAM1B,MALEC,sBAKF,MALmBV,EAAOU,eAK1B,MAJEC,0BAIF,MAJuBX,EAAOW,mBAI9B,MAHEV,uBAGF,MAHoBD,EAAOC,gBAG3B,MAFEH,sBAEF,MAFmBE,EAAOF,eAE1B,EAgBA,GAhBA,UACAhE,KAAKkJ,QAAU,CACbpE,WACAC,YACAC,WACAL,iBACAC,iBACAC,qBACAV,kBACAH,kBAGFhE,KAAKgI,QAAU7D,EAAkB6D,EAAUA,EAAQmB,cAEnDnJ,KAAKoJ,OAAS,GAETpJ,KAAKgI,QAAQtH,OAAlB,CAIA,IAAM2I,EAAW,SAACrB,EAASsB,GACzB,EAAKF,OAAO3G,KAAK,CACfuF,UACAuB,SAAUV,EAAsBb,GAChCsB,gBAIEvF,EAAM/D,KAAKgI,QAAQtH,OAEzB,GAAIqD,EAAM6E,EAAU,CAKlB,IAJA,IAAInI,EAAI,EACF+I,EAAYzF,EAAM6E,EAClBD,EAAM5E,EAAMyF,EAEX/I,EAAIkI,GACTU,EAASrJ,KAAKgI,QAAQyB,OAAOhJ,EAAGmI,GAAWnI,GAC3CA,GAAKmI,EAGP,GAAIY,EAAW,CACb,IAAMF,EAAavF,EAAM6E,EACzBS,EAASrJ,KAAKgI,QAAQyB,OAAOH,GAAaA,SAG5CD,EAASrJ,KAAKgI,QAAS,I,2CAIlB0B,GAAM,MAC+B1J,KAAKkJ,QAAzC/E,EADK,EACLA,gBAAiBQ,EADZ,EACYA,eAOzB,GALKR,IACHuF,EAAOA,EAAKP,eAIVnJ,KAAKgI,UAAY0B,EAAM,CACzB,IAAI7J,EAAS,CACX8J,SAAS,EACTlF,MAAO,GAOT,OAJIE,IACF9E,EAAO4I,QAAU,CAAC,CAAC,EAAGiB,EAAKhJ,OAAS,KAG/Bb,EAlBI,MA6BTG,KAAKkJ,QANPpE,EAvBW,EAuBXA,SACAE,EAxBW,EAwBXA,SACAD,EAzBW,EAyBXA,UACAH,EA1BW,EA0BXA,eACAC,EA3BW,EA2BXA,mBACAb,EA5BW,EA4BXA,eAGE4F,EAAa,GACbC,EAAa,EACbC,GAAa,EAEjB9J,KAAKoJ,OAAO9G,SAAQ,YAAuC,IAApC0F,EAAoC,EAApCA,QAASuB,EAA2B,EAA3BA,SAAUD,EAAiB,EAAjBA,WAAiB,EAnS/D,SACEI,EACA1B,EACA+B,GAUA,6DADI,GACJ,IAREjF,gBAQF,MARaZ,EAAOY,SAQpB,MAPEE,gBAOF,MAPad,EAAOc,SAOpB,MANED,iBAMF,MANcb,EAAOa,UAMrB,MALEH,sBAKF,MALmBV,EAAOU,eAK1B,MAJEC,0BAIF,MAJuBX,EAAOW,mBAI9B,MAHEF,sBAGF,MAHmBT,EAAOS,eAG1B,MAFEX,sBAEF,MAFmBE,EAAOF,eAE1B,EACA,GAAIgE,EAAQtH,OAASkI,EACnB,MAAM,IAAI1F,MAAMrB,EAAyB+G,IAsB3C,IAnBA,IAgBI/E,EAhBEmG,EAAahC,EAAQtH,OAErBuJ,EAAUP,EAAKhJ,OAEfyH,EAAmB5C,KAAKzD,IAAI,EAAGyD,KAAK2E,IAAIpF,EAAUmF,IAEpDE,EAAmBpF,EAEnBqF,EAAejC,EAIbkC,EAAiBxF,EAAqB,GAAKF,EAE3C2F,EAAYD,EAAiBlN,MAAM8M,GAAW,IAK5CpG,EAAQ6F,EAAKa,QAAQvC,EAASoC,KAAkB,GAAG,CACzD,IAAI3F,EAAQsD,EAAaC,EAAS,CAChCE,gBAAiBrE,EACjBsE,mBACAnD,WACAhB,mBAMF,GAHAmG,EAAmB5E,KAAK2E,IAAIzF,EAAO0F,GACnCC,EAAevG,EAAQmG,EAEnBK,EAEF,IADA,IAAI5J,EAAI,EACDA,EAAIuJ,GACTM,EAAUzG,EAAQpD,GAAK,EACvBA,GAAK,EAMX2J,GAAgB,EAQhB,IANA,IAAII,EAAa,GACbC,EAAa,EACbC,EAASV,EAAaC,EAEpBnB,EAAO,GAAMkB,EAAa,EAEvBvJ,EAAI,EAAGA,EAAIuJ,EAAYvJ,GAAK,EAAG,CAOtC,IAHA,IAAIkK,EAAS,EACTC,EAASF,EAENC,EAASC,GAAQ,CACR7C,EAAaC,EAAS,CAClCC,OAAQxH,EACRyH,gBAAiBC,EAAmByC,EACpCzC,mBACAnD,WACAhB,oBAGWmG,EACXQ,EAASC,EAETF,EAASE,EAGXA,EAASrF,KAAKsF,OAAOH,EAASC,GAAU,EAAIA,GAI9CD,EAASE,EAET,IAAIlC,EAAQnD,KAAKzD,IAAI,EAAGqG,EAAmByC,EAAS,GAChDE,EAASlG,EACTqF,EACA1E,KAAK2E,IAAI/B,EAAmByC,EAAQX,GAAWD,EAG/Ce,EAAS5N,MAAM2N,EAAS,GAE5BC,EAAOD,EAAS,IAAM,GAAKrK,GAAK,EAEhC,IAAK,IAAIuK,EAAIF,EAAQE,GAAKtC,EAAOsC,GAAK,EAAG,CACvC,IAAI9C,EAAkB8C,EAAI,EACtBC,EAAYlB,EAAgBL,EAAKV,OAAOd,IAgB5C,GAdImC,IAEFC,EAAUpC,MAAsB+C,GAIlCF,EAAOC,IAAOD,EAAOC,EAAI,IAAM,EAAK,GAAKC,EAGrCxK,IACFsK,EAAOC,KACHR,EAAWQ,EAAI,GAAKR,EAAWQ,KAAO,EAAK,EAAIR,EAAWQ,EAAI,IAGhED,EAAOC,GAAKlC,IACd2B,EAAa1C,EAAaC,EAAS,CACjCC,OAAQxH,EACRyH,kBACAC,mBACAnD,WACAhB,qBAKgBmG,EAAkB,CAMlC,GAJAA,EAAmBM,GACnBL,EAAelC,IAGKC,EAClB,MAIFO,EAAQnD,KAAKzD,IAAI,EAAG,EAAIqG,EAAmBiC,IAcjD,GARcrC,EAAaC,EAAS,CAClCC,OAAQxH,EAAI,EACZyH,gBAAiBC,EACjBA,mBACAnD,WACAhB,mBAGUmG,EACV,MAGFK,EAAaO,EAGf,IAAMlL,EAAS,CACb8J,QAASS,GAAgB,EAEzB3F,MAAOc,KAAKzD,IAAI,KAAO2I,IAGzB,GAAIJ,EAAgB,CAClB,IAAM5B,EAAUF,EAAqB+B,EAAWzF,GAC3C4D,EAAQ/H,OAEFiE,IACT9E,EAAO4I,QAAUA,GAFjB5I,EAAO8J,SAAU,EAMrB,OAAO9J,EAgHiCqL,CAAOxB,EAAM1B,EAASuB,EAAU,CAClEzE,SAAUA,EAAWwE,EACrBtE,WACAD,YACAH,iBACAC,qBACAF,iBACAX,mBAPM2F,EADiD,EACjDA,QAASlF,EADwC,EACxCA,MAAOgE,EADiC,EACjCA,QAUpBkB,IACFG,GAAa,GAGfD,GAAcpF,EAEVkF,GAAWlB,IACbmB,EAAa,GAAH,mBAAOA,GAAP,YAAsBnB,QAIpC,IAAI5I,EAAS,CACX8J,QAASG,EACTrF,MAAOqF,EAAaD,EAAa7J,KAAKoJ,OAAO1I,OAAS,GAOxD,OAJIoJ,GAAcnF,IAChB9E,EAAO4I,QAAUmB,GAGZ/J,M,KAILsL,E,WACJ,WAAYnD,GAAS,UACnBhI,KAAKgI,QAAUA,E,mFAEGA,GAClB,OAAOoD,EAASpD,EAAShI,KAAKqL,c,oCAEXrD,GACnB,OAAOoD,EAASpD,EAAShI,KAAKsL,iB,KAKlC,SAASF,EAASpD,EAASuD,GACzB,IAAMC,EAAUxD,EAAQrC,MAAM4F,GAC9B,OAAOC,EAAUA,EAAQ,GAAK,K,IAK1BC,E,8BACJ,WAAYzD,GAAS,6BACbA,G,yCAWD0B,GACL,IAAMC,EAAUD,IAAS1J,KAAKgI,QAE9B,MAAO,CACL2B,UACAlF,MAAOkF,EAAU,EAAI,EACrBlB,QAAS,CAAC,EAAGzI,KAAKgI,QAAQtH,OAAS,O,4BAdrC,MAAO,U,iCAGP,MAAO,c,kCAGP,MAAO,c,GAXcyK,GA0BnBO,E,8BACJ,WAAY1D,GAAS,6BACbA,G,yCAWD0B,GACL,IACMC,GAAqB,IADbD,EAAKa,QAAQvK,KAAKgI,SAGhC,MAAO,CACL2B,UACAlF,MAAOkF,EAAU,EAAI,EACrBlB,QAAS,CAAC,EAAGiB,EAAKhJ,OAAS,O,4BAf7B,MAAO,kB,iCAGP,MAAO,c,kCAGP,MAAO,c,GAXqByK,GA2B1BQ,E,8BACJ,WAAY3D,GAAS,6BACbA,G,yCAWD0B,GACL,IAAMC,EAAUD,EAAKkC,WAAW5L,KAAKgI,SAErC,MAAO,CACL2B,UACAlF,MAAOkF,EAAU,EAAI,EACrBlB,QAAS,CAAC,EAAGzI,KAAKgI,QAAQtH,OAAS,O,4BAdrC,MAAO,iB,iCAGP,MAAO,e,kCAGP,MAAO,e,GAXoByK,GA0BzBU,E,8BACJ,WAAY7D,GAAS,6BACbA,G,yCAWD0B,GACL,IAAMC,GAAWD,EAAKkC,WAAW5L,KAAKgI,SAEtC,MAAO,CACL2B,UACAlF,MAAOkF,EAAU,EAAI,EACrBlB,QAAS,CAAC,EAAGiB,EAAKhJ,OAAS,O,4BAd7B,MAAO,yB,iCAGP,MAAO,gB,kCAGP,MAAO,gB,GAX2ByK,GA0BhCW,E,8BACJ,WAAY9D,GAAS,6BACbA,G,yCAWD0B,GACL,IAAMC,EAAUD,EAAKqC,SAAS/L,KAAKgI,SAEnC,MAAO,CACL2B,UACAlF,MAAOkF,EAAU,EAAI,EACrBlB,QAAS,CAACiB,EAAKhJ,OAASV,KAAKgI,QAAQtH,OAAQgJ,EAAKhJ,OAAS,O,4BAd7D,MAAO,iB,iCAGP,MAAO,e,kCAGP,MAAO,e,GAXoByK,GA0BzBa,E,8BACJ,WAAYhE,GAAS,6BACbA,G,yCAWD0B,GACL,IAAMC,GAAWD,EAAKqC,SAAS/L,KAAKgI,SACpC,MAAO,CACL2B,UACAlF,MAAOkF,EAAU,EAAI,EACrBlB,QAAS,CAAC,EAAGiB,EAAKhJ,OAAS,O,4BAb7B,MAAO,yB,iCAGP,MAAO,gB,kCAGP,MAAO,gB,GAX2ByK,GAuBhCc,E,8BACJ,WACEjE,GAWA,+DADI,GACJ,IATElD,gBASF,MATaZ,EAAOY,SASpB,MAREC,iBAQF,MARcb,EAAOa,UAQrB,MAPEC,gBAOF,MAPad,EAAOc,SAOpB,MANEL,sBAMF,MANmBT,EAAOS,eAM1B,MALEC,sBAKF,MALmBV,EAAOU,eAK1B,MAJEC,0BAIF,MAJuBX,EAAOW,mBAI9B,MAHEV,uBAGF,MAHoBD,EAAOC,gBAG3B,MAFEH,sBAEF,MAFmBE,EAAOF,eAE1B,oBACA,cAAMgE,IACDkE,aAAe,IAAIjD,EAAYjB,EAAS,CAC3ClD,WACAC,YACAC,WACAL,iBACAC,iBACAC,qBACAV,kBACAH,mBAVF,E,yCAsBK0F,GACL,OAAO1J,KAAKkM,aAAaC,SAASzC,M,4BATlC,MAAO,U,iCAGP,MAAO,a,kCAGP,MAAO,a,GAjCcyB,GA0CnBiB,E,8BACJ,WAAYpE,GAAS,6BACbA,G,yCAWD0B,GAQL,IAPA,IACI7F,EADAiB,EAAW,EAGT2D,EAAU,GACVuB,EAAahK,KAAKgI,QAAQtH,QAGxBmD,EAAQ6F,EAAKa,QAAQvK,KAAKgI,QAASlD,KAAc,GACvDA,EAAWjB,EAAQmG,EACnBvB,EAAQhG,KAAK,CAACoB,EAAOiB,EAAW,IAGlC,IAAM6E,IAAYlB,EAAQ/H,OAE1B,MAAO,CACLiJ,UACAlF,MAAOkF,EAAU,EAAI,EACrBlB,c,4BA1BF,MAAO,Y,iCAGP,MAAO,c,kCAGP,MAAO,c,GAXgB0C,GAqCrBkB,EAAY,CAChBZ,EACAW,EACAT,EACAE,EACAG,EACAF,EACAJ,EACAO,GAGIK,EAAeD,EAAU3L,OAGzB6L,EAAW,mCAMjB,SAASC,GAAWxE,GAAuB,IAAdkB,EAAc,uDAAJ,GACrC,OAAOlB,EAAQ1E,MANA,KAMgBuE,KAAI,SAACd,GAOlC,IANA,IAAI0F,EAAQ1F,EACTpF,OACA2B,MAAMiJ,GACNG,QAAO,SAAC3F,GAAD,OAAUA,KAAUA,EAAKpF,UAE/BgL,EAAU,GACLlM,EAAI,EAAGsD,EAAM0I,EAAM/L,OAAQD,EAAIsD,EAAKtD,GAAK,EAAG,CAMnD,IALA,IAAMmM,EAAYH,EAAMhM,GAGpBoM,GAAQ,EACRnI,GAAO,GACHmI,KAAWnI,EAAM4H,GAAc,CACrC,IAAMQ,EAAWT,EAAU3H,GACvBqI,EAAQD,EAASE,aAAaJ,GAC9BG,IACFJ,EAAQlK,KAAK,IAAIqK,EAASC,EAAO7D,IACjC2D,GAAQ,GAIZ,IAAIA,EAMJ,IADAnI,GAAO,IACEA,EAAM4H,GAAc,CAC3B,IAAMQ,EAAWT,EAAU3H,GACvBqI,EAAQD,EAASG,cAAcL,GACnC,GAAIG,EAAO,CACTJ,EAAQlK,KAAK,IAAIqK,EAASC,EAAO7D,IACjC,QAKN,OAAOyD,KAMX,IAAMO,GAAgB,IAAIC,IAAI,CAAClB,EAAWmB,KAAMhB,EAAagB,OA8BvDC,G,WACJ,WACErF,GAWA,6DADI,GACJ,IATE7D,uBASF,MAToBD,EAAOC,gBAS3B,MAREQ,sBAQF,MARmBT,EAAOS,eAQ1B,MAPEE,0BAOF,MAPuBX,EAAOW,mBAO9B,MANEb,sBAMF,MANmBE,EAAOF,eAM1B,MALEY,sBAKF,MALmBV,EAAOU,eAK1B,MAJEE,gBAIF,MAJaZ,EAAOY,SAIpB,MAHEC,iBAGF,MAHcb,EAAOa,UAGrB,MAFEC,gBAEF,MAFad,EAAOc,SAEpB,YACAhF,KAAKyM,MAAQ,KACbzM,KAAKkJ,QAAU,CACb/E,kBACAQ,iBACAE,qBACAD,iBACAZ,iBACAc,WACAC,YACAC,YAGFhF,KAAKgI,QAAU7D,EAAkB6D,EAAUA,EAAQmB,cACnDnJ,KAAKyM,MAAQD,GAAWxM,KAAKgI,QAAShI,KAAKkJ,S,2CAOpCQ,GACP,IAAM+C,EAAQzM,KAAKyM,MAEnB,IAAKA,EACH,MAAO,CACL9C,SAAS,EACTlF,MAAO,GANE,MAU+BzE,KAAKkJ,QAAzCvE,EAVK,EAULA,eAER+E,EAZa,EAUWvF,gBAECuF,EAAOA,EAAKP,cAOrC,IALA,IAAImE,EAAa,EACb1D,EAAa,GACbC,EAAa,EAGRpJ,EAAI,EAAG8M,EAAOd,EAAM/L,OAAQD,EAAI8M,EAAM9M,GAAK,EAAG,CACrD,IAAM4L,EAAYI,EAAMhM,GAGxBmJ,EAAWlJ,OAAS,EACpB4M,EAAa,EAGb,IAAK,IAAItC,EAAI,EAAGwC,EAAOnB,EAAU3L,OAAQsK,EAAIwC,EAAMxC,GAAK,EAAG,CACzD,IAAM8B,EAAWT,EAAUrB,GAD8B,EAErB8B,EAAS5B,OAAOxB,GAA5CC,EAFiD,EAEjDA,QAASlB,EAFwC,EAExCA,QAAShE,EAF+B,EAE/BA,MAE1B,IAAIkF,EAWG,CACLE,EAAa,EACbyD,EAAa,EACb1D,EAAWlJ,OAAS,EACpB,MAZA,GAFA4M,GAAc,EACdzD,GAAcpF,EACVE,EAAgB,CAClB,IAAMyI,EAAON,EAASvO,YAAY6O,KAC9BF,GAActH,IAAIwH,GACpBxD,EAAa,GAAH,mBAAOA,GAAP,YAAsBnB,IAEhCmB,EAAWnH,KAAKgG,IAYxB,GAAI6E,EAAY,CACd,IAAIzN,EAAS,CACX8J,SAAS,EACTlF,MAAOoF,EAAayD,GAOtB,OAJI3I,IACF9E,EAAO4I,QAAUmB,GAGZ/J,GAKX,MAAO,CACL8J,SAAS,EACTlF,MAAO,M,iCAxEMgJ,EAAGvE,GAClB,OAAOA,EAAQzF,sB,KA4EbiK,GAAsB,GAM5B,SAASC,GAAe3F,EAASkB,GAC/B,IAAK,IAAIzI,EAAI,EAAGsD,EAAM2J,GAAoBhN,OAAQD,EAAIsD,EAAKtD,GAAK,EAAG,CACjE,IAAImN,EAAgBF,GAAoBjN,GACxC,GAAImN,EAAcC,UAAU7F,EAASkB,GACnC,OAAO,IAAI0E,EAAc5F,EAASkB,GAItC,OAAO,IAAID,EAAYjB,EAASkB,GAGlC,IAAM4E,GACC,OADDA,GAEA,MAGAC,GACE,QADFA,GAEK,OAGLC,GAAe,SAACvB,GAAD,SAChBA,EAAMqB,MAAwBrB,EAAMqB,MAEnCG,GAAS,SAACxB,GAAD,QAAaA,EAAMsB,KAE5BG,GAAS,SAACzB,GAAD,OACZrP,EAAQqP,IAAUnL,EAASmL,KAAWuB,GAAavB,IAEhD0B,GAAoB,SAAC1B,GAAD,sBACvBqB,GAAsBrQ,OAAOyE,KAAKuK,GAAO5E,KAAI,SAAC/G,GAAD,sBAC3CA,EAAM2L,EAAM3L,SAMjB,SAASsN,GAAM3B,EAAOvD,GAA+B,6DAAJ,GAAI,IAApBmF,YAAoB,SAC7CC,EAAO,SAAPA,EAAQ7B,GACZ,IAAIvK,EAAOzE,OAAOyE,KAAKuK,GAEjB8B,EAAcN,GAAOxB,GAE3B,IAAK8B,GAAerM,EAAKxB,OAAS,IAAMsN,GAAavB,GACnD,OAAO6B,EAAKH,GAAkB1B,IAGhC,GAAIyB,GAAOzB,GAAQ,CACjB,IAAM3L,EAAMyN,EAAc9B,EAAMsB,IAAgB7L,EAAK,GAE/C8F,EAAUuG,EAAc9B,EAAMsB,IAAmBtB,EAAM3L,GAE7D,IAAKK,EAAS6G,GACZ,MAAM,IAAI9E,MAAMtB,EAAqCd,IAGvD,IAAMhC,EAAM,CACV6D,MAAOM,EAAYnC,GACnBkH,WAOF,OAJIqG,IACFvP,EAAIgO,SAAWa,GAAe3F,EAASkB,IAGlCpK,EAGT,IAAI0P,EAAO,CACTC,SAAU,GACVC,SAAUxM,EAAK,IAajB,OAVAA,EAAKI,SAAQ,SAACxB,GACZ,IAAMtC,EAAQiO,EAAM3L,GAEhB1D,EAAQoB,IACVA,EAAM8D,SAAQ,SAACyE,GACbyH,EAAKC,SAAShM,KAAK6L,EAAKvH,UAKvByH,GAOT,OAJKR,GAAavB,KAChBA,EAAQ0B,GAAkB1B,IAGrB6B,EAAK7B,GAId,SAASkC,GACPhC,EADF,GAGE,QADE1I,uBACF,MADoBC,EAAOD,gBAC3B,EACA0I,EAAQrK,SAAQ,SAACzC,GACf,IAAIgK,EAAa,EAEjBhK,EAAO2L,QAAQlJ,SAAQ,YAA0B,IAAvBxB,EAAuB,EAAvBA,IAAKoE,EAAkB,EAAlBA,KAAMT,EAAY,EAAZA,MAC7BjC,EAAS1B,EAAMA,EAAI0B,OAAS,KAElCqH,GAActE,KAAKC,IACP,IAAVf,GAAejC,EAASoM,OAAOC,QAAUpK,GACxCjC,GAAU,IAAMyB,EAAkB,EAAIiB,OAI3CrF,EAAO4E,MAAQoF,KAInB,SAASiF,GAAiBjP,EAAQkP,GAChC,IAAMvD,EAAU3L,EAAO2L,QACvBuD,EAAKvD,QAAU,GAEVhK,EAAUgK,IAIfA,EAAQlJ,SAAQ,SAACqD,GACf,GAAKnE,EAAUmE,EAAM8C,UAAa9C,EAAM8C,QAAQ/H,OAAhD,CADyB,IAOrB5B,EAAM,CACR2J,QAHyB9C,EAAnB8C,QAINjK,MAJyBmH,EAAVnH,OAObmH,EAAM7E,MACRhC,EAAIgC,IAAM6E,EAAM7E,IAAIiC,KAGlB4C,EAAMjB,KAAO,IACf5F,EAAIkQ,SAAWrJ,EAAMjB,KAGvBqK,EAAKvD,QAAQ/I,KAAK3D,OAItB,SAASmQ,GAAepP,EAAQkP,GAC9BA,EAAKtK,MAAQ5E,EAAO4E,MAGtB,SAASyK,GACPvC,EACArG,GAKA,6DADI,GACJ,IAHE3B,sBAGF,MAHmBT,EAAOS,eAG1B,MAFEP,oBAEF,MAFiBF,EAAOE,aAExB,EACM+K,EAAe,GAKrB,OAHIxK,GAAgBwK,EAAa1M,KAAKqM,IAClC1K,GAAc+K,EAAa1M,KAAKwM,IAE7BtC,EAAQ9E,KAAI,SAAChI,GAAW,IACrB6E,EAAQ7E,EAAR6E,IAEFqK,EAAO,CACXhI,KAAMT,EAAK5B,GACXsK,SAAUtK,GASZ,OANIyK,EAAazO,QACfyO,EAAa7M,SAAQ,SAAC8M,GACpBA,EAAYvP,EAAQkP,MAIjBA,K,IAILM,G,WACJ,WAAY/I,GAA2B,IAArB4C,EAAqB,uDAAX,GAAIrF,EAAO,iDACrC7D,KAAKkJ,QAAL,2BAAoBhF,GAAWgF,GAG7BlJ,KAAKkJ,QAAQzF,kBAMfzD,KAAKsP,UAAY,IAAIrN,EAASjC,KAAKkJ,QAAQhH,MAE3ClC,KAAKuP,cAAcjJ,EAAMzC,G,gDAGbyC,EAAMzC,GAGlB,GAFA7D,KAAKwP,MAAQlJ,EAETzC,KAAWA,aAAiBsC,GAC9B,MAAM,IAAIjD,MA35Ca,0BA85CzBlD,KAAKyP,SACH5L,GACA6D,EAAY1H,KAAKkJ,QAAQhH,KAAMlC,KAAKwP,MAAO,CACzC9L,MAAO1D,KAAKkJ,QAAQxF,U,0BAItB+C,GACGjF,EAAUiF,KAIfzG,KAAKwP,MAAM/M,KAAKgE,GAChBzG,KAAKyP,SAASC,IAAIjJ,M,+BAMlB,IAH4C,IAAvCkJ,EAAuC,uDAA3B,qBACXhD,EAAU,GAEPlM,EAAI,EAAGsD,EAAM/D,KAAKwP,MAAM9O,OAAQD,EAAIsD,EAAKtD,GAAK,EAAG,CACxD,IAAMgG,EAAMzG,KAAKwP,MAAM/O,GACnBkP,EAAUlJ,EAAKhG,KACjBT,KAAK4P,SAASnP,GACdA,GAAK,EACLsD,GAAO,EAEP4I,EAAQlK,KAAKgE,IAIjB,OAAOkG,I,+BAGAjI,GACP1E,KAAKwP,MAAM1I,OAAOpC,EAAK,GACvB1E,KAAKyP,SAASG,SAASlL,K,iCAIvB,OAAO1E,KAAKyP,W,6BAGPhD,GAA4B,6DAAJ,GAAI,IAAnBoD,aAAmB,OAAV,EAAU,IAO7B7P,KAAKkJ,QALPvE,EAF+B,EAE/BA,eACAP,EAH+B,EAG/BA,aACAC,EAJ+B,EAI/BA,WACAC,EAL+B,EAK/BA,OACAL,EAN+B,EAM/BA,gBAGE0I,EAAUxL,EAASsL,GACnBtL,EAASnB,KAAKwP,MAAM,IAClBxP,KAAK8P,kBAAkBrD,GACvBzM,KAAK+P,kBAAkBtD,GACzBzM,KAAKgQ,eAAevD,GAYxB,OAVAkC,GAAehC,EAAS,CAAE1I,oBAEtBI,GACFsI,EAAQsD,KAAK3L,GAGXlD,EAASyO,IAAUA,GAAS,IAC9BlD,EAAUA,EAAQuD,MAAM,EAAGL,IAGtBX,GAAOvC,EAAS3M,KAAKwP,MAAO,CACjC7K,iBACAP,mB,wCAIcqI,GAChB,IAAMK,EAAWa,GAAelB,EAAOzM,KAAKkJ,SACpC3C,EAAYvG,KAAKyP,SAAjBlJ,QACFoG,EAAU,GAmBhB,OAhBApG,EAAQjE,SAAQ,YAAkC,IAA5BoH,EAA4B,EAA/BzC,EAAYvC,EAAmB,EAAtBjE,EAAWyE,EAAW,EAAdY,EAClC,GAAKtE,EAAUkI,GAAf,CADgD,MAKZoD,EAASX,SAASzC,GAA9CC,EALwC,EAKxCA,QAASlF,EAL+B,EAK/BA,MAAOgE,EALwB,EAKxBA,QAEpBkB,GACFgD,EAAQlK,KAAK,CACXsE,KAAM2C,EACNhF,MACA8G,QAAS,CAAC,CAAE/G,QAAOjG,MAAOkL,EAAMxE,OAAMuD,kBAKrCkE,I,qCAGMF,GAAO,WAEd0D,EAAa/B,GAAM3B,EAAOzM,KAAKkJ,SAE/BkH,EAAW,SAAXA,EAAY5B,EAAMzH,EAAMrC,GAC5B,IAAK8J,EAAKC,SAAU,KACV9L,EAAoB6L,EAApB7L,MAAOmK,EAAa0B,EAAb1B,SAETtB,EAAU,EAAK6E,aAAa,CAChCvP,IAAK,EAAKwO,UAAU7J,IAAI9C,GACxBnE,MAAO,EAAKiR,SAASa,uBAAuBvJ,EAAMpE,GAClDmK,aAGF,OAAItB,GAAWA,EAAQ9K,OACd,CACL,CACEgE,MACAqC,OACAyE,YAKC,GAIT,OAAQgD,EAAKE,UACX,KAAKZ,GAEH,IADA,IAAMyC,EAAM,GACH9P,EAAI,EAAGsD,EAAMyK,EAAKC,SAAS/N,OAAQD,EAAIsD,EAAKtD,GAAK,EAAG,CAC3D,IACMZ,EAASuQ,EADD5B,EAAKC,SAAShO,GACGsG,EAAMrC,GACrC,IAAI7E,EAAOa,OAGT,MAAO,GAFP6P,EAAI9N,KAAJ,MAAA8N,EAAG,YAAS1Q,IAKhB,OAAO0Q,EAET,KAAKzC,GAEH,IADA,IAAMyC,EAAM,GACH9P,EAAI,EAAGsD,EAAMyK,EAAKC,SAAS/N,OAAQD,EAAIsD,EAAKtD,GAAK,EAAG,CAC3D,IACMZ,EAASuQ,EADD5B,EAAKC,SAAShO,GACGsG,EAAMrC,GACrC,GAAI7E,EAAOa,OAAQ,CACjB6P,EAAI9N,KAAJ,MAAA8N,EAAG,YAAS1Q,IACZ,OAGJ,OAAO0Q,IAKPhK,EAAUvG,KAAKyP,SAASlJ,QACxBiK,EAAY,GACZ7D,EAAU,GAmBhB,OAjBApG,EAAQjE,SAAQ,YAAyB,IAAnByE,EAAmB,EAAtBG,EAAYxC,EAAU,EAAbjE,EAC1B,GAAIe,EAAUuF,GAAO,CACnB,IAAI0J,EAAaL,EAASD,EAAYpJ,EAAMrC,GAExC+L,EAAW/P,SAER8P,EAAU9L,KACb8L,EAAU9L,GAAO,CAAEA,MAAKqC,OAAMyE,QAAS,IACvCmB,EAAQlK,KAAK+N,EAAU9L,KAEzB+L,EAAWnO,SAAQ,YAAiB,MAAdkJ,EAAc,EAAdA,SACpB,EAAAgF,EAAU9L,GAAK8G,SAAQ/I,KAAvB,oBAA+B+I,YAMhCmB,I,wCAGSF,GAAO,WACjBK,EAAWa,GAAelB,EAAOzM,KAAKkJ,SADrB,EAEGlJ,KAAKyP,SAAvBvN,EAFe,EAEfA,KAAMqE,EAFS,EAETA,QACRoG,EAAU,GA8BhB,OA3BApG,EAAQjE,SAAQ,YAAyB,IAAnByE,EAAmB,EAAtBG,EAAYxC,EAAU,EAAbjE,EAC1B,GAAKe,EAAUuF,GAAf,CAIA,IAAIyE,EAAU,GAGdtJ,EAAKI,SAAQ,SAACxB,EAAKqG,GACjBqE,EAAQ/I,KAAR,MAAA+I,EAAO,YACF,EAAK6E,aAAa,CACnBvP,MACAtC,MAAOuI,EAAKI,GACZ2F,kBAKFtB,EAAQ9K,QACViM,EAAQlK,KAAK,CACXiC,MACAqC,OACAyE,gBAKCmB,I,sCAE8B,IAAxB7L,EAAwB,EAAxBA,IAAKtC,EAAmB,EAAnBA,MAAOsO,EAAY,EAAZA,SACzB,IAAKtL,EAAUhD,GACb,MAAO,GAGT,IAAIgN,EAAU,GAEd,GAAIpO,EAAQoB,GACVA,EAAM8D,SAAQ,YAAkC,IAA5BoH,EAA4B,EAA/BzC,EAAYvC,EAAmB,EAAtBjE,EAAWyE,EAAW,EAAdY,EAChC,GAAKtE,EAAUkI,GAAf,CAD8C,MAKVoD,EAASX,SAASzC,GAA9CC,EALsC,EAKtCA,QAASlF,EAL6B,EAK7BA,MAAOgE,EALsB,EAKtBA,QAEpBkB,GACF6B,EAAQ/I,KAAK,CACXgC,QACA3D,MACAtC,MAAOkL,EACPhF,MACAQ,OACAuD,oBAID,KACMiB,EAAkBlL,EAArByI,EAAY/B,EAAS1G,EAAZsH,EADZ,EAG+BgH,EAASX,SAASzC,GAA9CC,EAHH,EAGGA,QAASlF,EAHZ,EAGYA,MAAOgE,EAHnB,EAGmBA,QAEpBkB,GACF6B,EAAQ/I,KAAK,CAAEgC,QAAO3D,MAAKtC,MAAOkL,EAAMxE,OAAMuD,YAIlD,OAAO+C,M,KAIX6D,GAAKqB,QAAU,QACfrB,GAAK3H,YAAcA,EACnB2H,GAAKsB,WAlyCL,SAAoB5B,GAAqC,6DAAJ,GAAI,IAA7BrL,aAA6B,MAArBQ,EAAOR,MAAc,EAC/CxB,EAAkB6M,EAAlB7M,KAAMqE,EAAYwI,EAAZxI,QACRoB,EAAU,IAAIxB,EAAU,CAAEzC,UAGhC,OAFAiE,EAAQC,QAAQ1F,GAChByF,EAAQtB,gBAAgBE,GACjBoB,GA8xCT0H,GAAKuB,OAAS1M,EAGZmL,GAAK7C,WAAa4B,GApdpB,WACEV,GAAoBjL,KAApB,MAAAiL,GAAmB,WAudnBmD,CAASxD,IAGIgC","file":"static/js/1.1f41cd3f.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const norm = 1 / Math.sqrt(numTokens);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore$1(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n"],"sourceRoot":""}