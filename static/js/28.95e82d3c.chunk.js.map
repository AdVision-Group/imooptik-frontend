{"version":3,"sources":["context/orders/orders.context.jsx"],"names":["OrdersContext","createContext","orders","getOrders","createOrder","OrdersProvider","children","useContext","LoadingModalContext","setIsLoading","setShowModal","getMessage","closeModal","token","AuthContext","useState","setOrders","myHeaders","Headers","append","a","requestOptions","method","headers","redirect","fetch","process","response","json","data","console","log","message","orderToCreate","orderObj","raw","JSON","stringify","body","Provider","value"],"mappings":"qOAMaA,EAAgBC,wBAAc,CACvCC,OAAQ,KACRC,UAAW,aACXC,YAAa,eA+FFC,UA5FQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAC0BC,qBAAWC,KAAlEC,EAD6B,EAC7BA,aAAcC,EADe,EACfA,aAAcC,EADC,EACDA,WAAYC,EADX,EACWA,WACxCC,EAAUN,qBAAWO,KAArBD,MAF6B,EAGTE,mBAAS,MAHA,mBAG9Bb,EAH8B,KAGtBc,EAHsB,KAK/BC,EAAY,IAAIC,QACtBD,EAAUE,OAAO,aAAcN,GAC/BI,EAAUE,OAAO,eAAgB,oBAEjC,IAAMhB,EAAS,uCAAG,gCAAAiB,EAAA,6DACdX,GAAa,GACbC,GAAa,GAEPW,EAAiB,CACnBC,OAAQ,MACRC,QAASN,EACTO,SAAU,UAPA,kBAWaC,MAAM,GAAD,OAAIC,6BAAJ,qBAA+DL,GAXjF,cAWJM,EAXI,gBAYSA,EAASC,OAZlB,UAYJC,EAZI,OAcVC,QAAQC,IAAIF,IAERA,EAAK3B,OAhBC,wBAiBNc,EAAUa,EAAK3B,QACfU,IAlBM,2BAsBVD,EAAWkB,EAAKG,SAChBvB,GAAa,GAvBH,kDA0BVqB,QAAQC,IAAR,MACApB,EAAW,qBACXF,GAAa,GA5BH,0DAAH,qDAiCTL,EAAW,uCAAG,WAAO6B,GAAP,uBAAAb,EAAA,6DAChBX,GAAa,GACbC,GAAa,GAETwB,EAJY,eAKTD,GAIPH,QAAQC,IAAI,qBACZD,QAAQC,IAAIG,GAENC,EAAMC,KAAKC,UAAUH,GAE3BJ,QAAQC,IAAII,GAENd,EAAiB,CACnBC,OAAQ,OACRC,QAASN,EACTqB,KAAMH,EACNX,SAAU,UApBE,mBAwBWC,MAAM,GAAD,OAAIC,6BAAJ,qBAA+DL,GAxB/E,eAwBNM,EAxBM,iBAyBOA,EAASC,OAzBhB,QAyBNC,EAzBM,OA2BZlB,EAAWkB,EAAKG,SAChBvB,GAAa,GA5BD,kDA8BZqB,QAAQC,IAAR,MACApB,EAAW,qBACXF,GAAa,GAhCD,0DAAH,sDAqCjB,OACI,cAACT,EAAcuC,SAAf,CACIC,MAAO,CACHtC,SACAC,YACAC,eAJR,SAOKE","file":"static/js/28.95e82d3c.chunk.js","sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n\n\nexport const OrdersContext = createContext({\n    orders: null,\n    getOrders: () => { },\n    createOrder: () => { },\n})\n\nconst OrdersProvider = ({ children }) => {\n    const { setIsLoading, setShowModal, getMessage, closeModal } = useContext(LoadingModalContext)\n    const { token } = useContext(AuthContext)\n    const [orders, setOrders] = useState(null)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const getOrders = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders`, requestOptions)\n            const data = await response.json()\n\n            console.log(data)\n\n            if (data.orders) {\n                setOrders(data.orders)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n\n    }\n\n    const createOrder = async (orderToCreate) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        let orderObj = {\n            ...orderToCreate\n        }\n\n\n        console.log(\"ORDER BEFORE SEND\")\n        console.log(orderObj)\n\n        const raw = JSON.stringify(orderObj)\n\n        console.log(raw)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders`, requestOptions)\n            const data = await response.json()\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n\n    return (\n        <OrdersContext.Provider\n            value={{\n                orders,\n                getOrders,\n                createOrder\n            }}\n        >\n            {children}\n        </OrdersContext.Provider>\n    )\n}\n\nexport default OrdersProvider"],"sourceRoot":""}