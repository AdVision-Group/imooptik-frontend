{"version":3,"sources":["components/custom-form-switch/custom-form-switch.styles.jsx","components/custom-form-switch/custom-form-switch.component.jsx","components/new-user-form/new-user-form.styles.jsx","components/new-user-form/new-user-form.component.jsx","sections/customer-profile/customer-profile.styles.jsx","sections/customer-profile/customer-profile.section.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["Title","styled","h3","ToggleOptionsContainer","div","ToggleFormButton","CustomButton","isActive","CustomFormSwitch","title","activeIndex","handleClick","items","Fragment","map","item","idx","onClick","e","name","CustomSelect","select","CustomerForm","ColContainer","SectionTitle","h2","ZeroMargin","GridRow","Container","NewUserForm","formToShow","switchFormButtons","toggleUserForm","user","handleChange","isAdmin","handleParameterChange","handleCompanyChange","label","type","value","fName","lName","email","phone","example","birthDate","parameters","lenses","address","psc","city","country","company","ico","dic","icdph","password","confirmPassword","premises","onChange","retailNames","admin","target","optometrist","Header","paddingStyles","DeleteProfileButton","SaveButton","CustomerProfile","id","useParams","useContext","AuthContext","isOptometrist","LoadingModalContext","closeModal","isLoading","message","showModal","UserContext","isUpdating","getUser","updateUser","resetUser","createUser","deleteUser","useState","userObj","setUserObj","handleUserChange","handleLensesParameterChange","arr","handleCompanyAddressChange","Object","keys","length","handleSubmit","path","preventDefault","newUserObj","_id","useEffect","cylinder","cylinderAxes","diopters","distance","addition","basis","prism","loading","close","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/24.13e6d5e2.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport CustomButton from '../../components/custom-button/custom-button.component'\r\n\r\nexport const Title = styled.h3`\r\n    margin-top: 2rem;\r\n    /* margin-bottom: 2rem; */\r\n`\r\n\r\nexport const ToggleOptionsContainer = styled.div`\r\n    display: flex;\r\n    margin: 2rem 0;\r\n`\r\n\r\nexport const ToggleFormButton = styled(CustomButton)`\r\n    background-color: ${({ isActive }) => isActive ? \"rgb(235, 172, 1)\" : \"#000\"};\r\n    font-weight: 700;\r\n    margin-right: 2rem;\r\n`","import React from 'react'\r\n\r\nimport {\r\n    Title,\r\n    ToggleFormButton,\r\n    ToggleOptionsContainer\r\n} from './custom-form-switch.styles'\r\n\r\nconst CustomFormSwitch = ({ title, activeIndex, handleClick, items }) => {\r\n    return (\r\n        <React.Fragment>\r\n            <Title>{title}</Title>\r\n            <ToggleOptionsContainer>\r\n                {\r\n                    items.map((item, idx) => (\r\n                        <ToggleFormButton key={idx} isActive={activeIndex === idx} onClick={(e) => handleClick(e, idx)}>{item.name}</ToggleFormButton>\r\n                    ))\r\n                }\r\n            </ToggleOptionsContainer>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CustomFormSwitch\r\n","import styled from \"styled-components\"\r\n\r\nexport const CustomSelect = styled.select`\r\n    margin-top: 1.5rem;\r\n    min-width: 16.5rem;\r\n    width: 100%;\r\n    background-color: var(--input-background-color);\r\n    color: var(--input-color);\r\n    border: none;\r\n    padding: .5rem .5rem .5rem 1rem;\r\n    font-size: inherit;\r\n    font-family: inherit;\r\n    display: block;\r\n\r\n        margin-bottom: 2rem;\r\n`\r\n\r\n\r\nexport const CustomerForm = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 50rem;\r\n    grid-gap: 2rem;\r\n    align-items: start;\r\n`\r\n\r\nexport const ColContainer = styled.div`\r\n    padding: 2rem;\r\n    box-shadow: var(--container-shadow);\r\n    background-color: var(--container-background-color);\r\n\r\n`\r\n\r\nexport const SectionTitle = styled.h2`\r\n    margin-bottom: 2rem;\r\n`\r\n\r\nexport const ZeroMargin = styled.div`\r\n    input {\r\n        margin-bottom: 0 !important;\r\n    }\r\n`\r\n\r\nexport const GridRow = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    max-width: 50rem;\r\n\r\n    div:not(:last-child) {\r\n        padding-right: 2rem;\r\n    }\r\n`\r\nexport const Container = styled.div`\r\n    margin-top: 2rem;\r\n`","import React from 'react'\r\n\r\nimport CustomFormSwitch from '../custom-form-switch/custom-form-switch.component'\r\nimport InputRow from '../product-input-row/product-input-row.component'\r\nimport CustomInput from '../custom-input/custom-input.component'\r\nimport ParametersTable from '../parameters-table/parameters-table.component'\r\nimport CustomCheckbox from \"../custom-checkbox/custom-checkbox.component\"\r\n\r\nimport {\r\n    retailNames\r\n} from '../../utils/warehouse.utils'\r\n\r\nimport {\r\n    CustomSelect,\r\n    Container,\r\n    GridRow,\r\n    ZeroMargin,\r\n    ColContainer,\r\n    CustomerForm,\r\n    SectionTitle\r\n} from './new-user-form.styles'\r\n\r\n\r\nconst NewUserForm = ({\r\n    formToShow,\r\n    switchFormButtons,\r\n    toggleUserForm,\r\n    user,\r\n    handleChange,\r\n    isAdmin,\r\n    handleParameterChange,\r\n    handleCompanyChange\r\n}) => {\r\n\r\n    return (\r\n        <div>\r\n            {/* Akého uživatela chcete vytvoriť? */}\r\n            {isAdmin && <CustomFormSwitch\r\n                items={switchFormButtons}\r\n                title=\"Akého uživatela chcete vytvoriť ?\"\r\n                activeIndex={formToShow}\r\n                handleClick={toggleUserForm}\r\n            />}\r\n\r\n            {\r\n                formToShow === 0 ? (\r\n                    <CustomerForm>\r\n                        <ColContainer>\r\n                            <h2>Informácie</h2>\r\n                            <CustomInput\r\n                                label=\"Meno*\"\r\n                                type='text'\r\n                                name='fName'\r\n                                value={user.fName ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                            <CustomInput\r\n                                label=\"Priezvisko*\"\r\n                                type='text'\r\n                                name='lName'\r\n                                value={user.lName ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                            <CustomInput\r\n                                label=\"E-mail*\"\r\n                                type='email'\r\n                                name='email'\r\n                                value={user.email ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                            <CustomInput\r\n                                label=\"Telefónne číslo\"\r\n                                type='text'\r\n                                name='phone'\r\n                                value={user.phone ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                            <InputRow\r\n                                label=\"Dátum narodenia\"\r\n                                example=''\r\n                            >\r\n                                <CustomInput\r\n                                    // label=\"Priezvisko*\"\r\n                                    type='date'\r\n                                    name='birthDate'\r\n                                    value={user.birthDate}\r\n                                    handleChange={(e) => handleChange(e)}\r\n                                />\r\n                            </InputRow>\r\n\r\n                            <Container>\r\n                                <h2>Parametre</h2>\r\n\r\n                                <ParametersTable\r\n                                    parameters={user.lenses}\r\n                                    handleChange={handleParameterChange}\r\n                                />\r\n                            </Container>\r\n                        </ColContainer>\r\n\r\n                        <ColContainer>\r\n                            <div>\r\n                                <h2>Fakturačné údaje</h2>\r\n                                <GridRow>\r\n                                    <ZeroMargin>\r\n                                        <CustomInput\r\n                                            label=\"Ulica a čislo domu\"\r\n                                            type='text'\r\n                                            name='address'\r\n                                            value={user.address ?? \"\"}\r\n                                            handleChange={(e) => handleChange(e)}\r\n                                        />\r\n                                    </ZeroMargin>\r\n                                    <ZeroMargin>\r\n                                        <CustomInput\r\n                                            label=\"PSČ\"\r\n                                            type='text'\r\n                                            name='psc'\r\n                                            value={user.psc ?? \"\"}\r\n                                            handleChange={(e) => handleChange(e)}\r\n                                        />\r\n                                    </ZeroMargin>\r\n                                </GridRow>\r\n                                <GridRow>\r\n                                    <div>\r\n                                        <CustomInput\r\n                                            label=\"Mesto\"\r\n                                            type='text'\r\n                                            name='city'\r\n                                            value={user.city ?? \"\"}\r\n                                            handleChange={(e) => handleChange(e)}\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <CustomInput\r\n                                            label=\"Krajina\"\r\n                                            type='text'\r\n                                            name='country'\r\n                                            value={user.country ?? \"\"}\r\n                                            handleChange={(e) => handleChange(e)}\r\n                                        />\r\n                                    </div>\r\n                                </GridRow>\r\n                            </div>\r\n\r\n                            <Container>\r\n                                <h2>Firemné údaje</h2>\r\n                                <GridRow>\r\n                                    <ZeroMargin>\r\n                                        <CustomInput\r\n                                            label=\"IČO\"\r\n                                            type='text'\r\n                                            name='ico'\r\n                                            value={user.company.ico ?? \"\"}\r\n                                            handleChange={(e) => handleCompanyChange(e)}\r\n                                        />\r\n                                    </ZeroMargin>\r\n                                    <ZeroMargin>\r\n                                        <CustomInput\r\n                                            label=\"DIČ\"\r\n                                            type='text'\r\n                                            name='dic'\r\n                                            value={user.company.dic ?? \"\"}\r\n                                            handleChange={(e) => handleCompanyChange(e)}\r\n                                        />\r\n                                    </ZeroMargin>\r\n                                    <ZeroMargin>\r\n                                        <CustomInput\r\n                                            label=\"IČ DPH\"\r\n                                            type='text'\r\n                                            name='icdph'\r\n                                            value={user.company.icdph ?? \"\"}\r\n                                            handleChange={(e) => handleCompanyChange(e)}\r\n                                        />\r\n                                    </ZeroMargin>\r\n                                    <ZeroMargin>\r\n                                        {/* <CustomInput\r\n                                            label=\"IČ DPH\"\r\n                                            type='text'\r\n                                            name='icdph'\r\n                                            value={user.company.icdph ?? \"\"}\r\n                                            handleChange={(e) => handleCompanyChange(e)}\r\n                                        /> */}\r\n                                    </ZeroMargin>\r\n                                </GridRow>\r\n                                <GridRow>\r\n                                    <ZeroMargin>\r\n                                        <CustomInput\r\n                                            label=\"Ulica a čislo domu\"\r\n                                            type='text'\r\n                                            name='address'\r\n                                            value={user.company.address ?? \"\"}\r\n                                            handleChange={(e) => handleCompanyChange(e)}\r\n                                        />\r\n                                    </ZeroMargin>\r\n                                    <ZeroMargin>\r\n                                        <CustomInput\r\n                                            label=\"PSČ\"\r\n                                            type='text'\r\n                                            name='psc'\r\n                                            value={user.company.psc ?? \"\"}\r\n                                            handleChange={(e) => handleCompanyChange(e)}\r\n                                        />\r\n                                    </ZeroMargin>\r\n                                </GridRow>\r\n                                <GridRow>\r\n                                    <div>\r\n                                        <CustomInput\r\n                                            label=\"Mesto\"\r\n                                            type='text'\r\n                                            name='city'\r\n                                            value={user.company.city ?? \"\"}\r\n                                            handleChange={(e) => handleCompanyChange(e)}\r\n                                        />\r\n                                    </div>\r\n                                    <div>\r\n                                        <CustomInput\r\n                                            label=\"Krajina\"\r\n                                            type='text'\r\n                                            name='country'\r\n                                            value={user.company.country ?? \"\"}\r\n                                            handleChange={(e) => handleCompanyChange(e)}\r\n                                        />\r\n                                    </div>\r\n                                </GridRow>\r\n                            </Container>\r\n                        </ColContainer>\r\n\r\n                    </CustomerForm>\r\n                ) : (\r\n                    <CustomerForm>\r\n\r\n                        <ColContainer>\r\n                            <h2>Informácie</h2>\r\n                            <CustomInput\r\n                                label=\"Meno*\"\r\n                                type='text'\r\n                                name='fName'\r\n                                value={user.fName ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                            <CustomInput\r\n                                label=\"Priezvisko*\"\r\n                                type='text'\r\n                                name='lName'\r\n                                value={user.lName ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                            <CustomInput\r\n                                label=\"E-mail*\"\r\n                                type='email'\r\n                                name='email'\r\n                                value={user.email ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                            <CustomInput\r\n                                label=\"Heslo*\"\r\n                                type='password'\r\n                                name='password'\r\n                                value={user.password ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                            <CustomInput\r\n                                label=\"Potvrď heslo*\"\r\n                                type='password'\r\n                                name='confirmPassword'\r\n                                value={user.confirmPassword ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </ColContainer>\r\n\r\n                        <ColContainer>\r\n                            <SectionTitle>Admin privilégiá</SectionTitle>\r\n                            <div>\r\n                                <h4>Predajňa na ktorej zamestnanec pracuje</h4>\r\n                                <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\r\n                                    <option value={0}>Nezadané</option>\r\n                                    {retailNames.map((name, idx) => {\r\n                                        if (idx === 0) return\r\n                                        return (\r\n                                            <option key={idx} value={idx}>{name}</option>\r\n\r\n                                        )\r\n                                    })}\r\n                                </CustomSelect>\r\n\r\n                            </div>\r\n                            <div>\r\n                                <h4>Výška administrativných práv</h4>\r\n                                <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\r\n                                    {/* <option value={0}>Zákaznik</option> */}\r\n                                    <option value={1}>Zamestnanec</option>\r\n                                    <option value={2}>Vedúci</option>\r\n                                </CustomSelect>\r\n\r\n                            </div>\r\n                            <Container>\r\n                                <CustomCheckbox\r\n                                    label='Optometrista'\r\n                                    handleClick={() => handleChange({\r\n                                        target: {\r\n                                            name: \"optometrist\",\r\n                                            value: !user.optometrist\r\n                                        }\r\n                                    })}\r\n                                    isActive={user.optometrist}\r\n                                />\r\n                            </Container>\r\n                        </ColContainer>\r\n                    </CustomerForm>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewUserForm\r\n","import styled from 'styled-components'\r\nimport CustomButton from '../../components/custom-button/custom-button.component'\r\n\r\nimport { paddingStyles } from '../../global.styles'\r\n\r\nexport const Header = styled.div`\r\n    ${paddingStyles}\r\n    padding-top: 3rem;\r\n    padding-bottom: 3rem;\r\n\r\n    color: var(--primary-text-color);\r\n`\r\n\r\nexport const DeleteProfileButton = styled(CustomButton)`\r\n    background-color: var(--color-red);\r\n    font-size: 1.4rem;\r\n    margin-left: 2rem;\r\n`\r\n\r\n\r\nexport const SaveButton = styled(CustomButton)`\r\n    margin-left: 2rem;\r\n    font-size: 1.4rem;\r\n    background-color: var(--primary-color);\r\n    font-weight: bolder;\r\n`","import React, { useContext, useEffect, useState } from 'react'\r\nimport { AuthContext } from '../../context/auth/auth.context'\r\nimport { UserContext } from '../../context/user/user.context'\r\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\r\nimport UserForm from '../../components/user-form/user-form.component'\r\nimport NewUserForm from '../../components/new-user-form/new-user-form.component'\r\n\r\nimport Popup from '../../components/popup/pop-up.component'\r\n\r\nimport {\r\n    FixedContainer\r\n} from '../../global.styles'\r\n\r\nimport {\r\n    Header,\r\n    DeleteProfileButton,\r\n    // Name,\r\n    SaveButton,\r\n} from './customer-profile.styles'\r\n\r\nconst CustomerProfile = () => {\r\n    const { id } = useParams()\r\n    const { isAdmin, isOptometrist } = useContext(AuthContext)\r\n    const {\r\n        closeModal,\r\n        isLoading,\r\n        message,\r\n        showModal,\r\n    } = useContext(LoadingModalContext)\r\n\r\n    const {\r\n        isUpdating,\r\n        user,\r\n        getUser,\r\n        handleChange,\r\n        handleParameterChange,\r\n        handleCompanyChange,\r\n        updateUser,\r\n        resetUser,\r\n        formToShow,\r\n        switchFormButtons,\r\n        toggleUserForm,\r\n        createUser,\r\n        deleteUser\r\n    } = useContext(UserContext)\r\n\r\n    const [userObj, setUserObj] = useState({})\r\n    // const [hasChanges, setHasChanges] = useState(false)\r\n\r\n    const handleUserChange = (e) => {\r\n        // setHasChanges(true)\r\n        const { name, value } = e.target\r\n\r\n        handleChange(e)\r\n\r\n\r\n        if (value === '') {\r\n            delete userObj[name]\r\n            // delete userObj.company[]\r\n            return\r\n        }\r\n\r\n        setUserObj({\r\n            ...userObj,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleLensesParameterChange = (e, idx) => {\r\n        // setHasChanges(true)\r\n\r\n        const { name, value } = e.target\r\n        let arr = user.lenses[name]\r\n        arr[idx] = value\r\n\r\n\r\n        handleParameterChange(e, idx)\r\n        setUserObj({\r\n            ...userObj,\r\n            lenses: {\r\n                ...user.lenses,\r\n                [name]: arr\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    const handleCompanyAddressChange = (e) => {\r\n        // setHasChanges(true)\r\n\r\n        const { name, value } = e.target\r\n        handleCompanyChange(e)\r\n\r\n        if (value === '') {\r\n            delete userObj.company[name]\r\n            if (Object.keys(userObj.company).length === 0) {\r\n                delete userObj[\"company\"]\r\n            }\r\n            // delete userObj.company[]\r\n            return\r\n        }\r\n\r\n        setUserObj({\r\n            ...userObj,\r\n            company: {\r\n                ...userObj.company,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleSubmit = (e, path) => {\r\n        e.preventDefault()\r\n        // setHasChanges(false)\r\n\r\n        if (id === 'novy-zakaznik') {\r\n            if (userObj.fName || userObj.lName) {\r\n                delete userObj[\"fName\"]\r\n                delete userObj[\"lName\"]\r\n            }\r\n\r\n            if (formToShow === 1) {\r\n                const newUserObj = {\r\n                    ...userObj,\r\n                    admin: userObj.admin || 1\r\n                }\r\n                createUser(newUserObj, path)\r\n                return\r\n            }\r\n            createUser(userObj, path)\r\n        } else {\r\n            if (userObj.fName || userObj.lName) {\r\n                delete userObj[\"fName\"]\r\n                delete userObj[\"lName\"]\r\n            } else if (!userObj.fName || !userObj.lName) {\r\n                delete userObj[\"name\"]\r\n            }\r\n\r\n            if (userObj.company) {\r\n                const newUserObj = {\r\n                    ...userObj,\r\n                    company: {\r\n                        ...user.company,\r\n                        ...userObj.company\r\n                    }\r\n                }\r\n                updateUser(newUserObj, user._id)\r\n                return\r\n            }\r\n            updateUser(userObj, user._id)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUserObj({\r\n            ...userObj,\r\n            name: user.fName + \" \" + user.lName\r\n        })\r\n    }, [userObj.fName, userObj.lName])\r\n\r\n    useEffect(() => {\r\n        if (id !== 'novy-zakaznik') {\r\n            getUser(id)\r\n        }\r\n    }, [id])\r\n\r\n    //unmount\r\n    useEffect(() => {\r\n        return () => {\r\n            resetUser()\r\n            handleChange({\r\n                target: {\r\n                    name: 'lenses',\r\n                    value: {\r\n                        cylinder: [1001, 1001, 1001, 1001],\r\n                        cylinderAxes: [1001, 1001, 1001, 1001],\r\n                        diopters: [1001, 1001, 1001, 1001],\r\n                        distance: [1001, 1001, 1001, 1001],\r\n                        addition: [1001, 1001, 1001, 1001],\r\n                        basis: [1001, 1001, 1001, 1001],\r\n                        prism: [1001, 1001, 1001, 1001],\r\n                    },\r\n                }\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <section>\r\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\r\n            {/* <Prompt\r\n                when={hasChanges}\r\n                message={\"Chcete opustiť tuto stránku?\"}\r\n            /> */}\r\n            <form>\r\n                <Header>\r\n                    <FixedContainer>\r\n                        <h1>Profil</h1>\r\n                        <div>\r\n                            {isUpdating && <DeleteProfileButton onClick={() => deleteUser(user._id)} type='button'>Vymazať</DeleteProfileButton>}\r\n                            {!isUpdating && <SaveButton onClick={(e) => handleSubmit(e, 'profile')}>Vytvoriť a prejsť na profil</SaveButton>}\r\n                            {!isUpdating && !(formToShow === 1) && <SaveButton onClick={(e) => handleSubmit(e, 'order')}>Vytvoriť a prejsť na objednávku</SaveButton>}\r\n                            <SaveButton onClick={(e) => handleSubmit(e, 'customers')}>\r\n                                {isUpdating ? \"Uložiť zmeny\" : \"Vytvoriť\"}\r\n                            </SaveButton>\r\n                        </div>\r\n\r\n                    </FixedContainer>\r\n                </Header>\r\n\r\n                <ScrollContainer>\r\n                    {\r\n                        isUpdating ? (\r\n                            <UserForm\r\n                                user={user}\r\n                                isAdmin={isAdmin}\r\n                                isUpdating={isUpdating}\r\n                                isOptometrist={isOptometrist}\r\n                                handleChange={handleUserChange}\r\n                                handleParameterChange={handleLensesParameterChange}\r\n                                handleCompanyChange={handleCompanyAddressChange}\r\n                            />\r\n                        ) : (\r\n                            <NewUserForm\r\n                                isAdmin={isAdmin}\r\n                                handleParameterChange={handleLensesParameterChange}\r\n                                formToShow={formToShow}\r\n                                switchFormButtons={switchFormButtons}\r\n                                toggleUserForm={toggleUserForm}\r\n                                user={user}\r\n                                handleChange={handleUserChange}\r\n                                handleCompanyChange={handleCompanyAddressChange}\r\n                                resetUser={resetUser}\r\n\r\n                            />\r\n                        )\r\n                    }\r\n\r\n\r\n                </ScrollContainer>\r\n\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CustomerProfile\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}