{"version":3,"sources":["context/orders/orders.context.jsx"],"names":["OrdersContext","createContext","orders","getPDF","getOrders","createOrder","updateOrder","finishOrder","cancelOrder","OrdersProvider","children","push","useHistory","useContext","LoadingModalContext","setIsLoading","setShowModal","getMessage","closeModal","token","AuthContext","useState","setOrders","myHeaders","Headers","append","a","requestOptions","method","headers","redirect","fetch","process","response","json","data","console","log","messageSK","orderId","filename","setTimeout","win","window","open","focus","orderToCreate","orderObj","raw","JSON","stringify","body","order","_id","orderToUpdate","refetch","Provider","value"],"mappings":"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","file":"static/js/31.1626ff37.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n\n\nexport const OrdersContext = createContext({\n    orders: null,\n    getPDF: () => { },\n    getOrders: () => { },\n    createOrder: () => { },\n    updateOrder: () => { },\n    finishOrder: () => { },\n    cancelOrder: () => { },\n})\n\nconst OrdersProvider = ({ children }) => {\n    const { push } = useHistory()\n    const { setIsLoading, setShowModal, getMessage, closeModal } = useContext(LoadingModalContext)\n    const { token } = useContext(AuthContext)\n    const [orders, setOrders] = useState(null)\n\n\n\n\n\n\n\n    // REQUESTS\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const getOrders = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders`, requestOptions)\n            const data = await response.json()\n\n            console.log(data)\n\n            if (data.orders) {\n                setOrders(data.orders)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n\n    }\n\n    const getPDF = async (orderId) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            // body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}/createPdf`, requestOptions)\n            const data = await response.json()\n\n            console.log(data)\n\n            if (data.filename) {\n                setIsLoading(false)\n                getMessage(data.messageSK)\n\n                setTimeout(() => {\n                    const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${data.filename}`, \"_blank\", \"noreferrer noopener\");\n                    win?.focus();\n                }, 100)\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createOrder = async (orderToCreate) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        let orderObj = {\n            ...orderToCreate\n        }\n\n\n        console.log(\"ORDER BEFORE SEND\")\n        console.log(orderObj)\n\n        const raw = JSON.stringify(orderObj)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders`, requestOptions)\n            const data = await response.json()\n\n            console.log(data)\n\n            if (data.order) {\n                getOrders()\n                closeModal()\n                push('/dashboard/objednavky')\n\n                setTimeout(() => {\n                    getPDF(data.order._id)\n                    //     const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${data.order.pdfPath}`, \"_blank\", \"noreferrer noopener\");\n                    //     win?.focus();\n                }, 100)\n\n            }\n\n            // {`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${order.order.pdfPath}`} target=\"_blank\" rel=\"noreferrer noopener\"\n\n            // getMessage(data.messageSK)\n            // setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateOrder = async (orderToUpdate, orderId) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        let orderObj = {\n            ...orderToUpdate\n        }\n\n\n        console.log(\"ORDER BEFORE SEND\")\n        console.log(orderObj)\n\n        const raw = JSON.stringify(orderObj)\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}`, requestOptions)\n            const data = await response.json()\n\n            console.log(data)\n\n            if (data.order) {\n                getOrders()\n                closeModal()\n                push('/dashboard/objednavky')\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const finishOrder = async (orderId, refetch) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}/fulfill`, requestOptions)\n            const data = await response.json()\n\n            console.log(data)\n\n            if (data.order) {\n                refetch()\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const cancelOrder = async (orderId, refetch) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}/cancel`, requestOptions)\n            const data = await response.json()\n\n            console.log(data)\n\n            if (data.order) {\n                setTimeout(() => {\n                    refetch()\n                    closeModal()\n\n                }, 100)\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <OrdersContext.Provider\n            value={{\n                orders,\n                getPDF,\n                getOrders,\n                createOrder,\n                updateOrder,\n                finishOrder,\n                cancelOrder,\n            }}\n        >\n            {children}\n        </OrdersContext.Provider>\n    )\n}\n\nexport default OrdersProvider"],"sourceRoot":""}