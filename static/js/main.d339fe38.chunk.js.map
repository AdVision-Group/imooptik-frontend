{"version":3,"sources":["global.styles.jsx","context/loading-modal/loading-modal.contenxt.jsx","context/auth/auth.queries.jsx","context/auth/auth.context.jsx","components/custom-button/custom-button.styles.jsx","components/custom-button/custom-button.component.jsx","components/popup/pop.up.styles.jsx","components/popup/pop-up.component.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["DefaultThemeColors","createGlobalStyle","DarkThemeColors","GlobalStyles","paddingStyles","css","SwitchButton","styled","button","FlexContainer","div","FixedContainer","LoadingModalContext","createContext","isLoading","showModal","message","closeModal","getMessage","setIsLoading","setShowModal","LoadingModalProvider","children","useState","setMessage","Provider","value","string","getUser","credentials","email","password","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","redirect","fetch","process","createNewUser","name","resetPassword","setNewPassword","resetSecret","fetchUser","token","AuthContext","currentUser","isAdmin","isOptometrist","stats","logIn","logOut","register","handleResetPassword","handleCreatingNewPassword","AuthProvider","useContext","setCurrentUser","setToken","setIsAdmin","setIsOptometrist","setStats","checkIfAdmin","user","admin","a","console","log","response","json","authToken","localStorage","setItem","confirmPassword","data","messageSK","getStats","useEffect","getItem","optometrist","getUserProfile","removeItem","ButtonContainer","CustomButton","otherprops","PopupContainer","Panel","Message","Popup","props","loading","title","close","ReactDOM","createPortal","onClick","document","getElementById","SpinnerContainer","Spinner","SignInAndSignUpPage","lazy","DashboardPage","ResetPasswordPage","App","currentTheme","setCurrentTheme","Fragment","fallback","basename","path","render","to","component","prevValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.d339fe38.chunk.js","sourcesContent":["import styled, { createGlobalStyle, css } from 'styled-components'\r\n\r\nexport const DefaultThemeColors = createGlobalStyle`\r\n    :root {\r\n        --primary-color: #ebac01;\r\n        --secondary-color: #000;\r\n        --primary-text-color: #000000;\r\n        --secondary-text-color: rgba(0, 0, 0, 0.822);\r\n        --body-background-primary-color: #f5f5f5;\r\n        --background-primary-color: #fff;\r\n\r\n        --navlink-color: #ffffff;\r\n        --table-head-color: #ffffff;\r\n        --table-border: 1px solid rgba(0,0,0,0.1);\r\n\r\n        --appointment-container-border: none;\r\n        --appointment-container-background-color: #eee;\r\n        --appointment-container-text-color: #fff;\r\n\r\n        --container-shadow: 0 0 1.5rem 0 rgba(0,0,0,.08);\r\n        --container-background-color: #fff;\r\n\r\n        --container-background-table-row: #f5f5f5;\r\n        --container-background-table-row-odd: #fff;\r\n\r\n\r\n        --backbutton-color: #ebac01;\r\n        --dropdownbutton-background-color: #f5f5f5;\r\n        --dropdownbutton-background-color-odd: #fff;\r\n        --dropdownbutton-color: #ebac01;\r\n        --dropdown-background-color: #fff;\r\n        --dropdown-hover-background-color: #f5f5f5;\r\n\r\n        --input-background-color: #f5f5f5;\r\n        --input-color: #000;\r\n\r\n        --image-background-color: none;\r\n\r\n        --button-font-color: #fff;\r\n        --secondary-button-font-color: #000;\r\n\r\n        --color-red: #DD4C4C;\r\n        --color-green: #32AA5F;\r\n        --color-black: #000;\r\n\r\n        --calendar-indicator: invert(-1);\r\n\r\n    }\r\n`\r\n\r\nexport const DarkThemeColors = createGlobalStyle`\r\n    :root {\r\n        --primary-color: #c28e01;\r\n        --secondary-color: #000;\r\n        --primary-text-color: #c7c6c6;\r\n        --secondary-text-color: #a0a0a0;\r\n        --body-background-primary-color: #252525;\r\n        --background-primary-color: #2c2c2c;\r\n\r\n        --navlink-color: #c7c6c6;\r\n        --table-head-color: #c7c6c6;\r\n        --table-border: 1px solid rgba(0,0,0,0.1);\r\n\r\n        --appointment-container-border: none;\r\n        --appointment-container-background-color: #333;\r\n        --appointment-container-text-color: #ffffff;\r\n\r\n\r\n        --container-shadow: none;\r\n        --container-background-color: #252525;\r\n        \r\n        --container-background-table-row: #252525;\r\n        --container-background-table-row-odd: #2c2c2c;\r\n\r\n        --backbutton-color: #c28e01;\r\n        --dropdownbutton-background-color: #121212;\r\n        --dropdownbutton-background-color-odd: #121212;\r\n\r\n        --dropdownbutton-color: #c28e01;\r\n        --dropdown-background-color: #121212;\r\n        --dropdown-hover-background-color: #181818;\r\n\r\n        --input-background-color: #121212;\r\n        --input-color: #c5c4c4;\r\n\r\n        --image-background-color: #252525;\r\n\r\n\r\n        --button-font-color: #fff;\r\n        --secondary-button-font-color: #c28e01;\r\n\r\n        --color-red: #d63636;\r\n        --color-green: #32AA5F;\r\n        --color-black: #000;\r\n\r\n        --calendar-indicator: invert(1);\r\n    }\r\n`\r\n\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n    *, *::before, *::after {\r\n        padding: 0;\r\n        margin: 0;\r\n        box-sizing: border-box;\r\n        font-family: 'Titillium Web', sans-serif;\r\n    }\r\n\r\n    html {\r\n        font-size: 62.5%;\r\n    }\r\n\r\n    body {\r\n        font-size: 1.6rem;\r\n        overflow: hidden;\r\n        background-color: var(--body-background-primary-color);\r\n    }\r\n\r\n    section, form {\r\n        display: flex;\r\n        flex-direction: column;\r\n        height: 100vh;\r\n        background-color: var(--background-primary-color);\r\n        \r\n    }\r\n\r\n    input, button {\r\n        outline: none;\r\n\r\n        &:focus {\r\n            outline: none;\r\n        }\r\n\r\n        ::-webkit-calendar-picker-indicator {\r\n            filter: var(--calendar-indicator);\r\n        }\r\n    }\r\n\r\n    a {\r\n        text-decoration: none;\r\n        color: #000;\r\n        display:block;\r\n    }\r\n\r\n    button {\r\n        font-size: inherit;\r\n        font-family: inherit;\r\n        border: none;\r\n        background-color: transparent;\r\n    }\r\n\r\n`\r\nexport const paddingStyles = css`\r\n    padding: 0 3rem;\r\n\r\n    @media all and (max-width: 800px) {\r\n        padding: 0 2rem;\r\n        @media all and (max-width: 500px) {\r\n            padding: 0 1.5rem;\r\n        }\r\n    }\r\n`\r\n\r\nexport const SwitchButton = styled.button`\r\n    cursor: pointer;\r\n    position: absolute;\r\n    z-index: 9999;\r\n    bottom: 3rem;\r\n    right: 3rem; \r\n    width: 5rem;\r\n    height: 5rem;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    background-color: var(--primary-color);\r\n    font-size: 3rem;\r\n    color: var(--button-font-color);\r\n    border-radius: 50%;\r\n`\r\n\r\nexport const FlexContainer = styled.div`\r\n    ${paddingStyles};    \r\n    /* margin-bottom: 3rem; */\r\n    /* max-width: 125rem; */\r\n`\r\n\r\nexport const FixedContainer = styled.div`\r\n    max-width: 125rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    @media all and (max-width: 600px) {\r\n        flex-wrap: wrap;\r\n    }\r\n`","import React, { createContext, useState } from 'react'\r\n\r\nexport const LoadingModalContext = createContext({\r\n    isLoading: false,\r\n    showModal: false,\r\n    message: '',\r\n    closeModal: () => { },\r\n    getMessage: () => { },\r\n    setIsLoading: () => { },\r\n    setShowModal: () => { }\r\n})\r\n\r\nconst LoadingModalProvider = ({ children }) => {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n\r\n\r\n    const closeModal = () => {\r\n        setIsLoading(false)\r\n        setShowModal(false)\r\n        setMessage('')\r\n    }\r\n\r\n    const getMessage = (string) => {\r\n        setMessage(string)\r\n    }\r\n\r\n    return (\r\n        <LoadingModalContext.Provider\r\n            value={{\r\n                isLoading,\r\n                showModal,\r\n                message,\r\n                closeModal,\r\n                getMessage,\r\n                setIsLoading,\r\n                setShowModal,\r\n            }}\r\n        >\r\n            {children}\r\n        </LoadingModalContext.Provider>\r\n    )\r\n}\r\n\r\nexport default LoadingModalProvider","\r\n\r\nexport const getUser = (credentials) => {\r\n    const { email, password } = credentials\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify({ \"email\": email, \"password\": password });\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/login`, requestOptions)\r\n}\r\n\r\nexport const createNewUser = (credentials) => {\r\n    const { name, email, password } = credentials\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify({ \"email\": email, \"password\": password, \"name\": name });\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\r\n}\r\n\r\nexport const resetPassword = (email) => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify({ \"email\": email });\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/forgot`, requestOptions)\r\n}\r\n\r\nexport const setNewPassword = (resetSecret, password) => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify({ \"resetSecret\": resetSecret, \"password\": password });\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/reset`, requestOptions)\r\n}\r\n\r\nexport const fetchUser = (token) => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/user/profile`, requestOptions)\r\n}","import React, { createContext, useState, useContext, useEffect } from 'react'\r\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\r\nimport { getUser, createNewUser, resetPassword, setNewPassword, fetchUser } from './auth.queries'\r\n\r\nexport const AuthContext = createContext({\r\n    currentUser: null,\r\n    isAdmin: false,\r\n    isOptometrist: false,\r\n    token: null,\r\n    stats: null,\r\n    logIn: () => { },\r\n    logOut: () => { },\r\n    register: () => { },\r\n    handleResetPassword: () => { },\r\n    handleCreatingNewPassword: () => { }\r\n})\r\n\r\nconst AuthProvider = ({ children }) => {\r\n    const { setShowModal, setIsLoading, getMessage, closeModal } = useContext(LoadingModalContext)\r\n    const [currentUser, setCurrentUser] = useState(null)\r\n    const [token, setToken] = useState(null)\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n    const [isOptometrist, setIsOptometrist] = useState(false)\r\n    const [stats, setStats] = useState(null)\r\n\r\n    const checkIfOptometrist = user => {\r\n        if (user.optometrist) {\r\n            setIsOptometrist(true)\r\n        } else {\r\n            setIsOptometrist(false)\r\n        }\r\n    }\r\n\r\n    const checkIfAdmin = (user) => {\r\n        if (user.admin > 1) {\r\n            setIsAdmin(true)\r\n        } else {\r\n            setIsAdmin(false)\r\n        }\r\n    }\r\n\r\n    const logIn = async (email, password) => {\r\n        setShowModal(true)\r\n        setIsLoading(true)\r\n\r\n        if (!email) {\r\n            console.log(\"Ziadny e-mail\")\r\n            setShowModal(false)\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        if (!password) {\r\n            console.log(\"Ziadne heslo\")\r\n            setShowModal(false)\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        try {\r\n            const response = await getUser({ email, password })\r\n            const user = await response.json()\r\n\r\n            getMessage(user.message)\r\n            setIsLoading(false)\r\n            if (user.user) {\r\n                setCurrentUser(user.user)\r\n                setToken(user.authToken)\r\n                localStorage.setItem(process.env.REACT_APP_ADMIN_TOKEN, user.authToken)\r\n                checkIfAdmin(user.user)\r\n\r\n                closeModal()\r\n            }\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const logOut = () => {\r\n        localStorage.removeItem(process.env.REACT_APP_ADMIN_TOKEN)\r\n        setCurrentUser(null)\r\n        setToken(null)\r\n    }\r\n\r\n    const register = async (name, email, password, confirmPassword) => {\r\n        setShowModal(true)\r\n        setIsLoading(true)\r\n\r\n        if (!name) {\r\n            console.log(\"Ziadne meno\")\r\n            setShowModal(false)\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        if (!email) {\r\n            console.log(\"Ziadny e-mail\")\r\n            setShowModal(false)\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        if (!password) {\r\n            console.log(\"Ziadne heslo\")\r\n            setShowModal(false)\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n\r\n        if (password !== confirmPassword) {\r\n            console.log(\"hesla sa nezhoduju\")\r\n            setShowModal(false)\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        try {\r\n            const response = await createNewUser({ name, email, password })\r\n            const data = await response.json()\r\n\r\n            setIsLoading(false)\r\n            getMessage(data.messageSK)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleResetPassword = async (email) => {\r\n        setShowModal(true)\r\n        setIsLoading(true)\r\n\r\n        if (!email) {\r\n            console.log(\"Ziadny e-mail\")\r\n            setShowModal(false)\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        try {\r\n            const response = await resetPassword(email)\r\n            const user = await response.json()\r\n\r\n            getMessage(user.messageSK)\r\n            setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const handleCreatingNewPassword = async (resetSecret, password) => {\r\n        setShowModal(true)\r\n        setIsLoading(true)\r\n\r\n        if (!resetSecret) {\r\n            console.log(\"Ziadny reset token\")\r\n            setShowModal(false)\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n        if (!password) {\r\n            console.log(\"Ziadne heslo\")\r\n            setShowModal(false)\r\n            setIsLoading(false)\r\n            return\r\n        }\r\n\r\n        try {\r\n            const response = await setNewPassword(resetSecret, password)\r\n            const user = await response.json()\r\n\r\n            getMessage(user.messageSK)\r\n            setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n\r\n    const getStats = async () => {\r\n        setShowModal(true)\r\n        setIsLoading(true)\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats/collectionCounts`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            setStats(data)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN)) {\r\n            setToken(localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            // console.log(\"GET USER\")\r\n            const getUserProfile = async () => {\r\n                const response = await fetchUser(token)\r\n                const data = await response.json()\r\n                // console.log(data)\r\n                if (data.user) {\r\n                    setCurrentUser(data.user)\r\n                    checkIfAdmin(data.user)\r\n                    checkIfOptometrist(data.user)\r\n                }\r\n            }\r\n            getUserProfile()\r\n            getStats()\r\n        }\r\n    }, [token])\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                token,\r\n                currentUser,\r\n                isAdmin,\r\n                isOptometrist,\r\n                stats,\r\n                logIn,\r\n                logOut,\r\n                register,\r\n                handleResetPassword,\r\n                handleCreatingNewPassword\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthProvider","import styled from 'styled-components'\r\n\r\nexport const ButtonContainer = styled.button`\r\n    cursor: pointer;\r\n    background-color: #000;\r\n    color: #fff;\r\n    padding: .8rem 3rem;\r\n    font-size: inherit;\r\n    font-family: inherit;\r\n    border-radius: .2rem;\r\n    border: none;\r\n    outline: none;\r\n\r\n    &:focus {\r\n        outline: none\r\n    }\r\n\r\n    @media all and (max-width: 500px) {\r\n        padding: 0.5rem 1.5rem;\r\n        font-size: 1.4rem;\r\n    }\r\n`","import React from 'react'\r\n\r\nimport { ButtonContainer } from './custom-button.styles'\r\n\r\nconst CustomButton = ({ children, ...otherprops }) => {\r\n    return (\r\n        <ButtonContainer {...otherprops}>\r\n            {children}\r\n        </ButtonContainer>\r\n    )\r\n}\r\n\r\nexport default CustomButton\r\n","import styled from 'styled-components'\r\n\r\nexport const PopupContainer = styled.div`\r\n    position: fixed;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    z-index: 999999;\r\n    min-height: 100vh;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    background-color: rgba(0,0,0,0.3);\r\n`\r\n\r\nexport const Panel = styled.div`\r\n    max-width: 50rem;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    padding: 2rem;\r\n\r\n    border-radius: .5rem;\r\n\r\n    background-color: var(--background-primary-color);\r\n`\r\n\r\nexport const Message = styled.div`\r\n    color: var(--primary-text-color);\r\n    font-size: 2.1rem;\r\n    font-weight: 700;\r\n    text-align: center;\r\n\r\n    margin-bottom: 2rem;\r\n`","import React from \"react\";\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport CustomButton from '../custom-button/custom-button.component'\r\nimport Spinner from \"../spinner/spinner.component\";\r\n\r\nimport {\r\n    PopupContainer,\r\n    Panel,\r\n    Message\r\n} from './pop.up.styles'\r\n\r\nexport default function Popup(props) {\r\n    const { loading, title, close } = props;\r\n\r\n    return ReactDOM.createPortal((\r\n        <PopupContainer>\r\n            {loading ? <Panel><Spinner /></Panel> : (\r\n                <Panel>\r\n                    <Message>{title}</Message>\r\n                    <CustomButton onClick={close}>Zavrieť</CustomButton>\r\n                </Panel>\r\n            )}\r\n        </PopupContainer>\r\n    ), document.getElementById(\"portal\"))\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const SpinnerContainer = styled.div`\r\n    border: 5px solid transparent;\r\n    border-top: 5px solid rgb(256,172,1);\r\n    border-radius: 50%;\r\n    width: 38px;\r\n    height: 38px;\r\n    animation: spin 800ms linear infinite;\r\n\r\n    @keyframes spin {\r\n        0% { transform: rotate(0deg); }\r\n        100% { transform: rotate(360deg); }\r\n    }\r\n`","import React from 'react'\r\n\r\nimport { SpinnerContainer } from './spinner.styles'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <SpinnerContainer />\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React, { useContext, Suspense, lazy, useState } from 'react'\r\nimport { AuthContext } from './context/auth/auth.context'\r\nimport { GlobalStyles, DarkThemeColors, DefaultThemeColors, SwitchButton } from './global.styles'\r\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom'\r\n\r\nimport Popup from './components/popup/pop-up.component'\r\nimport { CgDarkMode } from 'react-icons/cg'\r\n\r\nconst SignInAndSignUpPage = lazy(() => import('./pages/sign-in-and-sign-up/sign-in-and-sign-up'))\r\nconst DashboardPage = lazy(() => import('./pages/dashboard/dashboard'))\r\nconst ResetPasswordPage = lazy(() => import('./pages/reset-password/reset-password'))\r\n\r\nconst App = () => {\r\n  const { currentUser } = useContext(AuthContext)\r\n  const [currentTheme, setCurrentTheme] = useState('light')\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {currentTheme === 'dark' ? <DarkThemeColors /> : <DefaultThemeColors />}\r\n      <GlobalStyles />\r\n      <Suspense fallback={<Popup loading={true} />}>\r\n        <HashRouter basename='/'>\r\n          <Switch>\r\n            <Route path='/prihlasenie' render={() => currentUser ? <Redirect to='/dashboard' /> : <SignInAndSignUpPage />} />\r\n            <Route path='/dashboard' render={() => currentUser ? <DashboardPage /> : <Redirect to='/prihlasenie' />} />\r\n            <Route path='/reset/:token' component={ResetPasswordPage} />\r\n            {/* {currentUser ? <Redirect to='/dashboard/zakaznici' /> : <Redirect to='/prihlasenie' />} */}\r\n            {currentUser ? <Redirect to='/dashboard/rezervacie' /> : <Redirect to='/prihlasenie' />}\r\n          </Switch>\r\n        </HashRouter>\r\n      </Suspense>\r\n      <SwitchButton onClick={() => setCurrentTheme(prevValue => prevValue === \"dark\" ? \"light\" : \"dark\")}><CgDarkMode /></SwitchButton>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport AuthProvider from './context/auth/auth.context'\r\nimport LoadingModalProvider from './context/loading-modal/loading-modal.contenxt'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <LoadingModalProvider>\r\n      <AuthProvider>\r\n        <App />\r\n      </AuthProvider>\r\n    </LoadingModalProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}