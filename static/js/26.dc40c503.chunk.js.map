{"version":3,"sources":["context/booking/booking.queries.jsx","context/booking/booking.utils.jsx","context/booking/booking.context.jsx"],"names":["fetchSingleCalendar","id","fetch","process","fetchUserBookings","token","myHeaders","Headers","append","requestOptions","method","headers","redirect","postCalendar","calendar","console","log","body","JSON","stringify","patchCalendar","name","interval","startTimes","endTimes","daysIntoFuture","allowMinutesBefore","_id","deleteCalendar","initCalendarObj","premises","exceptDays","BookingContext","createContext","calendars","handleCalendarChange","handleDayTimeChange","getCalendars","getCalendar","createCalendar","updateCalendar","delCalendar","isUpdatingCalendar","bookings","getBookings","userBookings","getUserBookings","activeCalendar","resetBooking","selectedDate","value","setSelectedDate","BookingProvider","children","push","useHistory","useContext","AuthContext","LoadingModalContext","getMessage","setIsLoading","setShowModal","closeModal","useState","setIsUpdatingCalendar","setActiveCalendar","setCalendars","setCalendar","a","response","json","data","error","message","idx","calendarToAdd","calendarToUpdate","setBookings","setUserBookings","Provider","e","target","arr"],"mappings":"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","file":"static/js/26.dc40c503.chunk.js","sourcesContent":["\n\nexport const fetchCalendars = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/calendars`)\n}\n\nexport const fetchSingleCalendar = (id) => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/calendars/${id}`)\n}\n\nexport const fetchBookings = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/bookings`)\n}\nexport const fetchBookingRows = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/bookingRows`)\n}\n\nexport const fetchUserBookings = (token) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/userBookings`, requestOptions)\n}\n\n\nexport const postCalendar = (token, calendar) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    console.log(calendar)\n\n\n    const raw = JSON.stringify({\n        ...calendar\n    });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/calendars`, requestOptions)\n}\n\nexport const patchCalendar = (token, calendar) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    console.log(calendar)\n\n    const {\n        name,\n        interval,\n        startTimes,\n        endTimes,\n        daysIntoFuture,\n        allowMinutesBefore\n    } = calendar\n\n    const raw = JSON.stringify({\n        name,\n        interval,\n        startTimes,\n        endTimes,\n        daysIntoFuture,\n        allowMinutesBefore\n    });\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/calendars/${calendar._id}`, requestOptions)\n}\n\nexport const deleteCalendar = (id) => {\n    // /api/admin/booking/calendars/:id\n    // const myHeaders = new Headers();\n    // myHeaders.append(\"auth-token\", token);\n    // myHeaders.append(\"Content-Type\", \"application/json\");\n\n    // console.log(calendar)\n\n\n    // const raw = JSON.stringify({\n    //     ...calendar\n    // });\n\n    const requestOptions = {\n        method: 'DELETE',\n        // headers: myHeaders,\n        // body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/calendars/${id}`, requestOptions)\n\n}","export const initCalendarObj = {\n    name: '',\n    interval: 30,\n    startTimes: [\"10/00\", \"10/00\", \"10/00\", \"10/00\", \"10/00\", \"X\", \"X\"],\n    endTimes: [\"16/00\", \"16/00\", \"18/00\", \"16/00\", \"16/00\", \"X\", \"X\"],\n    daysIntoFuture: 60,\n    premises: 1,\n    allowMinutesBefore: 120,\n    exceptDays: { \"24/12/2020\": \"00/00-23/59\" }\n}","import React, { createContext, useState, useContext } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\nimport { useHistory } from 'react-router-dom'\n\nimport {\n    fetchCalendars,\n    fetchSingleCalendar,\n    fetchBookings,\n    // fetchBookingRows,\n    fetchUserBookings,\n    postCalendar,\n    patchCalendar,\n    deleteCalendar\n} from './booking.queries'\n\nimport {\n    initCalendarObj\n} from './booking.utils'\n\nexport const BookingContext = createContext({\n    calendar: null,\n    calendars: null,\n    handleCalendarChange: () => { },\n    handleDayTimeChange: () => { },\n    getCalendars: () => { },\n    getCalendar: () => { },\n    createCalendar: () => { },\n    updateCalendar: () => { },\n    delCalendar: () => { },\n    isUpdatingCalendar: false,\n    bookings: null,\n    getBookings: () => { },\n    userBookings: null,\n    getUserBookings: () => { },\n    // bookingRows: null,\n    // getBookingRows: () => { },\n    activeCalendar: 0,\n    resetBooking: () => { },\n    selectedDate: {\n        name: \"\",\n        value: ''\n    },\n    setSelectedDate: () => { }\n})\n\nconst BookingProvider = ({ children }) => {\n    const { push } = useHistory()\n    const { token } = useContext(AuthContext)\n    const {\n        getMessage,\n        setIsLoading,\n        setShowModal,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    // ------------------------\n    // CALENDAR ACTIONS\n    // ------------------------\n    const [isUpdatingCalendar, setIsUpdatingCalendar] = useState(false)\n    const [activeCalendar, setActiveCalendar] = useState(0)\n    const [calendars, setCalendars] = useState(null)\n    const [calendar, setCalendar] = useState(initCalendarObj)\n    const [selectedDate, setSelectedDate] = useState({\n        name: '',\n        value: ''\n    })\n\n    const handleCalendarChange = (e) => {\n        const { name, value } = e.target\n        setCalendar({\n            ...calendar,\n            [name]: value\n        })\n    }\n\n    const handleDayTimeChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = calendar.startTimes\n        arr[idx] = value\n        setCalendar({\n            ...calendar,\n            [name]: arr\n        })\n    }\n\n    // Get all calendars\n    const getCalendars = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchCalendars()\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.message)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.calendars) {\n                setCalendars(data.calendars)\n                setIsLoading(false)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // Get single calendar\n    const getCalendar = async (id, idx) => {\n        setIsLoading(true)\n        setShowModal(true)\n        setSelectedDate({\n            name: '',\n            value: ''\n        })\n        if (!idx) {\n            setIsUpdatingCalendar(true)\n        }\n\n        try {\n            const response = await fetchSingleCalendar(id)\n            const data = await response.json()\n\n            console.log(data)\n            if (data.calendar) {\n                setCalendar(data.calendar)\n                setActiveCalendar(idx)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createCalendar = async (calendarToAdd) => {\n        setIsLoading(true)\n        setShowModal(true)\n        try {\n            const response = await postCalendar(token, calendarToAdd)\n            const data = await response.json()\n\n            if (data.calendar) {\n                setIsLoading(false)\n                closeModal()\n                getCalendars()\n                push('/dashboard/rezervacie')\n                return\n            }\n\n            setIsLoading(false)\n            getMessage(data.message)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateCalendar = async (calendarToUpdate) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await patchCalendar(token, calendarToUpdate)\n            const data = await response.json()\n\n            console.log(data)\n            if (data.calendar) {\n                setIsLoading(false)\n                closeModal()\n                getCalendars()\n                push('/dashboard/rezervacie')\n                return\n            }\n\n            setIsLoading(false)\n            getMessage(data.message)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const delCalendar = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await deleteCalendar(id)\n            const data = await response.json()\n\n            console.log(data)\n\n            setIsLoading(false)\n            getMessage(data.message)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // ------------------------\n    // BOOKINGS ACTIONS\n    // ------------------------\n    const [bookings, setBookings] = useState(null)\n    const [userBookings, setUserBookings] = useState(null)\n\n    const getBookings = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchBookings()\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.message)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.bookings) {\n                setBookings(data.bookings)\n                setIsLoading(false)\n                closeModal()\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getUserBookings = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchUserBookings(token)\n            const data = await response.json()\n\n            if (data.userBookings) {\n                setUserBookings(data.userBookings)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const resetBooking = () => {\n        setActiveCalendar(0)\n        setCalendar(initCalendarObj)\n        setIsUpdatingCalendar(false)\n    }\n\n    return (\n        <BookingContext.Provider\n            value={{\n                calendar,\n                calendars,\n                handleCalendarChange,\n                handleDayTimeChange,\n                getCalendars,\n                getCalendar,\n                createCalendar,\n                updateCalendar,\n                delCalendar,\n                isUpdatingCalendar,\n                bookings,\n                getBookings,\n                userBookings,\n                getUserBookings,\n                // bookingRows,\n                // getBookingRows,\n                activeCalendar,\n                resetBooking,\n                selectedDate,\n                setSelectedDate,\n            }}\n        >\n            {children}\n        </BookingContext.Provider>\n    )\n}\n\nexport default BookingProvider"],"sourceRoot":""}