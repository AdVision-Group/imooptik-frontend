{"version":3,"sources":["context/analytics/analytics.context.jsx"],"names":["AnalyticsContext","createContext","stats","getAnalytics","generateReport","updateRegistry","useAnalytics","useContext","AnalyticsProvider","children","token","AuthContext","LoadingModalContext","closeModal","getMessage","setShowModal","setIsLoading","useState","setStats","myHeaders","Headers","append","time","a","requestOptions","method","headers","redirect","fetch","process","response","json","data","messageSK","console","log","reportParametersObj","raw","JSON","stringify","body","name","setTimeout","win","window","open","focus","dataObj","callback","Provider","value"],"mappings":"4QAIaA,EAAmBC,wBAAc,CAC1CC,MAAO,KACPC,aAAc,aACdC,eAAgB,aAChBC,eAAgB,eAGPC,EAAe,kBAAMC,qBAAWP,IAoH9BQ,UAlHW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBC,EAAUH,qBAAWI,KAArBD,MADgC,EAEuBH,qBAAWK,KAAlEC,EAFgC,EAEhCA,WAAYC,EAFoB,EAEpBA,WAAYC,EAFQ,EAERA,aAAcC,EAFN,EAEMA,aAFN,EAIdC,mBAAS,MAJK,mBAIjCf,EAJiC,KAI1BgB,EAJ0B,KAMlCC,EAAY,IAAIC,QACtBD,EAAUE,OAAO,aAAcX,GAC/BS,EAAUE,OAAO,eAAgB,oBAEjC,IAAMlB,EAAY,uCAAG,WAAOmB,GAAP,mBAAAC,EAAA,6DACjBR,GAAa,GACbC,GAAa,GAEPQ,EAAiB,CACnBC,OAAQ,MACRC,QAASP,EACTQ,SAAU,UAPG,kBAWUC,MAAM,GAAD,OAAIC,mDAAJ,qCAAuEP,GAAQE,GAX9F,cAWPM,EAXO,gBAYMA,EAASC,OAZf,YAYPC,EAZO,QAcJ9B,MAdI,wBAeTgB,EAASc,EAAK9B,OACdW,IAhBS,2BAoBbC,EAAWkB,EAAKC,WAChBjB,GAAa,GArBA,kDAuBbkB,QAAQC,IAAR,MACArB,EAAW,qBACXE,GAAa,GAzBA,0DAAH,sDA6BZZ,EAAc,uCAAG,WAAOgC,GAAP,qBAAAb,EAAA,6DACnBR,GAAa,GACbC,GAAa,GAEPqB,EAAMC,KAAKC,UAAUH,GAErBZ,EAAiB,CACnBC,OAAQ,OACRC,QAASP,EACTqB,KAAMH,EACNV,SAAU,UAVK,kBAcQC,MAAM,GAAD,OAAIC,mDAAJ,mCAA6EL,GAd1F,cAcTM,EAdS,iBAeIA,EAASC,OAfb,SAeTC,EAfS,QAkBNS,MACLC,YAAW,WACP,IAAMC,EAAMC,OAAOC,KAAP,UAAehB,mDAAf,0BAAuEG,EAAKS,MAAQ,SAAU,uBACvG,OAAHE,QAAG,IAAHA,KAAKG,UACN,KAGPhC,EAAWkB,EAAKC,WAChBjB,GAAa,GA1BE,kDA4BfkB,QAAQC,IAAR,MACArB,EAAW,oBACXE,GAAa,GA9BE,0DAAH,sDAkCdX,EAAc,uCAAG,WAAO0C,GAAP,mCAAAxB,EAAA,6DAAgByB,EAAhB,+BAA2B,aAC9CjC,GAAa,GACbC,GAAa,GAEPqB,EAAMC,KAAKC,UAAUQ,GAErBvB,EAAiB,CACnBC,OAAQ,OACRC,QAASP,EACTqB,KAAMH,EACNV,SAAU,UAVK,kBAcQC,MAAM,GAAD,OAAIC,mDAAJ,mCAA6EL,GAd1F,cAcTM,EAdS,iBAeIA,EAASC,OAfb,QAeTC,EAfS,OAiBflB,EAAWkB,EAAKC,WAChBe,EAAShB,GACThB,GAAa,GAnBE,kDAqBfkB,QAAQC,IAAR,MACArB,EAAW,0BACXE,GAAa,GAvBE,0DAAH,sDA2BpB,OACI,cAAChB,EAAiBiD,SAAlB,CACIC,MAAO,CACHhD,QACAC,eACAC,iBACAC,kBALR,SAQKI","file":"static/js/29.d3b24427.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n\nexport const AnalyticsContext = createContext({\n    stats: null,\n    getAnalytics: () => { },\n    generateReport: () => { },\n    updateRegistry: () => {}\n})\n\nexport const useAnalytics = () => useContext(AnalyticsContext)\n\nconst AnalyticsProvider = ({ children }) => {\n    const { token } = useContext(AuthContext)\n    const { closeModal, getMessage, setShowModal, setIsLoading } = useContext(LoadingModalContext)\n\n    const [stats, setStats] = useState(null)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const getAnalytics = async (time) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats?timespan=${time}`, requestOptions)\n            const data = await response.json()\n\n            if (data.stats) {\n                setStats(data.stats)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const generateReport = async (reportParametersObj) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        const raw = JSON.stringify(reportParametersObj)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats/generateReport`, requestOptions)\n            const data = await response.json()\n\n\n            if (data.name) {\n                setTimeout(() => {\n                    const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/excel/${data.name}`, \"_blank\", \"noreferrer noopener\");\n                    win?.focus();\n                }, 2000)\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateRegistry = async (dataObj, callback = () => {}) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        const raw = JSON.stringify(dataObj)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats/modifyRegister`, requestOptions)\n            const data = await response.json()\n\n            getMessage(data.messageSK)\n            callback(data)\n            setIsLoading(false)\n        }   catch (err) {\n            console.log(err)\n            getMessage(\"Nieƒço sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <AnalyticsContext.Provider\n            value={{\n                stats,\n                getAnalytics,\n                generateReport,\n                updateRegistry\n            }}\n        >\n            {children}\n        </AnalyticsContext.Provider>\n    )\n}\n\nexport default AnalyticsProvider"],"sourceRoot":""}