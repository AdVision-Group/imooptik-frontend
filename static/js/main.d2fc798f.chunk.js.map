{"version":3,"sources":["context/loading-modal/loading-modal.contenxt.jsx","context/auth/auth.queries.jsx","context/auth/auth.context.jsx","components/custom-button/custom-button.styles.jsx","components/custom-button/custom-button.component.jsx","global.styles.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/popup/pop.up.styles.jsx","components/popup/pop-up.component.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["LoadingModalContext","createContext","isLoading","showModal","message","closeModal","getMessage","setIsLoading","setShowModal","LoadingModalProvider","children","useState","setMessage","Provider","value","string","getUser","credentials","email","password","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","redirect","fetch","process","createNewUser","name","resetPassword","setNewPassword","resetSecret","fetchUser","token","AuthContext","currentUser","isAdmin","stats","logIn","logOut","register","handleResetPassword","handleCreatingNewPassword","AuthProvider","useContext","setCurrentUser","setToken","setIsAdmin","setStats","checkIfAdmin","user","admin","a","console","log","response","json","authToken","localStorage","setItem","confirmPassword","data","getStats","useEffect","getItem","getUserProfile","removeItem","ButtonContainer","styled","button","CustomButton","otherprops","GlobalStyles","createGlobalStyle","paddingStyles","css","SpinnerContainer","div","Spinner","PopupContainer","Panel","Message","Popup","props","loading","title","close","ReactDOM","createPortal","onClick","document","getElementById","SignInAndSignUpPage","lazy","DashboardPage","ResetPasswordPage","App","Fragment","fallback","basename","path","render","to","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.d2fc798f.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\n\nexport const LoadingModalContext = createContext({\n    isLoading: false,\n    showModal: false,\n    message: '',\n    closeModal: () => { },\n    getMessage: () => { },\n    setIsLoading: () => { },\n    setShowModal: () => { }\n})\n\nconst LoadingModalProvider = ({ children }) => {\n    const [isLoading, setIsLoading] = useState(false)\n    const [showModal, setShowModal] = useState(false)\n    const [message, setMessage] = useState('')\n\n\n    const closeModal = () => {\n        setIsLoading(false)\n        setShowModal(false)\n        setMessage('')\n    }\n\n    const getMessage = (string) => {\n        setMessage(string)\n    }\n\n    return (\n        <LoadingModalContext.Provider\n            value={{\n                isLoading,\n                showModal,\n                message,\n                closeModal,\n                getMessage,\n                setIsLoading,\n                setShowModal,\n            }}\n        >\n            {children}\n        </LoadingModalContext.Provider>\n    )\n}\n\nexport default LoadingModalProvider","\n\nexport const getUser = (credentials) => {\n    const { email, password } = credentials\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify({ \"email\": email, \"password\": password });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/login`, requestOptions)\n}\n\nexport const createNewUser = (credentials) => {\n    const { name, email, password } = credentials\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify({ \"email\": email, \"password\": password, \"name\": name });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\n}\n\nexport const resetPassword = (email) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify({ \"email\": email });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/forgot`, requestOptions)\n}\n\nexport const setNewPassword = (resetSecret, password) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify({ \"resetSecret\": resetSecret, \"password\": password });\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/reset`, requestOptions)\n}\n\nexport const fetchUser = (token) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/user/profile`, requestOptions)\n}","import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { getUser, createNewUser, resetPassword, setNewPassword, fetchUser } from './auth.queries'\n\nexport const AuthContext = createContext({\n    currentUser: null,\n    isAdmin: false,\n    token: null,\n    stats: null,\n    logIn: () => { },\n    logOut: () => { },\n    register: () => { },\n    handleResetPassword: () => { },\n    handleCreatingNewPassword: () => { }\n})\n\nconst AuthProvider = ({ children }) => {\n    const { setShowModal, setIsLoading, getMessage, closeModal } = useContext(LoadingModalContext)\n    const [currentUser, setCurrentUser] = useState(null)\n    const [token, setToken] = useState(null)\n    const [isAdmin, setIsAdmin] = useState(false)\n    const [stats, setStats] = useState(null)\n\n    const checkIfAdmin = (user) => {\n        if (user.admin > 1) {\n            setIsAdmin(true)\n        } else {\n            setIsAdmin(false)\n        }\n    }\n\n    const logIn = async (email, password) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!email) {\n            console.log(\"Ziadny e-mail\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        if (!password) {\n            console.log(\"Ziadne heslo\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await getUser({ email, password })\n            const user = await response.json()\n\n            getMessage(user.message)\n            setIsLoading(false)\n            if (user.user) {\n                setCurrentUser(user.user)\n                setToken(user.authToken)\n                localStorage.setItem(process.env.REACT_APP_ADMIN_TOKEN, user.authToken)\n                checkIfAdmin(user.user)\n\n                closeModal()\n            }\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const logOut = () => {\n        localStorage.removeItem(process.env.REACT_APP_ADMIN_TOKEN)\n        setCurrentUser(null)\n        setToken(null)\n    }\n\n    const register = async (name, email, password, confirmPassword) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!name) {\n            console.log(\"Ziadne meno\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        if (!email) {\n            console.log(\"Ziadny e-mail\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        if (!password) {\n            console.log(\"Ziadne heslo\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n\n        if (password !== confirmPassword) {\n            console.log(\"hesla sa nezhoduju\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await createNewUser({ name, email, password })\n            const data = await response.json()\n\n            setIsLoading(false)\n            getMessage(data.message)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const handleResetPassword = async (email) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        if (!email) {\n            console.log(\"Ziadny e-mail\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await resetPassword(email)\n            const user = await response.json()\n\n            getMessage(user.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const handleCreatingNewPassword = async (resetSecret, password) => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        console.log(resetSecret)\n\n        if (!resetSecret) {\n            console.log(\"Ziadny reset token\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n        if (!password) {\n            console.log(\"Ziadne heslo\")\n            setShowModal(false)\n            setIsLoading(false)\n            return\n        }\n\n        try {\n            const response = await setNewPassword(resetSecret, password)\n            const user = await response.json()\n\n            getMessage(user.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const getStats = async () => {\n        setShowModal(true)\n        setIsLoading(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/stats/collectionCounts`, requestOptions)\n            const data = await response.json()\n\n            setStats(data)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        if (localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN)) {\n            setToken(localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN))\n        }\n    }, [])\n\n    useEffect(() => {\n        if (token) {\n            const getUserProfile = async () => {\n                const response = await fetchUser(token)\n                const data = await response.json()\n                if (data.user) {\n                    setCurrentUser(data.user)\n                    checkIfAdmin(data.user)\n                }\n            }\n            getUserProfile()\n            getStats()\n        }\n    }, [token])\n\n    return (\n        <AuthContext.Provider\n            value={{\n                token,\n                currentUser,\n                isAdmin,\n                stats,\n                logIn,\n                logOut,\n                register,\n                handleResetPassword,\n                handleCreatingNewPassword\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport default AuthProvider","import styled from 'styled-components'\n\nexport const ButtonContainer = styled.button`\n    cursor: pointer;\n    background-color: #000;\n    color: #fff;\n    padding: .8rem 3rem;\n    font-size: inherit;\n    font-family: inherit;\n    border-radius: .2rem;\n    border: none;\n    outline: none;\n\n    &:focus {\n        outline: none\n    }\n\n    @media all and (max-width: 500px) {\n        padding: 0.5rem 1.5rem;\n        font-size: 1.4rem;\n    }\n`","import React from 'react'\n\nimport { ButtonContainer } from './custom-button.styles'\n\nconst CustomButton = ({ children, ...otherprops }) => {\n    return (\n        <ButtonContainer {...otherprops}>\n            {children}\n        </ButtonContainer>\n    )\n}\n\nexport default CustomButton\n","import { createGlobalStyle, css } from 'styled-components'\n\nexport const GlobalStyles = createGlobalStyle`\n    *, *::before, *::after {\n        padding: 0;\n        margin: 0;\n        box-sizing: border-box;\n        font-family: 'Titillium Web', sans-serif;\n    }\n\n    html {\n        font-size: 62.5%;\n    }\n\n    body {\n        font-size: 1.6rem;\n        overflow: hidden;\n    }\n\n    section, form {\n        display: flex;\n        flex-direction: column;\n        height: 100vh;\n    }\n\n    input {\n        outline: none;\n\n        &:focus {\n            outline: none;\n        }\n    }\n\n    a {\n        text-decoration: none;\n        color: #000;\n        display:block;\n    }\n\n`\nexport const paddingStyles = css`\n    padding: 0 3rem;\n\n    @media all and (max-width: 800px) {\n        padding: 0 2rem;\n        @media all and (max-width: 500px) {\n            padding: 0 1.5rem;\n        }\n    }\n`\n","import styled from 'styled-components'\n\nexport const SpinnerContainer = styled.div`\n    border: 5px solid transparent;\n    border-top: 5px solid rgb(256,172,1);\n    border-radius: 50%;\n    width: 38px;\n    height: 38px;\n    animation: spin 800ms linear infinite;\n\n    @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n    }\n`","import React from 'react'\n\nimport { SpinnerContainer } from './spinner.styles'\n\nconst Spinner = () => {\n    return (\n        <SpinnerContainer />\n    )\n}\n\nexport default Spinner\n","import styled from 'styled-components'\n\nexport const PopupContainer = styled.div`\n    position: fixed;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: 999999;\n    min-height: 100vh;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    background-color: rgba(0,0,0,0.3);\n`\n\nexport const Panel = styled.div`\n    max-width: 50rem;\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    padding: 2rem;\n\n    border-radius: .5rem;\n\n    background-color: white;\n`\n\nexport const Message = styled.div`\n    color: #383838;\n    font-size: 2.1rem;\n    font-weight: 700;\n    text-align: center;\n\n    margin-bottom: 2rem;\n`","import React from \"react\";\nimport ReactDOM from 'react-dom'\n\nimport CustomButton from '../custom-button/custom-button.component'\nimport Spinner from \"../spinner/spinner.component\";\n\nimport {\n    PopupContainer,\n    Panel,\n    Message\n} from './pop.up.styles'\n\nexport default function Popup(props) {\n    const { loading, title, close } = props;\n\n    return ReactDOM.createPortal((\n        <PopupContainer>\n            {loading ? <Panel><Spinner /></Panel> : (\n                <Panel>\n                    <Message>{title}</Message>\n                    <CustomButton onClick={close}>Zavrieť</CustomButton>\n                </Panel>\n            )}\n        </PopupContainer>\n    ), document.getElementById(\"portal\"))\n}\n","import React, { useContext, Suspense, lazy } from 'react'\nimport { AuthContext } from './context/auth/auth.context'\nimport { GlobalStyles } from './global.styles'\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom'\n\nimport Popup from './components/popup/pop-up.component'\n\nconst SignInAndSignUpPage = lazy(() => import('./pages/sign-in-and-sign-up/sign-in-and-sign-up'))\nconst DashboardPage = lazy(() => import('./pages/dashboard/dashboard'))\nconst ResetPasswordPage = lazy(() => import('./pages/reset-password/reset-password'))\n\nconst App = () => {\n  console.log(\"RENDER APP\")\n  const { currentUser } = useContext(AuthContext)\n\n  return (\n    <React.Fragment>\n      <GlobalStyles />\n      <Suspense fallback={<Popup loading={true} />}>\n        <HashRouter basename='/'>\n          <Switch>\n            <Route path='/prihlasenie' render={() => currentUser ? <Redirect to='/dashboard' /> : <SignInAndSignUpPage />} />\n            <Route path='/dashboard' render={() => currentUser ? <DashboardPage /> : <Redirect to='/prihlasenie' />} />\n            <Route path='/reset/:token' component={ResetPasswordPage} />\n            {currentUser ? <Redirect to='/dashboard/zakaznici' /> : <Redirect to='/prihlasenie' />}\n          </Switch>\n        </HashRouter>\n      </Suspense>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AuthProvider from './context/auth/auth.context'\nimport LoadingModalProvider from './context/loading-modal/loading-modal.contenxt'\n\nReactDOM.render(\n  <React.StrictMode>\n    <LoadingModalProvider>\n      <AuthProvider>\n        <App />\n      </AuthProvider>\n    </LoadingModalProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}