{"version":3,"sources":["components/user-form/user.form-styles.jsx","components/profile-order-overview/profile-order-overview.styles.jsx","components/profile-order-overview/profile-order-overview.component.jsx","components/examination-user/examination-user.styles.jsx","components/examination-user/examination-user.component.jsx","utils/parameters.utils.jsx","components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx","components/modal-optometrist-examination/modal-optometrist-examination.component.jsx","components/examinations-overview/examinations-overview.styles.jsx","components/examinations-overview/examinations-overview.component.jsx","components/user-form/user-form.component.jsx","components/custom-input/custom-input.styles.jsx","components/custom-input/custom-input.component.jsx","hooks/useFetch.jsx","utils/warehouse.utils.jsx","components/scroll-container/scroll-container.styles.jsx","components/scroll-container/scroll-container.component.jsx","components/custom-checkbox/custom-checkbox.styles.jsx","components/custom-checkbox/custom-checkbox.component.jsx","components/custom-textarea/custom-textarea.styles.jsx","components/custom-textarea/custom-textarea.component.jsx","context/user/user.queries.jsx","context/user/user.utils.jsx","context/user/user.context.jsx","components/product-input-row/product-input-row.styles.jsx","components/product-input-row/product-input-row.component.jsx","context/examination/examination.context.jsx","components/parameters-table/parameters-table.styles.jsx","components/parameters-table/parameters-table.component.jsx"],"names":["Profile","styled","div","GridContainer","ZeroMargin","GridRow","Row","Title","h2","Container","OrderHeader","OrderButton","CustomButton","AdminPanelContainer","CustomSelect","select","OrderContainer","OrderContent","Options","UpdateButton","OrderId","p","ProfileOrderOverview","id","handleUpdateClick","orderData","useFetchById","isLoading","order","response","dateData","Date","date","error","customId","toLocaleDateString","weekday","month","day","year","onClick","ExaminationUserContainer","ExaminationUser","userId","user","name","checkParameter","parametersArr","idx","length","checkParameterValue","value","ModalContainer","Modal","CloseButton","button","SubmitButton","ExamTypeCheckbox","CustomCheckbox","IsSuitableCheckbox","TwoColContainer","InputContainer","Table","ObjectiveRefTable","SubjectiveRefTable","RefractTable","KerathTable","SubjectiveRefATable","ContactLensesTable","ContactLensesTypeTable","ExamTable","TableTitleCol","TableCol","Col","isActive","clickable","OptometristExaminationModal","close","refetch","examinationToUpdate","examinationData","useContext","ExaminationContext","createExamination","updateExamination","useState","examinationObj","setExaminationObj","recomendation","setRecomendation","pc","setPc","vodic","setVodic","vlastne_okuliare","setVlastne_okuliare","objektivna_refrakcia","setObjektivna_refrakcia","subjektivna_refrakcia","setSubjektivna_refrakcia","refraktometer","setRefraktometer","keratometer","setKeratometer","subjektivna_refrakciaA","setSubjektivna_refrakciaA","kontaktne_sosovky","setKontaktne_sosovky","typ_kontaktnych_sosoviek","setTyp_kontaktnych_sosoviek","tabulka","setTabulka","activeExamType","setActiveExamType","handleParameterChange","e","parameterObj","updateParameter","target","arr","handleDomEye","num","paramObj","handleChange","domoko","prevValue","formatParameters","newParameters","map","parameter","changeNumber","toString","replace","isNaN","formatParameter","formatStringParameters","useEffect","exam","type","examObj","refrakcia","doporucenia","anamneza","kontrola","ReactDOM","createPortal","examTypes","label","handleClick","nosi_od","posledna_korekcia","typ_sposob","vyhovuje","rows","dopl_info","Array","vnatur","onChange","onBlur","sph","cyl","ax","add","visus","vbino","Number","se","prizma","basis","os","stav_a_povolanie","obj_nalez","hor","ver","ave","bino","visd","bino1","visb","bino2","prvy","druhy","lkontrola","dop_roztok","vis","subj","obj","preventDefault","doneTo","document","getElementById","ExaminationsOverviewContainer","Header","ExaminationContainer","ExamHead","ExaminationOptions","AddButton","DeleteButton","ExaminationsOverview","params","useParams","deleteExamination","showOptometristModal","setShowOptometristModal","examinations","setExaminations","setExaminationToUpdate","isDisabled","setIsDisabled","exams","examination","doneBy","_id","disabled","setTimeout","handleDelete","UserForm","isAdmin","isUpdating","handleCompanyChange","isOptometrist","isOrder","push","useHistory","admin","example","premises","retailNames","optometrist","fName","lName","birthDate","email","phone","address","psc","city","country","company","ico","dic","icdph","parameters","lenses","handleAddOrderButtonClick","orders","reverse","slice","shrinkLabel","css","InputGroup","CustomInput","otherProps","className","htmlFor","useFetch","path","skip","method","setResponse","setError","message","setMessage","setIsLoading","refetchIndex","setRefetchIndex","prevRefetchIndex","requestOptions","redirect","a","fetch","process","res","json","data","fetchData","useFetchByQuery","queryObj","myHeaders","Headers","append","localStorage","getItem","raw","JSON","stringify","headers","body","retailNamesTabs","glassesColors","glassesMaterials","glassesShapes","formatPrice","price","includes","split","formatfloatNumber","number","paddingStyles","FixedContainer","ScrollContainer","children","CheckboxContainer","otherprops","CustomTextarea","fetchUser","token","patchUser","postUser","postAdmin","password","initUserObj","boughtProducts","finishedRegistration","cylinder","cylinderAxes","diopters","distance","addition","prism","tempUser","totalSpent","watchList","confirmPassword","now","UserContext","createContext","activeIndex","handleChangeFilterItem","filterItems","totalCount","users","getUser","updateUser","resetUser","formToShow","switchFormButtons","toggleUserForm","createUser","getFilteredUsers","getUserByQuery","deleteUser","UserProvider","AuthContext","LoadingModalContext","closeModal","getMessage","setShowModal","setUser","setUsers","setIsUpdating","setActiveIndex","setFormToShow","console","log","refetchUser","addUser","messageSK","filters","filter","query","Provider","itemIndex","InputRow","ProductInputRow","ExaminationProvider","examsToAdd","examToUpdate","examId","TableContainer","TitleCol","OsContainer","ParametersTable","disabledInputs","checkParameters","toFixed"],"mappings":"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","file":"static/js/1.48ad7eea.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport CustomButton from '../custom-button/custom-button.component'\r\n\r\n\r\nexport const Profile = styled.div`\r\n    padding: 2rem;\r\n    box-shadow: var(--container-shadow);\r\n    background-color: var(--container-background-color);\r\n    margin-right: 2rem;\r\n\r\n`\r\n\r\nexport const GridContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    align-items: start;\r\n\r\n    @media all and (max-width: 800px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`\r\n\r\nexport const ZeroMargin = styled.div`\r\n    input {\r\n        margin-bottom: 0 !important;\r\n    }\r\n`\r\n\r\nexport const GridRow = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n\r\n    div:not(:last-child) {\r\n        padding-right: 2rem;\r\n    }\r\n`\r\n\r\n\r\nexport const ThreeColRow = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    align-items: center;\r\n\r\n    input {\r\n        margin-bottom: 0 !important;\r\n    }\r\n\r\n    div:not(:last-child) {\r\n        padding-right: 2rem;\r\n    }\r\n\r\n    @media all and (max-width: 800px) {\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-template-areas:\r\n            \"a a\"\r\n            \"b c\";\r\n\r\n        div:nth-child(1){\r\n            grid-area: a;\r\n            margin-bottom: 0;\r\n        }\r\n        div:nth-child(2){\r\n            grid-area: b;\r\n            margin-bottom: 2rem;\r\n\r\n        }\r\n        div:nth-child(3){\r\n            grid-area: c;\r\n            margin-bottom: 2rem;\r\n        }\r\n    }\r\n`\r\n\r\nexport const Row = styled.div`\r\n    width: 75%;\r\n`\r\n\r\n\r\nexport const Title = styled.h2`\r\n    margin-bottom: 2rem;\r\n`\r\n\r\nexport const Container = styled.div`\r\n    margin-top: 2rem;\r\n    \r\n`\r\n\r\nexport const OrderHeader = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n`\r\n\r\nexport const OrderButton = styled(CustomButton)`\r\n    background-color: var(--primary-color);\r\n    font-weight: bolder;\r\n    margin-top: .2rem;\r\n    font-size: 1.2rem;\r\n`\r\n\r\nexport const AdminPanelContainer = styled.div`\r\n    margin-bottom: 3rem;\r\n`\r\n\r\nexport const CustomSelect = styled.select`\r\n    margin-top: 1.5rem;\r\n    min-width: 16.5rem;\r\n    width: 100%;\r\n    background-color: var(--input-background-color);\r\n    color: var(--input-color);\r\n    border: none;\r\n    padding: .5rem .5rem .5rem 1rem;\r\n    font-size: inherit;\r\n    font-family: inherit;\r\n    display: block;\r\n`","import styled from 'styled-components'\r\nimport CustomButton from '../custom-button/custom-button.component'\r\n\r\nexport const OrderContainer = styled.div`\r\n    width: 100%;\r\n    /* display: grid;\r\n    grid-template-columns: 1fr 25rem; */\r\n\r\n    box-shadow: var(--container-shadow);\r\n    background-color: var(--container-background-color);\r\n\r\n    padding: 2rem;\r\n\r\n    &:not(:last-child) {\r\n        margin-bottom: 2rem;\r\n    }\r\n\r\n    @media all and (max-width: 800px) {\r\n        grid-template-columns: 1fr;\r\n\r\n    }\r\n`\r\n\r\nexport const OrderContent = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    /* align-items: center; */\r\n    margin-bottom: 2rem;\r\n    h2 {\r\n        font-size: 1.6rem;\r\n    }\r\n`\r\n\r\nexport const Options = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: flex-end;\r\n    /* align-self: end;\r\n    justify-self: end; */\r\n`\r\n\r\nexport const UpdateButton = styled(CustomButton)`\r\n    background-color: var(--primary-color);\r\n    font-weight: bolder;\r\n    font-size: 1.2rem;\r\n    /* margin-left: auto; */\r\n    display:block;\r\n\r\n`\r\n\r\nexport const DeleteButton = styled(CustomButton)`\r\n    font-size: 1.2rem;\r\n    /* background-color: rgb(235, 172, 1); */\r\n    background-color: #DD4C4C;\r\n    /* margin-bottom: 1rem; */\r\n    margin-left: 1rem;\r\n    display:block;\r\n\r\n`\r\n\r\nexport const OrderId = styled.p`\r\n    opacity: .83;\r\n    /* font-size: 1.2rem; */\r\n    /* color: gray; */\r\n    /* margin-bottom: 2rem; */\r\n`","import React from 'react'\r\n\r\nimport { useFetchById } from '../../hooks/useFetch'\r\n\r\nimport {\r\n    // DeleteButton,\r\n    Options,\r\n    OrderContainer,\r\n    OrderContent,\r\n    UpdateButton,\r\n    OrderId\r\n} from './profile-order-overview.styles'\r\n\r\nconst ProfileOrderOverview = ({ id, handleUpdateClick }) => {\r\n    const orderData = useFetchById('api/admin/orders', id, !id)\r\n\r\n    if (orderData.isLoading) return <OrderContainer>\r\n        <h3>Načítavam</h3>\r\n    </OrderContainer>\r\n\r\n    const { order } = orderData.response\r\n\r\n    const dateData = new Date(order?.date)\r\n\r\n    return (\r\n        <OrderContainer>\r\n            {orderData.response?.error === 'invalid-branch' ? <OrderContent>\r\n                <h2>Táto objednávka patri inej prevadzke</h2>\r\n            </OrderContent> : <OrderContent>\r\n                    <div>\r\n                        <h2>ID Objednávky</h2>\r\n                        <OrderId>{order?.customId}</OrderId>\r\n                    </div>\r\n                    <div>\r\n                        <p>{dateData.toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric', year: \"numeric\" })}</p>\r\n                    </div>\r\n                </OrderContent>}\r\n\r\n            {!orderData.response?.error && <Options>\r\n                <UpdateButton onClick={handleUpdateClick}>\r\n                    Zobraziť\r\n                </UpdateButton>\r\n                {/* <DeleteButton>\r\n                    Vymazať\r\n                </DeleteButton> */}\r\n            </Options>}\r\n\r\n        </OrderContainer>\r\n    )\r\n}\r\n\r\nexport default ProfileOrderOverview\r\n","import styled from 'styled-components'\r\n\r\nexport const ExaminationUserContainer = styled.div`\r\n    font-size: 1.4rem;\r\n\r\n    span {\r\n        font-weight: bolder\r\n    }\r\n`","import React from 'react'\r\n\r\nimport { useFetchById } from '../../hooks/useFetch'\r\n\r\nimport {\r\n    ExaminationUserContainer\r\n} from './examination-user.styles'\r\n\r\nconst ExaminationUser = ({ userId }) => {\r\n    const { isLoading, response } = useFetchById(\"api/admin/users\", userId)\r\n\r\n    return (\r\n        <ExaminationUserContainer>\r\n            <p>Vystavoval:</p> <span>{isLoading ? \"Hľadám...\" : response?.user?.name}</span>\r\n        </ExaminationUserContainer>\r\n    )\r\n}\r\n\r\nexport default ExaminationUser\r\n","\r\nexport const checkParameter = (parametersArr, idx) => {\r\n    if (parametersArr) {\r\n        if (parametersArr.length === 0) {\r\n            return \"\"\r\n        }\r\n        if (parametersArr[idx] === 1001 || parametersArr[idx] === \"1001\") {\r\n            return \"\"\r\n        }\r\n        return parametersArr[idx]\r\n    } else {\r\n        return \"\"\r\n    }\r\n}\r\n\r\nexport const checkParameterValue = (value) => {\r\n    if (value) {\r\n        if (value === 0) {\r\n            return \"\"\r\n        }\r\n        if (value === 1001) {\r\n            return \"\"\r\n        }\r\n        return value\r\n    } else {\r\n        return \"\"\r\n    }\r\n}\r\n\r\n// check if valid number othervise return 1001\r\nexport const formatParameter = parameter => {\r\n    if (parameter) {\r\n        const changeNumber = parameter.toString().replace(',', '.')\r\n        return isNaN(changeNumber) ? 1001 : changeNumber\r\n    }\r\n}","import styled from 'styled-components'\r\nimport CustomButton from '../custom-button/custom-button.component'\r\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\r\n\r\n\r\nexport const ModalContainer = styled.div`\r\n    position: fixed;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    z-index: 99999;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    background-color: rgba(0,0,0,0.3);\r\n`\r\n\r\nexport const Modal = styled.div`\r\n    width:100%;\r\n    max-width: 65rem;\r\n    max-height: 60rem;\r\n    color: var(--primary-text-color);\r\n\r\n    overflow-y: scroll;\r\n\r\n    padding: 2rem;\r\n    border-radius: .5rem;\r\n    background-color: var(--background-primary-color);\r\n\r\n    position: relative;\r\n    z-index: 999999;\r\n\r\n    h3 {\r\n        margin-bottom: 2rem;\r\n    }\r\n\r\n    ::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n\r\n    /* Track */\r\n    ::-webkit-scrollbar-track {\r\n        background:  var(--background-primary-color);\r\n    }\r\n\r\n    /* Handle */\r\n    ::-webkit-scrollbar-thumb {\r\n        background: var(--primary-color);\r\n    }\r\n\r\n    /* Handle on hover */\r\n    ::-webkit-scrollbar-thumb:hover {\r\n        background: var(--primary-color);\r\n    }\r\n`\r\n\r\nexport const CloseButton = styled.button`\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    position: fixed;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 99999;\r\n\r\n    border: none;\r\n    outline: none;\r\n    opacity: 0;\r\n\r\n    &:focus {\r\n        outline: none\r\n    }\r\n`\r\n\r\nexport const SubmitButton = styled(CustomButton)`\r\n    background-color: var(--primary-color);\r\n    font-weight: bolder;\r\n    display: block;\r\n    margin: 2rem auto 0;\r\n`\r\n\r\nexport const Container = styled.div`\r\n    margin-bottom: 2rem;\r\n    h4 {\r\n        margin-bottom: 1rem;\r\n    }\r\n\r\n    div {\r\n    }\r\n`\r\n\r\nexport const ExamTypeCheckbox = styled(CustomCheckbox)`\r\n    margin-right: 1rem;\r\n`\r\n\r\nexport const IsSuitableCheckbox = styled(CustomCheckbox)`\r\n    margin-top: 2.2rem;\r\n`\r\n\r\nexport const TwoColContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-gap: 3rem;\r\n`\r\n\r\nexport const InputContainer = styled.div`\r\n    margin-bottom: 2rem;\r\n`\r\n\r\nexport const Table = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4rem repeat(7, 1fr);\r\n`\r\n\r\nexport const ObjectiveRefTable = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4rem repeat(4, 1fr);\r\n`\r\n\r\nexport const SubjectiveRefTable = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4rem repeat(9, 1fr);\r\n`\r\n\r\nexport const RefractTable = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4rem repeat(4, 1fr);\r\n`\r\nexport const KerathTable = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4rem repeat(3, 1fr);\r\n`\r\nexport const SubjectiveRefATable = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4rem repeat(6, 1fr);\r\n`\r\nexport const ContactLensesTable = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4rem repeat(8, 1fr);\r\n`\r\nexport const ContactLensesTypeTable = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4rem repeat(4, 1fr);\r\n`\r\n\r\nexport const ExamTable = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 4rem repeat(5, 1fr);\r\n`\r\n\r\nexport const TableTitleCol = styled.div`\r\n    padding: 1rem;\r\n`\r\n\r\nexport const TableCol = styled.div`\r\n\r\n`\r\n\r\nexport const Col = styled.div`\r\n    text-align: center;\r\n    margin: 1rem;\r\n    height: 4rem;\r\n    color: ${({ isActive }) => isActive ? \"var(--primary-color)\" : \"var(--input-color)\"};\r\n\r\n\r\n    input {\r\n        display:block;\r\n        width: 100%;\r\n        border: none;\r\n        padding: 1rem .5rem;\r\n        text-align: center;\r\n        font-family: inherit;\r\n        font-size: inherit;\r\n        background-color: var(--input-background-color);\r\n        color: var(--input-color);\r\n        border-radius: .5rem;\r\n        outline: none;\r\n        &:focus {\r\n            outline: none;\r\n        }\r\n        &:disabled {\r\n            opacity: .83;\r\n        }\r\n    }\r\n\r\n    /* clickable */\r\n\r\n    ${({ clickable }) => clickable && `\r\n        cursor: pointer;\r\n        \r\n        &:hover {\r\n            color: var(--primary-color);\r\n        }\r\n    `}\r\n`\r\n\r\nexport const TableBlock = styled.div`\r\n\r\n`","import React, { useState, useContext, useEffect } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { ExaminationContext } from '../../context/examination/examination.context'\r\nimport { useFetchById } from '../../hooks/useFetch'\r\nimport CustomInput from '../custom-input/custom-input.component'\r\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\r\n\r\nimport {\r\n    checkParameter,\r\n    formatParameter,\r\n    checkParameterValue\r\n} from '../../utils/parameters.utils'\r\n\r\nimport {\r\n    CloseButton,\r\n    Modal,\r\n    ModalContainer,\r\n    SubmitButton,\r\n    Container,\r\n    ExamTypeCheckbox,\r\n    TwoColContainer,\r\n    InputContainer,\r\n    IsSuitableCheckbox,\r\n    Col,\r\n    Table,\r\n    TableTitleCol,\r\n    TableCol,\r\n    // TableBlock,\r\n    ObjectiveRefTable,\r\n    SubjectiveRefTable,\r\n    ExamTable,\r\n    RefractTable,\r\n    KerathTable,\r\n    SubjectiveRefATable,\r\n    ContactLensesTable,\r\n    ContactLensesTypeTable\r\n} from './modal-optometrist-examination.styles'\r\n\r\nconst OptometristExaminationModal = ({ close, refetch, userId, examinationToUpdate }) => {\r\n    const examinationData = useFetchById('api/admin/exams', examinationToUpdate, !examinationToUpdate)\r\n\r\n    const { createExamination, updateExamination } = useContext(ExaminationContext)\r\n    const [examinationObj, setExaminationObj] = useState({})\r\n    const [recomendation, setRecomendation] = useState('')\r\n\r\n    const [pc, setPc] = useState(false)\r\n    const [vodic, setVodic] = useState(false)\r\n\r\n\r\n    //REFRAKCIA\r\n    const [vlastne_okuliare, setVlastne_okuliare] = useState({})\r\n    const [objektivna_refrakcia, setObjektivna_refrakcia] = useState({})\r\n    const [subjektivna_refrakcia, setSubjektivna_refrakcia] = useState({})\r\n\r\n\r\n    //ANAMNEZA\r\n    const [refraktometer, setRefraktometer] = useState({})\r\n    const [keratometer, setKeratometer] = useState({})\r\n    const [subjektivna_refrakciaA, setSubjektivna_refrakciaA] = useState({})\r\n    const [kontaktne_sosovky, setKontaktne_sosovky] = useState({})\r\n    const [typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek] = useState({})\r\n\r\n    //KONTROLA\r\n    const [tabulka, setTabulka] = useState({})\r\n\r\n    const [activeExamType, setActiveExamType] = useState(1)\r\n\r\n    const handleParameterChange = (e, idx, parameterObj, updateParameter) => {\r\n        const { name, value } = e.target\r\n        let arr = parameterObj[name] || [1001, 1001]\r\n        arr[idx] = value === '' ? 1001 : value\r\n\r\n        updateParameter({\r\n            ...parameterObj,\r\n            [name]: arr\r\n        })\r\n    }\r\n\r\n    const handleDomEye = (num, paramObj, handleChange) => {\r\n        if (paramObj?.domoko === num) {\r\n            handleChange(prevValue => ({\r\n                ...prevValue,\r\n                domoko: 0,\r\n            }))\r\n        } else {\r\n            handleChange(prevValue => ({\r\n                ...prevValue,\r\n                domoko: num,\r\n            }))\r\n        }\r\n    }\r\n\r\n    const handleChange = e => {\r\n        const { name, value } = e.target\r\n\r\n        if (value === '') {\r\n            delete examinationObj[name]\r\n            setExaminationObj({\r\n                ...examinationObj,\r\n            })\r\n            return\r\n        }\r\n\r\n        setExaminationObj({\r\n            ...examinationObj,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const formatParameters = (e, newParameters, parameterObj, updateParameter) => {\r\n        if (newParameters) {\r\n            const { name } = e.target\r\n            updateParameter({\r\n                ...parameterObj,\r\n                [name]: newParameters.map(value => formatParameter(value))\r\n            })\r\n        }\r\n    }\r\n\r\n    const formatStringParameters = (e, newParameters, parameterObj, updateParameter) => {\r\n        if (newParameters) {\r\n            const { name } = e.target\r\n            updateParameter({\r\n                ...parameterObj,\r\n                [name]: newParameters.map(value => value)\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        let examObj = {\r\n            vodic,\r\n            pc,\r\n            doneTo: userId,\r\n            type: activeExamType,\r\n            ...(recomendation !== \"\") && { doporucenia: recomendation }\r\n            // parameters: {\r\n            //     ...parameters\r\n            // }\r\n        }\r\n\r\n        if (activeExamType === 1) {\r\n            examObj = {\r\n                ...examObj,\r\n                refrakcia: {\r\n                    ...examinationObj,\r\n                    vlastne_okuliare: {\r\n                        ...vlastne_okuliare\r\n                    },\r\n                    objektivna_refrakcia: {\r\n                        ...objektivna_refrakcia\r\n                    },\r\n                    subjektivna_refrakcia: {\r\n                        ...subjektivna_refrakcia\r\n                    }\r\n                },\r\n            }\r\n        }\r\n\r\n        if (activeExamType === 2) {\r\n            examObj = {\r\n                ...examObj,\r\n                anamneza: {\r\n                    ...examinationObj,\r\n                    vlastne_okuliare: {\r\n                        ...vlastne_okuliare\r\n                    },\r\n                    refraktometer: {\r\n                        ...refraktometer\r\n                    },\r\n                    keratometer: {\r\n                        ...keratometer\r\n                    },\r\n                    subjektivna_refrakcia: {\r\n                        ...subjektivna_refrakciaA\r\n                    },\r\n                    kontaktne_sosovky: {\r\n                        ...kontaktne_sosovky\r\n                    },\r\n                    typ_kontaktnych_sosoviek: {\r\n                        ...typ_kontaktnych_sosoviek\r\n                    }\r\n                },\r\n            }\r\n        }\r\n\r\n        if (activeExamType === 3) {\r\n            examObj = {\r\n                ...examObj,\r\n                kontrola: {\r\n                    ...examinationObj,\r\n                    tabulka: {\r\n                        ...tabulka\r\n                    },\r\n                },\r\n            }\r\n        }\r\n\r\n        // console.log(\"EXAMINATION OBJECT BEFORE SEND\")\r\n        // console.log(examObj)\r\n\r\n        if (examinationToUpdate) {\r\n            delete examObj[\"doneTo\"]\r\n\r\n            updateExamination(examObj, examinationToUpdate)\r\n\r\n        } else {\r\n            createExamination(examObj)\r\n        }\r\n        refetch()\r\n        close()\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!!examinationToUpdate) return\r\n        setExaminationObj({})\r\n        setVlastne_okuliare({})\r\n        setObjektivna_refrakcia({})\r\n        setSubjektivna_refrakcia({})\r\n        setRefraktometer({})\r\n        setKeratometer({})\r\n        setSubjektivna_refrakciaA({})\r\n        setKontaktne_sosovky({})\r\n        setTyp_kontaktnych_sosoviek({})\r\n        setTabulka({})\r\n        setRecomendation('')\r\n    }, [activeExamType])\r\n\r\n    useEffect(() => {\r\n        if (!examinationData.isLoading) {\r\n            if (examinationData.response) {\r\n\r\n                setVodic(examinationData.response.exam.vodic)\r\n                setPc(examinationData.response.exam.pc)\r\n\r\n                if (examinationData.response?.exam?.type === 1) {\r\n                    let examObj = examinationData.response?.exam\r\n                    setVlastne_okuliare({\r\n                        ...examObj?.refrakcia?.vlastne_okuliare\r\n                    })\r\n                    setObjektivna_refrakcia({\r\n                        ...examObj?.refrakcia?.objektivna_refrakcia\r\n                    })\r\n                    setSubjektivna_refrakcia({\r\n                        ...examObj?.refrakcia?.subjektivna_refrakcia\r\n                    })\r\n\r\n                    setRecomendation(examObj?.doporucenia || \"\")\r\n                    setActiveExamType(examObj?.type)\r\n\r\n                    // delete examObj[\"refrakcia\"]\r\n                    delete examObj.refrakcia[\"vlastne_okuliare\"]\r\n                    delete examObj.refrakcia[\"objektivna_refrakcia\"]\r\n                    delete examObj.refrakcia[\"subjektivna_refrakcia\"]\r\n                    delete examObj[\"kontrola\"]\r\n                    delete examObj[\"anamneza\"]\r\n                    delete examObj[\"doneTo\"]\r\n                    delete examObj[\"doneBy\"]\r\n                    delete examObj[\"date\"]\r\n                    delete examObj[\"_id\"]\r\n                    delete examObj[\"__v\"]\r\n                    delete examObj[\"doporucenia\"]\r\n                    delete examObj[\"type\"]\r\n\r\n                    setExaminationObj({\r\n                        ...examObj?.refrakcia\r\n                    })\r\n                }\r\n\r\n                if (examinationData.response?.exam?.type === 2) {\r\n                    let examObj = examinationData.response?.exam\r\n                    setActiveExamType(examObj?.type)\r\n\r\n\r\n                    setVlastne_okuliare({\r\n                        ...examObj?.anamneza?.vlastne_okuliare\r\n                    })\r\n                    setRefraktometer({\r\n                        ...examObj?.anamneza?.refraktometer\r\n                    })\r\n                    setKeratometer({\r\n                        ...examObj?.anamneza?.keratometer\r\n                    })\r\n                    setSubjektivna_refrakciaA({\r\n                        ...examObj?.anamneza?.subjektivna_refrakcia\r\n                    })\r\n                    setKontaktne_sosovky({\r\n                        ...examObj?.anamneza?.kontaktne_sosovky\r\n                    })\r\n                    setTyp_kontaktnych_sosoviek({\r\n                        ...examObj?.anamneza?.typ_kontaktnych_sosoviek\r\n                    })\r\n\r\n                    setRecomendation(examObj?.doporucenia || \"\")\r\n\r\n                    delete examObj.anamneza[\"vlastne_okuliare\"]\r\n                    delete examObj.anamneza[\"refraktometer\"]\r\n                    delete examObj.anamneza[\"keratometer\"]\r\n                    delete examObj.anamneza[\"subjektivna_refrakcia\"]\r\n                    delete examObj.anamneza[\"kontaktne_sosovky\"]\r\n                    delete examObj.anamneza[\"typ_kontaktnych_sosoviek\"]\r\n                    delete examObj[\"kontrola\"]\r\n                    delete examObj[\"refrakcia\"]\r\n                    delete examObj[\"doneTo\"]\r\n                    delete examObj[\"doneBy\"]\r\n                    delete examObj[\"date\"]\r\n                    delete examObj[\"_id\"]\r\n                    delete examObj[\"__v\"]\r\n                    delete examObj[\"doporucenia\"]\r\n                    delete examObj[\"type\"]\r\n\r\n                    setExaminationObj({\r\n                        ...examObj?.anamneza\r\n                    })\r\n\r\n\r\n                }\r\n\r\n                if (examinationData.response?.exam?.type === 3) {\r\n                    let examObj = examinationData.response?.exam\r\n\r\n\r\n                    setActiveExamType(examObj?.type)\r\n\r\n                    setTabulka({\r\n                        ...examObj?.kontrola?.tabulka\r\n                    })\r\n\r\n                    setRecomendation(examObj?.doporucenia || \"\")\r\n\r\n                    delete examObj.kontrola[\"tabulka\"]\r\n                    delete examObj[\"anamneza\"]\r\n                    delete examObj[\"refrakcia\"]\r\n                    delete examObj[\"doneTo\"]\r\n                    delete examObj[\"doneBy\"]\r\n                    delete examObj[\"date\"]\r\n                    delete examObj[\"_id\"]\r\n                    delete examObj[\"__v\"]\r\n                    delete examObj[\"doporucenia\"]\r\n                    delete examObj[\"type\"]\r\n\r\n                    setExaminationObj({\r\n                        ...examObj?.kontrola\r\n                    })\r\n                }\r\n\r\n\r\n                // setParameters(examinationData.response?.exam?.parameters)\r\n                // setExaminationObj(examinationData.response?.exam)\r\n            }\r\n        }\r\n    }, [examinationToUpdate, examinationData.isLoading])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setExaminationObj({})\r\n            setExaminationObj({})\r\n            setVlastne_okuliare({})\r\n            setObjektivna_refrakcia({})\r\n            setSubjektivna_refrakcia({})\r\n            setRefraktometer({})\r\n            setKeratometer({})\r\n            setSubjektivna_refrakciaA({})\r\n            setKontaktne_sosovky({})\r\n            setTyp_kontaktnych_sosoviek({})\r\n            setTabulka({})\r\n            setRecomendation('')\r\n        }\r\n    }, [])\r\n\r\n    return ReactDOM.createPortal((\r\n        <ModalContainer>\r\n            <CloseButton onClick={close} />\r\n            <Modal>\r\n                <h3>Vyšetrenie</h3>\r\n                {!examinationToUpdate && <Container>\r\n                    <h4>Typ prehliadky</h4>\r\n                    <div>\r\n                        {examTypes.map((type, idx) => (\r\n                            <ExamTypeCheckbox\r\n                                key={idx}\r\n                                label={type.name}\r\n                                isActive={activeExamType === type.value}\r\n                                handleClick={() => setActiveExamType(type.value)}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </Container>}\r\n\r\n                {activeExamType === 1 && (\r\n                    <Container>\r\n                        <h4>Refrakcia</h4>\r\n                        <TwoColContainer>\r\n                            <div>\r\n                                <h5>Nosi od:</h5>\r\n                                <CustomInput\r\n                                    label={''}\r\n                                    value={examinationObj?.nosi_od || \"\"}\r\n                                    type=\"date\"\r\n                                    name=\"nosi_od\"\r\n                                    handleChange={handleChange}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Posledná korekcia:</h5>\r\n                                <CustomInput\r\n                                    label={''}\r\n                                    value={examinationObj?.posledna_korekcia || \"\"}\r\n                                    type=\"date\"\r\n                                    name=\"posledna_korekcia\"\r\n                                    handleChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </TwoColContainer>\r\n                        <TwoColContainer>\r\n                            <InputContainer>\r\n                                <CustomInput\r\n                                    label={'Typ, spôsob'}\r\n                                    value={examinationObj?.typ_sposob || \"\"}\r\n                                    type=\"text\"\r\n                                    name=\"typ_sposob\"\r\n                                    handleChange={handleChange}\r\n                                />\r\n                            </InputContainer>\r\n                            <InputContainer>\r\n                                <IsSuitableCheckbox\r\n                                    label={\"Vyhovuje\"}\r\n                                    isActive={examinationObj?.vyhovuje || false}\r\n                                    handleClick={() => handleChange({\r\n                                        target: {\r\n                                            name: \"vyhovuje\",\r\n                                            value: examinationObj?.vyhovuje ? !examinationObj.vyhovuje : true\r\n                                        }\r\n                                    })}\r\n                                />\r\n                            </InputContainer>\r\n                        </TwoColContainer>\r\n                        <InputContainer>\r\n                            <CustomTextarea\r\n                                label='Anamnéza'\r\n                                name=\"anamneza\"\r\n                                value={examinationObj?.anamneza || ''}\r\n                                rows=\"5\"\r\n                                handleChange={handleChange}\r\n                            />\r\n                        </InputContainer>\r\n                        <InputContainer>\r\n                            <CustomTextarea\r\n                                label='Doplňujúce informácie'\r\n                                name=\"dopl_info\"\r\n                                value={examinationObj?.dopl_info || \"\"}\r\n                                rows=\"3\"\r\n                                handleChange={handleChange}\r\n                            />\r\n                        </InputContainer>\r\n\r\n                        <h4>Vlastné okuliare</h4>\r\n\r\n                        <Table>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col>P.</Col>\r\n                                <Col>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>V.NATUR</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='vnatur'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.vnatur, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>SPH</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='sph'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.sph, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>CYL</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='cyl'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.cyl, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>AX</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ax'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.ax, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>ADICIA</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='add'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.add, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>V.ISUS</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='visus'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.visus, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>V.BINO</Col>\r\n                                <Col>\r\n                                    <input\r\n                                        name='vbino'\r\n                                        type='text'\r\n                                        value={checkParameterValue(vlastne_okuliare?.vbino)}\r\n                                        onChange={e => setVlastne_okuliare(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: e.target.value\r\n                                        }))}\r\n                                        onBlur={(e) => setVlastne_okuliare(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: Number(e.target.value)\r\n                                        }))}\r\n                                    />\r\n                                </Col>\r\n                            </TableCol>\r\n                        </Table>\r\n\r\n                        <h4>Objektivná refrakcia</h4>\r\n\r\n                        <ObjectiveRefTable>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col>P.</Col>\r\n                                <Col>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>SPH</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='sph'\r\n                                            type='text'\r\n                                            value={checkParameter(objektivna_refrakcia?.sph, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.sph, objektivna_refrakcia, setObjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>CYL</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='cyl'\r\n                                            type='text'\r\n                                            value={checkParameter(objektivna_refrakcia?.cyl, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.cyl, objektivna_refrakcia, setObjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>AX</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ax'\r\n                                            type='text'\r\n                                            value={checkParameter(objektivna_refrakcia?.ax, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.ax, objektivna_refrakcia, setObjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>SE</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='se'\r\n                                            type='text'\r\n                                            value={checkParameter(objektivna_refrakcia?.se, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, objektivna_refrakcia?.se, objektivna_refrakcia, setObjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                        </ObjectiveRefTable>\r\n\r\n                        <h4>Subjektivná refrakcia</h4>\r\n\r\n                        <SubjectiveRefTable>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col isActive={subjektivna_refrakcia?.domoko === 1} clickable onClick={() => handleDomEye(1, subjektivna_refrakcia, setSubjektivna_refrakcia)}>P.</Col>\r\n                                <Col isActive={subjektivna_refrakcia?.domoko === 2} clickable onClick={() => handleDomEye(2, subjektivna_refrakcia, setSubjektivna_refrakcia)}>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>SPH</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='sph'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakcia?.sph, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.sph, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>CYL</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='cyl'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakcia?.cyl, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.cyl, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>AX</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ax'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakcia?.ax, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.ax, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>ADICIA</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='add'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakcia?.add, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.add, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>V.ISUS</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='visus'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakcia?.visus, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.visus, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>V.BINO</Col>\r\n                                <Col>\r\n                                    <input\r\n                                        name='vbino'\r\n                                        type='text'\r\n                                        value={checkParameterValue(subjektivna_refrakcia?.vbino)}\r\n                                        onChange={e => setSubjektivna_refrakcia(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: e.target.value\r\n                                        }))}\r\n                                        onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: Number(e.target.value)\r\n                                        }))}\r\n                                    />\r\n                                </Col>\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>PRIZMA</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='prizma'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakcia?.prizma, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.prizma, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>BÁZA</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='basis'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakcia?.basis, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.basis, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>OS</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='os'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakcia?.os, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.os, subjektivna_refrakcia, setSubjektivna_refrakcia)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n\r\n                        </SubjectiveRefTable>\r\n                    </Container>\r\n                )}\r\n\r\n                {activeExamType === 2 && (\r\n                    <Container>\r\n                        <h4>Anamnéza</h4>\r\n\r\n                        <TwoColContainer>\r\n                            <div>\r\n                                <h5>Nosi od:</h5>\r\n                                <CustomInput\r\n                                    label={''}\r\n                                    value={examinationObj?.nosi_od || \"\"}\r\n                                    type=\"date\"\r\n                                    name=\"nosi_od\"\r\n                                    handleChange={handleChange}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <h5>Posledná korekcia:</h5>\r\n                                <CustomInput\r\n                                    label={''}\r\n                                    value={examinationObj?.posledna_korekcia || \"\"}\r\n                                    type=\"date\"\r\n                                    name=\"posledna_korekcia\"\r\n                                    handleChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </TwoColContainer>\r\n                        <TwoColContainer>\r\n                            <InputContainer>\r\n                                <CustomInput\r\n                                    label={'Typ, spôsob'}\r\n                                    value={examinationObj?.typ_sposob || \"\"}\r\n                                    type=\"text\"\r\n                                    name=\"typ_sposob\"\r\n                                    handleChange={handleChange}\r\n                                />\r\n                            </InputContainer>\r\n                            <InputContainer>\r\n                                <IsSuitableCheckbox\r\n                                    label={\"Vyhovuje\"}\r\n                                    isActive={examinationObj?.vyhovuje || false}\r\n                                    handleClick={() => handleChange({\r\n                                        target: {\r\n                                            name: \"vyhovuje\",\r\n                                            value: examinationObj?.vyhovuje ? !examinationObj.vyhovuje : true\r\n                                        }\r\n                                    })}\r\n                                />\r\n                            </InputContainer>\r\n                        </TwoColContainer>\r\n                        <InputContainer>\r\n                            <CustomInput\r\n                                label='Stav a povolanie'\r\n                                name=\"stav_a_povolanie\"\r\n                                value={examinationObj?.stav_a_povolanie || ''}\r\n                                handleChange={handleChange}\r\n                            />\r\n                        </InputContainer>\r\n                        <InputContainer>\r\n                            <CustomTextarea\r\n                                label='Doplňujúce informácie'\r\n                                name=\"dopl_info\"\r\n                                value={examinationObj?.dopl_info || \"\"}\r\n                                rows=\"3\"\r\n                                handleChange={handleChange}\r\n                            />\r\n                        </InputContainer>\r\n                        <InputContainer>\r\n                            <CustomInput\r\n                                label='Obj. nález'\r\n                                name=\"obj_nalez\"\r\n                                value={examinationObj?.obj_nalez || ''}\r\n                                handleChange={handleChange}\r\n                            />\r\n                        </InputContainer>\r\n\r\n                        <h4>Vlastné okuliare</h4>\r\n\r\n                        <Table>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col>P.</Col>\r\n                                <Col>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>V.NATUR</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='vnatur'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.vnatur, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>SPH</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='sph'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.sph, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>CYL</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='cyl'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.cyl, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>AX</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ax'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.ax, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>ADICIA</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='add'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.add, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>V.ISUS</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='visus'\r\n                                            type='text'\r\n                                            value={checkParameter(vlastne_okuliare?.visus, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\r\n                                            onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>V.BINO</Col>\r\n                                <Col>\r\n                                    <input\r\n                                        name='vbino'\r\n                                        type='text'\r\n                                        value={checkParameterValue(vlastne_okuliare?.vbino)}\r\n                                        onChange={e => setVlastne_okuliare(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: e.target.value\r\n                                        }))}\r\n                                        onBlur={(e) => setVlastne_okuliare(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: Number(e.target.value)\r\n                                        }))}\r\n                                    />\r\n                                </Col>\r\n                            </TableCol>\r\n                        </Table>\r\n\r\n                        <h4>Refraktometer</h4>\r\n\r\n                        <RefractTable>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col>P.</Col>\r\n                                <Col>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>SPH</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='sph'\r\n                                            type='text'\r\n                                            value={checkParameter(refraktometer?.sph, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\r\n                                            onBlur={(e) => formatParameters(e, refraktometer?.sph, refraktometer, setRefraktometer)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>CYL</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='cyl'\r\n                                            type='text'\r\n                                            value={checkParameter(refraktometer?.cyl, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\r\n                                            onBlur={(e) => formatParameters(e, refraktometer?.cyl, refraktometer, setRefraktometer)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>AX</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ax'\r\n                                            type='text'\r\n                                            value={checkParameter(refraktometer?.ax, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\r\n                                            onBlur={(e) => formatParameters(e, refraktometer?.ax, refraktometer, setRefraktometer)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>SE</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='se'\r\n                                            type='text'\r\n                                            value={checkParameter(refraktometer?.se, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\r\n                                            onBlur={(e) => formatParameters(e, refraktometer?.se, refraktometer, setRefraktometer)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n\r\n                        </RefractTable>\r\n\r\n                        <h4>Keratometer</h4>\r\n\r\n                        <KerathTable>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col>P.</Col>\r\n                                <Col>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>HOR</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='hor'\r\n                                            type='text'\r\n                                            value={checkParameter(keratometer?.hor, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\r\n                                            onBlur={(e) => formatParameters(e, keratometer?.hor, keratometer, setKeratometer)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>VER</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ver'\r\n                                            type='text'\r\n                                            value={checkParameter(keratometer?.ver, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\r\n                                            onBlur={(e) => formatParameters(e, keratometer?.ver, keratometer, setKeratometer)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>AVE</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ave'\r\n                                            type='text'\r\n                                            value={checkParameter(keratometer?.ave, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\r\n                                            onBlur={(e) => formatParameters(e, keratometer?.ave, keratometer, setKeratometer)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n\r\n                        </KerathTable>\r\n\r\n                        <h4>Subjektivná refrakcia</h4>\r\n\r\n                        <SubjectiveRefATable>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col>P.</Col>\r\n                                <Col>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>SPH</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='sph'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakciaA?.sph, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.sph, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>CYL</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='cyl'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakciaA?.cyl, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.cyl, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>AX</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ax'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakciaA?.ax, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.ax, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>ADICIA</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='add'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakciaA?.add, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.add, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>VISUS</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='visus'\r\n                                            type='text'\r\n                                            value={checkParameter(subjektivna_refrakciaA?.visus, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                            onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.visus, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>BINO</Col>\r\n                                <Col>\r\n                                    <input\r\n                                        name='bino'\r\n                                        type='text'\r\n                                        value={checkParameterValue(subjektivna_refrakciaA?.bino)}\r\n                                        onChange={e => setSubjektivna_refrakciaA(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: e.target.value\r\n                                        }))}\r\n                                        onBlur={(e) => setSubjektivna_refrakciaA(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: Number(e.target.value)\r\n                                        }))}\r\n                                    />\r\n                                </Col>\r\n                            </TableCol>\r\n\r\n                        </SubjectiveRefATable>\r\n\r\n                        <h4>Kontaktné šošovky</h4>\r\n\r\n                        <ContactLensesTable>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col>P.</Col>\r\n                                <Col>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>SPH</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='sph'\r\n                                            type='text'\r\n                                            value={checkParameter(kontaktne_sosovky?.sph, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.sph, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>CYL</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='cyl'\r\n                                            type='text'\r\n                                            value={checkParameter(kontaktne_sosovky?.cyl, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.cyl, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>AX</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ax'\r\n                                            type='text'\r\n                                            value={checkParameter(kontaktne_sosovky?.ax, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.ax, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>ADICIA</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='add'\r\n                                            type='text'\r\n                                            value={checkParameter(kontaktne_sosovky?.add, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.add, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>VISD</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='visd'\r\n                                            type='text'\r\n                                            value={checkParameter(kontaktne_sosovky?.visd, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visd, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>BINO1</Col>\r\n                                {[...Array(1)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='bino1'\r\n                                            type='text'\r\n                                            value={checkParameter(kontaktne_sosovky?.bino1, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino1, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>VISB</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='visb'\r\n                                            type='text'\r\n                                            value={checkParameter(kontaktne_sosovky?.visb, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visb, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>BINO2</Col>\r\n                                {[...Array(1)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='bino2'\r\n                                            type='text'\r\n                                            value={checkParameter(kontaktne_sosovky?.bino2, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                            onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino2, kontaktne_sosovky, setKontaktne_sosovky)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                        </ContactLensesTable>\r\n\r\n\r\n                        <h4>Typ Kontaktných šošoviek</h4>\r\n\r\n                        <ContactLensesTypeTable>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col>P.</Col>\r\n                                <Col>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>PRVÝ</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='prvy'\r\n                                            type='text'\r\n                                            value={checkParameter(typ_kontaktnych_sosoviek?.prvy, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\r\n                                            onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.prvy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>DRUHÝ</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='druhy'\r\n                                            type='text'\r\n                                            value={checkParameter(typ_kontaktnych_sosoviek?.druhy, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\r\n                                            onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.druhy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>L.KONTROLA</Col>\r\n                                <Col>\r\n                                    <input\r\n                                        name='lkontrola'\r\n                                        type='text'\r\n                                        value={typ_kontaktnych_sosoviek?.lkontrola || \"\"}\r\n                                        onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: e.target.value\r\n                                        }))}\r\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\r\n                                    //     ...prevValue,\r\n                                    //     [e.target.name]: Number(e.target.value)\r\n                                    // }))}\r\n                                    />\r\n                                </Col>\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>DOP.ROZTOK</Col>\r\n                                <Col>\r\n                                    <input\r\n                                        name='dop_roztok'\r\n                                        type='text'\r\n                                        value={typ_kontaktnych_sosoviek?.dop_roztok || \"\"}\r\n                                        onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\r\n                                            ...prevValue,\r\n                                            [e.target.name]: e.target.value\r\n                                        }))}\r\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\r\n                                    //     ...prevValue,\r\n                                    //     [e.target.name]: Number(e.target.value)\r\n                                    // }))}\r\n                                    />\r\n                                </Col>\r\n                            </TableCol>\r\n                        </ContactLensesTypeTable>\r\n                    </Container>\r\n                )}\r\n\r\n                {activeExamType === 3 && (\r\n                    <Container>\r\n                        <h4>Kontrola</h4>\r\n                        <InputContainer>\r\n                            <CustomInput\r\n                                label={'Typ kontaktných šošoviek'}\r\n                                value={examinationObj?.typ_kontaktnych_sosoviek || \"\"}\r\n                                type=\"text\"\r\n                                name=\"typ_kontaktnych_sosoviek\"\r\n                                handleChange={handleChange}\r\n                            />\r\n                        </InputContainer>\r\n\r\n                        <ExamTable>\r\n                            <TableTitleCol>\r\n                                <Col>{\"-\"}</Col>\r\n                                <Col>P.</Col>\r\n                                <Col>L.</Col>\r\n                            </TableTitleCol>\r\n\r\n                            <TableCol>\r\n                                <Col>SPH</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='sph'\r\n                                            type='text'\r\n                                            value={checkParameter(tabulka?.sph, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\r\n                                            onBlur={(e) => formatParameters(e, tabulka?.sph, tabulka, setTabulka)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>CYL</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='cyl'\r\n                                            type='text'\r\n                                            value={checkParameter(tabulka?.cyl, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\r\n                                            onBlur={(e) => formatParameters(e, tabulka?.cyl, tabulka, setTabulka)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>AX</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='ax'\r\n                                            type='text'\r\n                                            value={checkParameter(tabulka?.ax, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\r\n                                            onBlur={(e) => formatParameters(e, tabulka?.ax, tabulka, setTabulka)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>ADD</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='add'\r\n                                            type='text'\r\n                                            value={checkParameter(tabulka?.add, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\r\n                                            onBlur={(e) => formatParameters(e, tabulka?.add, tabulka, setTabulka)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                            <TableCol>\r\n                                <Col>VIS</Col>\r\n                                {[...Array(2)].map((value, idx) => (\r\n                                    <Col key={idx}>\r\n                                        <input\r\n                                            name='vis'\r\n                                            type='text'\r\n                                            value={checkParameter(tabulka?.vis, idx)}\r\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\r\n                                            onBlur={(e) => formatParameters(e, tabulka?.vis, tabulka, setTabulka)}\r\n                                        />\r\n                                    </Col>\r\n                                ))}\r\n                            </TableCol>\r\n                        </ExamTable>\r\n\r\n                        <InputContainer>\r\n                            <CustomInput\r\n                                label={'Subj.'}\r\n                                value={examinationObj?.subj || \"\"}\r\n                                type=\"text\"\r\n                                name=\"subj\"\r\n                                handleChange={handleChange}\r\n                            />\r\n                        </InputContainer>\r\n\r\n                        <InputContainer>\r\n                            <CustomInput\r\n                                label={'Obj.'}\r\n                                value={examinationObj?.obj || \"\"}\r\n                                type=\"text\"\r\n                                name=\"obj\"\r\n                                handleChange={handleChange}\r\n                            />\r\n                        </InputContainer>\r\n                    </Container>\r\n                )}\r\n\r\n                <InputContainer>\r\n                    <IsSuitableCheckbox\r\n                        label={\"Šofer\"}\r\n                        isActive={vodic}\r\n                        handleClick={() => setVodic(prevValue => !prevValue)}\r\n                    />\r\n                </InputContainer>\r\n                <InputContainer>\r\n                    <IsSuitableCheckbox\r\n                        label={\"PC\"}\r\n                        isActive={pc}\r\n                        handleClick={() => setPc(prevValue => !prevValue)}\r\n                    />\r\n                </InputContainer>\r\n\r\n                <InputContainer>\r\n                    <CustomTextarea\r\n                        label='Doporučenia'\r\n                        name=\"doporucenia\"\r\n                        value={recomendation}\r\n                        rows=\"5\"\r\n                        handleChange={(e) => setRecomendation(e.target.value)}\r\n                    />\r\n                </InputContainer>\r\n                {/* doporucenia */}\r\n\r\n                <SubmitButton onClick={handleSubmit}>{examinationToUpdate ? \"Uložiť\" : \"Odoslať prehliadku\"}</SubmitButton>\r\n            </Modal>\r\n        </ModalContainer>\r\n    ), document.getElementById('portal'))\r\n}\r\n\r\nexport default OptometristExaminationModal\r\n\r\nconst examTypes = [\r\n    {\r\n        name: \"Refrakcia\",\r\n        value: 1\r\n    },\r\n    {\r\n        name: \"apl. KŠ\",\r\n        value: 2\r\n    },\r\n    {\r\n        name: \"Kontrola\",\r\n        value: 3\r\n    },\r\n]","import styled from 'styled-components'\r\nimport CustomButton from '../custom-button/custom-button.component'\r\n\r\nexport const ExaminationsOverviewContainer = styled.div`\r\n\r\n`\r\n\r\nexport const Header = styled.div`\r\n    margin-top: 2rem;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    h2 {\r\n        margin: 2rem 0;\r\n    }\r\n`\r\n\r\nexport const ExaminationContainer = styled.div`\r\n    border-radius: .5rem;\r\n    padding: 2rem;\r\n    /* box-shadow: 0 0 1.5rem 0 rgba(0,0,0, 0.08); */\r\n    box-shadow: var(--container-shadow);\r\n    background-color: var(--container-background-color);\r\n\r\n\r\n    margin-bottom: 2rem;\r\n`\r\n\r\nexport const ExamHead = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 2rem;\r\n`\r\n\r\nexport const ExamTableContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 3rem repeat(10, 1fr);\r\n    font-size: 1.2rem;  \r\n`\r\n\r\nexport const HeadTableCol = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(5, 5rem);\r\n    div {\r\n        align-self: center;\r\n        display:flex;\r\n        justify-content: space-between;\r\n    }\r\n`\r\n\r\nexport const TableCol = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(5, 5rem);\r\n\r\n    div {\r\n        text-align:center;\r\n        align-self: center;\r\n        margin-left: .5rem;\r\n\r\n        &:not(:first-child) {\r\n            background-color: var(--input-background-color);\r\n            padding: .5rem;\r\n            border-radius: .5rem;\r\n            min-height: 2.5rem;\r\n        }\r\n    }\r\n`\r\nexport const ExaminationOptions = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nexport const AddButton = styled(CustomButton)`\r\n    background-color: var(--primary-color);\r\n    font-weight: bolder;\r\n    font-size: 1.2rem;\r\n`\r\n\r\nexport const UpdateButton = styled(CustomButton)`\r\n    font-size: 1.2rem;\r\n`\r\n\r\nexport const DeleteButton = styled(CustomButton)`\r\n    font-size: 1.2rem;\r\n    background-color: var(--color-red);\r\n    margin-left: 1rem;\r\n\r\n`","import React, { useState, useEffect, useContext } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useFetchById } from '../../hooks/useFetch'\r\nimport { ExaminationContext } from '../../context/examination/examination.context'\r\n\r\nimport ExaminationUser from '../examination-user/examination-user.component'\r\nimport OptometristExaminationModal from '../modal-optometrist-examination/modal-optometrist-examination.component'\r\n\r\n// import {\r\n//     checkParameterValue\r\n// } from '../../utils/parameters.utils'\r\n\r\nimport {\r\n    ExaminationsOverviewContainer,\r\n    Header,\r\n    ExaminationContainer,\r\n    ExamHead,\r\n    // ExamTableContainer,\r\n    // HeadTableCol,\r\n    // TableCol,\r\n    ExaminationOptions,\r\n    AddButton,\r\n    UpdateButton,\r\n    DeleteButton\r\n} from './examinations-overview.styles'\r\n\r\nconst ExaminationsOverview = () => {\r\n    const params = useParams()\r\n    const examinationData = useFetchById(\"api/admin/exams/user\", params.id)\r\n    const { deleteExamination } = useContext(ExaminationContext)\r\n    const [showOptometristModal, setShowOptometristModal] = useState(false)\r\n    const [examinations, setExaminations] = useState([])\r\n    const [examinationToUpdate, setExaminationToUpdate] = useState(null)\r\n\r\n    const [isDisabled, setIsDisabled] = useState(false)\r\n\r\n\r\n    const handleUpdateClick = (e, id) => {\r\n        e.preventDefault()\r\n        setExaminationToUpdate(id)\r\n        setShowOptometristModal(true)\r\n    }\r\n\r\n    const handleDelete = (e, id) => {\r\n        e.preventDefault()\r\n        if (isDisabled) {\r\n            return;\r\n        }\r\n        setIsDisabled(true);\r\n        deleteExamination(id)\r\n\r\n        setTimeout(() => {\r\n            examinationData.refetch()\r\n            setIsDisabled(false);\r\n        }, 100)\r\n    }\r\n\r\n    const handleCloseModal = () => {\r\n        setShowOptometristModal(false)\r\n        setExaminationToUpdate(null)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!examinationData.isLoading) {\r\n            if (examinationData.response) {\r\n                setExaminations(examinationData.response.exams)\r\n            }\r\n        }\r\n    }, [examinationData.isLoading])\r\n\r\n    return (\r\n        <ExaminationsOverviewContainer>\r\n            {showOptometristModal && <OptometristExaminationModal\r\n                userId={params.id}\r\n                examinationToUpdate={examinationToUpdate}\r\n                refetch={examinationData.refetch}\r\n                close={handleCloseModal}\r\n            />}\r\n            <Header>\r\n                <h2>Vyšetrenia</h2>\r\n                <div>\r\n                    <AddButton type='button' onClick={() => setShowOptometristModal(true)}>Pridať prehliadku</AddButton>\r\n                </div>\r\n            </Header>\r\n\r\n\r\n            <div>\r\n                {examinations && examinations.map((examination, idx) => (\r\n                    <ExaminationContainer key={idx}>\r\n                        <ExamHead>\r\n                            <h3>Dátum:</h3>\r\n                            <p>{new Date(examination?.date).toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric' })}</p>\r\n                        </ExamHead>\r\n                        <ExamHead>\r\n                            <h3>Typ vyšetrenia:</h3>\r\n                            <p>{examTypes[examination?.type - 1].name}</p>\r\n                        </ExamHead>\r\n\r\n                        <ExaminationOptions>\r\n                            <ExaminationUser userId={examination.doneBy} />\r\n                            <div>\r\n                                <UpdateButton onClick={e => handleUpdateClick(e, examination._id)}>Upraviť</UpdateButton>\r\n\r\n                                <DeleteButton disabled={isDisabled} onClick={e => handleDelete(e, examination._id)}>\r\n                                    {isDisabled ? 'Mažem...' : 'Vymazať'}\r\n                                </DeleteButton>\r\n                            </div>\r\n                        </ExaminationOptions>\r\n                    </ExaminationContainer>\r\n                ))}\r\n            </div>\r\n        </ExaminationsOverviewContainer>\r\n    )\r\n}\r\n\r\nexport default ExaminationsOverview\r\n\r\nconst examTypes = [\r\n    {\r\n        name: \"Refrakcia\",\r\n        value: 1\r\n    },\r\n    {\r\n        name: \"Anamnéza\",\r\n        value: 2\r\n    },\r\n    {\r\n        name: \"Kontrola\",\r\n        value: 3\r\n    },\r\n]","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport InputRow from '../product-input-row/product-input-row.component'\r\nimport CustomInput from '../custom-input/custom-input.component'\r\nimport ProfileOrderOverview from '../profile-order-overview/profile-order-overview.component'\r\nimport ParametersTable from '../parameters-table/parameters-table.component'\r\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\r\nimport ExaminationsOverview from '../examinations-overview/examinations-overview.component'\r\n\r\nimport {\r\n    retailNames\r\n} from '../../utils/warehouse.utils'\r\n\r\nimport {\r\n    Profile,\r\n    GridContainer,\r\n    GridRow,\r\n    Row,\r\n    // ThreeColRow,\r\n    ZeroMargin,\r\n    Title,\r\n    Container,\r\n    OrderHeader,\r\n    OrderButton,\r\n    CustomSelect,\r\n    AdminPanelContainer\r\n} from './user.form-styles'\r\n\r\nconst UserForm = ({\r\n    isAdmin,\r\n    isUpdating,\r\n    user,\r\n    handleChange,\r\n    handleParameterChange,\r\n    handleCompanyChange,\r\n    isOptometrist,\r\n    isOrder = false\r\n}) => {\r\n    const { push } = useHistory()\r\n\r\n    const handleAddOrderButtonClick = e => {\r\n        e.preventDefault()\r\n        push(`/dashboard/objednavky/${user._id}`)\r\n    }\r\n\r\n    return (\r\n        <GridContainer>\r\n            <Profile>\r\n                {isAdmin && user.admin !== 0 && <AdminPanelContainer>\r\n                    <h2>Admin panel</h2>\r\n                    <InputRow\r\n                        label=\"Predajňa na ktorej uživatel pracuje\"\r\n                        example=''\r\n                    >\r\n                        <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\r\n                            <option value={0}>Nezadané</option>\r\n                            {\r\n                                retailNames.map((name, idx) => {\r\n                                    if (idx === 0) return\r\n                                    return (\r\n                                        <option key={idx} value={idx}>{name}</option>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </CustomSelect>\r\n                    </InputRow>\r\n                    <InputRow\r\n                        label=\"Výška administrativných práv\"\r\n                        example=\"\"\r\n                    >\r\n                        <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\r\n                            <option value={0}>Zákaznik</option>\r\n                            <option value={1}>Predavač</option>\r\n                            <option value={2}>Vedúci</option>\r\n                        </CustomSelect>\r\n                    </InputRow>\r\n\r\n                    <Container>\r\n                        <CustomCheckbox\r\n                            label='Optometrista'\r\n                            handleClick={() => handleChange({\r\n                                target: {\r\n                                    name: \"optometrist\",\r\n                                    value: !user.optometrist\r\n                                }\r\n                            })}\r\n                            isActive={user.optometrist}\r\n                        />\r\n                    </Container>\r\n                </AdminPanelContainer>}\r\n                <div>\r\n                    <h2>Informácie</h2>\r\n                    <GridRow>\r\n                        <div>\r\n                            <CustomInput\r\n                                label=\"Meno*\"\r\n                                type='text'\r\n                                name='fName'\r\n                                value={user.fName ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <CustomInput\r\n                                label=\"Priezvisko*\"\r\n                                type='text'\r\n                                name='lName'\r\n                                value={user.lName ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </div>\r\n                        {(user.admin === 0) && <div>\r\n                            <CustomInput\r\n                                // label=\"Priezvisko*\"\r\n                                type='date'\r\n                                name='birthDate'\r\n                                value={user.birthDate}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </div>}\r\n                    </GridRow>\r\n                </div>\r\n\r\n                <Container>\r\n                    <h2>Kontaktné údaje</h2>\r\n                    <Row>\r\n                        <div>\r\n                            <CustomInput\r\n                                label=\"E-mail*\"\r\n                                type='email'\r\n                                name='email'\r\n                                value={user.email ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </div>\r\n                        {(user.admin === 0) && <div>\r\n                            <CustomInput\r\n                                label=\"Telefónne číslo\"\r\n                                type='text'\r\n                                name='phone'\r\n                                value={user.phone ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </div>}\r\n                    </Row>\r\n                </Container>\r\n\r\n                {(user.admin === 0) && <Container>\r\n                    <h2>Fakturačné údaje</h2>\r\n                    <GridRow>\r\n                        <ZeroMargin>\r\n                            <CustomInput\r\n                                label=\"Ulica a čislo domu\"\r\n                                type='text'\r\n                                name='address'\r\n                                value={user.address ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </ZeroMargin>\r\n                        <ZeroMargin>\r\n                            <CustomInput\r\n                                label=\"PSČ\"\r\n                                type='text'\r\n                                name='psc'\r\n                                value={user.psc ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </ZeroMargin>\r\n                    </GridRow>\r\n                    <GridRow>\r\n                        <div>\r\n                            <CustomInput\r\n                                label=\"Mesto\"\r\n                                type='text'\r\n                                name='city'\r\n                                value={user.city ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <CustomInput\r\n                                label=\"Krajina\"\r\n                                type='text'\r\n                                name='country'\r\n                                value={user.country ?? \"\"}\r\n                                handleChange={(e) => handleChange(e)}\r\n                            />\r\n                        </div>\r\n                    </GridRow>\r\n                </Container>}\r\n                {(user.admin === 0) && <Container>\r\n                    <h2>Firemné údaje</h2>\r\n                    <GridRow>\r\n                        <ZeroMargin>\r\n                            <CustomInput\r\n                                label=\"IČO\"\r\n                                type='text'\r\n                                name='ico'\r\n                                value={user.company.ico ?? \"\"}\r\n                                handleChange={(e) => handleCompanyChange(e)}\r\n                            />\r\n                        </ZeroMargin>\r\n                        <ZeroMargin>\r\n                            <CustomInput\r\n                                label=\"DIČ\"\r\n                                type='text'\r\n                                name='dic'\r\n                                value={user.company.dic ?? \"\"}\r\n                                handleChange={(e) => handleCompanyChange(e)}\r\n                            />\r\n                        </ZeroMargin>\r\n                        <ZeroMargin>\r\n                            <CustomInput\r\n                                label=\"IČ DPH\"\r\n                                type='text'\r\n                                name='icdph'\r\n                                value={user.company.icdph ?? \"\"}\r\n                                handleChange={(e) => handleCompanyChange(e)}\r\n                            />\r\n                        </ZeroMargin>\r\n                        <ZeroMargin>\r\n                            {/* <CustomInput\r\n                                label=\"IČ DPH\"\r\n                                type='text'\r\n                                name='icdph'\r\n                                value={user.company.icdph ?? \"\"}\r\n                                handleChange={(e) => handleCompanyChange(e)}\r\n                            /> */}\r\n                        </ZeroMargin>\r\n                    </GridRow>\r\n                    <GridRow>\r\n                        <ZeroMargin>\r\n                            <CustomInput\r\n                                label=\"Ulica a čislo domu\"\r\n                                type='text'\r\n                                name='address'\r\n                                value={user.company.address ?? \"\"}\r\n                                handleChange={(e) => handleCompanyChange(e)}\r\n                            />\r\n                        </ZeroMargin>\r\n                        <ZeroMargin>\r\n                            <CustomInput\r\n                                label=\"PSČ\"\r\n                                type='text'\r\n                                name='psc'\r\n                                value={user.company.psc ?? \"\"}\r\n                                handleChange={(e) => handleCompanyChange(e)}\r\n                            />\r\n                        </ZeroMargin>\r\n                    </GridRow>\r\n                    <GridRow>\r\n                        <div>\r\n                            <CustomInput\r\n                                label=\"Mesto\"\r\n                                type='text'\r\n                                name='city'\r\n                                value={user.company.city ?? \"\"}\r\n                                handleChange={(e) => handleCompanyChange(e)}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <CustomInput\r\n                                label=\"Krajina\"\r\n                                type='text'\r\n                                name='country'\r\n                                value={user.company.country ?? \"\"}\r\n                                handleChange={(e) => handleCompanyChange(e)}\r\n                            />\r\n                        </div>\r\n                    </GridRow>\r\n                </Container>}\r\n\r\n                {(user.admin === 0) && <Container>\r\n                    <h2>Parametre</h2>\r\n\r\n                    <ParametersTable\r\n                        parameters={user.lenses}\r\n                        handleChange={handleParameterChange}\r\n                    />\r\n                </Container>}\r\n\r\n\r\n            </Profile>\r\n\r\n            {\r\n                (user.admin === 0) && !isOrder && isUpdating && <div>\r\n                    <OrderHeader>\r\n                        <Title>\r\n                            Objednávky\r\n                    </Title>\r\n                        <OrderButton onClick={e => handleAddOrderButtonClick(e)}>Pridať objednávku</OrderButton>\r\n                    </OrderHeader>\r\n                    <div>\r\n                        {user.orders.length > 0 ? user.orders.map((order, idx) => (\r\n                            <ProfileOrderOverview\r\n                                key={idx}\r\n                                id={order}\r\n                                handleUpdateClick={() => push(`/dashboard/objednavky/${user._id}/${order}`)}\r\n                            />\r\n                        )).reverse().slice(0, 5) : (\r\n                            <p>Žiadné objednávky</p>\r\n                        )}\r\n                    </div>\r\n                    {isOptometrist && <ExaminationsOverview />}\r\n                </div>\r\n            }\r\n        </GridContainer >\r\n    )\r\n}\r\n\r\nexport default UserForm\r\n","import styled, { css } from \"styled-components\"\r\n\r\nconst shrinkLabel = css`\r\n    left: .5rem;\r\n    top: -14px;\r\n    font-size: 12px;\r\n    color: var(--input-color);\r\n`\r\nexport const InputGroup = styled.div`\r\n    position: relative;\r\n\r\n    /* margin: 45px 0; */\r\n\r\n    .form-input {\r\n        /* background: none; */\r\n        background-color: var(--input-background-color);\r\n        color: var(--input-color);\r\n        font-size: 1.5rem;\r\n        padding: 1rem .5rem 1rem 2rem;\r\n        display: block;\r\n        width: 100%;\r\n        border: none;\r\n        border-radius: .5rem;\r\n        /* border-bottom: 1px solid #000; */\r\n        margin: 2rem 0 0;\r\n        font-family: inherit;\r\n\r\n        &:focus {\r\n        outline: none;\r\n        }\r\n\r\n        &:focus ~ .form-input-label {\r\n            ${shrinkLabel}\r\n        }\r\n    }\r\n\r\n    input[type = 'password'] {\r\n        letter-spacing: 0.3em;\r\n    }\r\n\r\n    .form-input-label {\r\n        color: var(--input-color);\r\n        font-size: 1.4rem;\r\n        font-weight: normal;\r\n        position: absolute;\r\n        pointer-events: none;\r\n        left: 1.5rem;\r\n        top: 1rem;\r\n        transition: 300ms ease all;\r\n\r\n        &.shrink {\r\n            ${shrinkLabel}\r\n        }\r\n    }\r\n\r\n    @media all and (max-width: 500px) {\r\n        .form-input {\r\n            font-size: 1.4rem;\r\n        }\r\n        /* padding: 1rem .5rem 1rem 2rem; */\r\n    }\r\n`\r\n","import React from 'react'\r\n\r\nimport { InputGroup } from './custom-input.styles'\r\n\r\nconst CustomInput = ({ handleChange, label, name, ...otherProps }) => {\r\n    return (\r\n        <InputGroup>\r\n            <input\r\n                className='form-input'\r\n                name={name}\r\n                onChange={handleChange}\r\n                {...otherProps}\r\n            />\r\n            {label ? (\r\n                <label htmlFor={name} className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}>\r\n                    {label}\r\n                </label>\r\n            ) : null\r\n            }\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default CustomInput","import { useEffect, useState } from 'react'\r\n\r\nexport const useFetch = (path, skip = false, method = \"GET\") => {\r\n    const [response, setResponse] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [message, setMessage] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [refetchIndex, setRefetchIndex] = useState(0)\r\n\r\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\r\n\r\n    const requestOptions = {\r\n        method: method,\r\n        // headers: myHeaders,\r\n        // body: raw,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (skip) return\r\n            setIsLoading(true)\r\n            try {\r\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\r\n                const data = await res.json()\r\n\r\n                setMessage(data.message)\r\n                setResponse(data)\r\n                setIsLoading(false)\r\n            } catch (err) {\r\n                setError(err)\r\n                setIsLoading(false)\r\n                setMessage(\"Niečo sa pokazilo\")\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refetchIndex])\r\n\r\n    return { response, isLoading, error, message, refetch }\r\n}\r\n\r\nexport const useFetchByQuery = (path, queryObj, skip = false) => {\r\n    const [response, setResponse] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [refetchIndex, setRefetchIndex] = useState(0)\r\n\r\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify(queryObj)\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (skip) return\r\n            setIsLoading(true)\r\n            try {\r\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\r\n                const data = await res.json()\r\n\r\n                setResponse(data)\r\n                setIsLoading(false)\r\n            } catch (err) {\r\n                setError(err)\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refetchIndex, path])\r\n\r\n    return { response, isLoading, error, refetch }\r\n}\r\n\r\nexport const useFetchById = (path, id, skip = false) => {\r\n    const [response, setResponse] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [refetchIndex, setRefetchIndex] = useState(0)\r\n\r\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (skip) return\r\n            setIsLoading(true)\r\n            try {\r\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}/${id}`, requestOptions)\r\n                const data = await res.json()\r\n\r\n                setResponse(data)\r\n                setIsLoading(false)\r\n            } catch (err) {\r\n                setError(err)\r\n                setIsLoading(false)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refetchIndex, path, id])\r\n\r\n    return { response, isLoading, error, refetch }\r\n}\r\n","export const brands = [\r\n    \"Adidas\",\r\n    \"Armani Exchange\",\r\n    \"Arnette\",\r\n    \"Blackfin\",\r\n    \"Blumarine\",\r\n    \"Burberry\",\r\n    \"Bvlgari\",\r\n    \"Calvin Klein\",\r\n    \"Carolina Herrera\",\r\n    \"Carrera\",\r\n    \"David Beckham\",\r\n    \"Dior\",\r\n    \"Dolce & Gabbana\",\r\n    \"Elle\",\r\n    \"Emporio Armani\",\r\n    \"Esprit\",\r\n    \"Etnia Barcelona\",\r\n    \"Fendi\",\r\n    \"Fossil\",\r\n    \"Furla\",\r\n    \"Giorgio Armani\",\r\n    \"Givenchy\",\r\n    \"Gucci\",\r\n    \"Guess\",\r\n    \"H.I.S\",\r\n    \"Hawkers\",\r\n    \"Hugo Boss\",\r\n    \"Jaguar\",\r\n    \"Jimmy Choo\",\r\n    \"Lacoste\",\r\n    \"Liu Jo\",\r\n    \"Marc Jacobs\",\r\n    \"Max Mara\",\r\n    \"Max&Co\",\r\n    \"Meller\",\r\n    \"Mexx\",\r\n    \"Michael Kors\",\r\n    \"Moschino\",\r\n    \"Oakley\",\r\n    \"Persol\",\r\n    \"Polaroid\",\r\n    \"Police\",\r\n    \"Polo Ralph Lauren\",\r\n    \"Prada\",\r\n    \"Prada Linea Rossa\",\r\n    \"Ralph\",\r\n    \"Ralph Lauren\",\r\n    \"Ray-Ban\",\r\n    \"Salvatore Ferragamo\",\r\n    \"Smith\",\r\n    \"Strellson\",\r\n    \"Tiffany&Co.\",\r\n    \"Tom Ford\",\r\n    \"Tommy Hilfiger\",\r\n    \"Versace\",\r\n    \"Vogue\"\r\n]\r\n\r\nexport const lensesBrands = [\r\n    \"Acuvue\",\r\n    \"Adore\",\r\n    \"Air Optix\",\r\n    \"Biofinity\",\r\n    \"Biomedics\",\r\n    \"Clariti\",\r\n    \"ColourVue\",\r\n    \"Comfilcon A\",\r\n    \"Dailies\",\r\n    \"Freshlook\",\r\n    \"Lenjoy\",\r\n    \"Proclear\",\r\n    \"Purevision\",\r\n    \"Soflens\",\r\n]\r\n\r\nexport const retailNames = [\r\n    \"eshop\",\r\n    \"Centrálny sklad\",\r\n    \"Obchodná, Bratislava\",\r\n    \"Miletičova, Bratislava\",\r\n    \"Vajnory, Bratislava\",\r\n    \"Vajnorská 53, Bratislava\",\r\n    \"OC Branč, Senica\"\r\n]\r\n\r\nexport const retailNamesTabs = [\r\n    {\r\n        id: 0,\r\n        name: \"Všetky\",\r\n    },\r\n    {\r\n        id: 1,\r\n        name: \"Centrálny sklad\",\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Obchodná, Bratislava\",\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Miletičova, Bratislava\",\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Vajnory, Bratislava\",\r\n    },\r\n    {\r\n        id: 5,\r\n        name: \"Vajnorská 53, Bratislava\",\r\n    },\r\n    {\r\n        id: 6,\r\n        name: \"OC Branč, Senica\",\r\n    },\r\n]\r\n\r\nexport const glassesColors = [\r\n    \"Čierná\",\r\n    \"Modrá\",\r\n    \"Červená\",\r\n    \"Sivá\",\r\n    \"Zlatá\",\r\n    \"Strieborná\",\r\n    \"Hnedá\",\r\n    \"Fialová\",\r\n    \"Zelená\",\r\n    \"Sedá\",\r\n    \"Bordová\",\r\n]\r\n\r\nexport const glassesMaterials = [\r\n    \"Acetát\",\r\n    \"Kov\",\r\n    \"Titán\",\r\n    \"TR90\",\r\n    \"Patent\",\r\n    \"Optyl\",\r\n]\r\n\r\nexport const glassesShapes = [\r\n    \"Pilot\",\r\n    \"Squared\",\r\n    \"Browline\",\r\n    \"Cat eye\",\r\n    \"Tiny\",\r\n    \"Oversize\",\r\n    \"Okrúhle\",\r\n    \"Oválne\",\r\n    \"Obdĺžnikové\",\r\n    \"Flat top\",\r\n    \"Špeciálne\"\r\n]\r\n\r\nexport const formatPrice = (price = \"\") => {\r\n    price.toString()\r\n    let value = 0\r\n    if (price.includes(',')) {\r\n        if (price.split(',')[1].length === 1) {\r\n            value = price.split(',')[0] + price.split(',')[1] + \"0\"\r\n            return Number(value)\r\n        } else {\r\n            value = price.split(',')[0] + price.split(',')[1]\r\n            return Number(value)\r\n        }\r\n    } else {\r\n        return Number(price * 100)\r\n    }\r\n}\r\n\r\nexport const formatfloatNumber = number => {\r\n    let value = 0\r\n\r\n    if (number.includes(',')) {\r\n        value = number.split(',')[0] + '.' + number.split(',')[1]\r\n        return value\r\n    } else {\r\n        return number\r\n    }\r\n}","import styled from 'styled-components'\r\nimport { paddingStyles } from '../../global.styles'\r\n\r\nexport const Container = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    /* height: 100%; */\r\n    overflow-y: scroll;\r\n    overflow-x: visible;\r\n    scroll-behavior: smooth;\r\n    ${paddingStyles};\r\n    padding-top: 1.5rem;\r\n    padding-bottom: 1.5rem;\r\n    color: var(--primary-text-color);\r\n    /* border: 1px solid red; */\r\n\r\n\r\n\r\n\r\n    @media all and (max-width: 1150px) {\r\n        margin-bottom: 8rem;\r\n\r\n        @media all and (max-width: 700px) {\r\n            overflow-x: scroll;\r\n        }\r\n    }\r\n\r\n    ::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n\r\n    /* Track */\r\n    ::-webkit-scrollbar-track {\r\n        background:  var(--background-primary-color);\r\n    }\r\n\r\n    /* Handle */\r\n    ::-webkit-scrollbar-thumb {\r\n        background: var(--primary-color);\r\n    }\r\n\r\n    /* Handle on hover */\r\n    ::-webkit-scrollbar-thumb:hover {\r\n        background: var(--primary-color);\r\n    }\r\n`\r\n\r\nexport const FixedContainer = styled.div`\r\n    max-width: 125rem;\r\n    width: 100%;\r\n`","import React from 'react'\r\nimport { Container, FixedContainer } from './scroll-container.styles'\r\n\r\nconst ScrollContainer = ({ children }) => {\r\n    return (\r\n        <Container>\r\n            <FixedContainer>\r\n                {children}\r\n            </FixedContainer>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default ScrollContainer","import styled from 'styled-components'\r\n\r\nexport const CheckboxContainer = styled.div`\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    font-size: 1.5rem;\r\n    font-weight: 700;\r\n    /* margin-right: 2rem; */\r\n    background-color: ${({ isActive }) => isActive ? \"var(--primary-color)\" : \"var(--body-background-primary-color)\"};\r\n    color: ${({ isActive }) => isActive ? \"var(--button-font-color)\" : \"var(--secondary-text-color)\"};\r\n    /* font-weight: ${({ isActive }) => isActive ? \"border\" : \"normal\"}; */\r\n    padding: .8rem 3rem;\r\n    border-radius: .2rem;\r\n    transition: all .2s ease-out;\r\n\r\n    @media all and (max-width: 500px) {\r\n        padding: 0.5rem 1.5rem;\r\n        font-size: 1.4rem;\r\n    }\r\n`","import React from 'react'\r\n\r\nimport { CheckboxContainer } from './custom-checkbox.styles'\r\n\r\nconst CustomCheckbox = ({ label, isActive, handleClick, ...otherprops }) => {\r\n    return (\r\n        <CheckboxContainer isActive={isActive} onClick={handleClick} {...otherprops}>\r\n            {label}\r\n        </CheckboxContainer>\r\n    )\r\n}\r\n\r\nexport default CustomCheckbox\r\n","import styled, { css } from \"styled-components\"\r\n\r\nconst shrinkLabel = css`\r\n    left: .5rem;\r\n    top: -14px;\r\n    font-size: 12px;\r\n    color: var(--input-color);\r\n`\r\nexport const InputGroup = styled.div`\r\n    position: relative;\r\n    /* margin: 45px 0; */\r\n\r\n    .form-input {\r\n        background: none;\r\n        background-color: var(--input-background-color);\r\n        color: var(--input-color);\r\n\r\n        font-size: 1.5rem;\r\n        padding: .5rem .5rem .5rem 2rem;\r\n        display: block;\r\n        width: 100%;\r\n        border: none;\r\n        border-radius: .5rem;\r\n        /* border-bottom: 1px solid #000; */\r\n        margin: 25px 0;\r\n        font-family: inherit;\r\n        resize: none;\r\n\r\n        &:focus {\r\n        outline: none;\r\n        }\r\n\r\n        &:focus ~ .form-input-label {\r\n            ${shrinkLabel}\r\n        }\r\n    }\r\n\r\n    .form-input-label {\r\n        color: var(--input-color);\r\n        font-size: 1.4rem;\r\n        font-weight: normal;\r\n        position: absolute;\r\n        pointer-events: none;\r\n        left: 1.5rem;\r\n        top: .6rem;\r\n        transition: 300ms ease all;\r\n\r\n        &.shrink {\r\n            ${shrinkLabel}\r\n        }\r\n    }\r\n`\r\n","import React from 'react'\r\n\r\nimport { InputGroup } from './custom-textarea.styles'\r\n\r\nconst CustomTextarea = ({ handleChange, label, name, ...otherProps }) => {\r\n    return (\r\n        <InputGroup>\r\n            <textarea\r\n                className='form-input'\r\n                name={name}\r\n                onChange={handleChange}\r\n                {...otherProps}\r\n            />\r\n            {label ? (\r\n                <label htmlFor={name} className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}>\r\n                    {label}\r\n                </label>\r\n            ) : null\r\n            }\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default CustomTextarea","export const fetchUsers = (token) => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n\r\n\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users`, requestOptions)\r\n\r\n}\r\n\r\nexport const fetchUser = (token, id) => {\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\r\n}\r\n\r\nexport const patchUser = (token, user, id) => {\r\n    // const {\r\n    //     _id: id,\r\n    //     address,\r\n    //     admin,\r\n    //     city,\r\n    //     country,\r\n    //     email,\r\n    //     lenses: {\r\n    //         cylinder,\r\n    //         cylinderAxes,\r\n    //         diopters,\r\n    //         distance,\r\n    //         addition,\r\n    //         basis,\r\n    //         prism,\r\n    //     },\r\n    //     name,\r\n    //     phone,\r\n    //     psc,\r\n    //     premises\r\n    // } = user\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n\r\n    const raw = JSON.stringify({\r\n        ...user\r\n        // address: address || undefined,\r\n        // admin: admin,\r\n        // premises: Number(premises) === 0 ? undefined : premises,\r\n        // city: city || undefined,\r\n        // country: country || undefined,\r\n        // email: email || undefined,\r\n        // lenses: {\r\n        //     cylinder: cylinder,\r\n        //     cylinderAxes: cylinderAxes,\r\n        //     diopters: diopters,\r\n        //     distance: distance,\r\n        //     addition: addition,\r\n        //     basis: basis,\r\n        //     prism: prism,\r\n        // },\r\n        // name: name,\r\n        // phone: phone || undefined,\r\n        // psc: psc || undefined,\r\n    })\r\n\r\n    const requestOptions = {\r\n        method: 'PATCH',\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\r\n}\r\n\r\nexport const postUser = (token, user) => {\r\n    const {\r\n        name,\r\n        email,\r\n    } = user\r\n\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n\r\n    const raw = JSON.stringify({\r\n        email: email,\r\n        name: name,\r\n    })\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\r\n}\r\n\r\nexport const postAdmin = (token, user) => {\r\n\r\n    const {\r\n        name,\r\n        email,\r\n        password,\r\n        premises,\r\n        admin\r\n    } = user\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n\r\n    const raw = JSON.stringify({\r\n        admin: Number(admin),\r\n        email: email,\r\n        name: name,\r\n        premises: Number(premises),\r\n        password\r\n    })\r\n\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: raw,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\r\n}","export const initUserObj = {\r\n    address: \"\",\r\n    admin: 0,\r\n    premises: 0,\r\n    boughtProducts: {},\r\n    city: \"\",\r\n    country: \"\",\r\n    date: \"\",\r\n    email: \"\",\r\n    finishedRegistration: false,\r\n    company: {\r\n        ico: \"\",\r\n        dic: \"\",\r\n        icdph: \"\",\r\n        address: '',\r\n        psc: '',\r\n        country: '',\r\n    },\r\n    lenses: {\r\n        cylinder: [1001, 1001, 1001, 1001],\r\n        cylinderAxes: [1001, 1001, 1001, 1001],\r\n        diopters: [1001, 1001, 1001, 1001],\r\n        distance: [1001, 1001, 1001, 1001],\r\n        addition: [1001, 1001, 1001, 1001],\r\n        basis: [1001, 1001, 1001, 1001],\r\n        prism: [1001, 1001, 1001, 1001],\r\n    },\r\n    name: \"\",\r\n    orders: [],\r\n    phone: \"\",\r\n    psc: \"\",\r\n    tempUser: false,\r\n    totalSpent: 0,\r\n    watchList: [],\r\n    fName: \"\",\r\n    lName: \"\",\r\n    password: '',\r\n    confirmPassword: \"\",\r\n    birthDate: Date.now(),\r\n    optometrist: false\r\n\r\n}","import React, { createContext, useState, useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AuthContext } from '../auth/auth.context'\r\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\r\n// import { OrderContext } from '../order/order.context'\r\n\r\nimport {\r\n    // fetchUsers,\r\n    fetchUser,\r\n    patchUser,\r\n    postAdmin,\r\n    postUser,\r\n} from './user.queries'\r\n\r\nimport {\r\n    initUserObj\r\n} from './user.utils'\r\n\r\nexport const UserContext = createContext({\r\n    isUpdating: false,\r\n    activeIndex: 0,\r\n    handleChangeFilterItem: () => { },\r\n    filterItems: [],\r\n    totalCount: 0,\r\n    users: null,\r\n    user: null,\r\n    // getUsers: () => { },\r\n    getUser: () => { },\r\n    handleChange: () => { },\r\n    handleParameterChange: () => { },\r\n    handleCompanyChange: () => { },\r\n    updateUser: () => { },\r\n    resetUser: () => { },\r\n    formToShow: 0,\r\n    switchFormButtons: [],\r\n    toggleUserForm: () => { },\r\n    createUser: () => { },\r\n    getFilteredUsers: () => { },\r\n    getUserByQuery: () => { },\r\n    deleteUser: () => { },\r\n})\r\n\r\nconst UserProvider = ({ children }) => {\r\n    const { push } = useHistory()\r\n    const { token } = useContext(AuthContext)\r\n    const {\r\n        closeModal,\r\n        getMessage,\r\n        setIsLoading,\r\n        setShowModal\r\n    } = useContext(LoadingModalContext)\r\n\r\n    // ------------------------\r\n\r\n    const [user, setUser] = useState(initUserObj)\r\n    const [users, setUsers] = useState(null)\r\n    const [totalCount] = useState(0)\r\n\r\n    // ------------------------\r\n\r\n    const [isUpdating, setIsUpdating] = useState(false)\r\n    const [activeIndex, setActiveIndex] = useState(0)\r\n    const filterItems = [\r\n        {\r\n            id: 0,\r\n            name: \"Zákazníci\",\r\n            filter: 0,\r\n        },\r\n        {\r\n            id: 1,\r\n            name: \"Zamestnanci\",\r\n            filter: 1,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Vedúci\",\r\n            filter: 2,\r\n        },\r\n        // {\r\n        //     id: 3,\r\n        //     name: \"Velký brat\",\r\n        //     filter: 3,\r\n        // },\r\n        // {\r\n        //     id: 4,\r\n        //     name: \"Odstránené\",\r\n        //     filter: 3\r\n        // }\r\n    ]\r\n\r\n    // ------------------------\r\n\r\n    const [formToShow, setFormToShow] = useState(0)\r\n    const switchFormButtons = [\r\n        {\r\n            name: \"Zákazník\"\r\n        },\r\n        {\r\n            name: \"Zamestnanec\"\r\n        }\r\n    ]\r\n\r\n    const toggleUserForm = (e, idx) => {\r\n        e.preventDefault()\r\n        setFormToShow(idx)\r\n    }\r\n\r\n    // ------------------------\r\n\r\n\r\n    const handleChangeFilterItem = (itemIndex) => {\r\n        setActiveIndex(itemIndex)\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target\r\n\r\n        setUser({\r\n            ...user,\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    const handleParameterChange = (e, idx) => {\r\n        const { name, value } = e.target\r\n        let arr = user.lenses[name]\r\n        arr[idx] = value === '' ? 1001 : value\r\n        setUser({\r\n            ...user,\r\n            lenses: {\r\n                ...user.lenses,\r\n                [name]: arr\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleCompanyChange = (e) => {\r\n        const { name, value } = e.target\r\n        setUser({\r\n            ...user,\r\n            company: {\r\n                ...user.company,\r\n                [name]: value\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUser({\r\n            ...user,\r\n            name: user?.fName + \" \" + user?.lName\r\n        })\r\n    }, [user?.fName, user?.lName])\r\n\r\n    const resetUser = () => {\r\n        setUser(initUserObj)\r\n        setIsUpdating(false)\r\n        setFormToShow(0)\r\n    }\r\n\r\n    // ------------------------\r\n    // USER ACTIONS\r\n    // ------------------------\r\n\r\n    // Get all users\r\n    // const getUsers = async () => {\r\n    //     setIsLoading(true)\r\n    //     setShowModal(true)\r\n\r\n    //     try {\r\n    //         const response = await fetchUsers(token)\r\n    //         const data = await response.json()\r\n\r\n    //         console.log(data)\r\n    //         if (data.users) {\r\n    //             setUsers(data.users)\r\n    //             setTotalCount(data.count)\r\n    //             setIsLoading(false)\r\n    //             closeModal()\r\n\r\n    //         } else {\r\n    //             getMessage(data.message)\r\n    //             setIsLoading(false)\r\n    //         }\r\n    //     } catch (err) {\r\n    //         console.log(err)\r\n    //         getMessage(\"Nieco sa pokazilo\")\r\n    //         setIsLoading(false)\r\n    //     }\r\n    // }\r\n\r\n    // Get single user\r\n    const getUser = async (id) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n        setIsUpdating(true)\r\n\r\n        try {\r\n            const response = await fetchUser(token, id)\r\n            const data = await response.json()\r\n\r\n            if (data.user) {\r\n                setUser({\r\n                    ...user,\r\n                    ...data.user,\r\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\r\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\r\n                })\r\n                setIsLoading(false)\r\n                closeModal()\r\n\r\n            } else {\r\n                getMessage(data.message)\r\n                setIsLoading(false)\r\n            }\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // Update user\r\n    const updateUser = async (user, id, path, refetchUser, close, addUser) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        try {\r\n            const response = await patchUser(token, user, id)\r\n            const data = await response.json()\r\n\r\n            if (data.error) {\r\n                getMessage(data.messageSK)\r\n                setIsLoading(false)\r\n                return\r\n            }\r\n\r\n\r\n            setIsLoading(false)\r\n            closeModal()\r\n\r\n            if (path === 'order') {\r\n                push(`/dashboard/objednavky/${id}`)\r\n            } else if (path === 'profile') {\r\n                push(`/dashboard/zakaznici/${id}`)\r\n            } else if (path === 'isOrder') {\r\n                setUser({\r\n                    ...user,\r\n                    ...data.user,\r\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\r\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\r\n                })\r\n\r\n                addUser({\r\n                    ...user,\r\n                    ...data.user,\r\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\r\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\r\n                })\r\n                // console.log(\"REFETCH USER\")\r\n                // console.log(\"REFETCH USER\")\r\n                // console.log(\"REFETCH USER\")\r\n                // refetchUser()\r\n                close()\r\n            } else {\r\n                push(\"/dashboard/zakaznici\")\r\n            }\r\n\r\n            getFilteredUsers({\r\n                filters: {\r\n                    admin: activeIndex\r\n                }\r\n            })\r\n            // http://localhost:1000/#/dashboard/zakaznici\r\n\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const createUser = async (user, path) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        try {\r\n            if (formToShow === 0) {\r\n                let data = {}\r\n                if (!user._id) {\r\n                    const response = await postUser(token, user)\r\n                    data = await response.json()\r\n\r\n                    if (data.error) {\r\n                        getMessage(data.message)\r\n\r\n                        if (data.type === 'email') {\r\n                            getMessage(\"Email existuje\")\r\n                        }\r\n                        if (data.error === 'format' && data.message.includes('email')) {\r\n                            getMessage(\"Email musi byt platny email\")\r\n                        }\r\n                        setIsLoading(false)\r\n                        return\r\n                    }\r\n\r\n                    setUser({\r\n                        ...data.user,\r\n                        _id: data.user._id\r\n                    })\r\n                }\r\n\r\n                const userId = data.user ? data.user._id : user._id\r\n\r\n                updateUser({\r\n                    ...user\r\n                }, userId, path)\r\n\r\n                // setIsLoading(false)\r\n                // getUsers()\r\n                // push('/dashboard/zakaznici')\r\n                // closeModal()\r\n\r\n            } else {\r\n                if (user.password !== user.confirmPassword) {\r\n                    getMessage(\"Heslá sa nezhodujú\")\r\n                    setIsLoading(false)\r\n                    return\r\n                }\r\n\r\n                const response = await postAdmin(token, user)\r\n                const data = await response.json()\r\n\r\n                if (data.error) {\r\n                    getMessage(data.message)\r\n                    setIsLoading(false)\r\n                    return\r\n                }\r\n\r\n                setIsLoading(false)\r\n                getFilteredUsers({\r\n                    filters: {\r\n                        admin: activeIndex\r\n                    }\r\n                })\r\n\r\n                push(\"/dashboard/zakaznici\")\r\n                closeModal()\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Niečo sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // ----------------------------------------------\r\n    // ----------------------------------------------\r\n    // ----------------------------------------------\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const deleteUser = async (id) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const requestOptions = {\r\n            method: 'DELETE',\r\n            headers: myHeaders,\r\n            // body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.user) {\r\n\r\n                push(\"/dashboard/zakaznici\")\r\n                setIsLoading(false)\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            getMessage(data.messageSK)\r\n            setIsLoading(false)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Niečo sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const getFilteredUsers = async (filter) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const raw = JSON.stringify(filter)\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.users) {\r\n                setUsers(data.users)\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            getMessage(data.messageSK)\r\n            setIsLoading(false)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const getUserByQuery = async (query) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const raw = JSON.stringify(query)\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.users) {\r\n                setUsers(data.users)\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            getMessage(data.message)\r\n            setIsLoading(false)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <UserContext.Provider\r\n            value={{\r\n                isUpdating,\r\n                activeIndex,\r\n                handleChangeFilterItem,\r\n                filterItems,\r\n                users,\r\n                user,\r\n                totalCount,\r\n                // getUsers,\r\n                getUser,\r\n                handleChange,\r\n                handleParameterChange,\r\n                handleCompanyChange,\r\n                updateUser,\r\n                resetUser,\r\n                formToShow,\r\n                switchFormButtons,\r\n                toggleUserForm,\r\n                createUser,\r\n                getFilteredUsers,\r\n                getUserByQuery,\r\n                deleteUser\r\n            }}\r\n        >\r\n            {children}\r\n        </UserContext.Provider>\r\n    )\r\n}\r\n\r\nexport default UserProvider","import styled from 'styled-components'\r\n\r\nexport const InputRow = styled.div`\r\n    display:flex;\r\n    align-items: center;\r\n\r\n    p {\r\n        margin-top: 1.8rem;\r\n        margin-left: 2rem;\r\n            opacity: .75;\r\n\r\n        span {\r\n            font-weight: 700;\r\n        }\r\n    }\r\n\r\n    @media all and (max-width: 800px) {\r\n        flex-direction: column-reverse;\r\n        align-items: flex-start;\r\n\r\n        p {\r\n            margin-left: unset;\r\n        }\r\n    }\r\n`","import React from 'react'\r\n\r\nimport { InputRow } from './product-input-row.styles'\r\n\r\nconst ProductInputRow = ({ children, label, example, ...otherprops }) => {\r\n    return (\r\n        <InputRow {...otherprops}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                <p>{label + \" \"}<span>{example}</span></p>\r\n            </div>\r\n        </InputRow>\r\n    )\r\n}\r\n\r\nexport default ProductInputRow\r\n","import React, { createContext, useContext } from 'react'\r\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\r\nimport { AuthContext } from '../auth/auth.context'\r\n\r\nexport const ExaminationContext = createContext({\r\n    createExamination: () => { },\r\n    updateExamination: () => { },\r\n    deleteExamination: () => { },\r\n})\r\n\r\nconst ExaminationProvider = ({ children }) => {\r\n    const { token } = useContext(AuthContext)\r\n    const {\r\n        closeModal,\r\n        getMessage,\r\n        setIsLoading,\r\n        setShowModal\r\n    } = useContext(LoadingModalContext)\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const createExamination = async (examsToAdd) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const raw = JSON.stringify(examsToAdd)\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/exams/`, requestOptions)\r\n            const data = await response.json()\r\n\r\n\r\n            if (data.exam) {\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            getMessage(data.message)\r\n            setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const updateExamination = async (examToUpdate, examId) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const raw = JSON.stringify(examToUpdate)\r\n\r\n        const requestOptions = {\r\n            method: 'PATCH',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/exams/${examId}`, requestOptions)\r\n            const data = await response.json()\r\n\r\n\r\n            if (data.exam) {\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            getMessage(data.message)\r\n            setIsLoading(false)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const deleteExamination = async (examId) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const requestOptions = {\r\n            method: 'DELETE',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/exams/${examId}`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.exam) {\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            getMessage(data.message)\r\n            setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ExaminationContext.Provider\r\n            value={{\r\n                createExamination,\r\n                updateExamination,\r\n                deleteExamination\r\n            }}\r\n        >\r\n            {children}\r\n        </ExaminationContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ExaminationProvider","import styled from 'styled-components'\r\n\r\nexport const TableContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 2rem repeat(7, 7.5rem);\r\n    margin-bottom: 3rem;\r\n`\r\n\r\nexport const TitleCol = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(4, 5rem);\r\n    div {\r\n        align-self: center;\r\n        display:flex;\r\n        justify-content: space-between;\r\n    }\r\n`\r\n\r\nexport const Col = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(4, 5rem);\r\n    div {\r\n        text-align:center;\r\n        align-self: center;\r\n        margin-left: .5rem;\r\n\r\n\r\n        &:nth-child(1) {\r\n            align-self: center;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 100%;\r\n            border: none;\r\n            padding: 1rem .5rem;\r\n            text-align: center;\r\n            font-family: inherit;\r\n            font-size: inherit;\r\n            background-color: var(--input-background-color);\r\n            color: var(--input-color);\r\n            border-radius: .5rem;\r\n            outline: none;\r\n\r\n            &:focus {\r\n                outline: none;\r\n            }\r\n\r\n            &:disabled {\r\n                opacity: .83;\r\n            }\r\n        }\r\n\r\n        input[type=number]::-webkit-inner-spin-button, \r\n        input[type=number]::-webkit-outer-spin-button {  \r\n            opacity: 1;\r\n\r\n        }\r\n    }\r\n`\r\n\r\nexport const OsContainer = styled.div`\r\n        text-align:center;\r\n        align-self: center;\r\n        margin-left: .5rem;\r\n\r\n\r\n        &:nth-child(1) {\r\n            align-self: center;\r\n        }\r\n\r\n        input {\r\n            display:block;\r\n            width: 100%;\r\n            border: none;\r\n            padding: 1rem .5rem;\r\n            text-align: center;\r\n            font-family: inherit;\r\n            font-size: inherit;\r\n            background-color: var(--input-background-color);\r\n            color: var(--input-color);\r\n            border-radius: .5rem;\r\n            outline: none;\r\n\r\n            &:focus {\r\n                outline: none;\r\n            }\r\n        }\r\n\r\n        input[type=number]::-webkit-inner-spin-button, \r\n        input[type=number]::-webkit-outer-spin-button {  \r\n            display:none;\r\n            opacity: 0;\r\n\r\n        }\r\n`","import React, { useEffect } from 'react'\r\n\r\nimport { formatfloatNumber } from '../../utils/warehouse.utils'\r\n\r\nimport {\r\n    TableContainer,\r\n    TitleCol,\r\n    Col,\r\n    OsContainer\r\n} from './parameters-table.styles'\r\n\r\nconst ParametersTable = ({ parameters, handleChange, disabledInputs = false }) => {\r\n    const checkParameters = (parameter, idx) => {\r\n        if (parameter.length === 0) {\r\n            return \"\"\r\n        }\r\n        if (parameter[idx] === 1001) {\r\n            return \"\"\r\n        }\r\n\r\n        return parameter[idx]\r\n    }\r\n\r\n    const formatParameter = (e, idx) => {\r\n        const value = formatfloatNumber(e.target.value)\r\n        handleChange({\r\n            target: {\r\n                value: value,\r\n                name: e.target.name\r\n            }\r\n        }, idx)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (handleChange) {\r\n            if (parameters.addition[0] !== 1001) {\r\n                handleChange({\r\n                    target: {\r\n                        name: \"diopters\",\r\n                        value: (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))).toFixed(2)\r\n                    }\r\n                }, 2)\r\n            }\r\n\r\n            if (parameters.addition[0] === 1001) {\r\n                handleChange({\r\n                    target: {\r\n                        name: \"diopters\",\r\n                        value: 1001\r\n                    }\r\n                }, 2)\r\n            }\r\n\r\n            if (parameters.addition[1] !== 1001) {\r\n                handleChange({\r\n                    target: {\r\n                        name: \"diopters\",\r\n                        value: (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))).toFixed(2)\r\n                    }\r\n                }, 3)\r\n                return\r\n            }\r\n\r\n\r\n            if (parameters.addition[1] === 1001) {\r\n                handleChange({\r\n                    target: {\r\n                        name: \"diopters\",\r\n                        value: 1001\r\n                    }\r\n                }, 3)\r\n            }\r\n        }\r\n    }, [parameters.diopters[0], parameters.addition[0], parameters.diopters[1], parameters.addition[1]])\r\n\r\n    return (\r\n        <TableContainer>\r\n            <TitleCol>\r\n                <div>{\" \"}</div>\r\n                <div>\r\n                    <p>P</p>\r\n                </div>\r\n                <div>\r\n                    <p>Ľ</p>\r\n                </div>\r\n                <div>\r\n                    <p>P</p>\r\n                </div>\r\n                <div>\r\n                    <p>Ľ</p>\r\n                </div>\r\n            </TitleCol>\r\n\r\n\r\n            <Col>\r\n                <div>sph</div>\r\n\r\n                {[...Array(4)].map((value, idx) => {\r\n                    return (\r\n                        <div key={idx}>\r\n                            <input\r\n                                type='text'\r\n                                value={checkParameters(parameters.diopters, idx)}\r\n                                name=\"diopters\"\r\n                                onChange={(e) => handleChange(e, idx)}\r\n                                disabled={disabledInputs}\r\n                                onBlur={e => formatParameter(e, idx)}\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </Col>\r\n            <Col>\r\n                <div>cyl</div>\r\n\r\n                {[...Array(4)].map((value, idx) => {\r\n                    return (\r\n                        <div key={idx}>\r\n                            <input\r\n                                type='text'\r\n                                value={checkParameters(parameters.cylinder, idx)}\r\n                                name=\"cylinder\"\r\n                                onChange={(e) => handleChange(e, idx)}\r\n                                disabled={disabledInputs}\r\n                                onBlur={e => formatParameter(e, idx)}\r\n\r\n\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </Col>\r\n            <Col>\r\n                <div>ax</div>\r\n\r\n                {[...Array(4)].map((value, idx) => {\r\n                    return (\r\n                        <OsContainer key={idx}>\r\n                            <input\r\n                                type='text'\r\n                                value={checkParameters(parameters.cylinderAxes, idx)}\r\n                                name=\"cylinderAxes\"\r\n                                onChange={(e) => handleChange(e, idx)}\r\n                                disabled={disabledInputs}\r\n                                onBlur={e => formatParameter(e, idx)}\r\n\r\n\r\n                            />\r\n                        </OsContainer>\r\n                    )\r\n                })}\r\n            </Col>\r\n            <Col>\r\n                <div>PD</div>\r\n\r\n                {[...Array(4)].map((value, idx) => {\r\n                    return (\r\n                        <div key={idx}>\r\n                            <input\r\n                                type='text'\r\n                                value={checkParameters(parameters.distance, idx)}\r\n                                name=\"distance\"\r\n                                onChange={(e) => handleChange(e, idx)}\r\n                                disabled={disabledInputs}\r\n                                onBlur={e => formatParameter(e, idx)}\r\n\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </Col>\r\n            <Col>\r\n                <div>prizma</div>\r\n\r\n                {[...Array(4)].map((value, idx) => {\r\n                    return (\r\n                        <div key={idx}>\r\n                            <input\r\n                                type='text'\r\n                                value={checkParameters(parameters.prism, idx)}\r\n                                name=\"prism\"\r\n                                onChange={(e) => handleChange(e, idx)}\r\n                                disabled={disabledInputs}\r\n                                onBlur={e => formatParameter(e, idx)}\r\n\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </Col>\r\n            <Col>\r\n                <div>basis</div>\r\n\r\n                {[...Array(4)].map((value, idx) => {\r\n                    return (\r\n                        <div key={idx}>\r\n                            <input\r\n                                type='text'\r\n                                value={checkParameters(parameters.basis, idx)}\r\n                                name=\"basis\"\r\n                                onChange={(e) => handleChange(e, idx)}\r\n                                disabled={disabledInputs}\r\n                                onBlur={e => formatParameter(e, idx)}\r\n\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </Col>\r\n            <Col>\r\n                <div>addicia</div>\r\n\r\n                {[...Array(2)].map((value, idx) => {\r\n                    return (\r\n                        <div key={idx}>\r\n                            <input\r\n                                type='text'\r\n                                value={checkParameters(parameters.addition, idx)}\r\n                                name=\"addition\"\r\n                                onChange={(e) => handleChange(e, idx)}\r\n                                disabled={disabledInputs}\r\n                                onBlur={e => formatParameter(e, idx)}\r\n\r\n                            />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </Col>\r\n\r\n\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default ParametersTable\r\n"],"sourceRoot":""}