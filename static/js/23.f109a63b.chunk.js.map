{"version":3,"sources":["context/booking/booking.queries.jsx","context/booking/booking.context.jsx"],"names":["fetchSingleCalendar","id","fetch","process","fetchUserBookings","token","myHeaders","Headers","append","requestOptions","method","headers","redirect","BookingContext","createContext","calendar","calendars","getCalendars","getCalendar","bookings","getBookings","userBookings","getUserBookings","activeCalendar","resetBooking","selectedDate","name","value","setSelectedDate","BookingProvider","children","useContext","AuthContext","LoadingModalContext","getMessage","setIsLoading","setShowModal","closeModal","useState","setActiveCalendar","setCalendars","interval","startTimes","endTimes","daysIntoFuture","premises","allowMinutesBefore","exceptDays","setCalendar","a","response","json","data","error","message","console","log","idx","setBookings","setUserBookings","Provider"],"mappings":"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","file":"static/js/23.f109a63b.chunk.js","sourcesContent":["\n\nexport const fetchCalendars = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/calendars`)\n}\n\nexport const fetchSingleCalendar = (id) => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/calendars/${id}`)\n}\n\nexport const fetchBookings = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/bookings`)\n}\nexport const fetchBookingRows = () => {\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/booking/bookingRows`)\n}\n\nexport const fetchUserBookings = (token) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/booking/userBookings`, requestOptions)\n}","import React, { createContext, useState, useContext } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\n\nimport {\n    fetchCalendars,\n    fetchSingleCalendar,\n    fetchBookings,\n    // fetchBookingRows,\n    fetchUserBookings\n} from './booking.queries'\n\nexport const BookingContext = createContext({\n    calendar: null,\n    calendars: null,\n    getCalendars: () => { },\n    getCalendar: () => { },\n    bookings: null,\n    getBookings: () => { },\n    userBookings: null,\n    getUserBookings: () => { },\n    // bookingRows: null,\n    // getBookingRows: () => { },\n    activeCalendar: 0,\n    resetBooking: () => { },\n    selectedDate: {\n        name: \"\",\n        value: ''\n    },\n    setSelectedDate: () => { }\n})\n\nconst BookingProvider = ({ children }) => {\n    const { token } = useContext(AuthContext)\n    const {\n        getMessage,\n        setIsLoading,\n        setShowModal,\n        closeModal\n    } = useContext(LoadingModalContext)\n\n    // ------------------------\n    // CALENDAR ACTIONS\n    // ------------------------\n    const [activeCalendar, setActiveCalendar] = useState(0)\n    const [calendars, setCalendars] = useState(null)\n    const [calendar, setCalendar] = useState({\n        name: '',\n        interval: 30,\n        startTimes: [\"10/00\", \"10/00\", \"10/00\", \"10/00\", \"10/00\", \"X\", \"X\"],\n        endTimes: [\"16/00\", \"16/00\", \"18/00\", \"16/00\", \"16/00\", \"X\", \"X\"],\n        daysIntoFuture: 60,\n        premises: 1,\n        allowMinutesBefore: 120,\n        exceptDays: \"24/12/2020:00/00-23/59\"\n    })\n    const [selectedDate, setSelectedDate] = useState({\n        name: '',\n        value: ''\n    })\n\n    // Get all calendars\n    const getCalendars = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchCalendars()\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.message)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.calendars) {\n                setCalendars(data.calendars)\n                setIsLoading(false)\n                closeModal()\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // Get single calendar\n    const getCalendar = async (id, idx) => {\n        setIsLoading(true)\n        setShowModal(true)\n        setSelectedDate({\n            name: '',\n            value: ''\n        })\n\n        try {\n            const response = await fetchSingleCalendar(id)\n            const data = await response.json()\n\n            console.log(data)\n            if (data.calendar) {\n                setCalendar(data.calendar)\n                setActiveCalendar(idx)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // ------------------------\n    // BOOKINGS ACTIONS\n    // ------------------------\n    const [bookings, setBookings] = useState(null)\n    const [userBookings, setUserBookings] = useState(null)\n\n    const getBookings = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchBookings()\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.message)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.bookings) {\n                setBookings(data.bookings)\n                setIsLoading(false)\n                closeModal()\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getUserBookings = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await fetchUserBookings(token)\n            const data = await response.json()\n\n            if (data.userBookings) {\n                setUserBookings(data.userBookings)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const resetBooking = () => {\n        setActiveCalendar(0)\n        setCalendar({\n            name: '',\n            interval: 30,\n            startTimes: [\"10/00\", \"10/00\", \"10/00\", \"10/00\", \"10/00\", \"X\", \"X\"],\n            endTimes: [\"16/00\", \"16/00\", \"18/00\", \"16/00\", \"16/00\", \"X\", \"X\"],\n            daysIntoFuture: 60,\n            premises: 1,\n            allowMinutesBefore: 120,\n            exceptDays: \"24/12/2020:00/00-23/59\"\n        })\n    }\n\n    return (\n        <BookingContext.Provider\n            value={{\n                calendar,\n                calendars,\n                getCalendars,\n                getCalendar,\n                bookings,\n                getBookings,\n                userBookings,\n                getUserBookings,\n                // bookingRows,\n                // getBookingRows,\n                activeCalendar,\n                resetBooking,\n                selectedDate,\n                setSelectedDate,\n            }}\n        >\n            {children}\n        </BookingContext.Provider>\n    )\n}\n\nexport default BookingProvider"],"sourceRoot":""}