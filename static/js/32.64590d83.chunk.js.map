{"version":3,"sources":["context/orders/orders.context.jsx"],"names":["OrdersContext","createContext","orders","getPDF","getOrders","createOrder","updateOrder","finishOrder","cancelOrder","OrdersProvider","children","push","useHistory","useContext","LoadingModalContext","setIsLoading","setShowModal","getMessage","closeModal","token","AuthContext","useState","setOrders","myHeaders","Headers","append","a","requestOptions","method","headers","redirect","fetch","process","response","json","data","messageSK","console","log","orderId","isBlack","body","JSON","stringify","black","filename","setTimeout","win","window","open","focus","orderToCreate","orderObj","raw","error","order","_id","orderToUpdate","refetch","Provider","value"],"mappings":"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","file":"static/js/32.64590d83.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n\n\nexport const OrdersContext = createContext({\n    orders: null,\n    getPDF: () => { },\n    getOrders: () => { },\n    createOrder: () => { },\n    updateOrder: () => { },\n    finishOrder: () => { },\n    cancelOrder: () => { },\n})\n\nconst OrdersProvider = ({ children }) => {\n    const { push } = useHistory()\n    const { setIsLoading, setShowModal, getMessage, closeModal } = useContext(LoadingModalContext)\n    const { token } = useContext(AuthContext)\n    const [orders, setOrders] = useState(null)\n\n\n\n\n\n\n\n    // REQUESTS\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const getOrders = async () => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders`, requestOptions)\n            const data = await response.json()\n\n            if (data.orders) {\n                setOrders(data.orders)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n\n    }\n\n    const getPDF = async (orderId, isBlack = false) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            ...(isBlack) && {body: JSON.stringify({black: true})},\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}/createPdf`, requestOptions)\n            const data = await response.json()\n\n            if (data.filename) {\n                setIsLoading(false)\n                getMessage(data.messageSK)\n\n                setTimeout(() => {\n                    const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${data.filename}`, \"_blank\", \"noreferrer noopener\");\n                    win?.focus();\n                }, 100)\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createOrder = async (orderToCreate) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        let orderObj = {\n            ...orderToCreate\n        }\n\n        const raw = JSON.stringify(orderObj)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders`, requestOptions)\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.messageSK)\n                setIsLoading(false)\n                return\n            }\n\n            if (data.order) {\n                getOrders()\n                closeModal()\n                push('/dashboard/objednavky')\n\n                setTimeout(() => {\n                    getPDF(data.order._id)\n                    //     const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${data.order.pdfPath}`, \"_blank\", \"noreferrer noopener\");\n                    //     win?.focus();\n                }, 100)\n\n            }\n\n            // {`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${order.order.pdfPath}`} target=\"_blank\" rel=\"noreferrer noopener\"\n\n            // getMessage(data.messageSK)\n            // setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateOrder = async (orderToUpdate, orderId) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        let orderObj = {\n            ...orderToUpdate\n        }\n\n        const raw = JSON.stringify(orderObj)\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}`, requestOptions)\n            const data = await response.json()\n\n            if (data.order) {\n                getOrders()\n                closeModal()\n                push('/dashboard/objednavky')\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const finishOrder = async (orderId, refetch) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}/fulfill`, requestOptions)\n            const data = await response.json()\n\n            if (data.order) {\n                refetch()\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const cancelOrder = async (orderId, refetch) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}/cancel`, requestOptions)\n            const data = await response.json()\n\n            if (data.order) {\n                setTimeout(() => {\n                    refetch()\n                    closeModal()\n\n                }, 100)\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <OrdersContext.Provider\n            value={{\n                orders,\n                getPDF,\n                getOrders,\n                createOrder,\n                updateOrder,\n                finishOrder,\n                cancelOrder,\n            }}\n        >\n            {children}\n        </OrdersContext.Provider>\n    )\n}\n\nexport default OrdersProvider"],"sourceRoot":""}