{"version":3,"sources":["context/orders/orders.context.jsx"],"names":["OrdersContext","createContext","orders","getPDF","getOrders","createOrder","updateOrder","finishOrder","cancelOrder","OrdersProvider","children","push","useHistory","useContext","LoadingModalContext","setIsLoading","setShowModal","getMessage","closeModal","token","AuthContext","useState","setOrders","myHeaders","Headers","append","a","requestOptions","method","headers","redirect","fetch","process","response","json","data","messageSK","console","log","orderId","filename","setTimeout","win","window","open","focus","orderToCreate","orderObj","raw","JSON","stringify","body","error","order","_id","orderToUpdate","refetch","Provider","value"],"mappings":"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","file":"static/js/31.e0e0e066.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { AuthContext } from '../auth/auth.context'\r\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\r\n\r\n\r\nexport const OrdersContext = createContext({\r\n    orders: null,\r\n    getPDF: () => { },\r\n    getOrders: () => { },\r\n    createOrder: () => { },\r\n    updateOrder: () => { },\r\n    finishOrder: () => { },\r\n    cancelOrder: () => { },\r\n})\r\n\r\nconst OrdersProvider = ({ children }) => {\r\n    const { push } = useHistory()\r\n    const { setIsLoading, setShowModal, getMessage, closeModal } = useContext(LoadingModalContext)\r\n    const { token } = useContext(AuthContext)\r\n    const [orders, setOrders] = useState(null)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // REQUESTS\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"auth-token\", token);\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const getOrders = async () => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.orders) {\r\n                setOrders(data.orders)\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            getMessage(data.messageSK)\r\n            setIsLoading(false)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    const getPDF = async (orderId) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            // body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}/createPdf`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.filename) {\r\n                setIsLoading(false)\r\n                getMessage(data.messageSK)\r\n\r\n                setTimeout(() => {\r\n                    const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${data.filename}`, \"_blank\", \"noreferrer noopener\");\r\n                    win?.focus();\r\n                }, 100)\r\n            }\r\n\r\n            getMessage(data.messageSK)\r\n            setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const createOrder = async (orderToCreate) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        let orderObj = {\r\n            ...orderToCreate\r\n        }\r\n\r\n        const raw = JSON.stringify(orderObj)\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.error) {\r\n                getMessage(data.messageSK)\r\n                setIsLoading(false)\r\n                return\r\n            }\r\n\r\n            if (data.order) {\r\n                getOrders()\r\n                closeModal()\r\n                push('/dashboard/objednavky')\r\n\r\n                setTimeout(() => {\r\n                    getPDF(data.order._id)\r\n                    //     const win = window.open(`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${data.order.pdfPath}`, \"_blank\", \"noreferrer noopener\");\r\n                    //     win?.focus();\r\n                }, 100)\r\n\r\n            }\r\n\r\n            // {`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/pdf/${order.order.pdfPath}`} target=\"_blank\" rel=\"noreferrer noopener\"\r\n\r\n            // getMessage(data.messageSK)\r\n            // setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const updateOrder = async (orderToUpdate, orderId) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        let orderObj = {\r\n            ...orderToUpdate\r\n        }\r\n\r\n        const raw = JSON.stringify(orderObj)\r\n\r\n        const requestOptions = {\r\n            method: 'PATCH',\r\n            headers: myHeaders,\r\n            body: raw,\r\n            redirect: 'follow'\r\n        };\r\n\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.order) {\r\n                getOrders()\r\n                closeModal()\r\n                push('/dashboard/objednavky')\r\n            }\r\n\r\n            getMessage(data.messageSK)\r\n            setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const finishOrder = async (orderId, refetch) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}/fulfill`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.order) {\r\n                refetch()\r\n                closeModal()\r\n                return\r\n            }\r\n\r\n            getMessage(data.messageSK)\r\n            setIsLoading(false)\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const cancelOrder = async (orderId, refetch) => {\r\n        setIsLoading(true)\r\n        setShowModal(true)\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            redirect: 'follow'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/orders/${orderId}/cancel`, requestOptions)\r\n            const data = await response.json()\r\n\r\n            if (data.order) {\r\n                setTimeout(() => {\r\n                    refetch()\r\n                    closeModal()\r\n\r\n                }, 100)\r\n                return\r\n            }\r\n\r\n            getMessage(data.messageSK)\r\n            setIsLoading(false)\r\n\r\n        } catch (err) {\r\n            console.log(err)\r\n            getMessage(\"Nieco sa pokazilo\")\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <OrdersContext.Provider\r\n            value={{\r\n                orders,\r\n                getPDF,\r\n                getOrders,\r\n                createOrder,\r\n                updateOrder,\r\n                finishOrder,\r\n                cancelOrder,\r\n            }}\r\n        >\r\n            {children}\r\n        </OrdersContext.Provider>\r\n    )\r\n}\r\n\r\nexport default OrdersProvider"],"sourceRoot":""}