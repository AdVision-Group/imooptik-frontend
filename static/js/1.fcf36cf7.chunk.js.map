{"version":3,"sources":["components/user-form/user.form-styles.jsx","components/profile-order-overview/profile-order-overview.styles.jsx","components/profile-order-overview/profile-order-overview.component.jsx","components/examination-user/examination-user.styles.jsx","components/examination-user/examination-user.component.jsx","utils/parameters.utils.jsx","components/modal-optometrist-examination/modal-optometrist-examination.styles.jsx","components/modal-optometrist-examination/modal-optometrist-examination.component.jsx","components/examinations-overview/examinations-overview.styles.jsx","components/examinations-overview/examinations-overview.component.jsx","components/user-form/user-form.component.jsx","components/custom-input/custom-input.styles.jsx","components/custom-input/custom-input.component.jsx","hooks/useFetch.jsx","utils/warehouse.utils.jsx","components/scroll-container/scroll-container.styles.jsx","components/scroll-container/scroll-container.component.jsx","components/custom-checkbox/custom-checkbox.styles.jsx","components/custom-checkbox/custom-checkbox.component.jsx","components/custom-textarea/custom-textarea.styles.jsx","components/custom-textarea/custom-textarea.component.jsx","context/user/user.queries.jsx","context/user/user.utils.jsx","context/user/user.context.jsx","components/product-input-row/product-input-row.styles.jsx","components/product-input-row/product-input-row.component.jsx","context/examination/examination.context.jsx","components/parameters-table/parameters-table.styles.jsx","components/parameters-table/parameters-table.component.jsx"],"names":["Profile","styled","div","GridContainer","ZeroMargin","GridRow","Row","Title","h2","Container","OrderHeader","OrderButton","CustomButton","AdminPanelContainer","CustomSelect","select","OrderContainer","OrderContent","Options","UpdateButton","OrderId","p","ProfileOrderOverview","id","handleUpdateClick","orderData","useFetchById","isLoading","order","response","dateData","Date","date","error","customId","toLocaleDateString","weekday","month","day","year","onClick","ExaminationUserContainer","ExaminationUser","userId","user","name","checkParameter","parametersArr","idx","length","checkParameterValue","value","ModalContainer","Modal","CloseButton","button","SubmitButton","ExamTypeCheckbox","CustomCheckbox","IsSuitableCheckbox","TwoColContainer","InputContainer","Table","ObjectiveRefTable","SubjectiveRefTable","RefractTable","KerathTable","SubjectiveRefATable","ContactLensesTable","ContactLensesTypeTable","ExamTable","TableTitleCol","TableCol","Col","isActive","clickable","OptometristExaminationModal","close","refetch","examinationToUpdate","examinationData","useContext","ExaminationContext","createExamination","updateExamination","useState","examinationObj","setExaminationObj","recomendation","setRecomendation","pc","setPc","vodic","setVodic","vlastne_okuliare","setVlastne_okuliare","objektivna_refrakcia","setObjektivna_refrakcia","subjektivna_refrakcia","setSubjektivna_refrakcia","refraktometer","setRefraktometer","keratometer","setKeratometer","subjektivna_refrakciaA","setSubjektivna_refrakciaA","kontaktne_sosovky","setKontaktne_sosovky","typ_kontaktnych_sosoviek","setTyp_kontaktnych_sosoviek","tabulka","setTabulka","activeExamType","setActiveExamType","handleParameterChange","e","parameterObj","updateParameter","target","arr","handleDomEye","num","paramObj","handleChange","domoko","prevValue","useEffect","exam","type","examObj","refrakcia","doporucenia","anamneza","kontrola","ReactDOM","createPortal","examTypes","map","label","handleClick","nosi_od","posledna_korekcia","typ_sposob","vyhovuje","rows","className","dopl_info","Array","vnatur","onChange","sph","cyl","ax","add","visus","vbino","se","prizma","basis","os","stav_a_povolanie","obj_nalez","hor","ver","ave","bino","visd","bino1","visb","bino2","prvy","druhy","lkontrola","dop_roztok","vis","subj","obj","preventDefault","doneTo","console","log","document","getElementById","ExaminationsOverviewContainer","Header","ExaminationContainer","ExamHead","ExaminationOptions","AddButton","DeleteButton","ExaminationsOverview","params","useParams","deleteExamination","showOptometristModal","setShowOptometristModal","examinations","setExaminations","setExaminationToUpdate","isDisabled","setIsDisabled","exams","examination","doneBy","_id","disabled","setTimeout","handleDelete","UserForm","isAdmin","isUpdating","handleCompanyChange","isOptometrist","isOrder","isCustomer","push","useHistory","example","premises","retailNames","admin","optometrist","fName","lName","birthDate","email","phone","address","psc","city","country","company","ico","dic","icdph","parameters","lenses","handleAddOrderButtonClick","orders","reverse","slice","shrinkLabel","css","InputGroup","CustomInput","otherProps","htmlFor","useFetch","path","skip","method","setResponse","setError","message","setMessage","setIsLoading","refetchIndex","setRefetchIndex","prevRefetchIndex","requestOptions","redirect","a","fetch","process","res","json","data","fetchData","useFetchByQuery","queryObj","myHeaders","Headers","append","localStorage","getItem","raw","JSON","stringify","headers","body","brands","retailNamesTabs","glassesColors","glassesMaterials","glassesShapes","formatPrice","price","toString","includes","split","Number","formatfloatNumber","number","paddingStyles","FixedContainer","ScrollContainer","children","CheckboxContainer","otherprops","CustomTextarea","fetchUser","token","patchUser","postUser","postAdmin","password","initUserObj","boughtProducts","finishedRegistration","cylinder","cylinderAxes","diopters","distance","addition","prism","tempUser","totalSpent","watchList","confirmPassword","now","UserContext","createContext","activeIndex","handleChangeFilterItem","filterItems","totalCount","users","getUser","updateUser","resetUser","formToShow","switchFormButtons","toggleUserForm","createUser","getFilteredUsers","getUserByQuery","deleteUser","UserProvider","AuthContext","LoadingModalContext","closeModal","getMessage","setShowModal","setUser","setUsers","count","setIsUpdating","setActiveIndex","setFormToShow","refetchUser","addUser","messageSK","filters","filter","query","Provider","itemIndex","InputRow","ProductInputRow","ExaminationProvider","examsToAdd","examToUpdate","examId","TableContainer","TitleCol","OsContainer","ParametersTable","disabledInputs","checkParameters","parameter","formatParameter","toFixed","onBlur"],"mappings":"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","file":"static/js/1.fcf36cf7.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\n\nexport const Profile = styled.div`\n    padding: 2rem;\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    margin-right: 2rem;\n\n`\n\nexport const GridContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    align-items: start;\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n    }\n`\n\nexport const ZeroMargin = styled.div`\n    input {\n        margin-bottom: 0 !important;\n    }\n`\n\nexport const GridRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n`\n\n\nexport const ThreeColRow = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    align-items: center;\n\n    input {\n        margin-bottom: 0 !important;\n    }\n\n    div:not(:last-child) {\n        padding-right: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr 1fr;\n        grid-template-areas:\n            \"a a\"\n            \"b c\";\n\n        div:nth-child(1){\n            grid-area: a;\n            margin-bottom: 0;\n        }\n        div:nth-child(2){\n            grid-area: b;\n            margin-bottom: 2rem;\n\n        }\n        div:nth-child(3){\n            grid-area: c;\n            margin-bottom: 2rem;\n        }\n    }\n`\n\nexport const Row = styled.div`\n    width: 75%;\n`\n\n\nexport const Title = styled.h2`\n    margin-bottom: 2rem;\n`\n\nexport const Container = styled.div`\n    margin-top: 2rem;\n    \n`\n\nexport const OrderHeader = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n`\n\nexport const OrderButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    margin-top: .2rem;\n    font-size: 1.2rem;\n`\n\nexport const AdminPanelContainer = styled.div`\n    margin-bottom: 3rem;\n`\n\nexport const CustomSelect = styled.select`\n    margin-top: 1.5rem;\n    min-width: 16.5rem;\n    width: 100%;\n    background-color: var(--input-background-color);\n    color: var(--input-color);\n    border: none;\n    padding: .5rem .5rem .5rem 1rem;\n    font-size: inherit;\n    font-family: inherit;\n    display: block;\n`","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\nexport const OrderContainer = styled.div`\n    width: 100%;\n    /* display: grid;\n    grid-template-columns: 1fr 25rem; */\n\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n    padding: 2rem;\n\n    &:not(:last-child) {\n        margin-bottom: 2rem;\n    }\n\n    @media all and (max-width: 800px) {\n        grid-template-columns: 1fr;\n\n    }\n`\n\nexport const OrderContent = styled.div`\n    display: flex;\n    justify-content: space-between;\n    /* align-items: center; */\n    margin-bottom: 2rem;\n    h2 {\n        font-size: 1.6rem;\n    }\n`\n\nexport const Options = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n    /* align-self: end;\n    justify-self: end; */\n`\n\nexport const UpdateButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    font-size: 1.2rem;\n    /* margin-left: auto; */\n    display:block;\n\n`\n\nexport const DeleteButton = styled(CustomButton)`\n    font-size: 1.2rem;\n    /* background-color: rgb(235, 172, 1); */\n    background-color: #DD4C4C;\n    /* margin-bottom: 1rem; */\n    margin-left: 1rem;\n    display:block;\n\n`\n\nexport const OrderId = styled.p`\n    opacity: .83;\n    /* font-size: 1.2rem; */\n    /* color: gray; */\n    /* margin-bottom: 2rem; */\n`","import React from 'react'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    // DeleteButton,\n    Options,\n    OrderContainer,\n    OrderContent,\n    UpdateButton,\n    OrderId\n} from './profile-order-overview.styles'\n\nconst ProfileOrderOverview = ({ id, handleUpdateClick }) => {\n    const orderData = useFetchById('api/admin/orders', id, !id)\n\n    if (orderData.isLoading) return <OrderContainer>\n        <h3>Načítavam</h3>\n    </OrderContainer>\n\n    const { order } = orderData.response\n\n    const dateData = new Date(order?.date)\n\n    return (\n        <OrderContainer>\n            {orderData.response?.error === 'invalid-branch' ? <OrderContent>\n                <h2>Táto objednávka patri inej prevadzke</h2>\n            </OrderContent> : <OrderContent>\n                    <div>\n                        <h2>ID Objednávky</h2>\n                        <OrderId>{order?.customId}</OrderId>\n                    </div>\n                    <div>\n                        <p>{dateData.toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric', year: \"numeric\" })}</p>\n                    </div>\n                </OrderContent>}\n\n            {!orderData.response?.error && <Options>\n                <UpdateButton onClick={handleUpdateClick}>\n                    Zobraziť\n                </UpdateButton>\n                {/* <DeleteButton>\n                    Vymazať\n                </DeleteButton> */}\n            </Options>}\n\n        </OrderContainer>\n    )\n}\n\nexport default ProfileOrderOverview\n","import styled from 'styled-components'\n\nexport const ExaminationUserContainer = styled.div`\n    font-size: 1.4rem;\n\n    span {\n        font-weight: bolder\n    }\n`","import React from 'react'\n\nimport { useFetchById } from '../../hooks/useFetch'\n\nimport {\n    ExaminationUserContainer\n} from './examination-user.styles'\n\nconst ExaminationUser = ({ userId }) => {\n    const { isLoading, response } = useFetchById(\"api/admin/users\", userId)\n\n    return (\n        <ExaminationUserContainer>\n            <p>Vystavoval:</p> <span>{isLoading ? \"Hľadám...\" : response?.user?.name}</span>\n        </ExaminationUserContainer>\n    )\n}\n\nexport default ExaminationUser\n","\nexport const checkParameter = (parametersArr, idx) => {\n    if (parametersArr) {\n        if (parametersArr.length === 0) {\n            return \"\"\n        }\n        if (parametersArr[idx] === 1001 || parametersArr[idx] === \"1001\") {\n            return \"\"\n        }\n        return parametersArr[idx]\n    } else {\n        return \"\"\n    }\n}\n\nexport const checkParameterValue = (value) => {\n    if (value) {\n        if (value === 0) {\n            return \"\"\n        }\n        if (value === 1001) {\n            return \"\"\n        }\n        return value\n    } else {\n        return \"\"\n    }\n}\n\n// check if valid number othervise return 1001\nexport const formatParameter = parameter => {\n    if (parameter) {\n        const changeNumber = parameter.toString().replace(',', '.')\n        return isNaN(changeNumber) ? 1001 : changeNumber.toFixed(2)\n    }\n}","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\n\nexport const ModalContainer = styled.div`\n    position: fixed;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: 99999;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    background-color: rgba(0,0,0,0.3);\n`\n\n\n\nexport const Modal = styled.div`\n    width:100%;\n    max-width: 85rem;\n    max-height: 60rem;\n    color: var(--primary-text-color);\n\n    overflow-y: scroll;\n\n    padding: 2rem;\n    border-radius: .5rem;\n    background-color: var(--background-primary-color);\n\n    position: relative;\n    z-index: 999999;\n\n    h3 {\n        margin-bottom: 2rem;\n    }\n\n    .checkboxes {\n        width: 15rem;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n        background:  var(--background-primary-color);\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n        background: var(--primary-color);\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n        background: var(--primary-color);\n    }\n`\n\nexport const CloseButton = styled.button`\n    width: 100%;\n    height: 100%;\n\n    position: fixed;\n    left: 0;\n    right: 0;\n    z-index: 99999;\n\n    border: none;\n    outline: none;\n    opacity: 0;\n\n    &:focus {\n        outline: none\n    }\n`\n\nexport const SubmitButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    display: block;\n    margin: 2rem auto 0;\n`\n\nexport const Container = styled.div`\n    margin-bottom: 2rem;\n    h4 {\n        margin-bottom: 1rem;\n    }\n\n    div {\n    }\n`\n\nexport const ExamTypeCheckbox = styled(CustomCheckbox)`\n    margin-right: 1rem;\n`\n\nexport const IsSuitableCheckbox = styled(CustomCheckbox)`\n    margin-top: 2.2rem;\n`\n\nexport const TwoColContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 3rem;\n`\n\nexport const InputContainer = styled.div`\n    margin-bottom: 2rem;\n`\n\nexport const Table = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(7, 1fr);\n`\n\nexport const ObjectiveRefTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(4, 1fr);\n`\n\nexport const SubjectiveRefTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(9, 1fr);\n`\n\nexport const RefractTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(4, 1fr);\n`\nexport const KerathTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(3, 1fr);\n`\nexport const SubjectiveRefATable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(6, 1fr);\n`\nexport const ContactLensesTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(8, 1fr);\n`\nexport const ContactLensesTypeTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(4, 1fr);\n`\n\nexport const ExamTable = styled.div`\n    display: grid;\n    grid-template-columns: 4rem repeat(5, 1fr);\n`\n\nexport const TableTitleCol = styled.div`\n    padding: 1rem;\n`\n\nexport const TableCol = styled.div`\n\n`\n\nexport const Col = styled.div`\n    text-align: center;\n    margin: 1rem;\n    height: 4rem;\n    color: ${({ isActive }) => isActive ? \"var(--primary-color)\" : \"var(--input-color)\"};\n\n\n    input {\n        display:block;\n        width: 100%;\n        border: none;\n        padding: 1rem .5rem;\n        text-align: center;\n        font-family: inherit;\n        font-size: inherit;\n        background-color: var(--input-background-color);\n        color: var(--input-color);\n        border-radius: .5rem;\n        outline: none;\n        &:focus {\n            outline: none;\n        }\n        &:disabled {\n            opacity: .83;\n        }\n    }\n\n    /* clickable */\n\n    ${({ clickable }) => clickable && `\n        cursor: pointer;\n        \n        &:hover {\n            color: var(--primary-color);\n        }\n    `}\n`\n\nexport const TableBlock = styled.div`\n\n`","import React, { useState, useContext, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { ExaminationContext } from '../../context/examination/examination.context'\nimport { useFetchById } from '../../hooks/useFetch'\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    checkParameter,\n    formatParameter,\n    checkParameterValue\n} from '../../utils/parameters.utils'\n\nimport {\n    CloseButton,\n    Modal,\n    ModalContainer,\n    SubmitButton,\n    Container,\n    ExamTypeCheckbox,\n    TwoColContainer,\n    InputContainer,\n    IsSuitableCheckbox,\n    Col,\n    Table,\n    TableTitleCol,\n    TableCol,\n    // TableBlock,\n    ObjectiveRefTable,\n    SubjectiveRefTable,\n    ExamTable,\n    RefractTable,\n    KerathTable,\n    SubjectiveRefATable,\n    ContactLensesTable,\n    ContactLensesTypeTable\n} from './modal-optometrist-examination.styles'\n\nconst OptometristExaminationModal = ({ close, refetch, userId, examinationToUpdate }) => {\n    const examinationData = useFetchById('api/admin/exams', examinationToUpdate, !examinationToUpdate)\n\n    const { createExamination, updateExamination } = useContext(ExaminationContext)\n    const [examinationObj, setExaminationObj] = useState({})\n    const [recomendation, setRecomendation] = useState('')\n\n    const [pc, setPc] = useState(false)\n    const [vodic, setVodic] = useState(false)\n\n\n    //REFRAKCIA\n    const [vlastne_okuliare, setVlastne_okuliare] = useState({})\n    const [objektivna_refrakcia, setObjektivna_refrakcia] = useState({})\n    const [subjektivna_refrakcia, setSubjektivna_refrakcia] = useState({})\n\n\n    //ANAMNEZA\n    const [refraktometer, setRefraktometer] = useState({})\n    const [keratometer, setKeratometer] = useState({})\n    const [subjektivna_refrakciaA, setSubjektivna_refrakciaA] = useState({})\n    const [kontaktne_sosovky, setKontaktne_sosovky] = useState({})\n    const [typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek] = useState({})\n\n    //KONTROLA\n    const [tabulka, setTabulka] = useState({})\n\n    const [activeExamType, setActiveExamType] = useState(1)\n\n    const handleParameterChange = (e, idx, parameterObj, updateParameter) => {\n        const { name, value } = e.target\n        let arr = parameterObj[name] || [1001, 1001]\n        arr[idx] = value === '' ? 1001 : value\n\n        updateParameter({\n            ...parameterObj,\n            [name]: arr\n        })\n    }\n\n    const handleDomEye = (num, paramObj, handleChange) => {\n        if (paramObj?.domoko === num) {\n            handleChange(prevValue => ({\n                ...prevValue,\n                domoko: 0,\n            }))\n        } else {\n            handleChange(prevValue => ({\n                ...prevValue,\n                domoko: num,\n            }))\n        }\n    }\n\n    const handleChange = e => {\n        const { name, value } = e.target\n\n        if (value === '') {\n            delete examinationObj[name]\n            setExaminationObj({\n                ...examinationObj,\n            })\n            return\n        }\n\n        setExaminationObj({\n            ...examinationObj,\n            [name]: value\n        })\n    }\n\n    const formatParameters = (e, newParameters, parameterObj, updateParameter) => {\n        if (newParameters) {\n            const { name } = e.target\n            updateParameter({\n                ...parameterObj,\n                [name]: newParameters.map(value => formatParameter(value))\n            })\n        }\n    }\n\n    const formatStringParameters = (e, newParameters, parameterObj, updateParameter) => {\n        if (newParameters) {\n            const { name } = e.target\n            updateParameter({\n                ...parameterObj,\n                [name]: newParameters.map(value => value)\n            })\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        let examObj = {\n            vodic,\n            pc,\n            doneTo: userId,\n            type: activeExamType,\n            ...(recomendation !== \"\") && { doporucenia: recomendation }\n            // parameters: {\n            //     ...parameters\n            // }\n        }\n\n        if (activeExamType === 1) {\n            examObj = {\n                ...examObj,\n                refrakcia: {\n                    ...examinationObj,\n                    vlastne_okuliare: {\n                        ...vlastne_okuliare\n                    },\n                    objektivna_refrakcia: {\n                        ...objektivna_refrakcia\n                    },\n                    subjektivna_refrakcia: {\n                        ...subjektivna_refrakcia\n                    }\n                },\n            }\n        }\n\n        if (activeExamType === 2) {\n            examObj = {\n                ...examObj,\n                anamneza: {\n                    ...examinationObj,\n                    vlastne_okuliare: {\n                        ...vlastne_okuliare\n                    },\n                    refraktometer: {\n                        ...refraktometer\n                    },\n                    keratometer: {\n                        ...keratometer\n                    },\n                    subjektivna_refrakcia: {\n                        ...subjektivna_refrakciaA\n                    },\n                    kontaktne_sosovky: {\n                        ...kontaktne_sosovky\n                    },\n                    typ_kontaktnych_sosoviek: {\n                        ...typ_kontaktnych_sosoviek\n                    }\n                },\n            }\n        }\n\n        if (activeExamType === 3) {\n            examObj = {\n                ...examObj,\n                kontrola: {\n                    ...examinationObj,\n                    tabulka: {\n                        ...tabulka\n                    },\n                },\n            }\n        }\n\n        // console.log(\"EXAMINATION OBJECT BEFORE SEND\")\n        // console.log(examObj)\n\n        if (examinationToUpdate) {\n            delete examObj[\"doneTo\"]\n\n            updateExamination(examObj, examinationToUpdate)\n\n        } else {\n            console.log(examObj)\n            createExamination(examObj)\n        }\n        refetch()\n        close()\n    }\n\n    useEffect(() => {\n        if (!!examinationToUpdate) return\n        setExaminationObj({})\n        setVlastne_okuliare({})\n        setObjektivna_refrakcia({})\n        setSubjektivna_refrakcia({})\n        setRefraktometer({})\n        setKeratometer({})\n        setSubjektivna_refrakciaA({})\n        setKontaktne_sosovky({})\n        setTyp_kontaktnych_sosoviek({})\n        setTabulka({})\n        setRecomendation('')\n    }, [activeExamType])\n\n    useEffect(() => {\n        if (!examinationData.isLoading) {\n            if (examinationData.response) {\n\n                setVodic(examinationData.response.exam.vodic)\n                setPc(examinationData.response.exam.pc)\n\n                if (examinationData.response?.exam?.type === 1) {\n                    let examObj = examinationData.response?.exam\n                    setVlastne_okuliare({\n                        ...examObj?.refrakcia?.vlastne_okuliare\n                    })\n                    setObjektivna_refrakcia({\n                        ...examObj?.refrakcia?.objektivna_refrakcia\n                    })\n                    setSubjektivna_refrakcia({\n                        ...examObj?.refrakcia?.subjektivna_refrakcia\n                    })\n\n                    setRecomendation(examObj?.doporucenia || \"\")\n                    setActiveExamType(examObj?.type)\n\n                    // delete examObj[\"refrakcia\"]\n                    delete examObj.refrakcia[\"vlastne_okuliare\"]\n                    delete examObj.refrakcia[\"objektivna_refrakcia\"]\n                    delete examObj.refrakcia[\"subjektivna_refrakcia\"]\n                    delete examObj[\"kontrola\"]\n                    delete examObj[\"anamneza\"]\n                    delete examObj[\"doneTo\"]\n                    delete examObj[\"doneBy\"]\n                    delete examObj[\"date\"]\n                    delete examObj[\"_id\"]\n                    delete examObj[\"__v\"]\n                    delete examObj[\"doporucenia\"]\n                    delete examObj[\"type\"]\n\n                    setExaminationObj({\n                        ...examObj?.refrakcia\n                    })\n                }\n\n                if (examinationData.response?.exam?.type === 2) {\n                    let examObj = examinationData.response?.exam\n                    setActiveExamType(examObj?.type)\n\n\n                    setVlastne_okuliare({\n                        ...examObj?.anamneza?.vlastne_okuliare\n                    })\n                    setRefraktometer({\n                        ...examObj?.anamneza?.refraktometer\n                    })\n                    setKeratometer({\n                        ...examObj?.anamneza?.keratometer\n                    })\n                    setSubjektivna_refrakciaA({\n                        ...examObj?.anamneza?.subjektivna_refrakcia\n                    })\n                    setKontaktne_sosovky({\n                        ...examObj?.anamneza?.kontaktne_sosovky\n                    })\n                    setTyp_kontaktnych_sosoviek({\n                        ...examObj?.anamneza?.typ_kontaktnych_sosoviek\n                    })\n\n                    setRecomendation(examObj?.doporucenia || \"\")\n\n                    delete examObj.anamneza[\"vlastne_okuliare\"]\n                    delete examObj.anamneza[\"refraktometer\"]\n                    delete examObj.anamneza[\"keratometer\"]\n                    delete examObj.anamneza[\"subjektivna_refrakcia\"]\n                    delete examObj.anamneza[\"kontaktne_sosovky\"]\n                    delete examObj.anamneza[\"typ_kontaktnych_sosoviek\"]\n                    delete examObj[\"kontrola\"]\n                    delete examObj[\"refrakcia\"]\n                    delete examObj[\"doneTo\"]\n                    delete examObj[\"doneBy\"]\n                    delete examObj[\"date\"]\n                    delete examObj[\"_id\"]\n                    delete examObj[\"__v\"]\n                    delete examObj[\"doporucenia\"]\n                    delete examObj[\"type\"]\n\n                    setExaminationObj({\n                        ...examObj?.anamneza\n                    })\n\n\n                }\n\n                if (examinationData.response?.exam?.type === 3) {\n                    let examObj = examinationData.response?.exam\n\n\n                    setActiveExamType(examObj?.type)\n\n                    setTabulka({\n                        ...examObj?.kontrola?.tabulka\n                    })\n\n                    setRecomendation(examObj?.doporucenia || \"\")\n\n                    delete examObj.kontrola[\"tabulka\"]\n                    delete examObj[\"anamneza\"]\n                    delete examObj[\"refrakcia\"]\n                    delete examObj[\"doneTo\"]\n                    delete examObj[\"doneBy\"]\n                    delete examObj[\"date\"]\n                    delete examObj[\"_id\"]\n                    delete examObj[\"__v\"]\n                    delete examObj[\"doporucenia\"]\n                    delete examObj[\"type\"]\n\n                    setExaminationObj({\n                        ...examObj?.kontrola\n                    })\n                }\n\n\n                // setParameters(examinationData.response?.exam?.parameters)\n                // setExaminationObj(examinationData.response?.exam)\n            }\n        }\n    }, [examinationToUpdate, examinationData.isLoading])\n\n    useEffect(() => {\n        return () => {\n            setExaminationObj({})\n            setExaminationObj({})\n            setVlastne_okuliare({})\n            setObjektivna_refrakcia({})\n            setSubjektivna_refrakcia({})\n            setRefraktometer({})\n            setKeratometer({})\n            setSubjektivna_refrakciaA({})\n            setKontaktne_sosovky({})\n            setTyp_kontaktnych_sosoviek({})\n            setTabulka({})\n            setRecomendation('')\n        }\n    }, [])\n\n    return ReactDOM.createPortal((\n        <ModalContainer>\n            <CloseButton onClick={close} />\n            <Modal>\n                <h3>Vyšetrenie</h3>\n                {!examinationToUpdate && <Container>\n                    <h4>Typ prehliadky</h4>\n                    <div>\n                        {examTypes.map((type, idx) => (\n                            <ExamTypeCheckbox\n                                key={idx}\n                                label={type.name}\n                                isActive={activeExamType === type.value}\n                                handleClick={() => setActiveExamType(type.value)}\n                            />\n                        ))}\n                    </div>\n                </Container>}\n\n                {activeExamType === 1 && (\n                    <Container>\n                        <h4>Refrakcia</h4>\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.nosi_od || \"\"}\n                                    type=\"date\"\n                                    name=\"nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.posledna_korekcia || \"\"}\n                                    type=\"date\"\n                                    name=\"posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'Typ, spôsob'}\n                                    value={examinationObj?.typ_sposob || \"\"}\n                                    type=\"text\"\n                                    name=\"typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examinationObj?.vyhovuje || false}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vyhovuje\",\n                                            value: examinationObj?.vyhovuje ? !examinationObj.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Anamnéza'\n                                name=\"anamneza\"\n                                value={examinationObj?.anamneza || ''}\n                                rows=\"5\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={vodic}\n                                    handleClick={() => setVodic(prevValue => !prevValue)}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={pc}\n                                    handleClick={() => setPc(prevValue => !prevValue)}\n                                />\n                            </InputContainer>\n                        </div>\n                        \n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"dopl_info\"\n                                value={examinationObj?.dopl_info || \"\"}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='vnatur'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.vnatur, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='vbino'\n                                        type='text'\n                                        value={checkParameterValue(vlastne_okuliare?.vbino)}\n                                        onChange={e => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vbino, vlastne_okuliare, setVlastne_okuliare)}\n                                        // onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: Number(e.target.value)\n                                        // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Objektivná refrakcia</h4>\n\n                        <ObjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.sph, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.cyl, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.ax, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='se'\n                                            type='text'\n                                            value={checkParameter(objektivna_refrakcia?.se, idx)}\n                                            onChange={e => handleParameterChange(e, idx, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, objektivna_refrakcia?.se, objektivna_refrakcia, setObjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ObjectiveRefTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col isActive={subjektivna_refrakcia?.domoko === 1} clickable onClick={() => handleDomEye(1, subjektivna_refrakcia, setSubjektivna_refrakcia)}>P.</Col>\n                                <Col isActive={subjektivna_refrakcia?.domoko === 2} clickable onClick={() => handleDomEye(2, subjektivna_refrakcia, setSubjektivna_refrakcia)}>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.sph, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.cyl, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.ax, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.add, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.visus, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='vbino'\n                                        type='text'\n                                        value={checkParameterValue(subjektivna_refrakcia?.vbino)}\n                                        onChange={e => setSubjektivna_refrakcia(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.vbino, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n\n                                        // onBlur={(e) => setSubjektivna_refrakcia(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: Number(e.target.value)\n                                        // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>PRIZMA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='prizma'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.prizma, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.prizma, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BÁZA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='basis'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.basis, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.basis, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>OS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='os'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakcia?.os, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakcia?.os, subjektivna_refrakcia, setSubjektivna_refrakcia)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </SubjectiveRefTable>\n                    </Container>\n                )}\n\n                {activeExamType === 2 && (\n                    <Container>\n                        <h4>Anamnéza</h4>\n\n                        <TwoColContainer>\n                            <div>\n                                <h5>Nosi od:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.nosi_od || \"\"}\n                                    type=\"date\"\n                                    name=\"nosi_od\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                            <div>\n                                <h5>Posledná korekcia:</h5>\n                                <CustomInput\n                                    label={''}\n                                    value={examinationObj?.posledna_korekcia || \"\"}\n                                    type=\"date\"\n                                    name=\"posledna_korekcia\"\n                                    handleChange={handleChange}\n                                />\n                            </div>\n                        </TwoColContainer>\n                        <TwoColContainer>\n                            <InputContainer>\n                                <CustomInput\n                                    label={'Typ, spôsob'}\n                                    value={examinationObj?.typ_sposob || \"\"}\n                                    type=\"text\"\n                                    name=\"typ_sposob\"\n                                    handleChange={handleChange}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Vyhovuje\"}\n                                    isActive={examinationObj?.vyhovuje || false}\n                                    handleClick={() => handleChange({\n                                        target: {\n                                            name: \"vyhovuje\",\n                                            value: examinationObj?.vyhovuje ? !examinationObj.vyhovuje : true\n                                        }\n                                    })}\n                                />\n                            </InputContainer>\n                        </TwoColContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Stav a povolanie'\n                                name=\"stav_a_povolanie\"\n                                value={examinationObj?.stav_a_povolanie || ''}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={vodic}\n                                    handleClick={() => setVodic(prevValue => !prevValue)}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={pc}\n                                    handleClick={() => setPc(prevValue => !prevValue)}\n                                />\n                            </InputContainer>\n                        </div>\n\n                        <InputContainer>\n                            <CustomTextarea\n                                label='Doplňujúce informácie'\n                                name=\"dopl_info\"\n                                value={examinationObj?.dopl_info || \"\"}\n                                rows=\"3\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n                        <InputContainer>\n                            <CustomInput\n                                label='Obj. nález'\n                                name=\"obj_nalez\"\n                                value={examinationObj?.obj_nalez || ''}\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <h4>Vlastné okuliare</h4>\n\n                        <Table>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>V.NATUR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='vnatur'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.vnatur, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.vnatur, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.sph, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.cyl, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.ax, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.add, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.ISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(vlastne_okuliare?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, vlastne_okuliare, setVlastne_okuliare)}\n                                            // onBlur={(e) => formatParameters(e, vlastne_okuliare?.visus, vlastne_okuliare, setVlastne_okuliare)}\n                                        />\n                                    </Col>\n                                ))}\n\n                            </TableCol>\n                            <TableCol>\n                                <Col>V.BINO</Col>\n                                <Col>\n                                    <input\n                                        name='vbino'\n                                        type='text'\n                                        value={checkParameterValue(vlastne_okuliare?.vbino)}\n                                        onChange={e => setVlastne_okuliare(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        // onBlur={(e) => setVlastne_okuliare(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: Number(e.target.value)\n                                        // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </Table>\n\n                        <h4>Refraktometer</h4>\n\n                        <RefractTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            // onBlur={(e) => formatParameters(e, refraktometer?.sph, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            // onBlur={(e) => formatParameters(e, refraktometer?.cyl, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            // onBlur={(e) => formatParameters(e, refraktometer?.ax, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>SE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='se'\n                                            type='text'\n                                            value={checkParameter(refraktometer?.se, idx)}\n                                            onChange={e => handleParameterChange(e, idx, refraktometer, setRefraktometer)}\n                                            // onBlur={(e) => formatParameters(e, refraktometer?.se, refraktometer, setRefraktometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </RefractTable>\n\n                        <h4>Keratometer</h4>\n\n                        <KerathTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>HOR</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='hor'\n                                            type='text'\n                                            value={checkParameter(keratometer?.hor, idx)}\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            // onBlur={(e) => formatParameters(e, keratometer?.hor, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VER</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ver'\n                                            type='text'\n                                            value={checkParameter(keratometer?.ver, idx)}\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            // onBlur={(e) => formatParameters(e, keratometer?.ver, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AVE</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ave'\n                                            type='text'\n                                            value={checkParameter(keratometer?.ave, idx)}\n                                            onChange={e => handleParameterChange(e, idx, keratometer, setKeratometer)}\n                                            // onBlur={(e) => formatParameters(e, keratometer?.ave, keratometer, setKeratometer)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n\n                        </KerathTable>\n\n                        <h4>Subjektivná refrakcia</h4>\n\n                        <SubjectiveRefATable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.sph, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.cyl, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.ax, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.add, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISUS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visus'\n                                            type='text'\n                                            value={checkParameter(subjektivna_refrakciaA?.visus, idx)}\n                                            onChange={e => handleParameterChange(e, idx, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                            // onBlur={(e) => formatParameters(e, subjektivna_refrakciaA?.visus, subjektivna_refrakciaA, setSubjektivna_refrakciaA)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO</Col>\n                                <Col>\n                                    <input\n                                        name='bino'\n                                        type='text'\n                                        value={checkParameterValue(subjektivna_refrakciaA?.bino)}\n                                        onChange={e => setSubjektivna_refrakciaA(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                        // onBlur={(e) => setSubjektivna_refrakciaA(prevValue => ({\n                                        //     ...prevValue,\n                                        //     [e.target.name]: Number(e.target.value)\n                                        // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n\n                        </SubjectiveRefATable>\n\n                        <h4>Kontaktné šošovky</h4>\n\n                        <ContactLensesTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.sph, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.cyl, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.ax, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADICIA</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.add, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visd'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.visd, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visd, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO1</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='bino1'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.bino1, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino1, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VISB</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='visb'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.visb, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.visb, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>BINO2</Col>\n                                {[...Array(1)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='bino2'\n                                            type='text'\n                                            value={checkParameter(kontaktne_sosovky?.bino2, idx)}\n                                            onChange={e => handleParameterChange(e, idx, kontaktne_sosovky, setKontaktne_sosovky)}\n                                            // onBlur={(e) => formatParameters(e, kontaktne_sosovky?.bino2, kontaktne_sosovky, setKontaktne_sosovky)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ContactLensesTable>\n\n\n                        <h4>Typ Kontaktných šošoviek</h4>\n\n                        <ContactLensesTypeTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>PRVÝ</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='prvy'\n                                            type='text'\n                                            value={checkParameter(typ_kontaktnych_sosoviek?.prvy, idx)}\n                                            onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.prvy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>DRUHÝ</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='druhy'\n                                            type='text'\n                                            value={checkParameter(typ_kontaktnych_sosoviek?.druhy, idx)}\n                                            onChange={e => handleParameterChange(e, idx, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                            // onBlur={(e) => formatStringParameters(e, typ_kontaktnych_sosoviek?.druhy, typ_kontaktnych_sosoviek, setTyp_kontaktnych_sosoviek)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>L.KONTROLA</Col>\n                                <Col>\n                                    <input\n                                        name='lkontrola'\n                                        type='text'\n                                        value={typ_kontaktnych_sosoviek?.lkontrola || \"\"}\n                                        onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                            <TableCol>\n                                <Col>DOP.ROZTOK</Col>\n                                <Col>\n                                    <input\n                                        name='dop_roztok'\n                                        type='text'\n                                        value={typ_kontaktnych_sosoviek?.dop_roztok || \"\"}\n                                        onChange={e => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                            ...prevValue,\n                                            [e.target.name]: e.target.value\n                                        }))}\n                                    // onBlur={(e) => setTyp_kontaktnych_sosoviek(prevValue => ({\n                                    //     ...prevValue,\n                                    //     [e.target.name]: Number(e.target.value)\n                                    // }))}\n                                    />\n                                </Col>\n                            </TableCol>\n                        </ContactLensesTypeTable>\n                    </Container>\n                )}\n\n                {activeExamType === 3 && (\n                    <Container>\n                        <h4>Kontrola</h4>\n                        <InputContainer>\n                            <CustomInput\n                                label={'Typ kontaktných šošoviek'}\n                                value={examinationObj?.typ_kontaktnych_sosoviek || \"\"}\n                                type=\"text\"\n                                name=\"typ_kontaktnych_sosoviek\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <ExamTable>\n                            <TableTitleCol>\n                                <Col>{\"-\"}</Col>\n                                <Col>P.</Col>\n                                <Col>L.</Col>\n                            </TableTitleCol>\n\n                            <TableCol>\n                                <Col>SPH</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='sph'\n                                            type='text'\n                                            value={checkParameter(tabulka?.sph, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.sph, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>CYL</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='cyl'\n                                            type='text'\n                                            value={checkParameter(tabulka?.cyl, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.cyl, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>AX</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='ax'\n                                            type='text'\n                                            value={checkParameter(tabulka?.ax, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.ax, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>ADD</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='add'\n                                            type='text'\n                                            value={checkParameter(tabulka?.add, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.add, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                            <TableCol>\n                                <Col>VIS</Col>\n                                {[...Array(2)].map((value, idx) => (\n                                    <Col key={idx}>\n                                        <input\n                                            name='vis'\n                                            type='text'\n                                            value={checkParameter(tabulka?.vis, idx)}\n                                            onChange={e => handleParameterChange(e, idx, tabulka, setTabulka)}\n                                            // onBlur={(e) => formatParameters(e, tabulka?.vis, tabulka, setTabulka)}\n                                        />\n                                    </Col>\n                                ))}\n                            </TableCol>\n                        </ExamTable>\n\n                        <InputContainer>\n                            <CustomInput\n                                label={'Subj.'}\n                                value={examinationObj?.subj || \"\"}\n                                type=\"text\"\n                                name=\"subj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <InputContainer>\n                            <CustomInput\n                                label={'Obj.'}\n                                value={examinationObj?.obj || \"\"}\n                                type=\"text\"\n                                name=\"obj\"\n                                handleChange={handleChange}\n                            />\n                        </InputContainer>\n\n                        <div className='checkboxes'>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"Šofer\"}\n                                    isActive={vodic}\n                                    handleClick={() => setVodic(prevValue => !prevValue)}\n                                />\n                            </InputContainer>\n                            <InputContainer>\n                                <IsSuitableCheckbox\n                                    label={\"PC\"}\n                                    isActive={pc}\n                                    handleClick={() => setPc(prevValue => !prevValue)}\n                                />\n                            </InputContainer>\n                        </div>\n                    </Container>\n                )}\n\n                <InputContainer>\n                    <CustomTextarea\n                        label='Doporučenia'\n                        name=\"doporucenia\"\n                        value={recomendation}\n                        rows=\"5\"\n                        handleChange={(e) => setRecomendation(e.target.value)}\n                    />\n                </InputContainer>\n                {/* doporucenia */}\n\n                <SubmitButton onClick={handleSubmit}>{examinationToUpdate ? \"Uložiť\" : \"Odoslať prehliadku\"}</SubmitButton>\n            </Modal>\n        </ModalContainer>\n    ), document.getElementById('portal'))\n}\n\nexport default OptometristExaminationModal\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"apl. KŠ\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\nexport const ExaminationsOverviewContainer = styled.div`\n\n`\n\nexport const Header = styled.div`\n    margin-top: 2rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    h2 {\n        margin: 2rem 0;\n    }\n`\n\nexport const ExaminationContainer = styled.div`\n    border-radius: .5rem;\n    padding: 2rem;\n    /* box-shadow: 0 0 1.5rem 0 rgba(0,0,0, 0.08); */\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n\n    margin-bottom: 2rem;\n`\n\nexport const ExamHead = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 2rem;\n`\n\nexport const ExamTableContainer = styled.div`\n    display: grid;\n    grid-template-columns: 3rem repeat(10, 1fr);\n    font-size: 1.2rem;  \n`\n\nexport const HeadTableCol = styled.div`\n    display: grid;\n    grid-template-rows: repeat(5, 5rem);\n    div {\n        align-self: center;\n        display:flex;\n        justify-content: space-between;\n    }\n`\n\nexport const TableCol = styled.div`\n    display: grid;\n    grid-template-rows: repeat(5, 5rem);\n\n    div {\n        text-align:center;\n        align-self: center;\n        margin-left: .5rem;\n\n        &:not(:first-child) {\n            background-color: var(--input-background-color);\n            padding: .5rem;\n            border-radius: .5rem;\n            min-height: 2.5rem;\n        }\n    }\n`\nexport const ExaminationOptions = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`\n\nexport const AddButton = styled(CustomButton)`\n    background-color: var(--primary-color);\n    font-weight: bolder;\n    font-size: 1.2rem;\n`\n\nexport const UpdateButton = styled(CustomButton)`\n    font-size: 1.2rem;\n`\n\nexport const DeleteButton = styled(CustomButton)`\n    font-size: 1.2rem;\n    background-color: var(--color-red);\n    margin-left: 1rem;\n\n`","import React, { useState, useEffect, useContext } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useFetchById } from '../../hooks/useFetch'\nimport { ExaminationContext } from '../../context/examination/examination.context'\n\nimport ExaminationUser from '../examination-user/examination-user.component'\nimport OptometristExaminationModal from '../modal-optometrist-examination/modal-optometrist-examination.component'\n\n// import {\n//     checkParameterValue\n// } from '../../utils/parameters.utils'\n\nimport {\n    ExaminationsOverviewContainer,\n    Header,\n    ExaminationContainer,\n    ExamHead,\n    // ExamTableContainer,\n    // HeadTableCol,\n    // TableCol,\n    ExaminationOptions,\n    AddButton,\n    UpdateButton,\n    DeleteButton\n} from './examinations-overview.styles'\n\nconst ExaminationsOverview = () => {\n    const params = useParams()\n    const examinationData = useFetchById(\"api/admin/exams/user\", params.id)\n    const { deleteExamination } = useContext(ExaminationContext)\n    const [showOptometristModal, setShowOptometristModal] = useState(false)\n    const [examinations, setExaminations] = useState([])\n    const [examinationToUpdate, setExaminationToUpdate] = useState(null)\n\n    const [isDisabled, setIsDisabled] = useState(false)\n\n\n    const handleUpdateClick = (e, id) => {\n        e.preventDefault()\n        setExaminationToUpdate(id)\n        setShowOptometristModal(true)\n    }\n\n    const handleDelete = (e, id) => {\n        e.preventDefault()\n        if (isDisabled) {\n            return;\n        }\n        setIsDisabled(true);\n        deleteExamination(id)\n\n        setTimeout(() => {\n            examinationData.refetch()\n            setIsDisabled(false);\n        }, 100)\n    }\n\n    const handleCloseModal = () => {\n        setShowOptometristModal(false)\n        setExaminationToUpdate(null)\n    }\n\n    useEffect(() => {\n        if (!examinationData.isLoading) {\n            if (examinationData.response) {\n                setExaminations(examinationData.response.exams)\n            }\n        }\n    }, [examinationData.isLoading])\n\n    return (\n        <ExaminationsOverviewContainer>\n            {showOptometristModal && <OptometristExaminationModal\n                userId={params.id}\n                examinationToUpdate={examinationToUpdate}\n                refetch={examinationData.refetch}\n                close={handleCloseModal}\n            />}\n            <Header>\n                <h2>Vyšetrenia</h2>\n                <div>\n                    <AddButton type='button' onClick={() => setShowOptometristModal(true)}>Pridať prehliadku</AddButton>\n                </div>\n            </Header>\n\n\n            <div>\n                {examinations && examinations.map((examination, idx) => (\n                    <ExaminationContainer key={idx}>\n                        <ExamHead>\n                            <h3>Dátum:</h3>\n                            <p>{new Date(examination?.date).toLocaleDateString(\"sk-SK\", { weekday: 'long', month: 'long', day: 'numeric' })}</p>\n                        </ExamHead>\n                        <ExamHead>\n                            <h3>Typ vyšetrenia:</h3>\n                            <p>{examTypes[examination?.type - 1].name}</p>\n                        </ExamHead>\n\n                        <ExaminationOptions>\n                            <ExaminationUser userId={examination.doneBy} />\n                            <div>\n                                <UpdateButton onClick={e => handleUpdateClick(e, examination._id)}>Upraviť</UpdateButton>\n\n                                <DeleteButton disabled={isDisabled} onClick={e => handleDelete(e, examination._id)}>\n                                    {isDisabled ? 'Mažem...' : 'Vymazať'}\n                                </DeleteButton>\n                            </div>\n                        </ExaminationOptions>\n                    </ExaminationContainer>\n                ))}\n            </div>\n        </ExaminationsOverviewContainer>\n    )\n}\n\nexport default ExaminationsOverview\n\nconst examTypes = [\n    {\n        name: \"Refrakcia\",\n        value: 1\n    },\n    {\n        name: \"Anamnéza\",\n        value: 2\n    },\n    {\n        name: \"Kontrola\",\n        value: 3\n    },\n]","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport InputRow from '../product-input-row/product-input-row.component'\nimport CustomInput from '../custom-input/custom-input.component'\nimport ProfileOrderOverview from '../profile-order-overview/profile-order-overview.component'\nimport ParametersTable from '../parameters-table/parameters-table.component'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\nimport ExaminationsOverview from '../examinations-overview/examinations-overview.component'\n\nimport {\n    retailNames\n} from '../../utils/warehouse.utils'\n\nimport {\n    Profile,\n    GridContainer,\n    GridRow,\n    Row,\n    // ThreeColRow,\n    ZeroMargin,\n    Title,\n    Container,\n    OrderHeader,\n    OrderButton,\n    CustomSelect,\n    AdminPanelContainer\n} from './user.form-styles'\n\nconst UserForm = ({\n    isAdmin,\n    isUpdating,\n    user,\n    handleChange,\n    handleParameterChange,\n    handleCompanyChange,\n    isOptometrist,\n    isOrder = false,\n    isCustomer\n}) => {\n    const { push } = useHistory()\n\n    const handleAddOrderButtonClick = e => {\n        e.preventDefault()\n        push(`/dashboard/objednavky/${user._id}`)\n    }\n\n\n    return (\n        <GridContainer>\n            <Profile>\n                {isAdmin && !isCustomer && <AdminPanelContainer>\n                    <h2>Admin panel</h2>\n                    <InputRow\n                        label=\"Predajňa na ktorej uživatel pracuje\"\n                        example=''\n                    >\n                        <CustomSelect name='premises' value={user.premises} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Nezadané</option>\n                            {\n                                retailNames.map((name, idx) => {\n                                    if (idx === 0) return\n                                    return (\n                                        <option key={idx} value={idx}>{name}</option>\n                                    )\n                                })\n                            }\n                        </CustomSelect>\n                    </InputRow>\n                    <InputRow\n                        label=\"Výška administrativných práv\"\n                        example=\"\"\n                    >\n                        <CustomSelect name='admin' value={user.admin} onChange={(e) => handleChange(e)}>\n                            <option value={0}>Zákaznik</option>\n                            <option value={1}>Predavač</option>\n                            <option value={2}>Vedúci</option>\n                        </CustomSelect>\n                    </InputRow>\n\n                    <Container>\n                        <CustomCheckbox\n                            label='Optometrista'\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"optometrist\",\n                                    value: !user.optometrist\n                                }\n                            })}\n                            isActive={user.optometrist}\n                        />\n                    </Container>\n                </AdminPanelContainer>}\n                <div>\n                    <h2>Informácie</h2>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Meno*\"\n                                type='text'\n                                name='fName'\n                                value={user.fName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Priezvisko*\"\n                                type='text'\n                                name='lName'\n                                value={user.lName ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        {isCustomer && <div>\n                            <CustomInput\n                                // label=\"Priezvisko*\"\n                                type='date'\n                                name='birthDate'\n                                value={user.birthDate}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>}\n                    </GridRow>\n                </div>\n\n                <Container>\n                    <h2>Kontaktné údaje</h2>\n                    <Row>\n                        <div>\n                            <CustomInput\n                                label=\"E-mail*\"\n                                type='email'\n                                name='email'\n                                value={user.email ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        {isCustomer && <div>\n                            <CustomInput\n                                label=\"Telefónne číslo\"\n                                type='text'\n                                name='phone'\n                                value={user.phone ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>}\n                    </Row>\n                </Container>\n\n                {isCustomer && <Container>\n                    <h2>Fakturačné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.address ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.psc ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.city ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.country ?? \"\"}\n                                handleChange={(e) => handleChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>}\n                {isCustomer && <Container>\n                    <h2>Firemné údaje</h2>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČO\"\n                                type='text'\n                                name='ico'\n                                value={user.company.ico ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"DIČ\"\n                                type='text'\n                                name='dic'\n                                value={user.company.dic ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"IČ DPH\"\n                                type='text'\n                                name='icdph'\n                                value={user.company.icdph ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            {/* <CustomInput\n                                label=\"IČ DPH\"\n                                type='text'\n                                name='icdph'\n                                value={user.company.icdph ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            /> */}\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"Ulica a čislo domu\"\n                                type='text'\n                                name='address'\n                                value={user.company.address ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                        <ZeroMargin>\n                            <CustomInput\n                                label=\"PSČ\"\n                                type='text'\n                                name='psc'\n                                value={user.company.psc ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </ZeroMargin>\n                    </GridRow>\n                    <GridRow>\n                        <div>\n                            <CustomInput\n                                label=\"Mesto\"\n                                type='text'\n                                name='city'\n                                value={user.company.city ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                        <div>\n                            <CustomInput\n                                label=\"Krajina\"\n                                type='text'\n                                name='country'\n                                value={user.company.country ?? \"\"}\n                                handleChange={(e) => handleCompanyChange(e)}\n                            />\n                        </div>\n                    </GridRow>\n                </Container>}\n\n                {isCustomer && <Container>\n                    <h2>Parametre</h2>\n\n                    <ParametersTable\n                        parameters={user.lenses}\n                        handleChange={handleParameterChange}\n                    />\n                </Container>}\n\n\n            </Profile>\n\n            {\n                isCustomer && !isOrder && isUpdating && <div>\n                    <OrderHeader>\n                        <Title>\n                            Objednávky\n                    </Title>\n                        <OrderButton onClick={e => handleAddOrderButtonClick(e)}>Pridať objednávku</OrderButton>\n                    </OrderHeader>\n                    <div>\n                        {user.orders.length > 0 ? user.orders.map((order, idx) => (\n                            <ProfileOrderOverview\n                                key={idx}\n                                id={order}\n                                handleUpdateClick={() => push(`/dashboard/objednavky/${user._id}/${order}`)}\n                            />\n                        )).reverse().slice(0, 5) : (\n                            <p>Žiadné objednávky</p>\n                        )}\n                    </div>\n                    {isOptometrist && <ExaminationsOverview />}\n                </div>\n            }\n        </GridContainer >\n    )\n}\n\nexport default UserForm\n","import styled, { css } from \"styled-components\"\n\nconst shrinkLabel = css`\n    left: .5rem;\n    top: -14px;\n    font-size: 12px;\n    color: var(--input-color);\n`\nexport const InputGroup = styled.div`\n    position: relative;\n\n    /* margin: 45px 0; */\n\n    .form-input {\n        /* background: none; */\n        background-color: var(--input-background-color);\n        color: var(--input-color);\n        font-size: 1.5rem;\n        padding: 1rem .5rem 1rem 2rem;\n        display: block;\n        width: 100%;\n        border: none;\n        border-radius: .5rem;\n        /* border-bottom: 1px solid #000; */\n        margin: 2rem 0 0;\n        font-family: inherit;\n\n        &:focus {\n        outline: none;\n        }\n\n        &:focus ~ .form-input-label {\n            ${shrinkLabel}\n        }\n    }\n\n    input[type = 'password'] {\n        letter-spacing: 0.3em;\n    }\n\n    .form-input-label {\n        color: var(--input-color);\n        font-size: 1.4rem;\n        font-weight: normal;\n        position: absolute;\n        pointer-events: none;\n        left: 1.5rem;\n        top: 1rem;\n        transition: 300ms ease all;\n\n        &.shrink {\n            ${shrinkLabel}\n        }\n    }\n\n    @media all and (max-width: 500px) {\n        .form-input {\n            font-size: 1.4rem;\n        }\n        /* padding: 1rem .5rem 1rem 2rem; */\n    }\n`\n","import React from 'react'\n\nimport { InputGroup } from './custom-input.styles'\n\nconst CustomInput = ({ handleChange, label, name, ...otherProps }) => {\n    return (\n        <InputGroup>\n            <input\n                className='form-input'\n                name={name}\n                onChange={handleChange}\n                {...otherProps}\n            />\n            {label ? (\n                <label htmlFor={name} className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}>\n                    {label}\n                </label>\n            ) : null\n            }\n        </InputGroup>\n    )\n}\n\nexport default CustomInput","import { useEffect, useState } from 'react'\n\nexport const useFetch = (path, skip = false, method = \"GET\") => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [message, setMessage] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const requestOptions = {\n        method: method,\n        // headers: myHeaders,\n        // body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setMessage(data.message)\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n                setMessage(\"Niečo sa pokazilo\")\n            }\n        }\n        fetchData()\n    }, [refetchIndex])\n\n    return { response, isLoading, error, message, refetch }\n}\n\nexport const useFetchByQuery = (path, queryObj, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify(queryObj)\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path])\n\n    return { response, isLoading, error, refetch }\n}\n\nexport const useFetchById = (path, id, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}/${id}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path, id])\n\n    return { response, isLoading, error, refetch }\n}\n","export const brands = [\n    \"Adidas\",\n    \"Armani Exchange\",\n    \"Arnette\",\n    \"Blackfin\",\n    \"Blumarine\",\n    \"Burberry\",\n    \"Bvlgari\",\n    \"Calvin Klein\",\n    \"Carolina Herrera\",\n    \"Carrera\",\n    \"David Beckham\",\n    \"Dior\",\n    \"Dolce & Gabbana\",\n    \"Elle\",\n    \"Emporio Armani\",\n    \"Esprit\",\n    \"Etnia Barcelona\",\n    \"Fendi\",\n    \"Fossil\",\n    \"Furla\",\n    \"Giorgio Armani\",\n    \"Givenchy\",\n    \"Gucci\",\n    \"Guess\",\n    \"H.I.S\",\n    \"Hawkers\",\n    \"Hugo Boss\",\n    \"Jaguar\",\n    \"Jimmy Choo\",\n    \"Lacoste\",\n    \"Liu Jo\",\n    \"Marc Jacobs\",\n    \"Max Mara\",\n    \"Max&Co\",\n    \"Meller\",\n    \"Mexx\",\n    \"Michael Kors\",\n    \"Moschino\",\n    \"Oakley\",\n    \"Persol\",\n    \"Polaroid\",\n    \"Police\",\n    \"Polo Ralph Lauren\",\n    \"Prada\",\n    \"Prada Linea Rossa\",\n    \"Ralph\",\n    \"Ralph Lauren\",\n    \"Ray-Ban\",\n    \"Salvatore Ferragamo\",\n    \"Smith\",\n    \"Strellson\",\n    \"Tiffany&Co.\",\n    \"Tom Ford\",\n    \"Tommy Hilfiger\",\n    \"Versace\",\n    \"Vogue\"\n]\n\nexport const lensesBrands = [\n    \"Acuvue\",\n    \"Adore\",\n    \"Air Optix\",\n    \"Biofinity\",\n    \"Biomedics\",\n    \"Clariti\",\n    \"ColourVue\",\n    \"Comfilcon A\",\n    \"Dailies\",\n    \"Freshlook\",\n    \"Lenjoy\",\n    \"Proclear\",\n    \"Purevision\",\n    \"Soflens\",\n]\n\nexport const retailNames = [\n    \"eshop\",\n    \"Centrálny sklad\",\n    \"Obchodná, Bratislava\",\n    \"Miletičova, Bratislava\",\n    \"Vajnory, Bratislava\",\n    \"Vajnorská 53, Bratislava\",\n    \"OC Branč, Senica\"\n]\n\nexport const retailNamesTabs = [\n    {\n        id: 0,\n        name: \"Všetky\",\n    },\n    {\n        id: 1,\n        name: \"Centrálny sklad\",\n    },\n    {\n        id: 2,\n        name: \"Obchodná, Bratislava\",\n    },\n    {\n        id: 3,\n        name: \"Miletičova, Bratislava\",\n    },\n    {\n        id: 4,\n        name: \"Vajnory, Bratislava\",\n    },\n    {\n        id: 5,\n        name: \"Vajnorská 53, Bratislava\",\n    },\n    {\n        id: 6,\n        name: \"OC Branč, Senica\",\n    },\n]\n\nexport const glassesColors = [\n    \"Čierná\",\n    \"Modrá\",\n    \"Červená\",\n    \"Sivá\",\n    \"Zlatá\",\n    \"Strieborná\",\n    \"Hnedá\",\n    \"Fialová\",\n    \"Zelená\",\n    \"Sedá\",\n    \"Bordová\",\n]\n\nexport const glassesMaterials = [\n    \"Acetát\",\n    \"Kov\",\n    \"Titán\",\n    \"TR90\",\n    \"Patent\",\n    \"Optyl\",\n]\n\nexport const glassesShapes = [\n    \"Pilot\",\n    \"Squared\",\n    \"Browline\",\n    \"Cat eye\",\n    \"Tiny\",\n    \"Oversize\",\n    \"Okrúhle\",\n    \"Oválne\",\n    \"Obdĺžnikové\",\n    \"Flat top\",\n    \"Špeciálne\"\n]\n\nexport const formatPrice = (price = \"\") => {\n    price.toString()\n    let value = 0\n    if (price.includes(',')) {\n        if (price.split(',')[1].length === 1) {\n            value = price.split(',')[0] + price.split(',')[1] + \"0\"\n            return Number(value)\n        } else {\n            value = price.split(',')[0] + price.split(',')[1]\n            return Number(value)\n        }\n    } else {\n        return Number(price * 100)\n    }\n}\n\nexport const formatfloatNumber = number => {\n    let value = 0\n\n    if (number.includes(',')) {\n        value = number.split(',')[0] + '.' + number.split(',')[1]\n        return value\n    } else {\n        return number\n    }\n}","import styled from 'styled-components'\nimport { paddingStyles } from '../../global.styles'\n\nexport const Container = styled.div`\n    width: 100%;\n    height: 100%;\n    /* height: 100%; */\n    overflow-y: scroll;\n    overflow-x: visible;\n    scroll-behavior: smooth;\n    ${paddingStyles};\n    padding-top: 1.5rem;\n    padding-bottom: 1.5rem;\n    color: var(--primary-text-color);\n    /* border: 1px solid red; */\n\n\n\n\n    @media all and (max-width: 1150px) {\n        margin-bottom: 8rem;\n\n        @media all and (max-width: 700px) {\n            overflow-x: scroll;\n        }\n    }\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n\n    /* Track */\n    ::-webkit-scrollbar-track {\n        background:  var(--background-primary-color);\n    }\n\n    /* Handle */\n    ::-webkit-scrollbar-thumb {\n        background: var(--primary-color);\n    }\n\n    /* Handle on hover */\n    ::-webkit-scrollbar-thumb:hover {\n        background: var(--primary-color);\n    }\n`\n\nexport const FixedContainer = styled.div`\n    max-width: 125rem;\n    width: 100%;\n`","import React from 'react'\nimport { Container, FixedContainer } from './scroll-container.styles'\n\nconst ScrollContainer = ({ children }) => {\n    return (\n        <Container>\n            <FixedContainer>\n                {children}\n            </FixedContainer>\n        </Container>\n    )\n}\n\nexport default ScrollContainer","import styled from 'styled-components'\n\nexport const CheckboxContainer = styled.div`\n    display: inline-block;\n    cursor: pointer;\n    font-size: 1.5rem;\n    font-weight: 700;\n    /* margin-right: 2rem; */\n    background-color: ${({ isActive }) => isActive ? \"var(--primary-color)\" : \"var(--body-background-primary-color)\"};\n    color: ${({ isActive }) => isActive ? \"var(--button-font-color)\" : \"var(--secondary-text-color)\"};\n    /* font-weight: ${({ isActive }) => isActive ? \"border\" : \"normal\"}; */\n    padding: .8rem 3rem;\n    border-radius: .2rem;\n    transition: all .2s ease-out;\n\n    @media all and (max-width: 500px) {\n        padding: 0.5rem 1.5rem;\n        font-size: 1.4rem;\n    }\n`","import React from 'react'\n\nimport { CheckboxContainer } from './custom-checkbox.styles'\n\nconst CustomCheckbox = ({ label, isActive, handleClick, ...otherprops }) => {\n    return (\n        <CheckboxContainer isActive={isActive} onClick={handleClick} {...otherprops}>\n            {label}\n        </CheckboxContainer>\n    )\n}\n\nexport default CustomCheckbox\n","import styled, { css } from \"styled-components\"\n\nconst shrinkLabel = css`\n    left: .5rem;\n    top: -14px;\n    font-size: 12px;\n    color: var(--input-color);\n`\nexport const InputGroup = styled.div`\n    position: relative;\n    /* margin: 45px 0; */\n\n    .form-input {\n        background: none;\n        background-color: var(--input-background-color);\n        color: var(--input-color);\n\n        font-size: 1.5rem;\n        padding: .5rem .5rem .5rem 2rem;\n        display: block;\n        width: 100%;\n        border: none;\n        border-radius: .5rem;\n        /* border-bottom: 1px solid #000; */\n        margin: 25px 0;\n        font-family: inherit;\n        resize: none;\n\n        &:focus {\n        outline: none;\n        }\n\n        &:focus ~ .form-input-label {\n            ${shrinkLabel}\n        }\n    }\n\n    .form-input-label {\n        color: var(--input-color);\n        font-size: 1.4rem;\n        font-weight: normal;\n        position: absolute;\n        pointer-events: none;\n        left: 1.5rem;\n        top: .6rem;\n        transition: 300ms ease all;\n\n        &.shrink {\n            ${shrinkLabel}\n        }\n    }\n`\n","import React from 'react'\n\nimport { InputGroup } from './custom-textarea.styles'\n\nconst CustomTextarea = ({ handleChange, label, name, ...otherProps }) => {\n    return (\n        <InputGroup>\n            <textarea\n                className='form-input'\n                name={name}\n                onChange={handleChange}\n                {...otherProps}\n            />\n            {label ? (\n                <label htmlFor={name} className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}>\n                    {label}\n                </label>\n            ) : null\n            }\n        </InputGroup>\n    )\n}\n\nexport default CustomTextarea","export const fetchUsers = (token) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users`, requestOptions)\n\n}\n\nexport const fetchUser = (token, id) => {\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n}\n\nexport const patchUser = (token, user, id) => {\n    // const {\n    //     _id: id,\n    //     address,\n    //     admin,\n    //     city,\n    //     country,\n    //     email,\n    //     lenses: {\n    //         cylinder,\n    //         cylinderAxes,\n    //         diopters,\n    //         distance,\n    //         addition,\n    //         basis,\n    //         prism,\n    //     },\n    //     name,\n    //     phone,\n    //     psc,\n    //     premises\n    // } = user\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const raw = JSON.stringify({\n        ...user\n        // address: address || undefined,\n        // admin: admin,\n        // premises: Number(premises) === 0 ? undefined : premises,\n        // city: city || undefined,\n        // country: country || undefined,\n        // email: email || undefined,\n        // lenses: {\n        //     cylinder: cylinder,\n        //     cylinderAxes: cylinderAxes,\n        //     diopters: diopters,\n        //     distance: distance,\n        //     addition: addition,\n        //     basis: basis,\n        //     prism: prism,\n        // },\n        // name: name,\n        // phone: phone || undefined,\n        // psc: psc || undefined,\n    })\n\n    const requestOptions = {\n        method: 'PATCH',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n}\n\nexport const postUser = (token, user) => {\n    const {\n        name,\n        email,\n    } = user\n\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const raw = JSON.stringify({\n        email: email,\n        name: name,\n    })\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\n}\n\nexport const postAdmin = (token, user) => {\n\n    const {\n        name,\n        email,\n        password,\n        premises,\n        admin\n    } = user\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n\n    const raw = JSON.stringify({\n        admin: Number(admin),\n        email: email,\n        name: name,\n        premises: Number(premises),\n        password\n    })\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    return fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/auth/register`, requestOptions)\n}","export const initUserObj = {\n    address: \"\",\n    admin: 0,\n    premises: 0,\n    boughtProducts: {},\n    city: \"\",\n    country: \"\",\n    date: \"\",\n    email: \"\",\n    finishedRegistration: false,\n    company: {\n        ico: \"\",\n        dic: \"\",\n        icdph: \"\",\n        address: '',\n        psc: '',\n        country: '',\n    },\n    lenses: {\n        cylinder: [1001, 1001, 1001, 1001],\n        cylinderAxes: [1001, 1001, 1001, 1001],\n        diopters: [1001, 1001, 1001, 1001],\n        distance: [1001, 1001, 1001, 1001],\n        addition: [1001, 1001, 1001, 1001],\n        basis: [1001, 1001, 1001, 1001],\n        prism: [1001, 1001, 1001, 1001],\n    },\n    name: \"\",\n    orders: [],\n    phone: \"\",\n    psc: \"\",\n    tempUser: false,\n    totalSpent: 0,\n    watchList: [],\n    fName: \"\",\n    lName: \"\",\n    password: '',\n    confirmPassword: \"\",\n    birthDate: Date.now(),\n    optometrist: false\n\n}","import React, { createContext, useState, useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { AuthContext } from '../auth/auth.context'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\n// import { OrderContext } from '../order/order.context'\n\nimport {\n    // fetchUsers,\n    fetchUser,\n    patchUser,\n    postAdmin,\n    postUser,\n} from './user.queries'\n\nimport {\n    initUserObj\n} from './user.utils'\n\nexport const UserContext = createContext({\n    isUpdating: false,\n    activeIndex: 0,\n    handleChangeFilterItem: () => { },\n    filterItems: [],\n    totalCount: 0,\n    users: null,\n    user: null,\n    // getUsers: () => { },\n    getUser: () => { },\n    handleChange: () => { },\n    handleParameterChange: () => { },\n    handleCompanyChange: () => { },\n    updateUser: () => { },\n    resetUser: () => { },\n    formToShow: 0,\n    switchFormButtons: [],\n    toggleUserForm: () => { },\n    createUser: () => { },\n    getFilteredUsers: () => { },\n    getUserByQuery: () => { },\n    deleteUser: () => { },\n})\n\nconst UserProvider = ({ children }) => {\n    const { push } = useHistory()\n    const { token } = useContext(AuthContext)\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n    // ------------------------\n\n    const [user, setUser] = useState(initUserObj)\n    const [users, setUsers] = useState(null)\n    const [totalCount] = useState(0)\n\n    // ------------------------\n\n    console.count(\"USERCONTEXT\")\n    console.log(user)\n\n    const [isUpdating, setIsUpdating] = useState(false)\n    const [activeIndex, setActiveIndex] = useState(0)\n    const filterItems = [\n        {\n            id: 0,\n            name: \"Zákazníci\",\n            filter: 0,\n        },\n        {\n            id: 1,\n            name: \"Zamestnanci\",\n            filter: 1,\n        },\n        {\n            id: 2,\n            name: \"Vedúci\",\n            filter: 2,\n        },\n        // {\n        //     id: 3,\n        //     name: \"Velký brat\",\n        //     filter: 3,\n        // },\n        // {\n        //     id: 4,\n        //     name: \"Odstránené\",\n        //     filter: 3\n        // }\n    ]\n\n    // ------------------------\n\n    const [formToShow, setFormToShow] = useState(0)\n    const switchFormButtons = [\n        {\n            name: \"Zákazník\"\n        },\n        {\n            name: \"Zamestnanec\"\n        }\n    ]\n\n    const toggleUserForm = (e, idx) => {\n        e.preventDefault()\n        setFormToShow(idx)\n    }\n\n    // ------------------------\n\n\n    const handleChangeFilterItem = (itemIndex) => {\n        setActiveIndex(itemIndex)\n    }\n\n    const handleChange = (e) => {\n        const { name, value } = e.target\n\n        setUser({\n            ...user,\n            [name]: value\n        })\n    }\n\n    const handleParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = user.lenses[name]\n        arr[idx] = value === '' ? 1001 : value\n        setUser({\n            ...user,\n            lenses: {\n                ...user.lenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleCompanyChange = (e) => {\n        const { name, value } = e.target\n        setUser({\n            ...user,\n            company: {\n                ...user.company,\n                [name]: value\n            }\n        })\n    }\n\n    useEffect(() => {\n        setUser({\n            ...user,\n            name: user?.fName + \" \" + user?.lName\n        })\n    }, [user?.fName, user?.lName])\n\n    const resetUser = () => {\n        setUser(initUserObj)\n        setIsUpdating(false)\n        setFormToShow(0)\n    }\n\n    // ------------------------\n    // USER ACTIONS\n    // ------------------------\n\n    // Get all users\n    // const getUsers = async () => {\n    //     setIsLoading(true)\n    //     setShowModal(true)\n\n    //     try {\n    //         const response = await fetchUsers(token)\n    //         const data = await response.json()\n\n    //         console.log(data)\n    //         if (data.users) {\n    //             setUsers(data.users)\n    //             setTotalCount(data.count)\n    //             setIsLoading(false)\n    //             closeModal()\n\n    //         } else {\n    //             getMessage(data.message)\n    //             setIsLoading(false)\n    //         }\n    //     } catch (err) {\n    //         console.log(err)\n    //         getMessage(\"Nieco sa pokazilo\")\n    //         setIsLoading(false)\n    //     }\n    // }\n\n    // Get single user\n    const getUser = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n        setIsUpdating(true)\n\n        try {\n            const response = await fetchUser(token, id)\n            const data = await response.json()\n\n            if (data.user) {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                setIsLoading(false)\n                closeModal()\n\n            } else {\n                getMessage(data.message)\n                setIsLoading(false)\n            }\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    // Update user\n    const updateUser = async (user, id, path, refetchUser, close, addUser) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            const response = await patchUser(token, user, id)\n            const data = await response.json()\n\n            if (data.error) {\n                getMessage(data.messageSK)\n                setIsLoading(false)\n                return\n            }\n\n\n            setIsLoading(false)\n            closeModal()\n\n            if (path === 'order') {\n                push(`/dashboard/objednavky/${id}`)\n            } else if (path === 'profile') {\n                push(`/dashboard/zakaznici/${id}`)\n            } else if (path === 'isOrder') {\n                setUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n\n                addUser({\n                    ...user,\n                    ...data.user,\n                    fName: data.user.name ? data.user.name.split(\" \")[0] : \"\",\n                    lName: data.user.name ? data.user.name.split(\" \")[1] : \"\"\n                })\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // console.log(\"REFETCH USER\")\n                // refetchUser()\n                close()\n            } else {\n                push(\"/dashboard/zakaznici\")\n            }\n\n            getFilteredUsers({\n                filters: {\n                    admin: activeIndex\n                }\n            })\n            // http://localhost:1000/#/dashboard/zakaznici\n\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const createUser = async (user, path) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        try {\n            if (formToShow === 0) {\n                let data = {}\n                if (!user._id) {\n                    const response = await postUser(token, user)\n                    data = await response.json()\n\n                    if (data.error) {\n                        getMessage(data.message)\n\n                        if (data.type === 'email') {\n                            getMessage(\"Email existuje\")\n                        }\n                        if (data.error === 'format' && data.message.includes('email')) {\n                            getMessage(\"Email musi byt platny email\")\n                        }\n                        setIsLoading(false)\n                        return\n                    }\n\n                    setUser({\n                        ...data.user,\n                        _id: data.user._id\n                    })\n                }\n\n                const userId = data.user ? data.user._id : user._id\n\n                updateUser({\n                    ...user\n                }, userId, path)\n\n                // setIsLoading(false)\n                // getUsers()\n                // push('/dashboard/zakaznici')\n                // closeModal()\n\n            } else {\n                if (user.password !== user.confirmPassword) {\n                    getMessage(\"Heslá sa nezhodujú\")\n                    setIsLoading(false)\n                    return\n                }\n\n                const response = await postAdmin(token, user)\n                const data = await response.json()\n\n                if (data.error) {\n                    getMessage(data.message)\n                    setIsLoading(false)\n                    return\n                }\n\n                setIsLoading(false)\n                getFilteredUsers({\n                    filters: {\n                        admin: activeIndex\n                    }\n                })\n\n                push(\"/dashboard/zakaznici\")\n                closeModal()\n            }\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n\n\n    // ----------------------------------------------\n    // ----------------------------------------------\n    // ----------------------------------------------\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const deleteUser = async (id) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            // body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/${id}`, requestOptions)\n            const data = await response.json()\n\n            if (data.user) {\n\n                push(\"/dashboard/zakaznici\")\n                setIsLoading(false)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Niečo sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getFilteredUsers = async (filter) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(filter)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.messageSK)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const getUserByQuery = async (query) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(query)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/users/filter`, requestOptions)\n            const data = await response.json()\n\n            if (data.users) {\n                setUsers(data.users)\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <UserContext.Provider\n            value={{\n                isUpdating,\n                activeIndex,\n                handleChangeFilterItem,\n                filterItems,\n                users,\n                user,\n                totalCount,\n                // getUsers,\n                getUser,\n                handleChange,\n                handleParameterChange,\n                handleCompanyChange,\n                updateUser,\n                resetUser,\n                formToShow,\n                switchFormButtons,\n                toggleUserForm,\n                createUser,\n                getFilteredUsers,\n                getUserByQuery,\n                deleteUser\n            }}\n        >\n            {children}\n        </UserContext.Provider>\n    )\n}\n\nexport default UserProvider","import styled from 'styled-components'\n\nexport const InputRow = styled.div`\n    display:flex;\n    align-items: center;\n\n    p {\n        margin-top: 1.8rem;\n        margin-left: 2rem;\n            opacity: .75;\n\n        span {\n            font-weight: 700;\n        }\n    }\n\n    @media all and (max-width: 800px) {\n        flex-direction: column-reverse;\n        align-items: flex-start;\n\n        p {\n            margin-left: unset;\n        }\n    }\n`","import React from 'react'\n\nimport { InputRow } from './product-input-row.styles'\n\nconst ProductInputRow = ({ children, label, example, ...otherprops }) => {\n    return (\n        <InputRow {...otherprops}>\n            <div>\n                {children}\n            </div>\n            <div>\n                <p>{label + \" \"}<span>{example}</span></p>\n            </div>\n        </InputRow>\n    )\n}\n\nexport default ProductInputRow\n","import React, { createContext, useContext } from 'react'\nimport { LoadingModalContext } from '../loading-modal/loading-modal.contenxt'\nimport { AuthContext } from '../auth/auth.context'\n\nexport const ExaminationContext = createContext({\n    createExamination: () => { },\n    updateExamination: () => { },\n    deleteExamination: () => { },\n})\n\nconst ExaminationProvider = ({ children }) => {\n    const { token } = useContext(AuthContext)\n    const {\n        closeModal,\n        getMessage,\n        setIsLoading,\n        setShowModal\n    } = useContext(LoadingModalContext)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const createExamination = async (examsToAdd) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(examsToAdd)\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/exams/`, requestOptions)\n            const data = await response.json()\n\n\n            if (data.exam) {\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const updateExamination = async (examToUpdate, examId) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const raw = JSON.stringify(examToUpdate)\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/exams/${examId}`, requestOptions)\n            const data = await response.json()\n\n\n            if (data.exam) {\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    const deleteExamination = async (examId) => {\n        setIsLoading(true)\n        setShowModal(true)\n\n        const requestOptions = {\n            method: 'DELETE',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n\n        try {\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/api/admin/exams/${examId}`, requestOptions)\n            const data = await response.json()\n\n            if (data.exam) {\n                closeModal()\n                return\n            }\n\n            getMessage(data.message)\n            setIsLoading(false)\n        } catch (err) {\n            console.log(err)\n            getMessage(\"Nieco sa pokazilo\")\n            setIsLoading(false)\n        }\n    }\n\n    return (\n        <ExaminationContext.Provider\n            value={{\n                createExamination,\n                updateExamination,\n                deleteExamination\n            }}\n        >\n            {children}\n        </ExaminationContext.Provider>\n    )\n}\n\nexport default ExaminationProvider","import styled from 'styled-components'\n\nexport const TableContainer = styled.div`\n    display: grid;\n    grid-template-columns: 2rem repeat(7, 7.5rem);\n    margin-bottom: 3rem;\n`\n\nexport const TitleCol = styled.div`\n    display: grid;\n    grid-template-rows: repeat(4, 5rem);\n    div {\n        align-self: center;\n        display:flex;\n        justify-content: space-between;\n    }\n`\n\nexport const Col = styled.div`\n    display: grid;\n    grid-template-rows: repeat(4, 5rem);\n    div {\n        text-align:center;\n        align-self: center;\n        margin-left: .5rem;\n\n\n        &:nth-child(1) {\n            align-self: center;\n        }\n\n        input {\n            display:block;\n            width: 100%;\n            border: none;\n            padding: 1rem .5rem;\n            text-align: center;\n            font-family: inherit;\n            font-size: inherit;\n            background-color: var(--input-background-color);\n            color: var(--input-color);\n            border-radius: .5rem;\n            outline: none;\n\n            &:focus {\n                outline: none;\n            }\n\n            &:disabled {\n                opacity: .83;\n            }\n        }\n\n        input[type=number]::-webkit-inner-spin-button, \n        input[type=number]::-webkit-outer-spin-button {  \n            opacity: 1;\n\n        }\n    }\n`\n\nexport const OsContainer = styled.div`\n        text-align:center;\n        align-self: center;\n        margin-left: .5rem;\n\n\n        &:nth-child(1) {\n            align-self: center;\n        }\n\n        input {\n            display:block;\n            width: 100%;\n            border: none;\n            padding: 1rem .5rem;\n            text-align: center;\n            font-family: inherit;\n            font-size: inherit;\n            background-color: var(--input-background-color);\n            color: var(--input-color);\n            border-radius: .5rem;\n            outline: none;\n\n            &:focus {\n                outline: none;\n            }\n        }\n\n        input[type=number]::-webkit-inner-spin-button, \n        input[type=number]::-webkit-outer-spin-button {  \n            display:none;\n            opacity: 0;\n\n        }\n`","import React, { useEffect } from 'react'\n\nimport { formatfloatNumber } from '../../utils/warehouse.utils'\n\nimport {\n    TableContainer,\n    TitleCol,\n    Col,\n    OsContainer\n} from './parameters-table.styles'\n\nconst ParametersTable = ({ parameters, handleChange, disabledInputs = false }) => {\n    const checkParameters = (parameter, idx) => {\n        if (parameter.length === 0) {\n            return \"\"\n        }\n        if (parameter[idx] === 1001) {\n            return \"\"\n        }\n\n        return parameter[idx]\n    }\n\n    const formatParameter = (e, idx) => {\n        const value = formatfloatNumber(e.target.value)\n        handleChange({\n            target: {\n                value: Number(value).toFixed(2),\n                name: e.target.name\n            }\n        }, idx)\n    }\n\n    useEffect(() => {\n        if (handleChange) {\n            if (parameters.addition[0] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 0)) + Number(checkParameters(parameters.addition, 0))).toFixed(2)\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[0] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 2)\n            }\n\n            if (parameters.addition[1] !== 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))) === 0 ? \"\" : (Number(checkParameters(parameters.diopters, 1)) + Number(checkParameters(parameters.addition, 1))).toFixed(2)\n                    }\n                }, 3)\n                return\n            }\n\n\n            if (parameters.addition[1] === 1001) {\n                handleChange({\n                    target: {\n                        name: \"diopters\",\n                        value: 1001\n                    }\n                }, 3)\n            }\n        }\n    }, [parameters.diopters[0], parameters.addition[0], parameters.diopters[1], parameters.addition[1]])\n\n    return (\n        <TableContainer>\n            <TitleCol>\n                <div>{\" \"}</div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n                <div>\n                    <p>P</p>\n                </div>\n                <div>\n                    <p>Ľ</p>\n                </div>\n            </TitleCol>\n\n\n            <Col>\n                <div>sph</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.diopters, idx)}\n                                name=\"diopters\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>cyl</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.cylinder, idx)}\n                                name=\"cylinder\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>ax</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <OsContainer key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.cylinderAxes, idx)}\n                                name=\"cylinderAxes\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n\n                            />\n                        </OsContainer>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>PD</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.distance, idx)}\n                                name=\"distance\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>prizma</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.prism, idx)}\n                                name=\"prism\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>basis</div>\n\n                {[...Array(4)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.basis, idx)}\n                                name=\"basis\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n            <Col>\n                <div>addicia</div>\n\n                {[...Array(2)].map((value, idx) => {\n                    return (\n                        <div key={idx}>\n                            <input\n                                type='text'\n                                value={checkParameters(parameters.addition, idx)}\n                                name=\"addition\"\n                                onChange={(e) => handleChange(e, idx)}\n                                disabled={disabledInputs}\n                                onBlur={e => formatParameter(e, idx)}\n\n                            />\n                        </div>\n                    )\n                })}\n            </Col>\n\n\n        </TableContainer>\n    )\n}\n\nexport default ParametersTable\n"],"sourceRoot":""}