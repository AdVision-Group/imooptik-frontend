{"version":3,"sources":["components/product-glasses-form/product-glasses-form.styles.jsx","components/product-glasses-form/product-glasses-form.component.jsx","components/product-lenses-form/product-lenses-form.styles.jsx","components/product-lenses-form/product-lenses-form.component.jsx","components/product-accessories-form/product-accessories-form.styles.jsx","components/product-accessories-form/product-accessories-form.component.jsx","components/product-contact-lenses-form/product-contact-lenses-form.styles.jsx","components/product-contact-lenses-form/product-contact-lenses-form.component.jsx","components/product-service-form/product-service-form.styles.jsx","components/product-service-form/product-service-form.component.jsx","sections/product/product.styles.jsx","sections/product/product.section.jsx","hooks/useFetch.jsx"],"names":["BrandedCheckbox","styled","CustomCheckbox","ImageContainer","div","ProductImage","hasImage","GlassesContainerForm","GlassesContainer","GlassesParameterContainer","StockContainer","CustomSelect","select","ProductGlassesForm","product","handleChange","selectedImage","retailNames","currentUser","checkParameter","handleAvailableChange","handleGlassesParametersChange","handleGlassesSpecsSizeChange","handleSpecsChange","glassesParameters","setImageModal","isUpdating","filters","useState","isBranded","setIsBranded","useEffect","brand","label","type","name","value","eanCode","toString","e","isActive","handleClick","target","Fragment","list","id","brands","map","idx","link","rows","description","required","price","onClick","src","process","imagePath","alt","colorCode","specs","frameColor","glassesColors","color","frameMaterial","glassesMaterials","material","frameStyle","glassesShapes","shape","lensColor","sex","onChange","size","admin","available","premises","LensesFormContainer","LensesContainer","LensesParametersContainer","SubGridContainer","TypesContainer","TypeCheckbox","ProductLensesForm","lenses","handleParameterChange","console","log","lensesTypes","lensType","dioptric","Array","inputLabel","dioptersRange","cylinderRange","AccessoriesFormContainer","AccessoriesContainer","ProductAccessoriesForm","ContactLensesFormContainer","ContactLensesContainer","ContactLensesParametersContainer","IncreaseButton","CustomButton","ProductContactLensesForm","handleContactLensesChange","handleAddNewParameter","contactLensesParameters","allowedCurves","allowedDiameters","ServiceFormContainer","ServiceContainer","ProductServiceForm","Header","paddingStyles","SubmitButton","IsPublicCheckbox","CategoryContainer","CategoryCheckbox","ProductSection","useParams","useContext","AuthContext","LoadingModalContext","closeModal","message","isLoading","showModal","getMessage","setShowModal","ImageContext","setSelectedImage","showImageModal","setIsUpdating","WarehouseContext","handleLensesChange","handleLensesParameterChange","createProduct","updateProduct","resetProduct","resetLenses","resetContactLenses","resetGlassesParameters","createLenses","updateLenses","handleProductChange","handleProductAvailableChange","getEanCode","handleContactLensesParameterChange","handleGlassesParameterChange","handleGlassesParameterSpecsChange","handleGlassesSizeChange","getSingleProduct","hasChanged","setHasChanged","productObj","setProductObj","useFetch","response","isLoadingFilters","refetch","setFilters","handleChangeType","Object","keys","length","window","confirm","formatLink","arr","Number","undefined","image","when","loading","title","close","setImage","imgId","eshop","preventDefault","newProductObj","updatedObj","contactLenses","updatedObg","productCategories","category","splice","firstIndex","find","path","skip","method","setResponse","error","setError","setMessage","setIsLoading","refetchIndex","setRefetchIndex","prevRefetchIndex","requestOptions","redirect","a","fetch","res","json","data","fetchData","useFetchByQuery","queryObj","myHeaders","Headers","append","localStorage","getItem","raw","JSON","stringify","headers","body","useFetchById"],"mappings":"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","file":"static/js/23.ba135522.chunk.js","sourcesContent":["import styled from 'styled-components'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\nexport const BrandedCheckbox = styled(CustomCheckbox)`\n    margin-top: 2rem;\n`\n\nexport const ImageContainer = styled.div`\n    margin-top: 2rem;\n    \n`\n\nexport const ProductImage = styled.div`\n    cursor: pointer;\n    display:flex;\n    align-items: center;\n    justify-content:center;\n    background-color: ${({ hasImage }) => hasImage ? \"transparent\" : \"var(--input-background-color)\"};\n    margin: 3rem 0 2rem;\n    min-height: 20rem;\n    position: relative;\n    /* max-width: 45rem; */\n\n    img {\n        width: 100%;\n        object-fit:cover;\n        object-position:center;\n        left: 0;\n        top: 0;\n    }\n`\n\nexport const GlassesContainerForm = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 3rem;\n    align-items: start;\n`\n\nexport const GlassesContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n    border-radius: .5rem;\n`\n\nexport const GlassesParameterContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n    border-radius: .5rem;\n    margin-bottom: 3rem;\n\n    h4 {\n        margin-top: 2rem;\n    }\n`\n\nexport const StockContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n    border-radius: .5rem;\n`\n\nexport const CustomSelect = styled.select`\n    margin-top: 1.5rem;\n    min-width: 16.5rem;\n    width: 100%;\n    background-color: var(--input-background-color);\n    color: var(--input-color);\n    border: none;\n    padding: .5rem .5rem .5rem 1rem;\n    font-size: inherit;\n    font-family: inherit;\n    display: block;\n`","import React, { useState, useEffect } from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport { glassesColors, glassesMaterials, glassesShapes } from '../../utils/warehouse.utils'\n\nimport {\n    ImageContainer,\n    ProductImage,\n    GlassesContainerForm,\n    GlassesContainer,\n    GlassesParameterContainer,\n    StockContainer,\n    CustomSelect,\n    BrandedCheckbox\n} from './product-glasses-form.styles.jsx'\n\nconst ProductGlassesForm = ({\n    product,\n    handleChange,\n    selectedImage,\n    retailNames,\n    currentUser,\n    checkParameter,\n    handleAvailableChange,\n    handleGlassesParametersChange,\n    handleGlassesSpecsSizeChange,\n    handleSpecsChange,\n    glassesParameters,\n    setImageModal,\n    isUpdating,\n    filters\n}) => {\n    const [isBranded, setIsBranded] = useState(true)\n\n\n    const handleIsBrandedClick = (isBrandedBool) => {\n        if (isBrandedBool) {\n            handleChange({\n                target: {\n                    name: \"brand\",\n                    value: \"Neznačkové\"\n                }\n            })\n            setIsBranded(false)\n        } else {\n            handleChange({\n                target: {\n                    name: \"brand\",\n                    value: \"\"\n                }\n            })\n\n            setIsBranded(true)\n\n        }\n    }\n\n    useEffect(() => {\n        if (product.brand === \"Neznačkové\") setIsBranded(false)\n    }, [isBranded])\n\n    return (\n        <GlassesContainerForm>\n            <GlassesContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov produktu*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <BrandedCheckbox\n                    label={\"Značkové\"}\n                    isActive={isBranded}\n                    handleClick={() => handleIsBrandedClick(isBranded)}\n                />\n\n                {isBranded && (\n                    <React.Fragment>\n                        <CustomInput\n                            label=\"Značka\"\n                            type='text'\n                            name='brand'\n                            value={product.brand ?? \"\"}\n                            handleChange={(e) => handleChange(e)}\n                            list=\"brands\"\n                        />\n                        <datalist id=\"brands\">\n                            {filters?.brands && filters?.brands.map((brand, idx) => (\n                                <option key={idx} value={brand} />\n                            ))}\n                        </datalist>\n                    </React.Fragment>\n                )}\n\n                {/* <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n\n                /> */}\n\n                {/* <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n            </GlassesContainer>\n            <div>\n                <GlassesParameterContainer>\n                    <h3>Parametre</h3>\n                    <CustomInput\n                        label=\"Farebný kód\"\n                        type='text'\n                        name='colorCode'\n                        value={glassesParameters.colorCode ?? \"\"}\n                        handleChange={(e) => handleGlassesParametersChange(e)}\n                    />\n                    <div>\n                        <CustomInput\n                            label=\"Farba rámu\"\n                            type='text'\n                            name='frameColor'\n                            value={glassesParameters.specs.frameColor ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"colors\"\n\n                        />\n                        <datalist id=\"colors\">\n                            {glassesColors.map((color, idx) => (\n                                <option key={idx} value={color} />\n                            ))}\n                        </datalist>\n                        <CustomInput\n                            label=\"Materiál rámu\"\n                            type='text'\n                            name='frameMaterial'\n                            value={glassesParameters.specs.frameMaterial ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"materials\"\n\n                        />\n                        <datalist id=\"materials\">\n                            {glassesMaterials.map((material, idx) => (\n                                <option key={idx} value={material} />\n                            ))}\n                        </datalist>\n                        <CustomInput\n                            label=\"Tvar rámu\"\n                            type='text'\n                            name='frameStyle'\n                            value={glassesParameters.specs.frameStyle ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                            list=\"shapes\"\n                        />\n                        <datalist id=\"shapes\">\n                            {glassesShapes.map((shape, idx) => (\n                                <option key={idx} value={shape} />\n                            ))}\n                        </datalist>\n                        <CustomInput\n                            label=\"Farba šošovky\"\n                            type='text'\n                            name='lensColor'\n                            value={glassesParameters.specs.lensColor ?? \"\"}\n                            handleChange={(e) => handleSpecsChange(e)}\n                        />\n                        <CustomSelect\n                            label=\"Pohlavie\"\n                            type='text'\n                            name='sex'\n                            value={glassesParameters?.specs?.sex || \"\"}\n                            onChange={(e) => handleSpecsChange(e)}\n                        >\n                            <option value=''>-</option>\n                            <option value='M'>Pánske</option>\n                            <option value='W'>Dámske</option>\n                            <option value='CH'>Detské</option>\n                            <option value='U'>Nezáleží</option>\n                        </CustomSelect>\n                    </div>\n                    <div>\n                        <h4>Velkosť</h4>\n                        {glassesParameters.specs.size.map((value, idx) => (\n                            <CustomInput\n                                key={idx}\n                                label={idx === 0 ? \"Šírka očnice (mm)\" : idx === 1 ? \"Výška očnice (mm)\" : idx === 2 ? \"Veľkosť nosníka (mm)\" : \"Dĺžka stranice (mm)\"}\n                                type='text'\n                                name='size'\n                                value={checkParameter(glassesParameters.specs.size, idx)}\n                                handleChange={(e) => handleGlassesSpecsSizeChange(e, idx)}\n                            />\n                        ))}\n                    </div>\n                </GlassesParameterContainer>\n                {currentUser.admin >= 2 ? (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        {product.available.map((value, idx) => {\n                            if (idx === 0) return\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[idx]}\n                                    type='number'\n                                    name={\"available\"}\n                                    value={checkParameter(product.available, idx)}\n                                    handleChange={e => handleAvailableChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </StockContainer>\n                ) : (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        <CustomInput\n                            label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                            type='number'\n                            name={\"available\"}\n                            value={checkParameter(product.available, currentUser.premises)}\n                            handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                        />\n                    </StockContainer>\n                )}\n            </div>\n        </GlassesContainerForm>\n    )\n}\n\nexport default ProductGlassesForm\n","import styled from 'styled-components'\nimport CustomCheckbox from '../custom-checkbox/custom-checkbox.component'\n\n\nexport const LensesFormContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 3rem;\n    align-items: start;\n`\n\nexport const LensesContainer = styled.div`\n    /* width: 45rem; */\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    border-radius: .5rem;\n    /* display: inline-block; */\n    /* padding-bottom: 4rem;  */\n    margin-bottom: 5rem;\n`\n\nexport const LensesParametersContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n    h3 {\n        /* margin-bottom: 1rem; */\n    }\n\n    h4 {\n        margin-top: 2rem;\n    }\n`\n\nexport const ImageContainer = styled.div`\n    margin-top: 2rem;\n    \n`\n\nexport const ProductImage = styled.div`\n    cursor: pointer;\n    display:flex;\n    align-items: center;\n    justify-content:center;\n    background-color: ${({ hasImage }) => hasImage ? \"transparent\" : \"var(--input-background-color)\"};\n    margin: 3rem 0 2rem;\n    min-height: 20rem;\n    position: relative;\n    /* max-width: 45rem; */\n\n    img {\n        width: 100%;\n        object-fit:cover;\n        object-position:center;\n        left: 0;\n        top: 0;\n    }\n`\nexport const SubGridContainer = styled.div`\n\n`\n\nexport const TypesContainer = styled.div`\n    padding: 2rem;\n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    margin-bottom: 3rem;\n\n    h3 {\n        /* margin-bottom: 1rem; */\n    }\n\n    h4 {\n        margin-top: 2rem;\n    }\n\n    div {\n        :not(:last-child) {\n            margin-bottom: 1rem;\n        }\n    }\n`\n\nexport const TypeCheckbox = styled(CustomCheckbox)`\n    &:not(:last-child) {\n        margin-right: 2rem;\n    }\n`","import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport { lensesTypes } from '../../context/warehouse/warehouse.utils'\n\nimport {\n    LensesFormContainer,\n    LensesContainer,\n    LensesParametersContainer,\n    ProductImage,\n    ImageContainer,\n    TypesContainer,\n    SubGridContainer,\n    TypeCheckbox\n} from './product-lenses-form.styles'\n\nconst ProductLensesForm = ({\n    lenses,\n    selectedImage,\n    setImageModal,\n    handleChange,\n    handleParameterChange,\n    checkParameter,\n    filters\n\n}) => {\n    console.log(lenses)\n\n    return (\n        <LensesFormContainer>\n            <LensesContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='eanCode'\n                    value={lenses?.eanCode?.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov šošoviek*\"\n                    type='text'\n                    name='name'\n                    value={lenses.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Značka*\"\n                    type='text'\n                    name='brand'\n                    value={lenses.brand ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"brands\"\n                />\n\n                <datalist id=\"brands\">\n                    {filters?.brands && filters?.brands.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist>\n\n                <CustomTextarea\n                    label=\"Popis*\"\n                    name='description'\n                    rows='5'\n                    value={lenses.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={lenses.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n            </LensesContainer>\n            <SubGridContainer>\n                <TypesContainer>\n                    <h3>Druh</h3>\n\n                    <div>\n                        {lensesTypes.map((type, idx) => (\n                            <TypeCheckbox\n                                key={idx}\n                                label={type}\n                                value={type}\n                                name='lensType'\n                                isActive={type === lenses?.lensType}\n                                handleClick={() => handleChange({\n                                    target: {\n                                        name: \"lensType\",\n                                        value: type\n                                    }\n                                })}\n                            />\n                        ))}\n                    </div>\n\n                    <div>\n                        <TypeCheckbox\n                            label=\"Dioptrické\"\n                            value={lenses.dioptric}\n                            name='dioptric'\n                            isActive={lenses.dioptric}\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"dioptric\",\n                                    value: !lenses.dioptric\n                                }\n                            })}\n                        />\n                    </div>\n                </TypesContainer>\n                <LensesParametersContainer>\n                    <h3>Parametre</h3>\n\n                    <h4>Dioptrie</h4>\n                    {[...Array(2)].map((value, idx) => {\n                        const inputLabel = idx === 0 ? \"minimum*\" : \"maximum*\"\n\n                        return (\n                            <div key={idx}>\n                                <CustomInput\n                                    label={inputLabel}\n                                    type='number'\n                                    name='dioptersRange'\n                                    value={checkParameter(lenses.dioptersRange, idx)}\n                                    handleChange={(e) => handleParameterChange(e, idx)}\n                                />\n                            </div>\n                        )\n                    })}\n\n                    <h4>Cylinder</h4>\n                    {[...Array(2)].map((value, idx) => {\n                        const inputLabel = idx === 0 ? \"minimum*\" : \"maximum*\"\n\n                        return (\n                            <div key={idx}>\n                                <CustomInput\n                                    label={inputLabel}\n                                    type='number'\n                                    name='cylinderRange'\n                                    value={checkParameter(lenses.cylinderRange, idx)}\n                                    handleChange={(e) => handleParameterChange(e, idx)}\n                                />\n                            </div>\n                        )\n                    })}\n                </LensesParametersContainer>\n            </SubGridContainer>\n        </LensesFormContainer>\n    )\n}\n\nexport default ProductLensesForm\n","import styled from 'styled-components'\n\nexport const ImageContainer = styled.div`\n    margin-top: 2rem;\n    \n`\n\nexport const ProductImage = styled.div`\n    cursor: pointer;\n    display:flex;\n    align-items: center;\n    justify-content:center;\n    background-color: ${({ hasImage }) => hasImage ? \"transparent\" : \"var(--input-background-color)\"};\n    margin: 3rem 0 2rem;\n    min-height: 20rem;\n    position: relative;\n    /* max-width: 45rem; */\n\n    img {\n        width: 100%;\n        object-fit:cover;\n        object-position:center;\n        left: 0;\n        top: 0;\n    }\n`\n\nexport const AccessoriesFormContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 3rem;\n    align-items: start;\n`\n\nexport const AccessoriesContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    border-radius: .5rem;\n`\n\nexport const StockContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    border-radius: .5rem;\n`","import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\nimport {\n    AccessoriesFormContainer,\n    AccessoriesContainer,\n    StockContainer,\n    ImageContainer,\n    ProductImage,\n} from './product-accessories-form.styles'\n\nconst ProductAccessoriesForm = ({\n    product,\n    handleChange,\n    selectedImage,\n    setImageModal,\n    handleAvailableChange,\n    checkParameter,\n    retailNames,\n    currentUser,\n    isUpdating,\n    filters\n}) => {\n    return (\n        <AccessoriesFormContainer>\n            <AccessoriesContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='name'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov doplnku*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Značka\"\n                    type='text'\n                    name='brand'\n                    value={product.brand ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"brands\"\n                />\n\n                <datalist id=\"brands\">\n                    {filters?.brands && filters?.brands.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist>\n\n                {/* <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n\n                />\n\n                <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n            </AccessoriesContainer>\n            {currentUser.admin >= 2 ? (\n                <StockContainer>\n                    <h3>Skladové zásoby</h3>\n                    {product.available.map((value, idx) => {\n                        if (idx === 0) return\n                        return (\n                            <CustomInput\n                                key={idx}\n                                label={currentUser.admin === 1 ? retailNames[currentUser.premises - 1] : retailNames[idx]}\n                                type='number'\n                                name={\"available\"}\n                                value={checkParameter(product.available, idx)}\n                                handleChange={e => handleAvailableChange(e, idx)}\n                            />\n                        )\n                    })}\n                </StockContainer>\n            ) : (\n                <StockContainer>\n                    <h3>Skladové zásoby</h3>\n                    <CustomInput\n                        label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                        type='number'\n                        name={\"available\"}\n                        value={checkParameter(product.available, currentUser.premises)}\n                        handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                    />\n                </StockContainer>\n            )}\n        </AccessoriesFormContainer>\n    )\n}\n\nexport default ProductAccessoriesForm\n","import styled from 'styled-components'\nimport CustomButton from '../custom-button/custom-button.component'\n\nexport const ImageContainer = styled.div`\n    margin-top: 2rem;\n    \n`\n\nexport const ProductImage = styled.div`\n    cursor: pointer;\n    display:flex;\n    align-items: center;\n    justify-content:center;\n    background-color: ${({ hasImage }) => hasImage ? \"transparent\" : \"var(--input-background-color)\"};\n    margin: 3rem 0 2rem;\n    min-height: 20rem;\n    position: relative;\n    /* max-width: 45rem; */\n\n    img {\n        width: 100%;\n        object-fit:cover;\n        object-position:center;\n        left: 0;\n        top: 0;\n    }\n`\n\nexport const ContactLensesFormContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 3rem;\n    align-items: start;\n`\n\nexport const ContactLensesContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    border-radius: .5rem;\n`\n\nexport const ContactLensesParametersContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n    border-radius: .5rem;\n    margin-bottom: 3rem;\n\n    h4 {\n        margin-top: 1rem;\n    }\n`\n\nexport const IncreaseButton = styled(CustomButton)`\n    margin-top: 2rem;\n    font-size: 1.4rem;\n\n`\n\nexport const StockContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n\n    border-radius: .5rem;\n`","import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\n// import { lensesBrands } from '../../utils/warehouse.utils'\n\nimport {\n    ContactLensesContainer,\n    ContactLensesFormContainer,\n    StockContainer,\n    ContactLensesParametersContainer,\n    IncreaseButton,\n    ImageContainer,\n    ProductImage,\n} from './product-contact-lenses-form.styles'\n\nconst ProductContactLensesForm = ({\n    product,\n    handleChange,\n    setImageModal,\n    selectedImage,\n    checkParameter,\n    handleContactLensesChange,\n    handleAddNewParameter,\n    contactLensesParameters,\n    retailNames,\n    currentUser,\n    handleAvailableChange,\n    isUpdating,\n    filters\n}) => {\n    return (\n        <ContactLensesFormContainer>\n            <ContactLensesContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='name'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n                <CustomInput\n                    label=\"Názov doplnku*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Značka\"\n                    type='text'\n                    name='brand'\n                    value={product.brand ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"brands\"\n                />\n                <datalist id=\"brands\">\n                    {filters?.brands && filters?.brands.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist>\n                {/* \n                <CustomInput\n                    label=\"Kategória\"\n                    type='text'\n                    name='category'\n                    value={product.category ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    list=\"categories\"\n                />\n\n                <datalist id=\"categories\">\n                    {filters?.categories && filters?.categories.map((brand, idx) => (\n                        <option key={idx} value={brand} />\n                    ))}\n                </datalist> */}\n\n                {isUpdating && <CustomInput\n                    label=\"Link\"\n                    type='text'\n                    name='link'\n                    value={product.link ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />}\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer>\n            </ContactLensesContainer>\n            <div>\n                <ContactLensesParametersContainer>\n                    <h3>Parametre</h3>\n                    <div>\n                        <h4>Zakrivenie</h4>\n                        {contactLensesParameters.allowedCurves.map((value, idx) => {\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={idx + 1}\n                                    type='text'\n                                    name={\"allowedCurves\"}\n                                    value={checkParameter(contactLensesParameters.allowedCurves, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                        <IncreaseButton onClick={() => handleAddNewParameter({\n                            target: {\n                                name: 'allowedCurves'\n                            }\n                        })}>Pridať</IncreaseButton>\n                    </div>\n                    <div>\n                        <h4>Priemery</h4>\n                        {contactLensesParameters.allowedDiameters.map((value, idx) => {\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={idx + 1}\n                                    type='text'\n                                    name={\"allowedDiameters\"}\n                                    value={checkParameter(contactLensesParameters.allowedDiameters, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                        <IncreaseButton onClick={() => handleAddNewParameter({\n                            target: {\n                                name: 'allowedDiameters'\n                            }\n                        })}>Pridať</IncreaseButton>\n                    </div>\n\n                    <div>\n                        <h4>Dioptrie</h4>\n                        {contactLensesParameters.dioptersRange.map((value, idx) => {\n                            const inputLabel = idx === 0 ? \"minimum\" : \"maximum\"\n\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={inputLabel}\n                                    type='text'\n                                    name={\"dioptersRange\"}\n                                    value={checkParameter(contactLensesParameters.dioptersRange, idx)}\n                                    handleChange={e => handleContactLensesChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </div>\n                </ContactLensesParametersContainer>\n\n                {currentUser.admin >= 2 ? (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        {product.available.map((value, idx) => {\n                            console.log(product.available)\n                            if (idx === 0) return\n                            return (\n                                <CustomInput\n                                    key={idx}\n                                    label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[idx]}\n                                    type='number'\n                                    name={\"available\"}\n                                    value={checkParameter(product.available, idx)}\n                                    handleChange={e => handleAvailableChange(e, idx)}\n                                />\n                            )\n                        })}\n                    </StockContainer>\n                ) : (\n                    <StockContainer>\n                        <h3>Skladové zásoby</h3>\n                        <CustomInput\n                            label={currentUser.admin === 1 ? retailNames[currentUser.premises] : retailNames[currentUser.premises]}\n                            type='number'\n                            name={\"available\"}\n                            value={checkParameter(product.available, currentUser.premises)}\n                            handleChange={e => handleAvailableChange(e, currentUser.premises)}\n                        />\n                    </StockContainer>\n                )}\n            </div>\n        </ContactLensesFormContainer>\n    )\n}\n\nexport default ProductContactLensesForm\n","import styled from 'styled-components'\n\nexport const ServiceFormContainer = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 3rem;\n    align-items: start;\n`\n\nexport const ServiceContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    border-radius: .5rem;\n`\n\nexport const ImageContainer = styled.div`\n    margin-top: 2rem;\n    \n`\n\nexport const ProductImage = styled.div`\n    cursor: pointer;\n    display:flex;\n    align-items: center;\n    justify-content:center;\n    background-color: ${({ hasImage }) => hasImage ? \"transparent\" : \"var(--input-background-color)\"};\n    margin: 3rem 0 2rem;\n    min-height: 20rem;\n    position: relative;\n    /* max-width: 45rem; */\n\n    img {\n        width: 100%;\n        object-fit:cover;\n        object-position:center;\n        left: 0;\n        top: 0;\n    }\n`","import React from 'react'\n\nimport CustomInput from '../custom-input/custom-input.component'\nimport CustomTextarea from '../custom-textarea/custom-textarea.component'\n\n\nimport {\n    ServiceFormContainer,\n    ServiceContainer,\n    ImageContainer,\n    ProductImage\n} from './product-service-form.styles'\n\nconst ProductServiceForm = ({\n    product,\n    // isUpdating,\n    handleChange,\n    selectedImage,\n    setImageModal,\n}) => {\n    return (\n        <ServiceFormContainer>\n            <ServiceContainer>\n                <h3>Základné informácie</h3>\n                <CustomInput\n                    label=\"eanCode*\"\n                    type='text'\n                    name='name'\n                    value={product.eanCode.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Názov služby*\"\n                    type='text'\n                    name='name'\n                    value={product.name ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                />\n\n                <CustomInput\n                    label=\"Cena*\"\n                    type='text'\n                    name='price'\n                    value={product.price.toString() ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                <CustomTextarea\n                    label=\"Popis\"\n                    name='description'\n                    rows='5'\n                    value={product.description ?? \"\"}\n                    handleChange={(e) => handleChange(e)}\n                    required\n                />\n\n                {/* <ImageContainer>\n                    <ProductImage onClick={() => setImageModal(true)} hasImage={selectedImage}>\n                        {!selectedImage && \"Vybrať obrázok\"}\n                        {selectedImage && <img src={`${process.env.REACT_APP_BACKEND_ENDPOINT}/uploads/${selectedImage.imagePath}`} alt={selectedImage.alt} />}\n                    </ProductImage>\n                </ImageContainer> */}\n            </ServiceContainer>\n        </ServiceFormContainer>\n    )\n}\n\nexport default ProductServiceForm\n","import styled from 'styled-components'\nimport { paddingStyles } from '../../global.styles'\nimport CustomButton from '../../components/custom-button/custom-button.component'\nimport CustomCheckbox from '../../components/custom-checkbox/custom-checkbox.component'\n\nexport const Header = styled.div`\n    ${paddingStyles}\n    padding-top: 3rem;\n    padding-bottom: 3rem;\n    color: var(--primary-text-color);\n\n`\n\nexport const SubmitButton = styled(CustomButton)`\n\n`\n\nexport const IsPublicCheckbox = styled(CustomCheckbox)`\n    margin-right: 2rem;\n`\n\n\nexport const CategoryContainer = styled.div`\n    padding: 2rem; \n    box-shadow: var(--container-shadow);\n    background-color: var(--container-background-color);\n    border-radius: .5rem;\n    display: inline-block;\n    margin-bottom: 3rem;\n\n    h3 {\n        margin-bottom: 1.5rem;\n    }\n`\nexport const CategoryCheckbox = styled(CustomCheckbox)`\n    &:not(:last-child) {\n        margin-right: 2rem;\n    }\n`","import React, { useState, useContext, useEffect } from 'react'\nimport { AuthContext } from '../../context/auth/auth.context'\nimport { WarehouseContext } from '../../context/warehouse/warehouse.context'\nimport { ImageContext } from '../../context/image/image.context'\nimport { LoadingModalContext } from '../../context/loading-modal/loading-modal.contenxt'\nimport { useParams, Prompt } from 'react-router-dom'\n\nimport ScrollContainer from '../../components/scroll-container/scroll-container.component'\nimport ModalImage from '../../components/modal-images/modal-images.component'\nimport Popup from '../../components/popup/pop-up.component'\n\nimport ProductGlassesForm from '../../components/product-glasses-form/product-glasses-form.component'\nimport ProductLensesForm from '../../components/product-lenses-form/product-lenses-form.component'\nimport ProductAccessoriesForm from '../../components/product-accessories-form/product-accessories-form.component'\nimport ProductContactLensesForm from '../../components/product-contact-lenses-form/product-contact-lenses-form.component'\nimport ProductServiceForm from '../../components/product-service-form/product-service-form.component'\n\nimport { productCategories, checkParameter, formatLink } from '../../context/warehouse/warehouse.utils'\nimport { retailNames } from '../../utils/warehouse.utils'\nimport { useFetch } from '../../hooks/useFetch'\n\nimport {\n    FixedContainer\n} from '../../global.styles'\n\nimport {\n    Header,\n    CategoryContainer,\n    CategoryCheckbox,\n    SubmitButton,\n    IsPublicCheckbox,\n\n} from './product.styles'\n\nconst ProductSection = () => {\n    const { id } = useParams()\n    const { currentUser } = useContext(AuthContext)\n    const { closeModal, message, isLoading, showModal, getMessage, setShowModal } = useContext(LoadingModalContext)\n    const { selectedImage, setSelectedImage } = useContext(ImageContext)\n    const [showImageModal, setImageModal] = useState(false)\n    const [isUpdating, setIsUpdating] = useState(false)\n\n    const {\n        eanCode,\n        product,\n        lenses,\n        contactLensesParameters,\n        glassesParameters,\n        handleLensesChange,\n        handleLensesParameterChange,\n        createProduct,\n        updateProduct,\n        resetProduct,\n        resetLenses,\n        resetContactLenses,\n        resetGlassesParameters,\n        createLenses,\n        updateLenses,\n        handleProductChange,\n        handleProductAvailableChange,\n        getEanCode,\n        handleAddNewParameter,\n        handleContactLensesParameterChange,\n        handleGlassesParameterChange,\n        handleGlassesParameterSpecsChange,\n        handleGlassesSizeChange,\n        getSingleProduct\n    } = useContext(WarehouseContext)\n\n    const [hasChanged, setHasChanged] = useState(false)\n    const [productObj, setProductObj] = useState({})\n\n\n    const { response, isLoading: isLoadingFilters, refetch } = useFetch(`api/store/products/${productObj?.type}/filters`, !productObj?.type, \"GET\")\n    const [filters, setFilters] = useState(null)\n\n    const handleChangeType = e => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        if (!isUpdating) {\n            if (productObj.type === 0) {\n                if (Object.keys(productObj).length > 2) {\n                    const confirm = window.confirm(\"Rozpisane polia budú vymazane\")\n                    if (confirm) {\n                        resetLenses()\n                    } else {\n                        return\n                    }\n                }\n            } else {\n                if (Object.keys(productObj).length > 2) {\n                    const confirm = window.confirm(\"Rozpisane polia budú vymazane\")\n                    if (confirm) {\n                        resetProduct()\n                        resetContactLenses()\n                        resetGlassesParameters()\n                    } else {\n                        return\n                    }\n                }\n            }\n        }\n        setProductObj({\n            [name]: value\n        })\n\n    }\n\n    const handleChange = (e) => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        if (productObj.type === 0) {\n            handleLensesChange(e)\n        }\n\n        if (productObj.type === 6) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 5) {\n            handleProductChange(e)\n        }\n\n        if (productObj.type === 4) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 3) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 2) {\n            handleProductChange(e)\n        }\n        if (productObj.type === 1) {\n            handleProductChange(e)\n        }\n\n\n\n        if (value === '') {\n            delete productObj[name]\n            return\n        }\n\n        if (isUpdating) {\n            if (name === 'name') {\n                setProductObj({\n                    ...productObj,\n                    [name]: value,\n                    link: formatLink(value)\n                })\n                return\n            }\n        }\n\n        setProductObj({\n            ...productObj,\n            [name]: value\n        })\n    }\n\n    const handleGlassesParametersChange = e => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        handleGlassesParameterChange(e)\n\n        if (value === '') {\n            delete productObj[name]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            [name]: value\n        })\n    }\n\n    const handleSpecsChange = (e) => {\n        setHasChanged(true)\n        const { name, value } = e.target\n\n        handleGlassesParameterSpecsChange(e)\n\n        if (value === '') {\n            delete productObj.specs[name]\n\n            if (Object.keys(productObj.specs).length === 0) {\n                delete productObj[\"specs\"]\n            }\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            specs: {\n                ...productObj.specs,\n                [name]: value\n            }\n        })\n    }\n\n    const handleGlassesSpecsSizeChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = glassesParameters.specs[name]\n        arr[idx] = value === '' ? 1001 : value\n\n        handleGlassesSizeChange(e, idx)\n\n        if (value === '') {\n            if (productObj.specs[name].length > 1) {\n                arr[idx] = 1001\n\n                const firstIndex = arr[0]\n                const canDeleteSpecs = arr.map(value => {\n                    if (firstIndex !== value) {\n                        return false\n                    } else {\n                        return true\n                    }\n                })\n\n                const verdict = canDeleteSpecs.find(value => value === false)\n\n                if (verdict === false) {\n                    setProductObj({\n                        ...productObj,\n                        specs: {\n                            ...productObj.specs,\n                            [name]: arr\n                        }\n                    })\n                } else {\n                    delete productObj.specs[name]\n                }\n\n            }\n            if (Object.keys(productObj.specs).length === 0) {\n                delete productObj[\"specs\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            specs: {\n                ...productObj.specs,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleAvailableChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = product[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        handleProductAvailableChange(e, idx)\n        setProductObj({\n            ...productObj,\n            [name]: arr\n        })\n    }\n\n    const handleContactLensesChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = contactLensesParameters[name]\n        arr[idx] = value === '' ? 1001 : value\n\n        handleContactLensesParameterChange(e, idx)\n\n        if (value === '') {\n            if (productObj.contactLenses[name].length > 1) {\n                arr.splice(idx, 1)\n                setProductObj({\n                    ...productObj,\n                    contactLenses: {\n                        ...productObj.contactLenses,\n                        [name]: arr\n                    }\n                })\n            } else {\n                delete productObj.contactLenses[name]\n            }\n            if (Object.keys(productObj.contactLenses).length === 0) {\n                delete productObj[\"contactLenses\"]\n            }\n            // delete userObj.company[]\n            return\n        }\n\n        setProductObj({\n            ...productObj,\n            contactLenses: {\n                ...productObj.contactLenses,\n                [name]: arr\n            }\n        })\n    }\n\n    const handleParameterChange = (e, idx) => {\n        const { name, value } = e.target\n        let arr = lenses[name]\n        arr[idx] = value === '' ? 1001 : Number(value)\n\n        handleLensesParameterChange(e, idx)\n        setProductObj({\n            ...productObj,\n            [name]: arr\n        })\n    }\n\n    const handleSelectImage = (imgId) => {\n        setHasChanged(true)\n        setProductObj({\n            ...productObj,\n            image: imgId\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        let newProductObj = {\n            ...productObj,\n            ...(productObj.type === 0) && { type: lenses.lensType },\n            ...(productObj.type === 0) && { dioptric: lenses.dioptric }\n        }\n\n        // console.log(productObj.type)\n        // console.log(newProductObj)\n\n\n        if (currentUser.admin < 2) {\n            if (newProductObj.available) {\n                newProductObj = {\n                    ...productObj,\n                    available: productObj.available[currentUser.premises]\n                }\n            }\n        } else {\n            if (newProductObj.available) {\n                newProductObj = {\n                    ...productObj,\n                    available: newProductObj.available ? newProductObj.available.map(value => value === 1001 ? 0 : value) : [0, 0, 0, 0, 0, 0]\n                }\n            }\n        }\n\n        if (isUpdating) {\n            console.log(newProductObj)\n            if (newProductObj.type === 0 || typeof newProductObj.type === 'string') {\n                setHasChanged(false)\n                delete newProductObj['link']\n                // delete newProductObj['type']\n                const updatedObj = {\n                    ...newProductObj,\n                    type: newProductObj.lensType,\n                    eanCode: lenses.eanCode\n                }\n                delete updatedObj['lensType']\n                console.log(id)\n                updateLenses(updatedObj, id)\n                return\n            } else if (newProductObj.type === 3) {\n                setHasChanged(false)\n                delete newProductObj['type']\n                updateProduct({ ...newProductObj, contactLenses: {} })\n                return\n            } else {\n                setHasChanged(false)\n                delete newProductObj['type']\n                updateProduct(newProductObj)\n                return\n            }\n        } else {\n            if (productObj.type === 0) {\n                if (!newProductObj.name || !newProductObj.brand || !newProductObj.description || !newProductObj.price || !newProductObj.image || !newProductObj.dioptersRange || !newProductObj.cylinderRange) {\n                    setShowModal(true)\n                    getMessage(\"Povinné údaje sú prázdne\")\n                    return\n                } else {\n                    setHasChanged(false)\n                    // delete newProductObj['type']\n                    const updatedObg = {\n                        ...newProductObj,\n                        type: newProductObj.lensType\n                    }\n                    delete updatedObg['lensType']\n\n                    createLenses(updatedObg)\n                }\n            }\n            if (newProductObj.type === 6 || newProductObj.type === 5 || newProductObj.type === 4 || newProductObj.type === 3 || newProductObj.type === 2 || newProductObj.type === 1) {\n                if (!newProductObj.name || !newProductObj.price) {\n                    setShowModal(true)\n                    getMessage(\"Povinné údaje sú prázdne\")\n                    return\n                } else {\n                    setHasChanged(false)\n                    createProduct(newProductObj)\n                }\n            }\n        }\n\n\n    }\n\n    useEffect(() => {\n        if (!productObj?.type) return\n        setFilters(null)\n        refetch()\n    }, [productObj?.type])\n\n    useEffect(() => {\n        if (productObj.type === 0) {\n            if (productObj.lensType) return\n            console.log(\"SET LENS TYPE\")\n            console.log(lenses)\n            handleChange({\n                target: {\n                    name: \"lensType\",\n                    value: lenses?.type\n                }\n            })\n        }\n    }, [lenses.lensType])\n\n    useEffect(() => {\n        if (isLoadingFilters) return\n        if (response?.filters) {\n            setFilters(response?.filters)\n        }\n    }, [isLoadingFilters])\n\n    useEffect(() => {\n        if (id === \"novy-produkt\") {\n            if (!eanCode) {\n                getEanCode()\n            } else {\n                if (productObj.type !== undefined) {\n                    handleChange({\n                        target: {\n                            name: \"eanCode\",\n                            value: eanCode\n                        }\n                    })\n                }\n            }\n        }\n    }, [id, eanCode, productObj.type, productObj.eanCode, product.type])\n\n    useEffect(() => {\n        if (id !== 'novy-produkt') {\n            getSingleProduct(id)\n            setIsUpdating(true)\n            if (!productObj.type) {\n                handleChangeType({\n                    target: {\n                        name: \"type\",\n                        value: product.type\n                    }\n                })\n\n            }\n        }\n    }, [id, product.type])\n\n    // console.log(productObj)\n\n    useEffect(() => {\n        if (product.image) {\n            setSelectedImage(product.image)\n        }\n        if (lenses.image) {\n            setSelectedImage(lenses.image)\n        }\n    }, [product.image, lenses.image])\n\n    useEffect(() => {\n        return () => {\n            resetProduct()\n            resetLenses()\n            resetContactLenses()\n            resetGlassesParameters()\n            setProductObj({})\n            setSelectedImage(null)\n            setIsUpdating(false)\n        }\n    }, [])\n\n    return (\n        <section>\n            <Prompt\n                when={hasChanged}\n                message=\"Chcete opustiť formulár?\"\n            />\n            {showModal && <Popup loading={isLoading} title={message} close={closeModal} />}\n            {showImageModal && <ModalImage close={() => setImageModal(false)} setImage={handleSelectImage} />}\n            <Header>\n                <FixedContainer>\n\n                    <div>\n                        <h1>{isUpdating ? \"Upraviť produkt\" : \"Nový produkt\"}</h1>\n                    </div>\n                    <div>\n                        <IsPublicCheckbox\n                            label=\"Verejné\"\n                            // value={product.ehop}\n                            name='eshop'\n                            isActive={product.eshop}\n                            handleClick={() => handleChange({\n                                target: {\n                                    name: \"eshop\",\n                                    value: !product.eshop\n                                }\n                            })}\n                        />\n                        <SubmitButton onClick={handleSubmit}>{isUpdating ? \"Upraviť\" : \"Vytvoriť\"}</SubmitButton>\n                    </div>\n                </FixedContainer>\n            </Header>\n\n            <ScrollContainer>\n                {!isUpdating && <CategoryContainer>\n                    <h3>Aký produkt chcete pridať?</h3>\n                    {productCategories.map((category, idx) => (\n                        <CategoryCheckbox\n                            key={idx}\n                            label={category.name}\n                            value={category.value}\n                            name='type'\n                            isActive={category.value === productObj.type}\n                            handleClick={() => handleChangeType({\n                                target: {\n                                    name: \"type\",\n                                    value: category.value\n                                }\n                            })}\n                        />\n                    ))}\n                </CategoryContainer>}\n\n                {productObj.type === 0 && (\n                    <ProductLensesForm\n                        lenses={lenses}\n                        selectedImage={selectedImage}\n                        setImageModal={setImageModal}\n                        handleChange={handleChange}\n                        handleParameterChange={handleParameterChange}\n                        checkParameter={checkParameter}\n                        filters={filters}\n                    />\n                )}\n\n                {productObj.type === 6 && (\n                    <ProductServiceForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        handleChange={handleChange}\n                        selectedImage={selectedImage}\n                        setImageModal={setImageModal}\n                        filters={filters}\n                    />\n                )}\n\n                {productObj.type === 5 && (\n                    <ProductAccessoriesForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        currentUser={currentUser}\n                        retailNames={retailNames}\n                        selectedImage={selectedImage}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleAvailableChange={handleAvailableChange}\n                        filters={filters}\n                    />\n                )}\n\n                {productObj.type === 3 && (\n                    <ProductContactLensesForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        retailNames={retailNames}\n                        currentUser={currentUser}\n                        selectedImage={selectedImage}\n                        contactLensesParameters={contactLensesParameters}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleAddNewParameter={handleAddNewParameter}\n                        handleAvailableChange={handleAvailableChange}\n                        handleContactLensesChange={handleContactLensesChange}\n                        filters={filters}\n                    />\n                )}\n\n                {(productObj.type === 1 || productObj.type === 2 || productObj.type === 4) && (\n                    <ProductGlassesForm\n                        product={product}\n                        isUpdating={isUpdating}\n                        retailNames={retailNames}\n                        currentUser={currentUser}\n                        selectedImage={selectedImage}\n                        glassesParameters={glassesParameters}\n                        handleChange={handleChange}\n                        setImageModal={setImageModal}\n                        checkParameter={checkParameter}\n                        handleSpecsChange={handleSpecsChange}\n                        handleAvailableChange={handleAvailableChange}\n                        handleGlassesSpecsSizeChange={handleGlassesSpecsSizeChange}\n                        handleGlassesParametersChange={handleGlassesParametersChange}\n                        filters={filters}\n                    />\n                )}\n\n            </ScrollContainer>\n\n        </section >\n    )\n}\n\nexport default ProductSection\n","import { useEffect, useState } from 'react'\n\nexport const useFetch = (path, skip = false, method = \"GET\") => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [message, setMessage] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const requestOptions = {\n        method: method,\n        // headers: myHeaders,\n        // body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setMessage(data.message)\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n                setMessage(\"Niečo sa pokazilo\")\n            }\n        }\n        fetchData()\n    }, [refetchIndex])\n\n    return { response, isLoading, error, message, refetch }\n}\n\nexport const useFetchByQuery = (path, queryObj, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const raw = JSON.stringify(queryObj)\n\n    const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: raw,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path])\n\n    return { response, isLoading, error, refetch }\n}\n\nexport const useFetchById = (path, id, skip = false) => {\n    const [response, setResponse] = useState(null)\n    const [error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [refetchIndex, setRefetchIndex] = useState(0)\n\n    const refetch = () => setRefetchIndex(prevRefetchIndex => prevRefetchIndex + 1)\n\n    const myHeaders = new Headers();\n    myHeaders.append(\"auth-token\", localStorage.getItem(process.env.REACT_APP_ADMIN_TOKEN));\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (skip) return\n            setIsLoading(true)\n            try {\n                const res = await fetch(`${process.env.REACT_APP_BACKEND_ENDPOINT}/${path}/${id}`, requestOptions)\n                const data = await res.json()\n\n                setResponse(data)\n                setIsLoading(false)\n            } catch (err) {\n                setError(err)\n                setIsLoading(false)\n            }\n        }\n        fetchData()\n    }, [refetchIndex, path, id])\n\n    return { response, isLoading, error, refetch }\n}\n"],"sourceRoot":""}